[ {
  "objectID" : "95bac4c7-ff8b-4157-a6d4-6ffdb0863168",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core",
  "section" : "",
  "url" : "https://docs.azul.com/core/",
  "link" : "https://docs.azul.com/core/",
  "content" : "Azul Platform Core is designed for enterprise, distribution (ISV), and embedded (OEM) use cases. It provides certified OpenJDK builds with tight security and the cost efficiencies you need to run today’s business–critical, Java-based services. Azul Zulu Builds of OpenJDK are the key component provided by Azul Platform Core. These builds are free to use and a drop-in replacement for any other OpenJDK distribution, and provide these additional benefits: More Trust: Chosen by leading global brands, Azul Platform Core offers engineering support and 100% open-source builds that are Java SE compliant and TCK verified. More Value: Azul Platform Core is a one-to-one replacement for Oracle Java SE with the most architectures, package types, and configurations options compared to other OpenJDK providers. More Security: Azul Platform Core delivers quarterly stabilized security updates for rapid deployment into production, backed by an industry-leading support SLA."
}, {
  "objectID" : "2d7c9523-fc99-4fca-9ecc-13e71ee8530a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core",
  "section" : "Azul Zulu Builds of OpenJDK",
  "url" : "https://docs.azul.com/core/",
  "link" : "https://docs.azul.com/core/#azul-zulu-builds-of-openjdk",
  "content" : "Azul Zulu Builds of OpenJDK Azul Zulu Builds of OpenJDK are open source, TCK-tested and certified builds of OpenJDK. Azul Zulu is available for a wide range of hardware platforms and operating systems. The Azul Zulu Documentation includes release notes, an installation guide, and third-party licenses. Here you can find everything you need to know to successfully install and manage Azul Zulu. Release Notes Supported Platforms Third Party Licenses Azul Commercial Compatibility Kit"
}, {
  "objectID" : "8a0f00b2-e3da-4a9d-91a3-9d5d952881ee",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core",
  "section" : "Support Tiers Provided by Azul Platform Core",
  "url" : "https://docs.azul.com/core/",
  "link" : "https://docs.azul.com/core/#support-tiers-provided-by-azul-platform-core",
  "content" : "Support Tiers Provided by Azul Platform Core On top of the free Azul Zulu Builds of OpenJDK, two levels of enterprise technical support subscriptions are available within Azul Platform Core: Standard Support Tier: quarterly releases, next business day support during business hours,… Premium Support Tier: out-of-cycle bug fixes and early release access, 24x7x365 support,… For all commercial info, check Azul Platform Core on our website."
}, {
  "objectID" : "4f36d464-9527-401c-a7f7-4ce303115d48",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes",
  "content" : "January 16, 2024 - Revision 1.1 Release Notes PDF"
}, {
  "objectID" : "ba0a817a-528e-4e52-a013-013ed1b95626",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Release Details",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#release-details",
  "content" : "Release Details This release is a quarterly update release for Azul Zulu Builds of OpenJDK version 21, 17, 11, 8, 7, and 6. The following table lists detailed information on the Azul Zulu versions released with the current update. Azul Zulu Version (*) Update Type (**) JDK VersionThe JDK version that is used in this release of Azul Zulu. Based onThe previous version of Azul Zulu that was used as the basis for the current version. JavaFX VersionThe version of JavaFX that is included in this release of Azul Zulu. JavaFX is available in the bandles with the -fx- suffix in the name. Azul Zulu Version JDK Version 21.31.16 (SA) CPU 21.0.1.0.101+3 21.30 21.0.1+12 21.0.1.0.101+100 21.32.17 (CA) 21.32.18 (SA) PSU 21.0.2+13 21.31 21.0.1.0.101+3 21.0.2+101 17.47.16 (SA) CPU 17.0.9.0.101+3 17.46 17.0.9+9 21.0.1.0.101+100 17.48.15 (CA) 17.48.16 (SA) PSU 17.0.10+7 17.47 17.0.9.0.101+3 21.0.2+101 11.69.14 (SA) CPU 11.0.21.0.101+2 11.68 11.0.21+9 19.0.5.0.101+100 11.70.15 (CA) 11.70.16 (SA) PSU 11.0.22+7 11.69 11.0.21.0.101+2 19.0.6+101 8.75.0.16 (SA) CPU 8u401-b03 8.74 8u392-b08 8u401-b01 8.76.0.17 (CA) 8.76.0.18 (SA) PSU 8u402-b06 8.75 8u401-b03 8u402-b02 7.67.0.16 (SA) CPU 7u411-b03 7.65 7u401-b01 N/A 6.61.0.16 (SA) CPU 6b161 6.59 6b159 N/A (*) Azul provides two types of distribution packages for each Java version: SA distributions are tested, certified, and commercially supported Azul Zulu Builds of OpenJDK. Azul ensures that the software that uses the Accessible APIs of the product doesn’t have to include specific licenses and that such use doesn’t contaminate the code or intellectual property of such software with any license requirements. CA are Azul Zulu Builds of OpenJDK that are free to download and use. Note Both SA and CA distributions may contain Early Access builds noted with -ea- in their filename. Early Access builds may not be TCK certified. (**) Update type: CPU (Critical Patch Updates) contain fixes to security vulnerabilities and critical bug fixes. Azul Zulu CPU releases are generally based on prior-cycle PSU releases, with only security fixes applied. They provide a low-risk vehicle for the potentially urgent deployment of security fixes when issues of sufficient severity arise. CPU releases are available in SA distributions. PSU (Patch Set Updates) incorporates all fixes in the corresponding CPU, as well as additional non-security bug fixes. Azul Zulu PSU releases incorporate both security fixes and other changes that align the release contents with the associated OpenJDK project quarterly release. PSU releases are available in SA and CA distributions. What’s New Configuration Changes We reduced the testing cycles for the following environment targeting its end of life, and this is no longer supported: Windows Server 2012 R2 If you’re still using this platform, we will be providing Azul Platform Core versions for you and can help you if issues would arise! Please email us at [email protected]. Note Although previously announced in V1.0 of this document, macOS 12 Monterey and RHEL 7.x are longer supported and testing is not reduced yet for these platforms. Dropped Support for OpenJSSE and Legacy8uJSSE OpenJSSE is a JSSE provider that was ported from Java 11 to Azul Zulu 8 to add support for TLS 1.3, because OpenJDK 8 did not support TLS 1.3 at the time. Later, OpenJSSE was integrated into the SunJSSE provider of OpenJDK 8u272 and became part of Java SE 8 specification. Legacy8uJSSE is a JSSE provider that falls back to legacy TLS 1.2 protocol implementation and was added to Azul Zulu 8 for compatibility reasons. Although earlier announced that they would be removed in January 2022, the two JSSE implementations got supported until this release, but will now be gradually dropped: The January 2024 PSU Builds of OpenJDK no longer support OpenJSSE and Legacy8uJSSE. The January 2024 CPU Builds are the last with OpenJSSE and Legacy8uJSSE. Encryption Configuration Changes for FIPS-enabled Configurations With the update of BCFIPS library from version 1.0.2.3 to 1.0.2.4, the following changes took place: PKCS 1.5 RSA encryption, Triple-DES encryption, and MD5 digest are now disabled in the ApprovedOnlyMode by default. These algorithms can be enabled for internal usage by the BCFIPS library with the following system properties:  org.bouncycastle.tripledes.allow_drbg\norg.bouncycastle.tripledes.allow_prf\norg.bouncycastle.tripledes.allow_wrap\norg.bouncycastle.tripledes.allow_enc\norg.bouncycastle.rsa.allow_pkcs15_enc\norg.bouncycastle.jsse.enable_md5 New configurations of Azul Zulu with CRaC Support Zulu Builds with CRaC are now available for Alpine Linux (musl libc). In the following weeks, downloads will be available for Windows and macOS of Azul Zulu Builds of OpenJDK with CRaC support for development purposes. With these runtimes you will be able to simulate the CRaC functionality. When a checkpoint is requested, it will be created and immediately restored without dumping the checkpoint to disk. This enables you to develop and test the CRaC functionality on these platforms, so you can deploy your application with confidence on Linux. IANA Time Zone Database Version This release of Azul Zulu comes with IANA Time Zone Database version 2023c, the same as in the release of October 2023. Supported Platforms This section provides information about the operating systems that are supported in this update release of Azul Zulu. Azul Zulu Builds of OpenJDK Without and With OpenJFX Some versions of Azul Zulu are available in different packages for specific platforms, as indicated in this overview table with: : Build of OpenJDK without OpenJFX. : Build of OpenJDK without and with OpenJFX. Note The list of supported configurations and platform includes, but is not limited to, the table below. Don’t hesitate to contact Support if you have issues with Azul Zulu Builds of OpenJDK on any other platform or configuration. Operating System Azul Zulu Version 6 7 8 11 17 21 Windows (x86 32/64-bit) Windows Server 2022 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows Server 2019 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows Server 2016 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows 11 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows 10 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows (ARM 64-bit) Windows 11 n/a n/a n/a n/a n/a Windows 10 n/a n/a n/a n/a n/a Linux (x86 32/64-bit) RHEL 9.x n/a [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. RHEL 8.x [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. RHEL 7.x [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. SLES 15 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. SLES 12 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. CentOS Stream [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 22.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 20.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 18.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 12 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 11 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 10 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Wind River 8.x n/a n/a n/a n/a CoreOS n/a n/a Alpine Linux 3.11 or later n/a n/a Amazon Linux 2023 n/a n/a n/a Linux (ARM 64-bit) Ubuntu 22.04 n/a n/a Ubuntu 20.04 n/a n/a Ubuntu 18.04 n/a n/a n/a n/a Debian 12 n/a n/a Debian 11 n/a n/a Alpine Linux 3.11 or later n/a n/a Amazon Linux 2023 n/a n/a n/a Linux with kernel 3.10.x and glibc 2.23 [2]Bundles with the Checkpoint/Restore (with the criu suffix) functionality require kernel 4.4.0+. [3]Bundles compiled with GCC 9 (with the gcc9 suffix) require glibc 2.29. n/a n/a n/a n/a Linux (ARM 32-bit Hard-Float) Ubuntu 18.04 [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a Raspbian 10 Buster [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a Raspbian 9 Stretch [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a n/a Linux with kernel 3.10.x and glibc 2.9 [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. [5]Bundles with the CRaM (with the cr suffix) functionality require glibc 2.13. n/a n/a n/a n/a Linux (ARM 32-bit Soft-Float) [6]Bundles with the C1 compiler will use FPU, if it is present and available, to speed up floating point operations. Bundles with both C1 and C2 compilers require FPU. Linux with kernel 2.6.34 and glibc 2.5 [7]Bundles with the C1 compiler. Tested on ARMv5 hardware. n/a n/a n/a n/a Debian 7 Wheezy [8]Bundles with the C1 compiler were tested on ARMv6 and ARMv7 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7 hardware. n/a n/a n/a n/a Linux with kernel 3.10.x and glibc 2.9 [8]Bundles with the C1 compiler were tested on ARMv6 and ARMv7 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7 hardware. n/a n/a n/a n/a Linux (MIPS 32-bit) [9]MIPS32r2 ISA, Big Endian, FPU in 32-bit mode or equivalent emulation. Linux with kernel 4.9.59 and glibc 2.9 [10]Linux soft-float O32 MIPS ABI n/a n/a n/a n/a n/a Linux (ppc64 Big Endian) Linux with kernel 3.8.13 and glibc 2.22 [11]Bundles for this platform were tested on QorIQ® T4240-RDB. n/a n/a n/a n/a n/a Linux (ppc32 Hard-float and SPE) Linux with kernel 3.12.37 and glibc 2.20 [12]Hard-Float EABI bundles were tested on QorIQ® T1024RDB. SPE ABI bundles were tested on NXP® P2020RDB. n/a n/a n/a n/a n/a QNX (ARMv7 32-bit Hard-Float ABI) QNX 7.0 n/a n/a n/a n/a n/a MacOS (x86 64-bit) macOS 12+ n/a MacOS (Apple Silicon) macOS 12+ n/a n/a Solaris (x86 and Sparc) Solaris 11 n/a n/a n/a Solaris 10 n/a n/a n/a n/a AIX (ppc64) AIX 7.3 n/a n/a n/a n/a n/a Azul Zulu Builds of OpenJDK With CRaC Note Currently, CRaC is only available for the specified Linux systems, in version 17 and 21 of Azul Zulu Builds of OpenJDK. For development, you can use the CRaC Java library on any platform and simulate the CRaC functionality. : Build of OpenJDK with full CRaC support. : Build of OpenJDK with CRaC support for development purposes. These provide a simulated checkpoint/restore mechanism to be used for development and testing. Operating System Azul Zulu Version 17 21 x86 64-bit ARM 64-bit x86 64-bit ARM 64-bit Linux Alpine Linux 3.11+ Windows n/a n/a macOS Fixed Issues This section covers all issues that were fixed in this release. Fixed Common Vulnerabilities and Exposures This section summarizes Common Vulnerabilities and Exposures (CVE) fixed in this release. CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Azul Zulu Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20918 Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 2 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8, 7, 6 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8, 7, 6 Note 3 CVE-2024-20921 Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None 21, 17, 11, 8, 7, 6 Note 2 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8, 7, 6 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Zulu Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Zulu Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20955 This CVE is not applicable to Azul Zulu Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. Non-CVE Security Fixes The following table summarizes non-CVE security fixes implemented in this release. OpenJDK Patch ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8308204 6, 7, 8, 11, 17, 21 Enhanced certificate processing CPU,PSU OpenJDK Fixes and Enhancements The following table describes the OpenJDK changes implemented in this release. OpenJDK Patch ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8066103 6 C2’s range check smearing allows out of bound array accesses CPU,PSU JDK-8276123 17 ZipFile::getEntry will not return a file entry when there is a directory entry of the same name within a Zip File CPU,PSU JDK-8302017 6, 7, 8, 11, 17 Allocate BadPaddingException only if it will be thrown CPU,PSU JDK-8320597 6, 7, 8, 11, 17, 21 RSA signature verification fails on signed data that does not encode params correctly CPU,PSU JDK-6381945 11 (cal) Japanese calendar unit test system should avoid multiple static imports PSU JDK-6445283 11, 17 ProgressMonitorInputStream not large file aware (>2GB) PSU JDK-6528710 8 sRGB-ColorSpace to sRGB-ColorSpace Conversion PSU JDK-8026393 11 jarsigner never shows a warning in badKeyUsage case PSU JDK-8029995 8 accept yes/no for boolean krb5.conf settings PSU JDK-8038244 21 (fs) Check return value of malloc in Java_sun_nio_fs_AixNativeDispatcher_getmntctl() PSU JDK-8041447 11, 17 Test javax/swing/dnd/7171812/bug7171812.java fails with java.lang.RuntimeException: Test failed, scroll on drag doesn’t work PSU JDK-8053479 11 (dc) DatagramChannel.read() throws exception instead of discarding data when buffer too small PSU JDK-8061729 17 Update java/net tests to eliminate dependency on sun.net.www.MessageHeader and some other internal APIs PSU JDK-8067250 11 [mlvm] vm/mlvm/mixed/stress/regression/b6969574 fails and perf regression PSU JDK-8153090 11 TAB key cannot change input focus after the radio button in the Color Selection dialog PSU JDK-8161536 17, 21 sun/security/pkcs11/sslecc/ClientJSSEServerJSSE.java fails with ProviderException PSU JDK-8168408 11 Test java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowBlockingTest.java fails intermittentently on windows PSU JDK-8168469 17 Memory leak in JceSecurity PSU JDK-8176567 17 nsk/jdi/ReferenceType/instances/instances002: TestFailure: Unexpected size of referenceType.instances(nsk.share.jdi.TestInterfaceImplementer1): 11, expected: 10 PSU JDK-8183374 11 Refactor java/lang/Runtime shell tests to java PSU JDK-8185531 11 [TESTBUG] Improve test configuration for shared strings PSU JDK-8193543 17 Regression automated test '/open/test/jdk/java/awt/TrayIcon/SystemTrayInstance/SystemTrayInstanceTest.java' fails PSU JDK-8195589 11 T6587786.java failed after JDK-8189997 PSU JDK-8197825 11 [Test] Intermittent timeout with javax/swing JColorChooser Test PSU JDK-8198668 17 MemoryPoolMBean/isUsageThresholdExceeded/isexceeded001/TestDescription.java still failing PSU JDK-8202790 17 DnD test DisposeFrameOnDragTest.java does not clean up PSU JDK-8202931 17 [macos] java/awt/Choice/ChoicePopupLocation/ChoicePopupLocation.java fails PSU JDK-8205467 11 javax/management/remote/mandatory/connection/MultiThreadDeadLockTest.java possible deadlock PSU JDK-8207166 11, 17 jdk/jshell/JdiHangingLaunchExecutionControlTest.java - launch timeout PSU JDK-8207404 8 MulticastSocket tests failing on AIX PSU JDK-8209115 8 adjust libsplashscreen linux ppc64le builds for easier libpng update PSU JDK-8210168 11 JCK test .vm.classfmt.ins.code002.code00201m1.code__00201m1 hangs with -noverify PSU JDK-8210265 11 Crash in HSpaceCounters::update_used() PSU JDK-8211045 11 [Testbug] Fix for 8144279 didn’t define a test case! PSU JDK-8212677 8 X11 default visual support for IM status window on VNC PSU JDK-8212997 11 [TESTBUG] Remove defmeth tests for class file versions 50 and 51 PSU JDK-8213898 11 CDS dumping of springboot asserts in G1ArchiveAllocator::alloc_new_region PSU JDK-8214694 11 cleanup rawtypes warnings in open jndi tests PSU JDK-8217329 11 JTREG: Clean up, remove unused imports in gc folder PSU JDK-8218178 11 vmTestbase/vm/mlvm/mixed/stress/regression/b6969574/INDIFY_Test.java fails with -Xcomp PSU JDK-8219652 21 [aix] Tests failing with JNI attach problems. PSU JDK-8220083 11 Remove hard-coded 127.0.0.1 loopback address in JDK networking tests PSU JDK-8221396 11 Clean up serviceability/sa/TestUniverse.java PSU JDK-8223145 11 Replace wildcard address with loopback or local host in tests - part 1 PSU JDK-8223788 11 [macos] JSpinner buttons in JColorChooser dialog may capture focus using TAB Key. PSU JDK-8224035 11 Replace wildcard address with loopback or local host in tests - part 9 PSU JDK-8224204 11 Replace wildcard address with loopback or local host in tests - part 10 PSU JDK-8225313 17 serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorStatObjectCorrectnessTest.java failed with Unexpected high difference percentage PSU JDK-8225377 21 type annotations are not visible to javac plugins across compilation boundaries PSU JDK-8226825 11 Replace wildcard address with loopback or local host in tests - part 19 PSU JDK-8228990 17 JFR: TestNetworkUtilizationEvent.java expects 2+ Network interfaces on Linux but finding 1 PSU JDK-8230435 11 Replace wildcard address with loopback or local host in tests - part 22 PSU JDK-8230858 11 Replace wildcard address with loopback or local host in tests - part 23 PSU JDK-8231556 11 Wrong font ligatures used when 2 versions of same font used PSU JDK-8231931 11 [TESTBUG] serviceability/sa/TestUniverse.java looks for wrong string with Shenandoah PSU JDK-8232135 11 Add diagnostic output to test java/util/ProcessBuilder/Basic.java PSU JDK-8232513 11 java/net/DatagramSocket/PortUnreachable.java still fails intermittently with BindException PSU JDK-8232839 17, 21 JDI AfterThreadDeathTest.java failed due to \"FAILED: Did not get expected IllegalThreadStateException on a StepRequest.enable()\" PSU JDK-8232933 11, 17 Javac inferred type does not conform to equality constraint PSU JDK-8233000 11 Mark vmTestbase/vm/mlvm/meth/stress/compiler/deoptimize test as stress test PSU JDK-8233847 11 (sctp) Flx link-local IPv6 scope handling and test cleanup. PSU JDK-8237858 11 PlainSocketImpl.socketAccept() handles EINTR incorrectly PSU JDK-8238740 11 java/net/httpclient/whitebox/FlowTestDriver.java should not specify a TLS protocol PSU JDK-8239365 8 ProcessBuilder test modifications for AIX execution PSU JDK-8239801 17 [macos] java/awt/Focus/UnaccessibleChoice/AccessibleChoiceTest.java fails PSU JDK-8240235 11 jdk.test.lib.util.JarUtils updates jar files incorrectly PSU JDK-8240604 11 Rewrite sun/management/jmxremote/bootstrap/CustomLauncherTest.java test to make binaries from source file PSU JDK-8240754 11 Instrument FlowTest.java to provide more debug traces. PSU JDK-8242330 8, 11 Arrays should be cloned in several JAAS Callback classes PSU JDK-8244289 17 fatal error: Possible safepoint reached by thread that does not allow it PSU JDK-8244508 11 JFR: FlightRecorderOptions reset date format PSU JDK-8247351 17 [aarch64] NullPointerException during stack walking (clhsdb \"where -a\") PSU JDK-8249812 11 java/net/DatagramSocket/PortUnreachable.java still fails intermittently with SocketTimeoutException PSU JDK-8249826 17 5 javax/net/ssl/SSLEngine tests use @ignore w/o bug-id PSU JDK-8251177 11 [macosx] The text \"big\" is truncated in JTabbedPane PSU JDK-8252713 11 jtreg time out of CtrlASCII.java seems to hang the Xserver. PSU JDK-8254711 11 Add java.security.Provider.getService JFR Event PSU JDK-8255548 11 Missing coverage for javax.xml.crypto.dom.DOMCryptoContext PSU JDK-8258914 11 javax/net/ssl/DTLS/RespondToRetransmit.java timed out PSU JDK-8258951 17 java/net/httpclient/HandshakeFailureTest.java failed with \"RuntimeException: Not found expected SSLHandshakeException in java.io.IOException\" PSU JDK-8259266 11 com/sun/jdi/JdbOptions.java failed with \"RuntimeException: 'prop[boo] = >foo 2<' missing from stdout/stderr\" PSU JDK-8260035 11 Deproblemlist few problemlisted test PSU JDK-8260431 11 com/sun/jdi/JdbOptions.java failed with \"RuntimeException: 'prop[boo] = >foo<' missing from stdout/stderr\" PSU JDK-8262186 17 Call X509KeyManager.chooseClientAlias once for all key types PSU JDK-8262901 17 [macos_aarch64] NativeCallTest expected:←3.8194101E18> but was:<3.02668882E10> PSU JDK-8263530 11 sun.awt.X11.ListHelper.removeAll() should use clear() PSU JDK-8265586 11, 17 [windows] last button is not shown in AWT Frame with BorderLayout and MenuBar set. PSU JDK-8265678 11 Test java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowBlockingTest.java fails intermittentently on windows PSU JDK-8266249 11 javax/swing/JPopupMenu/7156657/bug7156657.java fails on macOS PSU JDK-8266593 17 vmTestbase/nsk/jvmti/PopFrame/popframe011 fails with \"assert(java_thread == _state→get_thread()) failed: Must be\" PSU JDK-8267502 21 JDK-8246677 caused 16x performance regression in SynchronousQueue PSU JDK-8267509 21 Improve IllegalAccessException message to include the cause of the exception PSU JDK-8267860 11 Off-by-one bug when searching arrays in AlpnGreaseTest PSU JDK-8268433 17 serviceability/dcmd/framework/VMVersionTest.java fails with Unable to send object throw not established PipeIO Listener Thread connection PSU JDK-8268916 11, 17, 21 Tests for AffirmTrust roots PSU JDK-8269425 17 2 jdk/jfr/api/consumer/streaming tests failed to attach PSU JDK-8270199 17 Most SA tests are skipped on macosx-aarch64 because all executables are signed PSU JDK-8270447 17 [IR Framework] Add missing compilation level restriction when using FlipC1C2 stress option PSU JDK-8271073 17 Improve testing with VM option VerifyArchivedFields PSU JDK-8271519 11 java/awt/event/SequencedEvent/MultipleContextsFunctionalTest.java failed with \"Total [200] - Expected [400]\" PSU JDK-8271566 17 DSA signature length value is not accurate in P11Signature PSU JDK-8271824 17 mark hotspot runtime/CompressedOops tests which ignore external VM flags PSU JDK-8271826 17 mark hotspot runtime/condy tests which ignore external VM flags PSU JDK-8271828 17 mark hotspot runtime/classFileParserBug tests which ignore external VM flags PSU JDK-8271829 17 mark hotspot runtime/Throwable tests which ignore external VM flags PSU JDK-8271838 8 AmazonCA.java interop test fails PSU JDK-8271886 17 mark hotspot runtime/InvocationTests tests which ignore external VM flags PSU JDK-8271887 17 mark hotspot runtime/CDSCompressedKPtrs tests which ignore external VM flags PSU JDK-8271890 17 mark hotspot runtime/Dictionary tests which ignore external VM flags PSU JDK-8271891 17 mark hotspot runtime/Safepoint tests which ignore external VM flags PSU JDK-8271892 17 mark hotspot runtime/PrintStringTableStats/PrintStringTableStatsTest.java test as ignoring external VM flags PSU JDK-8271893 17 mark hotspot runtime/PerfMemDestroy/PerfMemDestroy.java test as ignoring external VM flags PSU JDK-8271904 17 mark hotspot runtime/ClassFile tests which ignore external VM flags PSU JDK-8271905 17 mark hotspot runtime/Metaspace tests which ignore external VM flags PSU JDK-8272099 17 mark hotspot runtime/Monitor tests which ignore external VM flags PSU JDK-8272291 17 mark hotspot runtime/logging tests which ignore external VM flags PSU JDK-8272551 17 mark hotspot runtime/modules tests which ignore external VM flags PSU JDK-8272552 17 mark hotspot runtime/cds tests which ignore external VM flags PSU JDK-8272998 17 ImageIO.read() throws incorrect exception type PSU JDK-8273456 17 Do not hold ttyLock around stack walking PSU JDK-8273522 17 Rename test property vm.cds.archived.java.heap to vm.cds.write.archived.java.heap PSU JDK-8273629 17 compiler/uncommontrap/TestDeoptOOM.java fails with release VMs PSU JDK-8273804 11 Platform.isTieredSupported should handle the no-compiler case PSU JDK-8273831 17 PrintServiceLookup spawns 2 threads in the current classloader, getting orphaned PSU JDK-8273921 17 Refactor NSK/JDI tests to create thread using factory PSU JDK-8274211 17 Test man page that options are documented PSU JDK-8275329 11, 17 ZGC: vmTestbase/gc/gctests/SoftReference/soft004/soft004.java fails with assert(_phases→length() ⇐ 1000) failed: Too many recored phases? PSU JDK-8275333 11, 17 Print count in \"Too many recored phases?\" assert PSU JDK-8275440 17 Remove VirtualSpaceList::is_full() PSU JDK-8275509 17 ModuleDescriptor.hashCode isn’t reproducible across builds PSU JDK-8276036 17 The value of full_count in the message of insufficient codecache is wrong PSU JDK-8276054 17 JMH benchmarks for Fences PSU JDK-8276711 17 compiler/codecache/cli tests failing when SegmentedCodeCache used with -Xint PSU JDK-8276819 17 javax/print/PrintServiceLookup/FlushCustomClassLoader.java fails to free PSU JDK-8277307 17 Pre shared key sent under both session_ticket and pre_shared_key extensions PSU JDK-8278456 11 Define jtreg jdk_desktop test group time-based sub-tasks for use by headful testing. PSU JDK-8279856 17 Parallel: Use PreservedMarks to record promotion-failed objects PSU JDK-8280004 11 DCmdArgument<jlong>::parse_value() should handle NULL input PSU JDK-8281015 17 Further simplify NMT backend PSU JDK-8281149 17 (fs) java/nio/file/FileStore/Basic.java fails with java.lang.RuntimeException: values differ by more than 1GB PSU JDK-8281874 17 Can’t unpack msi installers from test/jdk/tools/jpackage/windows/test/jdk/tools/jpackage/windows/WinShortcutPromptTest.java test PSU JDK-8282011 17 test/jdk/tools/jpackage/windows/WinL10nTest.java test fails if light.exe is not in %PATH% PSU JDK-8282017 17 sun/net/www/protocol/https/HttpsURLConnection/B6216082.java fails with \"SocketException: Unexpected end of file from server\" PSU JDK-8282143 11 Objects.requireNonNull should be ForceInline PSU JDK-8282404 11 DrawStringWithInfiniteXform.java failed with \"RuntimeException: drawString with InfiniteXform transform takes long time\" PSU JDK-8283441 8 C2: segmentation fault in ciMethodBlocks::make_block_at(int) PSU JDK-8283670 17 gtest os.release_multi_mappings_vm is still racy PSU JDK-8284047 17 Harmonize/Standardize the SSLSocket/SSLEngine/SSLSocketSSLEngine test templates PSU JDK-8284331 11 Add sanity check for signal handler modification warning. PSU JDK-8284910 8, 11, 17 Buffer clean in PasswordCallback PSU JDK-8285398 8 Cache the results of constraint checks PSU JDK-8285516 17 clearPassword should be called in a finally try block PSU JDK-8285612 11 Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/ImagePrinting/ClippedImages.java PSU JDK-8285687 11 Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/PageRangesDlgTest.java PSU JDK-8285696 8 AlgorithmConstraints:permits not throwing IllegalArgumentException when 'alg' is null PSU JDK-8285785 17 CheckCleanerBound test fails with PasswordCallback object is not released PSU JDK-8285867 17 Convert applet manual tests SelectionVisible.java to Frame and automate PSU JDK-8286473 17 Drop --enable-preview from Record related tests PSU JDK-8286474 17 Drop --enable-preview from Sealed Classes related tests PSU JDK-8286475 17 Drop --enable-preview from instanceof pattern matching related tests PSU JDK-8286503 8, 11, 17, 21 Enhance security classes PSU JDK-8286707 11 JFR: Don’t commit JFR internal jdk.JavaMonitorWait events PSU JDK-8286969 17 Add a new test library API to execute kinit in SecurityTools.java PSU JDK-8287596 17 Reorg jdk.test.lib.util.ForceGC PSU JDK-8287671 17 Adjust ForceGC to invoke System::gc fewer times for negative case PSU JDK-8287867 17 Bad merge of jdk/test/lib/util/ForceGC.java causing test compilation error PSU JDK-8288325 11, 17 [windows] Actual and Preferred Size of AWT Non-resizable frame are different PSU JDK-8288415 11 java/awt/PopupMenu/PopupMenuLocation.java is unstable in MacOS machines PSU JDK-8288961 17 jpackage: test MSI installation fix PSU JDK-8288993 11, 17 Make AwtFramePackTest generic by removing @requires tag PSU JDK-8289077 11 Add manual tests to open PSU JDK-8289238 11 Refactoring changes to PassFailJFrame Test Framework PSU JDK-8289547 11 Update javax/swing/Popup/TaskbarPositionTest.java PSU JDK-8289584 11, 17 (fs) Print size values in java/nio/file/FileStore/Basic.java when they differ by > 1GiB PSU JDK-8289745 11, 17 JfrStructCopyFailed uses heap words instead of bytes for object sizes PSU JDK-8289917 11 Metadata for regionsRefilled of G1EvacuationStatistics event is wrong PSU JDK-8290067 11 Show stack dimensions in UL logging when attaching threads PSU JDK-8290469 11 Add new positioning options to PassFailJFrame test framework PSU JDK-8290909 17 MemoryPoolMBean/isUsageThresholdExceeded tests failed with \"isUsageThresholdExceeded() returned false, and is still false, while threshold = MMMMMMM and used peak = NNNNNNN\" PSU JDK-8291154 17 Create a non static nested class without enclosing class throws VerifyError PSU JDK-8291550 17 RISC-V: jdk uses misaligned memory access when AvoidUnalignedAccess enabled PSU JDK-8291911 17 java/io/File/GetXSpace.java fails with \"53687091200 != 161051996160\" PSU JDK-8292067 17 Convert test/sun/management/jmxremote/bootstrap shell tests to java version PSU JDK-8292072 17 NMT: repurpose Tracking overhead counter as global malloc counter PSU JDK-8292261 17 adjust timeouts in JLI GetObjectSizeIntrinsicsTest.java PSU JDK-8292381 17 java/net/httpclient/SpecialHeadersTest.java fails with \"ERROR: Shutting down connection: HTTP/2 client stopped\" PSU JDK-8292407 11 Improve Weak CAS VarHandle/Unsafe tests resilience under spurious failures PSU JDK-8292636 17 (dc) Problem listing of java/nio/channels/DatagramChannel/Unref.java has incorrect issue ID PSU JDK-8292683 11 Remove BadKeyUsageTest.java from Problem List PSU JDK-8292713 11 Unsafe.allocateInstance should be intrinsified without UseUnalignedAccesses PSU JDK-8293156 17 Dcmd VM.classloaders fails to print the full hierarchy PSU JDK-8293166 11 jdk/jfr/jvm/TestDumpOnCrash.java fails on Linux ppc64le and Linux aarch64 PSU JDK-8293335 17 sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1failed with \"Agent communication error: java.io.EOFException\" PSU JDK-8293343 17 sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java failed with \"Agent communication error: java.io.EOFException\" PSU JDK-8293466 11 libjsig should ignore non-modifying sigaction calls PSU JDK-8293563 17 [macos-aarch64] SA core file tests failing with sun.jvm.hotspot.oops.UnknownOopException PSU JDK-8293579 17 tools/jpackage/share/jdk/jpackage/tests/UnicodeArgsTest.java fails on Japanese Windows platform PSU JDK-8293811 11 Provide a reason for PassFailJFrame.forceFail PSU JDK-8294156 21 Allow PassFailJFrame.Builder to create test UI PSU JDK-8294158 21 HTML formatting for PassFailJFrame instructions PSU JDK-8294402 17 Add diagnostic logging to VMProps.checkDockerSupport PSU JDK-8294427 11, 17, 21 Check boxes and radio buttons have rendering issues on Windows in High DPI env PSU JDK-8294535 21 Add screen capture functionality to PassFailJFrame PSU JDK-8294673 11 JFR: Add SecurityProviderService#threshold to TestActiveSettingEvent.java PSU JDK-8294881 17 test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java fails PSU JDK-8295068 21 SSLEngine throws NPE parsing CertificateRequests PSU JDK-8295424 17 adjust timeout for another JLI GetObjectSizeIntrinsicsTest.java subtest PSU JDK-8295555 21 Primitive wrapper caches could be @Stable PSU JDK-8295685 8 Update Libpng to 1.6.38 PSU JDK-8296275 11, 17 Write a test to verify setAccelerator method of JMenuItem PSU JDK-8296437 17 NMT incurs costs if disabled PSU JDK-8296581 11, 17 Better system proxy support PSU JDK-8296821 17 compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/NativeCallTest.java fails after JDK-8262901 PSU JDK-8297142 17 jdk/jfr/event/runtime/TestShutdown.java fails on Linux ppc64le and Linux aarch64 PSU JDK-8297296 11, 17 java/awt/Mouse/EnterExitEvents/DragWindowTest.java fails with \"No MouseReleased event on label!\" PSU JDK-8297367 17 disable TestRedirectLinks.java in slowdebug mode PSU JDK-8297640 11, 17 Increase buffer size for buf (insert_features_names) in Abstract_VM_Version::insert_features_names PSU JDK-8297798 17 Timeout with DTLSOverDatagram test template PSU JDK-8297856 8, 11, 17 Improve handling of Bidi characters PSU JDK-8297958 17 NMT: Display peak values PSU JDK-8298298 17 NMT: count deltas are printed with 32-bit signed size PSU JDK-8298619 17 java/io/File/GetXSpace.java is failing PSU JDK-8298735 17 Some tools/jpackage/windows/* tests fails with jtreg test timeout PSU JDK-8298867 17 Basics.java fails with SSL handshake exception PSU JDK-8298868 17 Update EngineCloseOnAlert.java for changes to TLS implementation PSU JDK-8298869 17 Update ConnectionTest.java for changes to TLS implementation PSU JDK-8298872 17 Update CheckStatus.java for changes to TLS implementation PSU JDK-8298873 17 Update IllegalRecordVersion.java for changes to TLS implementation PSU JDK-8298874 17 Update TestAllSuites.java for TLS v1.2 and 1.3 PSU JDK-8298905 11, 17 Test \"java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java\" fails because the frames of instruction does not display PSU JDK-8298974 11, 17 Add ftcolor.c to imported freetype sources PSU JDK-8299075 17 TestStringDeduplicationInterned.java fails because extra deduplication PSU JDK-8299207 17 [Testbug] Add back test/jdk/java/awt/Graphics2D/DrawPrimitivesTest.java PSU JDK-8299241 17 jdk/jfr/api/consumer/streaming/TestJVMCrash.java generates unnecessary core file PSU JDK-8299255 11, 17 Unexpected round errors in FreetypeFontScaler PSU JDK-8299614 21 Shenandoah: STW mark should keep nmethod/oops referenced from stack chunk alive PSU JDK-8299677 17 Formatter.format might take a long time to format an integer or floating-point PSU JDK-8299748 17 java/util/zip/Deinflate.java failing on s390x PSU JDK-8300259 11, 17 Add test coverage for processing of pending block files in signed JARs PSU JDK-8300272 11, 17 Improve readability of the test JarWithOneNonDisabledDigestAlg PSU JDK-8300405 11 Screen capture for test JFileChooserSetLocationTest.java, failure case PSU JDK-8300663 21 java/util/concurrent/SynchronousQueue/Fairness.java failed with \"Error: fair=true i=0 j=1\" PSU JDK-8300727 17 java/awt/List/ListGarbageCollectionTest/AwtListGarbageCollectionTest.java failed with \"List wasn’t garbage collected\" PSU JDK-8301065 11, 17 Handle control characters in java_lang_String::print PSU JDK-8301167 11 Update VerifySignedJar to actually exercise and test verification PSU JDK-8301189 17 validate-source fails after JDK-8298873 PSU JDK-8301247 17, 21 JPackage app-image exe launches multiple exe’s in JDK 17+ PSU JDK-8301341 21 LinkedTransferQueue does not respect timeout for poll() PSU JDK-8301377 17 adjust timeout for JLI GetObjectSizeIntrinsicsTest.java subtest again PSU JDK-8301455 17 comments in TestTypeAnnotations still refer to resolved JDK-8068737 PSU JDK-8301457 17, 21 Code in SendPortZero.java is uncommented even after JDK-8236852 was fixed PSU JDK-8301489 17, 21 C1: ShortLoopOptimizer might lift instructions before their inputs PSU JDK-8301570 11, 17 Test runtime/jni/nativeStack/ needs to detach the native thread PSU JDK-8301701 17 java/net/DatagramSocket/DatagramSocketMulticasting.java should be hardened PSU JDK-8301846 21 Invalid TargetDataLine after screen lock when using JFileChooser or COM library PSU JDK-8302109 17 Trivial fixes to btree tests PSU JDK-8302525 11, 17 Write a test to check various components send Events while mouse and key are used simultaneously PSU JDK-8302607 17 increase timeout for ContinuousCallSiteTargetChange.java PSU JDK-8303384 8 Improved communication in CORBA PSU JDK-8303607 11, 17 SunMSCAPI provider leaks memory and keys PSU JDK-8303737 21 C2: Load can bypass subtype check that enforces it’s from the right object type PSU JDK-8304174 17 Remove delays from httpserver tests PSU JDK-8304954 17 SegmentedCodeCache fails when using large pages PSU JDK-8305502 17 adjust timeouts in three more M&M tests PSU JDK-8305505 17 NPE in javazic compiler PSU JDK-8305646 17 compile error on Alpine with gcc12 after 8298619 in libGetXSpace.c PSU JDK-8305815 8, 11, 17 Update Libpng to 1.6.39 PSU JDK-8306134 11 Open source some AWT tests relating to Button and a few other classes PSU JDK-8306135 11 Clean up and open source some AWT tests PSU JDK-8306280 11, 17 Open source several choice AWT tests PSU JDK-8306372 11 Open source AWT CardLayout and Checkbox tests PSU JDK-8306430 11 Open source some AWT tests related to TextComponent and Toolkit PSU JDK-8306561 21 gtest/NMTGtests.java#nmt crashes with SIGSEGV on AIX PSU JDK-8306575 11 Clean up and open source four Dialog related tests PSU JDK-8306765 11 Some client related jtreg problem list entries are malformed PSU JDK-8306881 8, 11, 17 Update FreeType to 2.13.0 PSU JDK-8306883 11 Thread stacksize is reported with wrong units in os::create_thread logging PSU JDK-8307079 11 Update test java/awt/Choice/DragOffNoSelect.java PSU JDK-8307123 17 Fix deprecation warnings in DPrinter PSU JDK-8307165 11 java/awt/dnd/NoFormatsDropTest/NoFormatsDropTest.java timed out PSU JDK-8307278 8, 11, 17, 21 Upgrade Libpng PSU JDK-8307286 8, 11, 17, 21 Upgrade FreeType PSU JDK-8307311 17 Timeouts on one macOS 12.6.1 host of two Swing JTableHeader tests PSU JDK-8307403 17 java/util/zip/DeInflate.java timed out PSU JDK-8308047 17 java/util/concurrent/ScheduledThreadPoolExecutor/BasicCancelTest.java timed out and also had jcmd pipe errors PSU JDK-8308103 17, 21 Massive (up to ~30x) increase in C2 compilation time since JDK 17 PSU JDK-8308116 17 jdk.test.lib.compiler.InMemoryJavaCompiler.compile does not close files PSU JDK-8308223 17 failure handler missed jcmd.vm.info command PSU JDK-8308452 21 Extend internal Architecture enum with byte order and address size PSU JDK-8308479 21 [s390x] Implement alternative fast-locking scheme PSU JDK-8308592 11, 17, 21 Framework for CA interoperability testing PSU JDK-8308593 17, 21 Add KEEPALIVE Extended Socket Options Support for Windows PSU JDK-8308910 11, 17 Allow executeAndLog to accept running process PSU JDK-8309032 17 jpackage does not work for module projects unless --module-path is specified PSU JDK-8309088 8 security/infra/java/security/cert/CertPathValidator/certification/AmazonCA.java fails PSU JDK-8309095 11 Remove UTF-8 character from TaskbarPositionTest.java PSU JDK-8309104 17 [JVMCI] compiler/unsafe/UnsafeGetStableArrayElement test asserts wrong values with Graal PSU JDK-8309209 21 C2 failed \"assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state\" PSU JDK-8309216 17 Cast from jchar* to char* in test java/io/GetXSpace.java PSU JDK-8309258 17 RISC-V: Add riscv_hwprobe syscall PSU JDK-8309305 21 sun/security/ssl/SSLSocketImpl/BlockedAsyncClose.java fails with jtreg test timeout PSU JDK-8309502 17 RISC-V: String.indexOf intrinsic may produce misaligned memory loads PSU JDK-8309545 21 Thread.interrupted from virtual thread needlessly resets interrupt status PSU JDK-8309663 21 test fails \"assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe\" PSU JDK-8309778 17, 21 java/nio/file/Files/CopyAndMove.java fails when using second test directory PSU JDK-8309966 8, 11, 17, 21 Enhanced TLS connections PSU JDK-8309974 17, 21 some JVMCI tests fail when VM options include -XX:+EnableJVMCI PSU JDK-8310233 17 Fix THP detection on Linux PSU JDK-8310239 21 Add missing cross modifying fence in nmethod entry barriers PSU JDK-8310265 11, 17 (process) jspawnhelper should not use argv[0] PSU JDK-8310268 17 RISC-V: misaligned memory access in String.Compare intrinsic PSU JDK-8310512 21 Cleanup indentation in jfc files PSU JDK-8310549 11 avoid potential leaks in KeystoreImpl.m related to JNU_CHECK_EXCEPTION early returns PSU JDK-8310596 21 Utilize existing method frame::interpreter_frame_monitor_size_in_bytes() PSU JDK-8310656 17 RISC-V: builtin_clear_cache can fail silently. PSU JDK-8310687 17 JDK-8303215 is incomplete PSU JDK-8310982 21 jdk/internal/util/ArchTest.java fails after JDK-8308452 failed with Method isARM() PSU JDK-8311261 21 [AIX] TestAlwaysPreTouchStacks.java fails due to java.lang.RuntimeException: Did not find expected NMT output PSU JDK-8311285 11 report some fontconfig related environment variables in hs_err file PSU JDK-8311511 17 Improve description of NativeLibrary JFR event PSU JDK-8311514 17, 21 Incorrect regex in TestMetaSpaceLog.java PSU JDK-8311585 17, 21 Add JRadioButtonMenuItem to bug8031573.java PSU JDK-8311591 21 Add SystemModulesPlugin test case that splits module descriptors with new local variables defined by DedupSetBuilder PSU JDK-8311592 17 ECKeySizeParameterSpec causes too many exceptions on third party providers PSU JDK-8311630 21 [s390] Implementation of Foreign Function & Memory API (Preview) PSU JDK-8311631 17, 21 When multiple users run tools/jpackage/share/LicenseTest.java, Permission denied for writing /var/tmp/*.files PSU JDK-8311680 21 Update the release version after forking Oct CPU23_10 PSU JDK-8311681 21 Update the Jan CPU24_01 release date in master branch after forking Oct CPU23_10 PSU JDK-8311813 8, 11, 17, 21 C1: Uninitialized PhiResolver::_loop field PSU JDK-8312065 11, 17 Socket.connect does not timeout when profiling PSU JDK-8312078 17, 21 [PPC] JcmdScale.java Failing on AIX PSU JDK-8312126 11, 17, 21 NullPointerException in CertStore.getCRLs after 8297955 PSU JDK-8312166 21 (dc) DatagramChannel’s socket adaptor does not release carrier thread when blocking in receive PSU JDK-8312174 21 missing JVMTI events from vthreads parked during JVMTI attach PSU JDK-8312182 17 THPs cause huge RSS due to thread start timing issue PSU JDK-8312191 21 ColorConvertOp.filter for the default destination is too slow PSU JDK-8312248 17, 21 Enhanced archival support redux PSU JDK-8312367 8, 11, 17, 21 Enhance security classes PSU JDK-8312394 17 [linux] SIGSEGV if kernel was built without hugepage support PSU JDK-8312395 17 Improve assertions in growableArray PSU JDK-8312433 21 HttpClient request fails due to connection being considered idle and closed PSU JDK-8312434 21 SPECjvm2008/xml.transform with CDS fails with \"can’t seal package nu.xom\" PSU JDK-8312440 17, 21 assert(cast != nullptr) failed: must have added a cast to pin the node PSU JDK-8312489 8, 11, 17 Increase jdk.jar.maxSignatureFileSize default which is too low for JARs such as WhiteSource/Mend unified agent jar PSU JDK-8312535 8, 11, 17 MidiSystem.getSoundbank() throws unexpected SecurityException PSU JDK-8312573 11, 17 Failure during CompileOnly parsing leads to ShouldNotReachHere PSU JDK-8312585 17 Rename DisableTHPStackMitigation flag to THPStackMitigation PSU JDK-8312592 17, 21 New parentheses warnings after HarfBuzz 7.2.0 update PSU JDK-8312612 17, 21 Handle WideCharToMultiByte return values PSU JDK-8312620 17 WSL Linux build crashes after JDK-8310233 PSU JDK-8312625 17 Test serviceability/dcmd/vm/TrimLibcHeapTest.java failed: RSS use increased PSU JDK-8312909 17 C1 should not inline through interface calls with non-subtype receiver PSU JDK-8313164 17, 21 src/java.desktop/windows/native/libawt/windows/awt_Robot.cpp GetRGBPixels adjust releasing of resources PSU JDK-8313206 21 PKCS11 tests silently skip execution PSU JDK-8313252 17, 21 Java_sun_awt_windows_ThemeReader_paintBackground release resources in early returns PSU JDK-8313322 17, 21 RISC-V: implement MD5 intrinsic PSU JDK-8313368 21 (fc) FileChannel.size returns 0 on block special files PSU JDK-8313575 21 Refactor PKCS11Test tests PSU JDK-8313576 11, 17 GCC 7 reports compiler warning in bundled freetype 2.13.0 PSU JDK-8313616 21 support loading library members on AIX in os::dll_load PSU JDK-8313626 11, 17 C2 crash due to unexpected exception control flow PSU JDK-8313643 21 Update HarfBuzz to 8.2.2 PSU JDK-8313656 21 assert(!JvmtiExport::can_support_virtual_threads()) with -XX:-DoJVMTIVirtualThreadTransitions PSU JDK-8313657 11, 17 com.sun.jndi.ldap.Connection.cleanup does not close connections on SocketTimeoutErrors PSU JDK-8313691 11, 17 use close after failing os::fdopen in vmError and ciEnv PSU JDK-8313756 21 [BACKOUT] 8308682: Enhance AES performance PSU JDK-8313760 21 [REDO] Enhance AES performance PSU JDK-8313779 17, 21 RISC-V: use andn / orn in the MD5 instrinsic PSU JDK-8313781 17, 21 Add regression tests for large page logging and user-facing error messages PSU JDK-8313782 17, 21 Add user-facing warning if THPs are enabled but cannot be used PSU JDK-8313792 11, 17, 21 Verify 4th party information in src/jdk.internal.le/share/legal/jline.md PSU JDK-8313815 11 The exception messages printed by jcmd ManagementAgent.start are corrupted on Japanese Windows PSU JDK-8313873 21 java/nio/channels/DatagramChannel/SendReceiveMaxSize.java fails on AIX due to small default RCVBUF size and different IPv6 Header interpretation PSU JDK-8314045 17, 21 ArithmeticException in GaloisCounterMode PSU JDK-8314063 11, 17 The socket is not closed in Connection::createSocket when the handshake failed for LDAP connection PSU JDK-8314094 11, 17, 21 java/lang/ProcessHandle/InfoTest.java fails on Windows when run as user with Administrator privileges PSU JDK-8314120 21 Add tests for FileDescriptor.sync PSU JDK-8314121 17, 21 test tools/jpackage/share/RuntimePackageTest.java#id0 fails on RHEL8 PSU JDK-8314139 17 TEST_BUG: runtime/os/THPsInThreadStackPreventionTest.java could fail on machine with large number of cores PSU JDK-8314144 17 gc/g1/ihop/TestIHOPStatic.java fails due to extra concurrent mark with -Xcomp PSU JDK-8314191 21 C2 compilation fails with \"bad AD file\" PSU JDK-8314226 21 Series of colon-style fallthrough switch cases with guards compiled incorrectly PSU JDK-8314242 11, 17, 21 Update applications/scimark/Scimark.java to accept VM flags PSU JDK-8314246 21 javax/swing/JToolBar/4529206/bug4529206.java fails intermittently on Linux PSU JDK-8314263 11, 17, 21 Signed jars triggering Logger finder recursion and StackOverflowError PSU JDK-8314330 21 java/foreign tests should respect vm flags when start new processes PSU JDK-8314476 21 TestJstatdPortAndServer.java failed with \"java.rmi.NoSuchObjectException: no such object in table\" PSU JDK-8314551 21 More generic way to handshake GC threads with monitor deflation PSU JDK-8314580 21 PhaseIdealLoop::transform_long_range_checks fails with assert \"was tested before\" PSU JDK-8314632 21 Intra-case dominance check fails in the presence of a guard PSU JDK-8314649 17, 21 Enhanced archival support redux PSU JDK-8314679 17 SA fails to properly attach to JVM after having just detached from a different JVM PSU JDK-8314759 21 VirtualThread.parkNanos timeout adjustment when pinned should be replaced PSU JDK-8314883 17, 21 Java_java_util_prefs_FileSystemPreferences_lockFile0 write result errno in missing case PSU JDK-8314935 21 Shenandoah: Unable to throw OOME on back-to-back Full GCs PSU JDK-8315026 21 java/lang/ProcessHandle/TreeTest.java fails intermittent on AIX in TreeTest.test5 PSU JDK-8315082 21 [REDO] Generational ZGC: Tests crash with assert(index == 0 || is_power_of_2(index)) PSU JDK-8315088 21 C2: assert(wq.size() - before == EMPTY_LOOP_SIZE) failed: expect the EMPTY_LOOP_SIZE nodes of this body if empty PSU JDK-8315135 8 Memory leak in the native implementation of Pack200.Unpacker.unpack() PSU JDK-8315195 17, 21 RISC-V: Update hwprobe query for new extensions PSU JDK-8315206 17, 21 RISC-V: hwprobe query is_set return wrong value PSU JDK-8315213 21 java/lang/ProcessHandle/TreeTest.java test enhance output of children PSU JDK-8315214 11, 17, 21 Do not run sun/tools/jhsdb tests concurrently PSU JDK-8315362 21 NMT: summary diff reports threads count incorrectly PSU JDK-8315377 17, 21 C2: assert(u→find_out_with(Op_AddP) == nullptr) failed: more than 2 chained AddP nodes? PSU JDK-8315383 21 jlink SystemModulesPlugin incorrectly parses the options PSU JDK-8315415 17, 21 OutputAnalyzer.shouldMatchByLine() fails in some cases PSU JDK-8315437 21 Enable parallelism in vmTestbase/nsk/monitoring/stress/classload tests PSU JDK-8315442 21 Enable parallelism in vmTestbase/nsk/monitoring/stress/thread tests PSU JDK-8315452 21 Erroneous AST missing modifiers for partial input PSU JDK-8315506 8 C99 compatibility issue in LinuxNativeDispatcher PSU JDK-8315545 21 C1: x86 cmove can use short branches PSU JDK-8315549 17, 21 CITime misreports code/total nmethod sizes PSU JDK-8315554 21 C1: Replace \"cmp reg, 0\" with \"test reg, reg\" on x86 PSU JDK-8315578 21 PPC builds are broken after JDK-8304913 PSU JDK-8315579 21 SPARC64 builds are broken after JDK-8304913 PSU JDK-8315606 17, 21 Open source few swing text/html tests PSU JDK-8315612 21 RISC-V: intrinsic for unsignedMultiplyHigh PSU JDK-8315644 17, 21 increase timeout of sun/security/tools/jarsigner/Warning.java PSU JDK-8315651 21 Stop hiding AIX specific multicast socket errors via NetworkConfiguration (aix) PSU JDK-8315683 11, 17, 21 Parallelize java/util/concurrent/tck/JSR166TestCase.java PSU JDK-8315684 21 Parallelize sun/security/util/math/TestIntegerModuloP.java PSU JDK-8315692 11, 17, 21 Parallelize gc/stress/TestStressRSetCoarsening.java test PSU JDK-8315696 11, 17, 21 SignedLoggerFinderTest.java test failed PSU JDK-8315702 21 jcmd Thread.dump_to_file slow with millions of virtual threads PSU JDK-8315706 21 com/sun/tools/attach/warnings/DynamicLoadWarningTest.java real fix for failure on AIX PSU JDK-8315735 21 VerifyError when switch statement used with synchronized block PSU JDK-8315751 17, 21 RandomTestBsi1999 fails often with timeouts on Linux ppc64le PSU JDK-8315766 11, 17, 21 Parallelize gc/stress/TestStressIHOPMultiThread.java test PSU JDK-8315770 11, 17, 21 serviceability/sa/TestJmapCoreMetaspace.java should run with -XX:-VerifyDependencies PSU JDK-8315774 21 Enable parallelism in vmTestbase/gc/g1/unloading tests PSU JDK-8315862 11 [11u] Backport 8227337: javax/management/remote/mandatory/connection/ReconnectTest.java NoSuchObjectException no such object in table PSU JDK-8315869 21 UseHeavyMonitors not used PSU JDK-8315920 21 C2: \"control input must dominate current control\" assert failure PSU JDK-8315931 21 RISC-V: xxxMaxVectorTestsSmokeTest fails when using RVV PSU JDK-8315936 21 Parallelize gc/stress/TestStressG1Humongous.java test PSU JDK-8315937 11, 17, 21 Enable parallelism in vmTestbase/nsk/stress/numeric tests PSU JDK-8315942 21 Sort platform enums and definitions after JDK-8304913 follow-ups PSU JDK-8315960 21 test/jdk/java/io/File/TempDirDoesNotExist.java leaves test files behind PSU JDK-8315971 21 ProblemList containers/docker/TestMemoryAwareness.java on linux-all PSU JDK-8316003 21 Update FileChooserSymLinkTest.java to HTML instructions PSU JDK-8316017 21 Refactor timeout handler in PassFailJFrame PSU JDK-8316025 21 Use testUI() method of PassFailJFrame.Builder in FileChooserSymLinkTest.java PSU JDK-8316030 21 Update Libpng to 1.6.40 PSU JDK-8316031 21 SSLFlowDelegate should not log from synchronized block PSU JDK-8316060 21 test/hotspot/jtreg/runtime/reflect/ReflectOutOfMemoryError.java may fail if heap is huge PSU JDK-8316087 11, 17, 21 Test SignedLoggerFinderTest.java is still failing PSU JDK-8316113 21 Infinite permission checking loop in java/net/spi/InetAddressResolverProvider/RuntimePermissionTest PSU JDK-8316123 21 ProblemList serviceability/dcmd/gc/RunFinalizationTest.java on AIX PSU JDK-8316130 21 Incorrect control in LibraryCallKit::inline_native_notify_jvmti_funcs PSU JDK-8316142 21 Enable parallelism in vmTestbase/nsk/monitoring/stress/lowmem tests PSU JDK-8316156 21 ByteArrayInputStream.transferTo causes MaxDirectMemorySize overflow PSU JDK-8316178 11, 17, 21 Better diagnostic header for CodeBlobs PSU JDK-8316179 21 Use consistent naming for lightweight locking in MacroAssembler PSU JDK-8316181 21 Move the fast locking implementation out of the .ad files PSU JDK-8316199 21 Remove sun/tools/jstatd/TestJstatd* tests from problemlist for Windows. PSU JDK-8316206 11, 17, 21 Test StretchedFontTest.java fails for Baekmuk font PSU JDK-8316304 21 (fs) Add support for BasicFileAttributes.creationTime() for Linux PSU JDK-8316337 21 (bf) Concurrency issue in DirectByteBuffer.Deallocator PSU JDK-8316341 21 sun/security/pkcs11/PKCS11Test.java needs adjustment on Linux ppc64le Ubuntu 22 PSU JDK-8316380 11 [11u] Backport 8170089: nsk/jdi/EventSet/resume/resume008: ERROR: suspendCounts don’t match for : Common-Cleaner PSU JDK-8316387 21 Exclude more failing multicast tests on AIX after JDK-8315651 PSU JDK-8316396 21 Endless loop in C2 compilation triggered by AddNode::IdealIL PSU JDK-8316399 21 Exclude java/net/MulticastSocket/Promiscuous.java on AIX PSU JDK-8316400 21 Exclude jdk/jfr/event/runtime/TestResidentSetSizeEvent.java on AIX PSU JDK-8316401 21 sun/tools/jhsdb/JStackStressTest.java failed with \"InternalError: We should have found a thread that owns the anonymous lock\" PSU JDK-8316411 21 compiler/compilercontrol/TestConflictInlineCommands.java fails intermittent with force inline by CompileCommand missing PSU JDK-8316414 21 C2: large byte array clone triggers \"failed: malformed control flow\" assertion failure on linux-x86 PSU JDK-8316415 21 Parallelize sun/security/rsa/SignedObjectChain.java subtests PSU JDK-8316418 21 containers/docker/TestMemoryWithCgroupV1.java get OOM killed with Parallel GC PSU JDK-8316436 21 ContinuationWrapper uses unhandled nullptr oop PSU JDK-8316468 21 os::write incorrectly handles partial write PSU JDK-8316514 11, 17, 21 Better diagnostic header for VtableStub PSU JDK-8316540 21 StoreReproducibilityTest fails on some locales PSU JDK-8316566 21 RISC-V: Zero extended narrow oop passed to Atomic::cmpxchg PSU JDK-8316581 21 Improve performance of Symbol::print_value_on() PSU JDK-8316585 21 [REDO] runtime/InvocationTests spend a lot of time on dependency verification PSU JDK-8316645 17, 21 RISC-V: Remove dependency on libatomic by adding cmpxchg 1b PSU JDK-8316659 21 assert(LockingMode != LM_LIGHTWEIGHT || flag == CCR0) failed: bad condition register PSU JDK-8316671 21 sun/security/ssl/SSLSocketImpl/SSLSocketCloseHang.java test fails intermittent with Read timed out PSU JDK-8316679 21 C2 SuperWord: wrong result, load should not be moved before store if not comparable PSU JDK-8316710 11, 17, 21 Exclude java/awt/font/Rotate/RotatedTextTest.java PSU JDK-8316719 21 C2 compilation still fails with \"bad AD file\" PSU JDK-8316735 21 Print LockStack in hs_err files PSU JDK-8316741 21 BasicStroke.createStrokedShape miter-limits failing on small shapes PSU JDK-8316743 17, 21 RISC-V: Change UseVectorizedMismatchIntrinsic option result to warning PSU JDK-8316746 11, 17, 21 Top of lock-stack does not match the unlocked object PSU JDK-8316778 17, 21 test hprof lib: invalid array element type from JavaValueArray.elementSize PSU JDK-8316859 17, 21 RISC-V: Disable detection of V through HWCAP PSU JDK-8316879 21 RegionMatches1Tests fails if CompactStrings are disabled after JDK-8302163 PSU JDK-8316880 21 AArch64: \"stop: Header is not fast-locked\" with -XX:-UseLSE since JDK-8315880 PSU JDK-8316906 11, 17, 21 Clarify TLABWasteTargetPercent flag PSU JDK-8316929 21 Shenandoah: Shenandoah degenerated GC and full GC need to cleanup old OopMapCache entries PSU JDK-8316933 21 RISC-V: compiler/vectorapi/VectorCastShape128Test.java fails when using RVV PSU JDK-8316935 21 [s390x] Use consistent naming for lightweight locking in MacroAssembler PSU JDK-8316958 21 Add test for unstructured locking PSU JDK-8316967 21 Correct the scope of vmtimer in UnregisteredClasses::load_class PSU JDK-8317040 8, 11, 17 Adapt a cleaner test for older releases PSU JDK-8317121 17 vector_masked_load instruction is moved too early after JDK-8286941 PSU JDK-8317136 21 [AIX] Problem List runtime/jni/terminatedThread/TestTerminatedThread.java PSU JDK-8317257 21 RISC-V: llvm build broken PSU JDK-8317262 21 LockStack::contains(oop) fails \"assert(t→is_Java_thread()) failed: incorrect cast to JavaThread\" PSU JDK-8317291 8 Missing null check for nmethod::is_native_method() PSU JDK-8317294 21 Classloading throws exceptions over already pending exceptions PSU JDK-8317331 21 Solaris build failed with \"declaration can not follow a statement (E_DECLARATION_IN_CODE)\" PSU JDK-8317335 21 Build on windows fails after 8316645 PSU JDK-8317336 21 Assertion error thrown during 'this' escape analysis PSU JDK-8317373 8, 11, 17, 21 Add Telia Root CA v2 PSU JDK-8317374 8, 11, 17, 21 Add Let’s Encrypt ISRG Root X2 PSU JDK-8317439 21 Updating RE Configs for BUILD REQUEST 21.0.2+1 PSU JDK-8317507 21 C2 compilation fails with \"Exceeded _node_regs array\" PSU JDK-8317581 21 [s390x] Multiple test failure with LockingMode=2 PSU JDK-8317603 21 Improve exception messages thrown by sun.nio.ch.Net native methods (win) PSU JDK-8317692 21 jcmd GC.heap_dump performance regression after JDK-8292818 PSU JDK-8317705 17, 21 ProblemList sun/tools/jstat/jstatLineCountsX.sh on linux-ppc64le and aix due to JDK-8248691 PSU JDK-8317706 17, 21 Exclude java/awt/Graphics2D/DrawString/RotTransText.java on linux PSU JDK-8317711 21 Exclude gtest/GTestWrapper.java on AIX PSU JDK-8317736 21 Stream::handleReset locks twice PSU JDK-8317751 21 ProblemList ConsumeForModalDialogTest.java, MenuItemActivatedTest.java & MouseModifiersUnitTest_Standard.java for windows PSU JDK-8317772 17, 21 NMT: Make peak values available in release builds PSU JDK-8317790 21 Fix Bug entry for exclusion of runtime/jni/terminatedThread/TestTerminatedThread.java on AIX PSU JDK-8317803 21 Exclude java/net/Socket/asyncClose/Race.java on AIX PSU JDK-8317818 21 Combinatorial explosion during 'this' escape analysis PSU JDK-8317834 17, 21 java/lang/Thread/IsAlive.java timed out PSU JDK-8317839 21 Exclude java/nio/channels/Channels/SocketChannelStreams.java on AIX PSU JDK-8317920 11, 17, 21 JDWP-agent sends broken exception event with onthrow option PSU JDK-8317959 21 Check return values of malloc in native java.base coding PSU JDK-8317964 21 java/awt/Mouse/MouseModifiersUnitTest/MouseModifiersUnitTest_Standard.java fails on macosx-all after JDK-8317751 PSU JDK-8317967 11, 17, 21 Enhance test/jdk/javax/net/ssl/TLSCommon/SSLEngineTestCase.java to handle default cases PSU JDK-8317987 21 C2 recompilations cause high memory footprint PSU JDK-8318078 21 ADLC: pass ASSERT and PRODUCT flags PSU JDK-8318089 21 Class space not marked as such with NMT when CDS is off PSU JDK-8318137 21 Change milestone to fcs for all releases PSU JDK-8318144 21 Match on enum constants with body compiles but fails with MatchException PSU JDK-8318183 21 C2: VM may crash after hitting node limit PSU JDK-8318240 21 [AIX] Cleaners.java test failure PSU JDK-8318415 21 Adjust describing comment of os_getChildren after 8315026 PSU JDK-8318474 21 Fix memory reporter for thread_count PSU JDK-8318525 21 Atomic gtest should run as TEST_VM to access VM capabilities PSU JDK-8318528 21 Rename TestUnstructuredLocking test PSU JDK-8318562 21 Computational test more than 2x slower when AVX instructions are used PSU JDK-8318587 21 refresh libraries cache on AIX in print_vm_info PSU JDK-8318591 21 avoid leaks in loadlib_aix.cpp reload_table() PSU JDK-8318705 11, 17, 21 [macos] ProblemList java/rmi/registry/multipleRegistries/MultipleRegistries.java PSU JDK-8318736 21 com/sun/jdi/JdwpOnThrowTest.java failed with \"transport error 202: bind failed: Address already in use\" PSU JDK-8318759 8, 11, 17, 21 Add four DigiCert root certificates PSU JDK-8318855 17 Extra file added by mistake during the backport of JDK-8283326 PSU JDK-8318889 17, 21 C2: add bailout after assert Bad graph detected in build_loop_late PSU JDK-8318895 21 Deoptimization results in incorrect lightweight locking stack PSU JDK-8318951 21 Additional negative value check in JPEG decoding PSU JDK-8318953 17, 21 RISC-V: Small refactoring for MacroAssembler::test_bit PSU JDK-8318955 21 Add ReleaseIntArrayElements in Java_sun_awt_X11_XlibWrapper_SetBitmapShape XlbWrapper.c to early return PSU JDK-8318957 21 Enhance agentlib:jdwp help output by info about allow option PSU JDK-8318981 21 compiler/compilercontrol/TestConflictInlineCommands.java fails intermittent with 'disallowed by CompileCommand' missing from stdout/stderr PSU JDK-8319104 21 GtestWrapper crashes with SIGILL in AsyncLogTest::test_asynclog_raw on AIX opt PSU JDK-8319120 21 Unbound ScopedValue.get() throws the wrong exception PSU JDK-8319184 17, 21 RISC-V: improve MD5 intrinsic PSU JDK-8319187 8, 11, 17, 21 Add three eMudhra emSign roots PSU JDK-8319195 21 Move tier 1 vector API regression tests to tier 2 PSU JDK-8319268 21 Build failure with GCC8.3.1 after 8313643 PSU JDK-8319339 21 Internal error on spurious markup in a hybrid snippet PSU JDK-8319405 8 [s390] [jdk8] Increase javac default stack size for s390x zero PSU JDK-8319436 21 Proxy.newProxyInstance throws NPE if loader is null and interface not visible from class loader PSU JDK-8319525 17, 21 RISC-V: Rename *_riscv64.ad files to *_riscv.ad under riscv/gc PSU JDK-8319532 21 jshell - Non-sealed declarations sometimes break a snippet evaluation PSU JDK-8319542 21 Fix boundaries of region to be tested with os::is_readable_range PSU JDK-8319700 21 [AArch64] C2 compilation fails with \"Field too big for insn\" PSU JDK-8319828 21 runtime/NMT/VirtualAllocCommitMerge.java may fail if mixing interpreted and compiled native invocations PSU JDK-8319922 21 libCreationTimeHelper.so fails to link in JDK 21 PSU JDK-8319958 17, 21 test/jdk/java/io/File/libGetXSpace.c does not compile on Windows 32-bit PSU JDK-8319961 21 JvmtiEnvBase doesn’t zero _ext_event_callbacks PSU JDK-8320001 21 javac crashes while adding type annotations to the return type of a constructor PSU JDK-8320209 17, 21 VectorMaskGen clobbers rflags on x86_64 PSU JDK-8320280 21 RISC-V: Avoid passing t0 as temp register to MacroAssembler::lightweight_lock/unlock PSU JDK-8320363 21 ppc64 TypeEntries::type_unknown logic looks wrong, missed optimization opportunity PSU JDK-8320601 17, 21 ProblemList java/lang/invoke/lambda/LambdaFileEncodingSerialization.java on linux-all PSU JDK-8321067 21 Unlock experimental options in EATests.java PSU JDK-8322883 21 [BACKOUT] 8225377: type annotations are not visible to javac plugins across compilation boundaries PSU JDK-8322985 21 [BACKOUT] 8318562: Computational test more than 2x slower when AVX instructions are used PSU OpenJFX Fixes and Enhancements The following table describes the OpenJFX changes implemented in this release. OpenJDK Patch ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8181084 11 JavaFX show big icons in system menu on macOS with Retina display CPU,PSU JDK-8251240 11, 17, 21 Menus inaccessible on Linux with i3 wm PSU JDK-8284544 8 [Win] Name-Property of Spinner cannot be changed PSU JDK-8292922 11 [Linux] No more drag events when new Stage is created in drag handler PSU JDK-8307536 17, 21 FileAlreadyExistsException from NativeLibLoader when running concurrent applications with empty cache PSU JDK-8313321 8, 17, 21 Set minimum python version in WebKit cmake scripts PSU JDK-8313648 17, 21 JavaFX application continues to show a black screen after graphic card driver crash PSU JDK-8314484 17, 21 Update Gradle to 8.3 PSU JDK-8314486 17, 21 JavaFX build uses deprecated features that will be removed in gradle 8 PSU JDK-8315074 8, 17, 21 Possible null pointer access in native glass PSU JDK-8315958 8, 17, 21 Missing range checks in GlassPasteboard PSU JDK-8317370 17, 21 JavaFX runtime version is wrong at runtime PSU JDK-8317508 8, 17, 21 Provide media support for libavcodec version 60 PSU JDK-8318115 17, 21 Webkit build fails after gradle 8.4 PSU JDK-8318386 17, 21 Update Glib to 2.78.0 PSU JDK-8318387 17, 21 Update GStreamer to 1.22.6 PSU JDK-8318984 17, 21 Update to Xcode 14.3.1 on macOS PSU JDK-8319066 8, 11, 17, 21 Application window not activated in macOS 14 Sonoma when launched from command line PSU JDK-8319079 17, 21 Missing range checks in decora PSU JDK-8319231 11, 17, 21 Unrecognized \"minimum\" key in .jcheck/conf causes /reviewers command to be ignored PSU JDK-8319669 17, 21 [macos14] Running any JavaFX app prints Secure coding warning PSU JDK-8319762 17, 21 Update to Visual Studio 2022 version 17.6.5 on Windows PSU JDK-8319996 17, 21 Update to GCC 13.2.0 on Linux PSU JDK-8320267 11, 17, 21 WebView crashes on macOS 11 with WebKit 616.1 PSU Fixes and Enhancements Specific to Azul Zulu Builds of OpenJDK The following table describes the Azul Zulu bug fixes implemented in this release. Issue ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. ZULU-56016 8, 11, 17 BCFIPS should be updated to version 1.0.24 CPU,PSU ZULU-56533 6 Do selective changes re: transfer of LT and LV currencies to EUR CPU,PSU ZULU-29744 8 fix compilation issues for gcc9.3 PSU ZULU-34602 21 Failure in vmTestbase/nsk/jdi/ReferenceType/instances/instances003/instances003.java - com.sun.jdi.ObjectCollectedException PSU ZULU-34883 21 integrate CRS agent to Zulu17 PSU ZULU-34955 21 Failure in about 50 security tests - LinkageError occurred while loading main class com.sun.javatest.regtest.agent.MainWrapper PSU ZULU-35818 21 CDS tests fails with assertion if CRS enabled PSU ZULU-35819 21 regression tests runtime/SelectionResolution/* failed: SIGSEGV PSU ZULU-35876 21 Failure in java/lang/SecurityManager/CheckAccessClassInPackagePermissions.java - Module module com.azul.crs.client has not been granted (\"java.lang.RuntimePermission\" \"accessClassInPackage.com.azul.tooling.in\") PSU ZULU-37416 21 ClassNotFoundException com.azul.tooling.Handler PSU ZULU-37449 21 Add a configurable delay for starting of CRS code which has side effects on JDK initialization PSU ZULU-37617 21 High CPU load when CRS is enabled PSU ZULU-37651 21 JVM crashes in CI runs PSU ZULU-37670 21 CRS related renamings accordingly to PMM-282 PSU ZULU-37671 21 Failure in 19 tests in serviceability/sa/ and sun/tools/jhsdb/ - Unable to deduce type of thread from address PSU ZULU-37720 21 [REGRESSION] Test jdk/modules/etc/VerifyModuleDelegation.java fails with NPE PSU ZULU-38273 21 drainQueues() after disableCRS() crashes VM PSU ZULU-38294 21 Failure in java/lang/ClassLoader/securityManager/ClassLoaderTest.java - IllegalStateException: getSystemClassLoader cannot be called during the system class loader instantiation PSU ZULU-38301 21 Failure in several regression tests sun/security/krb5/auto/* and java/time/tck/java/time/chrono/* - Unexpected exit from test [exit code: -1073740791] PSU ZULU-38367 21 Fix for ZULU-38294 breaks zulu build PSU ZULU-38448 21 Failures in six various tests on all (and only) \"non-CRS\" platforms PSU ZULU-38511 21 All CRS modules should be loaded by boot class loader (again) PSU ZULU-40762 21 Zulu fastdebug failed to start with CRS enabled PSU ZULU-40964 21 Processing of VM_METHOD_FIRST_CALLED at client side PSU ZULU-40966 21 Fix 2 Address Sanitizer (ASAN) sscanf buffer overflows - any testcase PSU ZULU-43110 21 notify_class_load should be configurable by CrsClassLoadMessage::should_notify() PSU ZULU-43971 21 Update CRS client to version 1.0.11 PSU ZULU-45003 21 CRS agent without -XX:+UnlockExperimentalVMOptions/UnlockExperimentalCRS PSU ZULU-45268 21 Add sending of VM_METHOD_FIRST_CALLED to all supported JVMs PSU ZULU-46703 21 Use CRS Agent 1.0.26 PSU ZULU-47172 17, 21 [CRaC] jdk/jdk/crac jtreg tests failed on CentOS 8 PSU ZULU-48353 8 restore proper JNF bunding PSU ZULU-48356 21 Failure in com/sun/management/DiagnosticCommandMBean/DcmdMBeanPermissionsTest.java - SecurityException: (\"java.lang.RuntimePermission\" \"getClassLoader\") PSU ZULU-48669 21 unnecessary call of hash.cpp/sha256 method when CRS is not intended to be started PSU ZULU-48695 21 adding heuristic: report compilation events as VM_METHOD_FIRST_CALLED event PSU ZULU-48967 21 AVD agent to be used: 1.0.30 PSU ZULU-49206 21 AVD agent to be used: 1.0.32 PSU ZULU-51813 17 Enable BCFIPS provider configuration PSU ZULU-51814 11 FIPS for Zulu 11 PSU ZULU-51913 8 JBOSS EAP 7.4.0 fails with Zulu 8.74.0.11 PSU ZULU-52197 21 AVD for Zulu 21 PSU ZULU-52231 11 Move zulu11 aarch32 builds to ent jenkins env PSU ZULU-52236 21 Fix partial initialization warning for _listener_address PSU ZULU-53286 Rename linux-arm to linux-armhf in build matrix PSU ZULU-53497 8 Improve zoich build infra PSU ZULU-53520 21 Upgrade boot jdk for zulu21 PSU ZULU-53750 17, 21 Checkpoint while debugging PSU ZULU-54108 17, 21 Could not find criuengine for zulu with crac for win & mac PSU ZULU-54275 8, 11, 17, 21 AVD code inventory does not work properly on Zulu17 PSU ZULU-54288 11, 17 Add UseBCFIPS option for Zulu11 PSU ZULU-54295 17 libGetXSpace.c fails to compile on win32 PSU ZULU-54628 8 [OJ-reg] \"com/sun/jdi/StepTest.java\" test failed with \"java.lang.IllegalArgumentException: Bad method name/signature: com.azul.crac.Core.go:()V\" PSU ZULU-54881 17, 21 [CRaC] 4 jdk/crac jtreg tests fail on macosx in Zulu 17.46 and Zulu 21.30 builds PSU ZULU-54882 17, 21 [JCK21] Multiple \"api/java_lang/\" tests failed with \"java.lang.NullPointerException\" PSU ZULU-54890 17, 21 [CRaC] sun/misc/SunMiscSignalTest.java test fails on macosx in Zulu 17.46.27, 17.46.28, 21.30.19, 21.30.20 CRaC builds PSU ZULU-54928 22 EA fails to sign correctly after 22.0.51+ PSU ZULU-55359 21 CI for CRaC PSU ZULU-55361 Update base images for armv6hf-sdk and armv5sf-sdk PSU ZULU-55363 21 Backport test fixes from upstream PSU ZULU-55547 8 Remove OpenJSSE and Legacy8uJSSE from Zulu8 PSU ZULU-55559 17, 21 JMX cannot be enabled after restore PSU ZULU-55562 linux-armsf started to fail after transition to ent build env PSU ZULU-55812 21 Change to Xcode 14.3 for building on macOS PSU ZULU-55843 17, 21 Zulu CRaC + GC log PSU ZULU-56027 17, 21 Zulu21 CRaC build does not work with CRS on Windows PSU ZULU-56028 17, 21 CRS: --disable-precompiled-headers fails to compile PSU ZULU-56029 8, 11, 17, 21 review references to slackoverflow PSU ZULU-56061 17, 21 CRaC: OSX: --disable-precompiled-headers fails to compile PSU ZULU-56146 8 Mass build failures after 8138694 PSU ZULU-56164 8 Update .dependencies file with freetype for custom aarch64 compiler PSU ZULU-56206 17, 21 CRaC code has bad words PSU ZULU-56211 8 Fix PPC family builds PSU ZULU-56430 21 Allow Merge PRs in CI PSU ZULU-6566 21 Modules without classes can not be imported into jre image PSU Fixes and Enhancements Specific to Azul Zulu Builds of OpenJDK With JavaFX The following table describes the Azul ZuluFX bug fixes implemented in this release. Issue ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. ZULU-55389 8 jfx8: typo in Mesa 3-D Graphics Library version CPU,PSU ZULU-52487 8, 17, 21 Use VS2022-17.6.5 for WebKit v616.1 PSU ZULU-52980 17, 21 win32: webkit build is broken after 8238650 PSU ZULU-55581 17, 21 win32: glib build is broken after JDK-8318386 PSU Third Party Licenses Azul Platform Core January 2024 CPU Release Java Version Azul Platform Core TPL Azul Zulu JavaFX Components 21 HTML, PDF HTML, PDF 17 HTML, PDF HTML, PDF 11 HTML, PDF HTML, PDF 8 HTML, PDF HTML, PDF 7 HTML, PDF N/A 6 HTML, PDF N/A"
}, {
  "objectID" : "c4699723-e9b1-4722-9235-049d6b0ec5d3",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Release Details",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#release-details",
  "content" : "Release Details This release is a quarterly update release for Azul Zulu Builds of OpenJDK version 21, 17, 11, 8, 7, and 6. The following table lists detailed information on the Azul Zulu versions released with the current update. Azul Zulu Version (*) Update Type (**) JDK VersionThe JDK version that is used in this release of Azul Zulu. Based onThe previous version of Azul Zulu that was used as the basis for the current version. JavaFX VersionThe version of JavaFX that is included in this release of Azul Zulu. JavaFX is available in the bandles with the -fx- suffix in the name. Azul Zulu Version JDK Version 21.31.16 (SA) CPU 21.0.1.0.101+3 21.30 21.0.1+12 21.0.1.0.101+100 21.32.17 (CA) 21.32.18 (SA) PSU 21.0.2+13 21.31 21.0.1.0.101+3 21.0.2+101 17.47.16 (SA) CPU 17.0.9.0.101+3 17.46 17.0.9+9 21.0.1.0.101+100 17.48.15 (CA) 17.48.16 (SA) PSU 17.0.10+7 17.47 17.0.9.0.101+3 21.0.2+101 11.69.14 (SA) CPU 11.0.21.0.101+2 11.68 11.0.21+9 19.0.5.0.101+100 11.70.15 (CA) 11.70.16 (SA) PSU 11.0.22+7 11.69 11.0.21.0.101+2 19.0.6+101 8.75.0.16 (SA) CPU 8u401-b03 8.74 8u392-b08 8u401-b01 8.76.0.17 (CA) 8.76.0.18 (SA) PSU 8u402-b06 8.75 8u401-b03 8u402-b02 7.67.0.16 (SA) CPU 7u411-b03 7.65 7u401-b01 N/A 6.61.0.16 (SA) CPU 6b161 6.59 6b159 N/A (*) Azul provides two types of distribution packages for each Java version: SA distributions are tested, certified, and commercially supported Azul Zulu Builds of OpenJDK. Azul ensures that the software that uses the Accessible APIs of the product doesn’t have to include specific licenses and that such use doesn’t contaminate the code or intellectual property of such software with any license requirements. CA are Azul Zulu Builds of OpenJDK that are free to download and use. Note Both SA and CA distributions may contain Early Access builds noted with -ea- in their filename. Early Access builds may not be TCK certified. (**) Update type: CPU (Critical Patch Updates) contain fixes to security vulnerabilities and critical bug fixes. Azul Zulu CPU releases are generally based on prior-cycle PSU releases, with only security fixes applied. They provide a low-risk vehicle for the potentially urgent deployment of security fixes when issues of sufficient severity arise. CPU releases are available in SA distributions. PSU (Patch Set Updates) incorporates all fixes in the corresponding CPU, as well as additional non-security bug fixes. Azul Zulu PSU releases incorporate both security fixes and other changes that align the release contents with the associated OpenJDK project quarterly release. PSU releases are available in SA and CA distributions."
}, {
  "objectID" : "10b56c22-8a69-4715-a709-8029e9b9b942",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#whats-new",
  "content" : "What’s New Configuration Changes We reduced the testing cycles for the following environment targeting its end of life, and this is no longer supported: Windows Server 2012 R2 If you’re still using this platform, we will be providing Azul Platform Core versions for you and can help you if issues would arise! Please email us at [email protected]. Note Although previously announced in V1.0 of this document, macOS 12 Monterey and RHEL 7.x are longer supported and testing is not reduced yet for these platforms. Dropped Support for OpenJSSE and Legacy8uJSSE OpenJSSE is a JSSE provider that was ported from Java 11 to Azul Zulu 8 to add support for TLS 1.3, because OpenJDK 8 did not support TLS 1.3 at the time. Later, OpenJSSE was integrated into the SunJSSE provider of OpenJDK 8u272 and became part of Java SE 8 specification. Legacy8uJSSE is a JSSE provider that falls back to legacy TLS 1.2 protocol implementation and was added to Azul Zulu 8 for compatibility reasons. Although earlier announced that they would be removed in January 2022, the two JSSE implementations got supported until this release, but will now be gradually dropped: The January 2024 PSU Builds of OpenJDK no longer support OpenJSSE and Legacy8uJSSE. The January 2024 CPU Builds are the last with OpenJSSE and Legacy8uJSSE. Encryption Configuration Changes for FIPS-enabled Configurations With the update of BCFIPS library from version 1.0.2.3 to 1.0.2.4, the following changes took place: PKCS 1.5 RSA encryption, Triple-DES encryption, and MD5 digest are now disabled in the ApprovedOnlyMode by default. These algorithms can be enabled for internal usage by the BCFIPS library with the following system properties:  org.bouncycastle.tripledes.allow_drbg\norg.bouncycastle.tripledes.allow_prf\norg.bouncycastle.tripledes.allow_wrap\norg.bouncycastle.tripledes.allow_enc\norg.bouncycastle.rsa.allow_pkcs15_enc\norg.bouncycastle.jsse.enable_md5 New configurations of Azul Zulu with CRaC Support Zulu Builds with CRaC are now available for Alpine Linux (musl libc). In the following weeks, downloads will be available for Windows and macOS of Azul Zulu Builds of OpenJDK with CRaC support for development purposes. With these runtimes you will be able to simulate the CRaC functionality. When a checkpoint is requested, it will be created and immediately restored without dumping the checkpoint to disk. This enables you to develop and test the CRaC functionality on these platforms, so you can deploy your application with confidence on Linux."
}, {
  "objectID" : "e164842d-0239-4248-8cdf-c94c2fba8309",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Configuration Changes",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#configuration-changes",
  "content" : "Configuration Changes We reduced the testing cycles for the following environment targeting its end of life, and this is no longer supported: Windows Server 2012 R2 If you’re still using this platform, we will be providing Azul Platform Core versions for you and can help you if issues would arise! Please email us at [email protected]. Note Although previously announced in V1.0 of this document, macOS 12 Monterey and RHEL 7.x are longer supported and testing is not reduced yet for these platforms."
}, {
  "objectID" : "f51b01b8-06b4-4f5a-b13f-909984a6adba",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Dropped Support for OpenJSSE and Legacy8uJSSE",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#dropped-support-for-openjsse-and-legacy8ujsse",
  "content" : "Dropped Support for OpenJSSE and Legacy8uJSSE OpenJSSE is a JSSE provider that was ported from Java 11 to Azul Zulu 8 to add support for TLS 1.3, because OpenJDK 8 did not support TLS 1.3 at the time. Later, OpenJSSE was integrated into the SunJSSE provider of OpenJDK 8u272 and became part of Java SE 8 specification. Legacy8uJSSE is a JSSE provider that falls back to legacy TLS 1.2 protocol implementation and was added to Azul Zulu 8 for compatibility reasons. Although earlier announced that they would be removed in January 2022, the two JSSE implementations got supported until this release, but will now be gradually dropped: The January 2024 PSU Builds of OpenJDK no longer support OpenJSSE and Legacy8uJSSE. The January 2024 CPU Builds are the last with OpenJSSE and Legacy8uJSSE."
}, {
  "objectID" : "030e691f-044b-4505-9a07-bd9ee9ba1e56",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Encryption Configuration Changes for FIPS-enabled Configurations",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#encryption-configuration-changes-for-fips-enabled-configurations",
  "content" : "Encryption Configuration Changes for FIPS-enabled Configurations With the update of BCFIPS library from version 1.0.2.3 to 1.0.2.4, the following changes took place: PKCS 1.5 RSA encryption, Triple-DES encryption, and MD5 digest are now disabled in the ApprovedOnlyMode by default. These algorithms can be enabled for internal usage by the BCFIPS library with the following system properties:  org.bouncycastle.tripledes.allow_drbg\norg.bouncycastle.tripledes.allow_prf\norg.bouncycastle.tripledes.allow_wrap\norg.bouncycastle.tripledes.allow_enc\norg.bouncycastle.rsa.allow_pkcs15_enc\norg.bouncycastle.jsse.enable_md5"
}, {
  "objectID" : "b5145bab-375a-46aa-83f7-1d9638c844a0",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "New configurations of Azul Zulu with CRaC Support",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#new-configurations-of-azul-zulu-with-crac-support",
  "content" : "New configurations of Azul Zulu with CRaC Support Zulu Builds with CRaC are now available for Alpine Linux (musl libc). In the following weeks, downloads will be available for Windows and macOS of Azul Zulu Builds of OpenJDK with CRaC support for development purposes. With these runtimes you will be able to simulate the CRaC functionality. When a checkpoint is requested, it will be created and immediately restored without dumping the checkpoint to disk. This enables you to develop and test the CRaC functionality on these platforms, so you can deploy your application with confidence on Linux."
}, {
  "objectID" : "5080e3ef-06d4-444a-bca7-4a6eac558f33",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "IANA Time Zone Database Version",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#iana-time-zone-database-version",
  "content" : "IANA Time Zone Database Version This release of Azul Zulu comes with IANA Time Zone Database version 2023c, the same as in the release of October 2023."
}, {
  "objectID" : "251c0987-76f6-4afe-b26c-908aee0ae4d0",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Supported Platforms",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#supported-platforms",
  "content" : "Supported Platforms This section provides information about the operating systems that are supported in this update release of Azul Zulu. Azul Zulu Builds of OpenJDK Without and With OpenJFX Some versions of Azul Zulu are available in different packages for specific platforms, as indicated in this overview table with: : Build of OpenJDK without OpenJFX. : Build of OpenJDK without and with OpenJFX. Note The list of supported configurations and platform includes, but is not limited to, the table below. Don’t hesitate to contact Support if you have issues with Azul Zulu Builds of OpenJDK on any other platform or configuration. Operating System Azul Zulu Version 6 7 8 11 17 21 Windows (x86 32/64-bit) Windows Server 2022 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows Server 2019 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows Server 2016 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows 11 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows 10 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows (ARM 64-bit) Windows 11 n/a n/a n/a n/a n/a Windows 10 n/a n/a n/a n/a n/a Linux (x86 32/64-bit) RHEL 9.x n/a [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. RHEL 8.x [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. RHEL 7.x [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. SLES 15 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. SLES 12 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. CentOS Stream [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 22.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 20.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 18.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 12 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 11 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 10 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Wind River 8.x n/a n/a n/a n/a CoreOS n/a n/a Alpine Linux 3.11 or later n/a n/a Amazon Linux 2023 n/a n/a n/a Linux (ARM 64-bit) Ubuntu 22.04 n/a n/a Ubuntu 20.04 n/a n/a Ubuntu 18.04 n/a n/a n/a n/a Debian 12 n/a n/a Debian 11 n/a n/a Alpine Linux 3.11 or later n/a n/a Amazon Linux 2023 n/a n/a n/a Linux with kernel 3.10.x and glibc 2.23 [2]Bundles with the Checkpoint/Restore (with the criu suffix) functionality require kernel 4.4.0+. [3]Bundles compiled with GCC 9 (with the gcc9 suffix) require glibc 2.29. n/a n/a n/a n/a Linux (ARM 32-bit Hard-Float) Ubuntu 18.04 [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a Raspbian 10 Buster [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a Raspbian 9 Stretch [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a n/a Linux with kernel 3.10.x and glibc 2.9 [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. [5]Bundles with the CRaM (with the cr suffix) functionality require glibc 2.13. n/a n/a n/a n/a Linux (ARM 32-bit Soft-Float) [6]Bundles with the C1 compiler will use FPU, if it is present and available, to speed up floating point operations. Bundles with both C1 and C2 compilers require FPU. Linux with kernel 2.6.34 and glibc 2.5 [7]Bundles with the C1 compiler. Tested on ARMv5 hardware. n/a n/a n/a n/a Debian 7 Wheezy [8]Bundles with the C1 compiler were tested on ARMv6 and ARMv7 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7 hardware. n/a n/a n/a n/a Linux with kernel 3.10.x and glibc 2.9 [8]Bundles with the C1 compiler were tested on ARMv6 and ARMv7 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7 hardware. n/a n/a n/a n/a Linux (MIPS 32-bit) [9]MIPS32r2 ISA, Big Endian, FPU in 32-bit mode or equivalent emulation. Linux with kernel 4.9.59 and glibc 2.9 [10]Linux soft-float O32 MIPS ABI n/a n/a n/a n/a n/a Linux (ppc64 Big Endian) Linux with kernel 3.8.13 and glibc 2.22 [11]Bundles for this platform were tested on QorIQ® T4240-RDB. n/a n/a n/a n/a n/a Linux (ppc32 Hard-float and SPE) Linux with kernel 3.12.37 and glibc 2.20 [12]Hard-Float EABI bundles were tested on QorIQ® T1024RDB. SPE ABI bundles were tested on NXP® P2020RDB. n/a n/a n/a n/a n/a QNX (ARMv7 32-bit Hard-Float ABI) QNX 7.0 n/a n/a n/a n/a n/a MacOS (x86 64-bit) macOS 12+ n/a MacOS (Apple Silicon) macOS 12+ n/a n/a Solaris (x86 and Sparc) Solaris 11 n/a n/a n/a Solaris 10 n/a n/a n/a n/a AIX (ppc64) AIX 7.3 n/a n/a n/a n/a n/a Azul Zulu Builds of OpenJDK With CRaC Note Currently, CRaC is only available for the specified Linux systems, in version 17 and 21 of Azul Zulu Builds of OpenJDK. For development, you can use the CRaC Java library on any platform and simulate the CRaC functionality. : Build of OpenJDK with full CRaC support. : Build of OpenJDK with CRaC support for development purposes. These provide a simulated checkpoint/restore mechanism to be used for development and testing. Operating System Azul Zulu Version 17 21 x86 64-bit ARM 64-bit x86 64-bit ARM 64-bit Linux Alpine Linux 3.11+ Windows n/a n/a macOS"
}, {
  "objectID" : "c6540749-14e7-4be1-acef-dff2319dcb0d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Azul Zulu Builds of OpenJDK Without and With OpenJFX",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#azul-zulu-builds-of-openjdk-without-and-with-openjfx",
  "content" : "Azul Zulu Builds of OpenJDK Without and With OpenJFX Some versions of Azul Zulu are available in different packages for specific platforms, as indicated in this overview table with: : Build of OpenJDK without OpenJFX. : Build of OpenJDK without and with OpenJFX. Note The list of supported configurations and platform includes, but is not limited to, the table below. Don’t hesitate to contact Support if you have issues with Azul Zulu Builds of OpenJDK on any other platform or configuration. Operating System Azul Zulu Version 6 7 8 11 17 21 Windows (x86 32/64-bit) Windows Server 2022 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows Server 2019 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows Server 2016 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows 11 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows 10 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows (ARM 64-bit) Windows 11 n/a n/a n/a n/a n/a Windows 10 n/a n/a n/a n/a n/a Linux (x86 32/64-bit) RHEL 9.x n/a [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. RHEL 8.x [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. RHEL 7.x [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. SLES 15 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. SLES 12 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. CentOS Stream [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 22.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 20.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 18.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 12 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 11 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 10 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Wind River 8.x n/a n/a n/a n/a CoreOS n/a n/a Alpine Linux 3.11 or later n/a n/a Amazon Linux 2023 n/a n/a n/a Linux (ARM 64-bit) Ubuntu 22.04 n/a n/a Ubuntu 20.04 n/a n/a Ubuntu 18.04 n/a n/a n/a n/a Debian 12 n/a n/a Debian 11 n/a n/a Alpine Linux 3.11 or later n/a n/a Amazon Linux 2023 n/a n/a n/a Linux with kernel 3.10.x and glibc 2.23 [2]Bundles with the Checkpoint/Restore (with the criu suffix) functionality require kernel 4.4.0+. [3]Bundles compiled with GCC 9 (with the gcc9 suffix) require glibc 2.29. n/a n/a n/a n/a Linux (ARM 32-bit Hard-Float) Ubuntu 18.04 [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a Raspbian 10 Buster [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a Raspbian 9 Stretch [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a n/a Linux with kernel 3.10.x and glibc 2.9 [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. [5]Bundles with the CRaM (with the cr suffix) functionality require glibc 2.13. n/a n/a n/a n/a Linux (ARM 32-bit Soft-Float) [6]Bundles with the C1 compiler will use FPU, if it is present and available, to speed up floating point operations. Bundles with both C1 and C2 compilers require FPU. Linux with kernel 2.6.34 and glibc 2.5 [7]Bundles with the C1 compiler. Tested on ARMv5 hardware. n/a n/a n/a n/a Debian 7 Wheezy [8]Bundles with the C1 compiler were tested on ARMv6 and ARMv7 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7 hardware. n/a n/a n/a n/a Linux with kernel 3.10.x and glibc 2.9 [8]Bundles with the C1 compiler were tested on ARMv6 and ARMv7 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7 hardware. n/a n/a n/a n/a Linux (MIPS 32-bit) [9]MIPS32r2 ISA, Big Endian, FPU in 32-bit mode or equivalent emulation. Linux with kernel 4.9.59 and glibc 2.9 [10]Linux soft-float O32 MIPS ABI n/a n/a n/a n/a n/a Linux (ppc64 Big Endian) Linux with kernel 3.8.13 and glibc 2.22 [11]Bundles for this platform were tested on QorIQ® T4240-RDB. n/a n/a n/a n/a n/a Linux (ppc32 Hard-float and SPE) Linux with kernel 3.12.37 and glibc 2.20 [12]Hard-Float EABI bundles were tested on QorIQ® T1024RDB. SPE ABI bundles were tested on NXP® P2020RDB. n/a n/a n/a n/a n/a QNX (ARMv7 32-bit Hard-Float ABI) QNX 7.0 n/a n/a n/a n/a n/a MacOS (x86 64-bit) macOS 12+ n/a MacOS (Apple Silicon) macOS 12+ n/a n/a Solaris (x86 and Sparc) Solaris 11 n/a n/a n/a Solaris 10 n/a n/a n/a n/a AIX (ppc64) AIX 7.3 n/a n/a n/a n/a n/a"
}, {
  "objectID" : "c147aca8-e3a4-4454-b8a9-6e805b1c586e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Azul Zulu Builds of OpenJDK With CRaC",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#azul-zulu-builds-of-openjdk-with-crac",
  "content" : "Azul Zulu Builds of OpenJDK With CRaC Note Currently, CRaC is only available for the specified Linux systems, in version 17 and 21 of Azul Zulu Builds of OpenJDK. For development, you can use the CRaC Java library on any platform and simulate the CRaC functionality. : Build of OpenJDK with full CRaC support. : Build of OpenJDK with CRaC support for development purposes. These provide a simulated checkpoint/restore mechanism to be used for development and testing. Operating System Azul Zulu Version 17 21 x86 64-bit ARM 64-bit x86 64-bit ARM 64-bit Linux Alpine Linux 3.11+ Windows n/a n/a macOS"
}, {
  "objectID" : "f6b627bf-2b85-4cb1-9a37-90e45a24dd30",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Fixed Issues",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#fixed-issues",
  "content" : "Fixed Issues This section covers all issues that were fixed in this release. Fixed Common Vulnerabilities and Exposures This section summarizes Common Vulnerabilities and Exposures (CVE) fixed in this release. CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Azul Zulu Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20918 Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 2 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8, 7, 6 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8, 7, 6 Note 3 CVE-2024-20921 Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None 21, 17, 11, 8, 7, 6 Note 2 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8, 7, 6 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Zulu Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Zulu Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20955 This CVE is not applicable to Azul Zulu Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. Non-CVE Security Fixes The following table summarizes non-CVE security fixes implemented in this release. OpenJDK Patch ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8308204 6, 7, 8, 11, 17, 21 Enhanced certificate processing CPU,PSU OpenJDK Fixes and Enhancements The following table describes the OpenJDK changes implemented in this release. OpenJDK Patch ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8066103 6 C2’s range check smearing allows out of bound array accesses CPU,PSU JDK-8276123 17 ZipFile::getEntry will not return a file entry when there is a directory entry of the same name within a Zip File CPU,PSU JDK-8302017 6, 7, 8, 11, 17 Allocate BadPaddingException only if it will be thrown CPU,PSU JDK-8320597 6, 7, 8, 11, 17, 21 RSA signature verification fails on signed data that does not encode params correctly CPU,PSU JDK-6381945 11 (cal) Japanese calendar unit test system should avoid multiple static imports PSU JDK-6445283 11, 17 ProgressMonitorInputStream not large file aware (>2GB) PSU JDK-6528710 8 sRGB-ColorSpace to sRGB-ColorSpace Conversion PSU JDK-8026393 11 jarsigner never shows a warning in badKeyUsage case PSU JDK-8029995 8 accept yes/no for boolean krb5.conf settings PSU JDK-8038244 21 (fs) Check return value of malloc in Java_sun_nio_fs_AixNativeDispatcher_getmntctl() PSU JDK-8041447 11, 17 Test javax/swing/dnd/7171812/bug7171812.java fails with java.lang.RuntimeException: Test failed, scroll on drag doesn’t work PSU JDK-8053479 11 (dc) DatagramChannel.read() throws exception instead of discarding data when buffer too small PSU JDK-8061729 17 Update java/net tests to eliminate dependency on sun.net.www.MessageHeader and some other internal APIs PSU JDK-8067250 11 [mlvm] vm/mlvm/mixed/stress/regression/b6969574 fails and perf regression PSU JDK-8153090 11 TAB key cannot change input focus after the radio button in the Color Selection dialog PSU JDK-8161536 17, 21 sun/security/pkcs11/sslecc/ClientJSSEServerJSSE.java fails with ProviderException PSU JDK-8168408 11 Test java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowBlockingTest.java fails intermittentently on windows PSU JDK-8168469 17 Memory leak in JceSecurity PSU JDK-8176567 17 nsk/jdi/ReferenceType/instances/instances002: TestFailure: Unexpected size of referenceType.instances(nsk.share.jdi.TestInterfaceImplementer1): 11, expected: 10 PSU JDK-8183374 11 Refactor java/lang/Runtime shell tests to java PSU JDK-8185531 11 [TESTBUG] Improve test configuration for shared strings PSU JDK-8193543 17 Regression automated test '/open/test/jdk/java/awt/TrayIcon/SystemTrayInstance/SystemTrayInstanceTest.java' fails PSU JDK-8195589 11 T6587786.java failed after JDK-8189997 PSU JDK-8197825 11 [Test] Intermittent timeout with javax/swing JColorChooser Test PSU JDK-8198668 17 MemoryPoolMBean/isUsageThresholdExceeded/isexceeded001/TestDescription.java still failing PSU JDK-8202790 17 DnD test DisposeFrameOnDragTest.java does not clean up PSU JDK-8202931 17 [macos] java/awt/Choice/ChoicePopupLocation/ChoicePopupLocation.java fails PSU JDK-8205467 11 javax/management/remote/mandatory/connection/MultiThreadDeadLockTest.java possible deadlock PSU JDK-8207166 11, 17 jdk/jshell/JdiHangingLaunchExecutionControlTest.java - launch timeout PSU JDK-8207404 8 MulticastSocket tests failing on AIX PSU JDK-8209115 8 adjust libsplashscreen linux ppc64le builds for easier libpng update PSU JDK-8210168 11 JCK test .vm.classfmt.ins.code002.code00201m1.code__00201m1 hangs with -noverify PSU JDK-8210265 11 Crash in HSpaceCounters::update_used() PSU JDK-8211045 11 [Testbug] Fix for 8144279 didn’t define a test case! PSU JDK-8212677 8 X11 default visual support for IM status window on VNC PSU JDK-8212997 11 [TESTBUG] Remove defmeth tests for class file versions 50 and 51 PSU JDK-8213898 11 CDS dumping of springboot asserts in G1ArchiveAllocator::alloc_new_region PSU JDK-8214694 11 cleanup rawtypes warnings in open jndi tests PSU JDK-8217329 11 JTREG: Clean up, remove unused imports in gc folder PSU JDK-8218178 11 vmTestbase/vm/mlvm/mixed/stress/regression/b6969574/INDIFY_Test.java fails with -Xcomp PSU JDK-8219652 21 [aix] Tests failing with JNI attach problems. PSU JDK-8220083 11 Remove hard-coded 127.0.0.1 loopback address in JDK networking tests PSU JDK-8221396 11 Clean up serviceability/sa/TestUniverse.java PSU JDK-8223145 11 Replace wildcard address with loopback or local host in tests - part 1 PSU JDK-8223788 11 [macos] JSpinner buttons in JColorChooser dialog may capture focus using TAB Key. PSU JDK-8224035 11 Replace wildcard address with loopback or local host in tests - part 9 PSU JDK-8224204 11 Replace wildcard address with loopback or local host in tests - part 10 PSU JDK-8225313 17 serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorStatObjectCorrectnessTest.java failed with Unexpected high difference percentage PSU JDK-8225377 21 type annotations are not visible to javac plugins across compilation boundaries PSU JDK-8226825 11 Replace wildcard address with loopback or local host in tests - part 19 PSU JDK-8228990 17 JFR: TestNetworkUtilizationEvent.java expects 2+ Network interfaces on Linux but finding 1 PSU JDK-8230435 11 Replace wildcard address with loopback or local host in tests - part 22 PSU JDK-8230858 11 Replace wildcard address with loopback or local host in tests - part 23 PSU JDK-8231556 11 Wrong font ligatures used when 2 versions of same font used PSU JDK-8231931 11 [TESTBUG] serviceability/sa/TestUniverse.java looks for wrong string with Shenandoah PSU JDK-8232135 11 Add diagnostic output to test java/util/ProcessBuilder/Basic.java PSU JDK-8232513 11 java/net/DatagramSocket/PortUnreachable.java still fails intermittently with BindException PSU JDK-8232839 17, 21 JDI AfterThreadDeathTest.java failed due to \"FAILED: Did not get expected IllegalThreadStateException on a StepRequest.enable()\" PSU JDK-8232933 11, 17 Javac inferred type does not conform to equality constraint PSU JDK-8233000 11 Mark vmTestbase/vm/mlvm/meth/stress/compiler/deoptimize test as stress test PSU JDK-8233847 11 (sctp) Flx link-local IPv6 scope handling and test cleanup. PSU JDK-8237858 11 PlainSocketImpl.socketAccept() handles EINTR incorrectly PSU JDK-8238740 11 java/net/httpclient/whitebox/FlowTestDriver.java should not specify a TLS protocol PSU JDK-8239365 8 ProcessBuilder test modifications for AIX execution PSU JDK-8239801 17 [macos] java/awt/Focus/UnaccessibleChoice/AccessibleChoiceTest.java fails PSU JDK-8240235 11 jdk.test.lib.util.JarUtils updates jar files incorrectly PSU JDK-8240604 11 Rewrite sun/management/jmxremote/bootstrap/CustomLauncherTest.java test to make binaries from source file PSU JDK-8240754 11 Instrument FlowTest.java to provide more debug traces. PSU JDK-8242330 8, 11 Arrays should be cloned in several JAAS Callback classes PSU JDK-8244289 17 fatal error: Possible safepoint reached by thread that does not allow it PSU JDK-8244508 11 JFR: FlightRecorderOptions reset date format PSU JDK-8247351 17 [aarch64] NullPointerException during stack walking (clhsdb \"where -a\") PSU JDK-8249812 11 java/net/DatagramSocket/PortUnreachable.java still fails intermittently with SocketTimeoutException PSU JDK-8249826 17 5 javax/net/ssl/SSLEngine tests use @ignore w/o bug-id PSU JDK-8251177 11 [macosx] The text \"big\" is truncated in JTabbedPane PSU JDK-8252713 11 jtreg time out of CtrlASCII.java seems to hang the Xserver. PSU JDK-8254711 11 Add java.security.Provider.getService JFR Event PSU JDK-8255548 11 Missing coverage for javax.xml.crypto.dom.DOMCryptoContext PSU JDK-8258914 11 javax/net/ssl/DTLS/RespondToRetransmit.java timed out PSU JDK-8258951 17 java/net/httpclient/HandshakeFailureTest.java failed with \"RuntimeException: Not found expected SSLHandshakeException in java.io.IOException\" PSU JDK-8259266 11 com/sun/jdi/JdbOptions.java failed with \"RuntimeException: 'prop[boo] = >foo 2<' missing from stdout/stderr\" PSU JDK-8260035 11 Deproblemlist few problemlisted test PSU JDK-8260431 11 com/sun/jdi/JdbOptions.java failed with \"RuntimeException: 'prop[boo] = >foo<' missing from stdout/stderr\" PSU JDK-8262186 17 Call X509KeyManager.chooseClientAlias once for all key types PSU JDK-8262901 17 [macos_aarch64] NativeCallTest expected:←3.8194101E18> but was:<3.02668882E10> PSU JDK-8263530 11 sun.awt.X11.ListHelper.removeAll() should use clear() PSU JDK-8265586 11, 17 [windows] last button is not shown in AWT Frame with BorderLayout and MenuBar set. PSU JDK-8265678 11 Test java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowBlockingTest.java fails intermittentently on windows PSU JDK-8266249 11 javax/swing/JPopupMenu/7156657/bug7156657.java fails on macOS PSU JDK-8266593 17 vmTestbase/nsk/jvmti/PopFrame/popframe011 fails with \"assert(java_thread == _state→get_thread()) failed: Must be\" PSU JDK-8267502 21 JDK-8246677 caused 16x performance regression in SynchronousQueue PSU JDK-8267509 21 Improve IllegalAccessException message to include the cause of the exception PSU JDK-8267860 11 Off-by-one bug when searching arrays in AlpnGreaseTest PSU JDK-8268433 17 serviceability/dcmd/framework/VMVersionTest.java fails with Unable to send object throw not established PipeIO Listener Thread connection PSU JDK-8268916 11, 17, 21 Tests for AffirmTrust roots PSU JDK-8269425 17 2 jdk/jfr/api/consumer/streaming tests failed to attach PSU JDK-8270199 17 Most SA tests are skipped on macosx-aarch64 because all executables are signed PSU JDK-8270447 17 [IR Framework] Add missing compilation level restriction when using FlipC1C2 stress option PSU JDK-8271073 17 Improve testing with VM option VerifyArchivedFields PSU JDK-8271519 11 java/awt/event/SequencedEvent/MultipleContextsFunctionalTest.java failed with \"Total [200] - Expected [400]\" PSU JDK-8271566 17 DSA signature length value is not accurate in P11Signature PSU JDK-8271824 17 mark hotspot runtime/CompressedOops tests which ignore external VM flags PSU JDK-8271826 17 mark hotspot runtime/condy tests which ignore external VM flags PSU JDK-8271828 17 mark hotspot runtime/classFileParserBug tests which ignore external VM flags PSU JDK-8271829 17 mark hotspot runtime/Throwable tests which ignore external VM flags PSU JDK-8271838 8 AmazonCA.java interop test fails PSU JDK-8271886 17 mark hotspot runtime/InvocationTests tests which ignore external VM flags PSU JDK-8271887 17 mark hotspot runtime/CDSCompressedKPtrs tests which ignore external VM flags PSU JDK-8271890 17 mark hotspot runtime/Dictionary tests which ignore external VM flags PSU JDK-8271891 17 mark hotspot runtime/Safepoint tests which ignore external VM flags PSU JDK-8271892 17 mark hotspot runtime/PrintStringTableStats/PrintStringTableStatsTest.java test as ignoring external VM flags PSU JDK-8271893 17 mark hotspot runtime/PerfMemDestroy/PerfMemDestroy.java test as ignoring external VM flags PSU JDK-8271904 17 mark hotspot runtime/ClassFile tests which ignore external VM flags PSU JDK-8271905 17 mark hotspot runtime/Metaspace tests which ignore external VM flags PSU JDK-8272099 17 mark hotspot runtime/Monitor tests which ignore external VM flags PSU JDK-8272291 17 mark hotspot runtime/logging tests which ignore external VM flags PSU JDK-8272551 17 mark hotspot runtime/modules tests which ignore external VM flags PSU JDK-8272552 17 mark hotspot runtime/cds tests which ignore external VM flags PSU JDK-8272998 17 ImageIO.read() throws incorrect exception type PSU JDK-8273456 17 Do not hold ttyLock around stack walking PSU JDK-8273522 17 Rename test property vm.cds.archived.java.heap to vm.cds.write.archived.java.heap PSU JDK-8273629 17 compiler/uncommontrap/TestDeoptOOM.java fails with release VMs PSU JDK-8273804 11 Platform.isTieredSupported should handle the no-compiler case PSU JDK-8273831 17 PrintServiceLookup spawns 2 threads in the current classloader, getting orphaned PSU JDK-8273921 17 Refactor NSK/JDI tests to create thread using factory PSU JDK-8274211 17 Test man page that options are documented PSU JDK-8275329 11, 17 ZGC: vmTestbase/gc/gctests/SoftReference/soft004/soft004.java fails with assert(_phases→length() ⇐ 1000) failed: Too many recored phases? PSU JDK-8275333 11, 17 Print count in \"Too many recored phases?\" assert PSU JDK-8275440 17 Remove VirtualSpaceList::is_full() PSU JDK-8275509 17 ModuleDescriptor.hashCode isn’t reproducible across builds PSU JDK-8276036 17 The value of full_count in the message of insufficient codecache is wrong PSU JDK-8276054 17 JMH benchmarks for Fences PSU JDK-8276711 17 compiler/codecache/cli tests failing when SegmentedCodeCache used with -Xint PSU JDK-8276819 17 javax/print/PrintServiceLookup/FlushCustomClassLoader.java fails to free PSU JDK-8277307 17 Pre shared key sent under both session_ticket and pre_shared_key extensions PSU JDK-8278456 11 Define jtreg jdk_desktop test group time-based sub-tasks for use by headful testing. PSU JDK-8279856 17 Parallel: Use PreservedMarks to record promotion-failed objects PSU JDK-8280004 11 DCmdArgument<jlong>::parse_value() should handle NULL input PSU JDK-8281015 17 Further simplify NMT backend PSU JDK-8281149 17 (fs) java/nio/file/FileStore/Basic.java fails with java.lang.RuntimeException: values differ by more than 1GB PSU JDK-8281874 17 Can’t unpack msi installers from test/jdk/tools/jpackage/windows/test/jdk/tools/jpackage/windows/WinShortcutPromptTest.java test PSU JDK-8282011 17 test/jdk/tools/jpackage/windows/WinL10nTest.java test fails if light.exe is not in %PATH% PSU JDK-8282017 17 sun/net/www/protocol/https/HttpsURLConnection/B6216082.java fails with \"SocketException: Unexpected end of file from server\" PSU JDK-8282143 11 Objects.requireNonNull should be ForceInline PSU JDK-8282404 11 DrawStringWithInfiniteXform.java failed with \"RuntimeException: drawString with InfiniteXform transform takes long time\" PSU JDK-8283441 8 C2: segmentation fault in ciMethodBlocks::make_block_at(int) PSU JDK-8283670 17 gtest os.release_multi_mappings_vm is still racy PSU JDK-8284047 17 Harmonize/Standardize the SSLSocket/SSLEngine/SSLSocketSSLEngine test templates PSU JDK-8284331 11 Add sanity check for signal handler modification warning. PSU JDK-8284910 8, 11, 17 Buffer clean in PasswordCallback PSU JDK-8285398 8 Cache the results of constraint checks PSU JDK-8285516 17 clearPassword should be called in a finally try block PSU JDK-8285612 11 Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/ImagePrinting/ClippedImages.java PSU JDK-8285687 11 Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/PageRangesDlgTest.java PSU JDK-8285696 8 AlgorithmConstraints:permits not throwing IllegalArgumentException when 'alg' is null PSU JDK-8285785 17 CheckCleanerBound test fails with PasswordCallback object is not released PSU JDK-8285867 17 Convert applet manual tests SelectionVisible.java to Frame and automate PSU JDK-8286473 17 Drop --enable-preview from Record related tests PSU JDK-8286474 17 Drop --enable-preview from Sealed Classes related tests PSU JDK-8286475 17 Drop --enable-preview from instanceof pattern matching related tests PSU JDK-8286503 8, 11, 17, 21 Enhance security classes PSU JDK-8286707 11 JFR: Don’t commit JFR internal jdk.JavaMonitorWait events PSU JDK-8286969 17 Add a new test library API to execute kinit in SecurityTools.java PSU JDK-8287596 17 Reorg jdk.test.lib.util.ForceGC PSU JDK-8287671 17 Adjust ForceGC to invoke System::gc fewer times for negative case PSU JDK-8287867 17 Bad merge of jdk/test/lib/util/ForceGC.java causing test compilation error PSU JDK-8288325 11, 17 [windows] Actual and Preferred Size of AWT Non-resizable frame are different PSU JDK-8288415 11 java/awt/PopupMenu/PopupMenuLocation.java is unstable in MacOS machines PSU JDK-8288961 17 jpackage: test MSI installation fix PSU JDK-8288993 11, 17 Make AwtFramePackTest generic by removing @requires tag PSU JDK-8289077 11 Add manual tests to open PSU JDK-8289238 11 Refactoring changes to PassFailJFrame Test Framework PSU JDK-8289547 11 Update javax/swing/Popup/TaskbarPositionTest.java PSU JDK-8289584 11, 17 (fs) Print size values in java/nio/file/FileStore/Basic.java when they differ by > 1GiB PSU JDK-8289745 11, 17 JfrStructCopyFailed uses heap words instead of bytes for object sizes PSU JDK-8289917 11 Metadata for regionsRefilled of G1EvacuationStatistics event is wrong PSU JDK-8290067 11 Show stack dimensions in UL logging when attaching threads PSU JDK-8290469 11 Add new positioning options to PassFailJFrame test framework PSU JDK-8290909 17 MemoryPoolMBean/isUsageThresholdExceeded tests failed with \"isUsageThresholdExceeded() returned false, and is still false, while threshold = MMMMMMM and used peak = NNNNNNN\" PSU JDK-8291154 17 Create a non static nested class without enclosing class throws VerifyError PSU JDK-8291550 17 RISC-V: jdk uses misaligned memory access when AvoidUnalignedAccess enabled PSU JDK-8291911 17 java/io/File/GetXSpace.java fails with \"53687091200 != 161051996160\" PSU JDK-8292067 17 Convert test/sun/management/jmxremote/bootstrap shell tests to java version PSU JDK-8292072 17 NMT: repurpose Tracking overhead counter as global malloc counter PSU JDK-8292261 17 adjust timeouts in JLI GetObjectSizeIntrinsicsTest.java PSU JDK-8292381 17 java/net/httpclient/SpecialHeadersTest.java fails with \"ERROR: Shutting down connection: HTTP/2 client stopped\" PSU JDK-8292407 11 Improve Weak CAS VarHandle/Unsafe tests resilience under spurious failures PSU JDK-8292636 17 (dc) Problem listing of java/nio/channels/DatagramChannel/Unref.java has incorrect issue ID PSU JDK-8292683 11 Remove BadKeyUsageTest.java from Problem List PSU JDK-8292713 11 Unsafe.allocateInstance should be intrinsified without UseUnalignedAccesses PSU JDK-8293156 17 Dcmd VM.classloaders fails to print the full hierarchy PSU JDK-8293166 11 jdk/jfr/jvm/TestDumpOnCrash.java fails on Linux ppc64le and Linux aarch64 PSU JDK-8293335 17 sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1failed with \"Agent communication error: java.io.EOFException\" PSU JDK-8293343 17 sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java failed with \"Agent communication error: java.io.EOFException\" PSU JDK-8293466 11 libjsig should ignore non-modifying sigaction calls PSU JDK-8293563 17 [macos-aarch64] SA core file tests failing with sun.jvm.hotspot.oops.UnknownOopException PSU JDK-8293579 17 tools/jpackage/share/jdk/jpackage/tests/UnicodeArgsTest.java fails on Japanese Windows platform PSU JDK-8293811 11 Provide a reason for PassFailJFrame.forceFail PSU JDK-8294156 21 Allow PassFailJFrame.Builder to create test UI PSU JDK-8294158 21 HTML formatting for PassFailJFrame instructions PSU JDK-8294402 17 Add diagnostic logging to VMProps.checkDockerSupport PSU JDK-8294427 11, 17, 21 Check boxes and radio buttons have rendering issues on Windows in High DPI env PSU JDK-8294535 21 Add screen capture functionality to PassFailJFrame PSU JDK-8294673 11 JFR: Add SecurityProviderService#threshold to TestActiveSettingEvent.java PSU JDK-8294881 17 test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java fails PSU JDK-8295068 21 SSLEngine throws NPE parsing CertificateRequests PSU JDK-8295424 17 adjust timeout for another JLI GetObjectSizeIntrinsicsTest.java subtest PSU JDK-8295555 21 Primitive wrapper caches could be @Stable PSU JDK-8295685 8 Update Libpng to 1.6.38 PSU JDK-8296275 11, 17 Write a test to verify setAccelerator method of JMenuItem PSU JDK-8296437 17 NMT incurs costs if disabled PSU JDK-8296581 11, 17 Better system proxy support PSU JDK-8296821 17 compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/NativeCallTest.java fails after JDK-8262901 PSU JDK-8297142 17 jdk/jfr/event/runtime/TestShutdown.java fails on Linux ppc64le and Linux aarch64 PSU JDK-8297296 11, 17 java/awt/Mouse/EnterExitEvents/DragWindowTest.java fails with \"No MouseReleased event on label!\" PSU JDK-8297367 17 disable TestRedirectLinks.java in slowdebug mode PSU JDK-8297640 11, 17 Increase buffer size for buf (insert_features_names) in Abstract_VM_Version::insert_features_names PSU JDK-8297798 17 Timeout with DTLSOverDatagram test template PSU JDK-8297856 8, 11, 17 Improve handling of Bidi characters PSU JDK-8297958 17 NMT: Display peak values PSU JDK-8298298 17 NMT: count deltas are printed with 32-bit signed size PSU JDK-8298619 17 java/io/File/GetXSpace.java is failing PSU JDK-8298735 17 Some tools/jpackage/windows/* tests fails with jtreg test timeout PSU JDK-8298867 17 Basics.java fails with SSL handshake exception PSU JDK-8298868 17 Update EngineCloseOnAlert.java for changes to TLS implementation PSU JDK-8298869 17 Update ConnectionTest.java for changes to TLS implementation PSU JDK-8298872 17 Update CheckStatus.java for changes to TLS implementation PSU JDK-8298873 17 Update IllegalRecordVersion.java for changes to TLS implementation PSU JDK-8298874 17 Update TestAllSuites.java for TLS v1.2 and 1.3 PSU JDK-8298905 11, 17 Test \"java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java\" fails because the frames of instruction does not display PSU JDK-8298974 11, 17 Add ftcolor.c to imported freetype sources PSU JDK-8299075 17 TestStringDeduplicationInterned.java fails because extra deduplication PSU JDK-8299207 17 [Testbug] Add back test/jdk/java/awt/Graphics2D/DrawPrimitivesTest.java PSU JDK-8299241 17 jdk/jfr/api/consumer/streaming/TestJVMCrash.java generates unnecessary core file PSU JDK-8299255 11, 17 Unexpected round errors in FreetypeFontScaler PSU JDK-8299614 21 Shenandoah: STW mark should keep nmethod/oops referenced from stack chunk alive PSU JDK-8299677 17 Formatter.format might take a long time to format an integer or floating-point PSU JDK-8299748 17 java/util/zip/Deinflate.java failing on s390x PSU JDK-8300259 11, 17 Add test coverage for processing of pending block files in signed JARs PSU JDK-8300272 11, 17 Improve readability of the test JarWithOneNonDisabledDigestAlg PSU JDK-8300405 11 Screen capture for test JFileChooserSetLocationTest.java, failure case PSU JDK-8300663 21 java/util/concurrent/SynchronousQueue/Fairness.java failed with \"Error: fair=true i=0 j=1\" PSU JDK-8300727 17 java/awt/List/ListGarbageCollectionTest/AwtListGarbageCollectionTest.java failed with \"List wasn’t garbage collected\" PSU JDK-8301065 11, 17 Handle control characters in java_lang_String::print PSU JDK-8301167 11 Update VerifySignedJar to actually exercise and test verification PSU JDK-8301189 17 validate-source fails after JDK-8298873 PSU JDK-8301247 17, 21 JPackage app-image exe launches multiple exe’s in JDK 17+ PSU JDK-8301341 21 LinkedTransferQueue does not respect timeout for poll() PSU JDK-8301377 17 adjust timeout for JLI GetObjectSizeIntrinsicsTest.java subtest again PSU JDK-8301455 17 comments in TestTypeAnnotations still refer to resolved JDK-8068737 PSU JDK-8301457 17, 21 Code in SendPortZero.java is uncommented even after JDK-8236852 was fixed PSU JDK-8301489 17, 21 C1: ShortLoopOptimizer might lift instructions before their inputs PSU JDK-8301570 11, 17 Test runtime/jni/nativeStack/ needs to detach the native thread PSU JDK-8301701 17 java/net/DatagramSocket/DatagramSocketMulticasting.java should be hardened PSU JDK-8301846 21 Invalid TargetDataLine after screen lock when using JFileChooser or COM library PSU JDK-8302109 17 Trivial fixes to btree tests PSU JDK-8302525 11, 17 Write a test to check various components send Events while mouse and key are used simultaneously PSU JDK-8302607 17 increase timeout for ContinuousCallSiteTargetChange.java PSU JDK-8303384 8 Improved communication in CORBA PSU JDK-8303607 11, 17 SunMSCAPI provider leaks memory and keys PSU JDK-8303737 21 C2: Load can bypass subtype check that enforces it’s from the right object type PSU JDK-8304174 17 Remove delays from httpserver tests PSU JDK-8304954 17 SegmentedCodeCache fails when using large pages PSU JDK-8305502 17 adjust timeouts in three more M&M tests PSU JDK-8305505 17 NPE in javazic compiler PSU JDK-8305646 17 compile error on Alpine with gcc12 after 8298619 in libGetXSpace.c PSU JDK-8305815 8, 11, 17 Update Libpng to 1.6.39 PSU JDK-8306134 11 Open source some AWT tests relating to Button and a few other classes PSU JDK-8306135 11 Clean up and open source some AWT tests PSU JDK-8306280 11, 17 Open source several choice AWT tests PSU JDK-8306372 11 Open source AWT CardLayout and Checkbox tests PSU JDK-8306430 11 Open source some AWT tests related to TextComponent and Toolkit PSU JDK-8306561 21 gtest/NMTGtests.java#nmt crashes with SIGSEGV on AIX PSU JDK-8306575 11 Clean up and open source four Dialog related tests PSU JDK-8306765 11 Some client related jtreg problem list entries are malformed PSU JDK-8306881 8, 11, 17 Update FreeType to 2.13.0 PSU JDK-8306883 11 Thread stacksize is reported with wrong units in os::create_thread logging PSU JDK-8307079 11 Update test java/awt/Choice/DragOffNoSelect.java PSU JDK-8307123 17 Fix deprecation warnings in DPrinter PSU JDK-8307165 11 java/awt/dnd/NoFormatsDropTest/NoFormatsDropTest.java timed out PSU JDK-8307278 8, 11, 17, 21 Upgrade Libpng PSU JDK-8307286 8, 11, 17, 21 Upgrade FreeType PSU JDK-8307311 17 Timeouts on one macOS 12.6.1 host of two Swing JTableHeader tests PSU JDK-8307403 17 java/util/zip/DeInflate.java timed out PSU JDK-8308047 17 java/util/concurrent/ScheduledThreadPoolExecutor/BasicCancelTest.java timed out and also had jcmd pipe errors PSU JDK-8308103 17, 21 Massive (up to ~30x) increase in C2 compilation time since JDK 17 PSU JDK-8308116 17 jdk.test.lib.compiler.InMemoryJavaCompiler.compile does not close files PSU JDK-8308223 17 failure handler missed jcmd.vm.info command PSU JDK-8308452 21 Extend internal Architecture enum with byte order and address size PSU JDK-8308479 21 [s390x] Implement alternative fast-locking scheme PSU JDK-8308592 11, 17, 21 Framework for CA interoperability testing PSU JDK-8308593 17, 21 Add KEEPALIVE Extended Socket Options Support for Windows PSU JDK-8308910 11, 17 Allow executeAndLog to accept running process PSU JDK-8309032 17 jpackage does not work for module projects unless --module-path is specified PSU JDK-8309088 8 security/infra/java/security/cert/CertPathValidator/certification/AmazonCA.java fails PSU JDK-8309095 11 Remove UTF-8 character from TaskbarPositionTest.java PSU JDK-8309104 17 [JVMCI] compiler/unsafe/UnsafeGetStableArrayElement test asserts wrong values with Graal PSU JDK-8309209 21 C2 failed \"assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state\" PSU JDK-8309216 17 Cast from jchar* to char* in test java/io/GetXSpace.java PSU JDK-8309258 17 RISC-V: Add riscv_hwprobe syscall PSU JDK-8309305 21 sun/security/ssl/SSLSocketImpl/BlockedAsyncClose.java fails with jtreg test timeout PSU JDK-8309502 17 RISC-V: String.indexOf intrinsic may produce misaligned memory loads PSU JDK-8309545 21 Thread.interrupted from virtual thread needlessly resets interrupt status PSU JDK-8309663 21 test fails \"assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe\" PSU JDK-8309778 17, 21 java/nio/file/Files/CopyAndMove.java fails when using second test directory PSU JDK-8309966 8, 11, 17, 21 Enhanced TLS connections PSU JDK-8309974 17, 21 some JVMCI tests fail when VM options include -XX:+EnableJVMCI PSU JDK-8310233 17 Fix THP detection on Linux PSU JDK-8310239 21 Add missing cross modifying fence in nmethod entry barriers PSU JDK-8310265 11, 17 (process) jspawnhelper should not use argv[0] PSU JDK-8310268 17 RISC-V: misaligned memory access in String.Compare intrinsic PSU JDK-8310512 21 Cleanup indentation in jfc files PSU JDK-8310549 11 avoid potential leaks in KeystoreImpl.m related to JNU_CHECK_EXCEPTION early returns PSU JDK-8310596 21 Utilize existing method frame::interpreter_frame_monitor_size_in_bytes() PSU JDK-8310656 17 RISC-V: builtin_clear_cache can fail silently. PSU JDK-8310687 17 JDK-8303215 is incomplete PSU JDK-8310982 21 jdk/internal/util/ArchTest.java fails after JDK-8308452 failed with Method isARM() PSU JDK-8311261 21 [AIX] TestAlwaysPreTouchStacks.java fails due to java.lang.RuntimeException: Did not find expected NMT output PSU JDK-8311285 11 report some fontconfig related environment variables in hs_err file PSU JDK-8311511 17 Improve description of NativeLibrary JFR event PSU JDK-8311514 17, 21 Incorrect regex in TestMetaSpaceLog.java PSU JDK-8311585 17, 21 Add JRadioButtonMenuItem to bug8031573.java PSU JDK-8311591 21 Add SystemModulesPlugin test case that splits module descriptors with new local variables defined by DedupSetBuilder PSU JDK-8311592 17 ECKeySizeParameterSpec causes too many exceptions on third party providers PSU JDK-8311630 21 [s390] Implementation of Foreign Function & Memory API (Preview) PSU JDK-8311631 17, 21 When multiple users run tools/jpackage/share/LicenseTest.java, Permission denied for writing /var/tmp/*.files PSU JDK-8311680 21 Update the release version after forking Oct CPU23_10 PSU JDK-8311681 21 Update the Jan CPU24_01 release date in master branch after forking Oct CPU23_10 PSU JDK-8311813 8, 11, 17, 21 C1: Uninitialized PhiResolver::_loop field PSU JDK-8312065 11, 17 Socket.connect does not timeout when profiling PSU JDK-8312078 17, 21 [PPC] JcmdScale.java Failing on AIX PSU JDK-8312126 11, 17, 21 NullPointerException in CertStore.getCRLs after 8297955 PSU JDK-8312166 21 (dc) DatagramChannel’s socket adaptor does not release carrier thread when blocking in receive PSU JDK-8312174 21 missing JVMTI events from vthreads parked during JVMTI attach PSU JDK-8312182 17 THPs cause huge RSS due to thread start timing issue PSU JDK-8312191 21 ColorConvertOp.filter for the default destination is too slow PSU JDK-8312248 17, 21 Enhanced archival support redux PSU JDK-8312367 8, 11, 17, 21 Enhance security classes PSU JDK-8312394 17 [linux] SIGSEGV if kernel was built without hugepage support PSU JDK-8312395 17 Improve assertions in growableArray PSU JDK-8312433 21 HttpClient request fails due to connection being considered idle and closed PSU JDK-8312434 21 SPECjvm2008/xml.transform with CDS fails with \"can’t seal package nu.xom\" PSU JDK-8312440 17, 21 assert(cast != nullptr) failed: must have added a cast to pin the node PSU JDK-8312489 8, 11, 17 Increase jdk.jar.maxSignatureFileSize default which is too low for JARs such as WhiteSource/Mend unified agent jar PSU JDK-8312535 8, 11, 17 MidiSystem.getSoundbank() throws unexpected SecurityException PSU JDK-8312573 11, 17 Failure during CompileOnly parsing leads to ShouldNotReachHere PSU JDK-8312585 17 Rename DisableTHPStackMitigation flag to THPStackMitigation PSU JDK-8312592 17, 21 New parentheses warnings after HarfBuzz 7.2.0 update PSU JDK-8312612 17, 21 Handle WideCharToMultiByte return values PSU JDK-8312620 17 WSL Linux build crashes after JDK-8310233 PSU JDK-8312625 17 Test serviceability/dcmd/vm/TrimLibcHeapTest.java failed: RSS use increased PSU JDK-8312909 17 C1 should not inline through interface calls with non-subtype receiver PSU JDK-8313164 17, 21 src/java.desktop/windows/native/libawt/windows/awt_Robot.cpp GetRGBPixels adjust releasing of resources PSU JDK-8313206 21 PKCS11 tests silently skip execution PSU JDK-8313252 17, 21 Java_sun_awt_windows_ThemeReader_paintBackground release resources in early returns PSU JDK-8313322 17, 21 RISC-V: implement MD5 intrinsic PSU JDK-8313368 21 (fc) FileChannel.size returns 0 on block special files PSU JDK-8313575 21 Refactor PKCS11Test tests PSU JDK-8313576 11, 17 GCC 7 reports compiler warning in bundled freetype 2.13.0 PSU JDK-8313616 21 support loading library members on AIX in os::dll_load PSU JDK-8313626 11, 17 C2 crash due to unexpected exception control flow PSU JDK-8313643 21 Update HarfBuzz to 8.2.2 PSU JDK-8313656 21 assert(!JvmtiExport::can_support_virtual_threads()) with -XX:-DoJVMTIVirtualThreadTransitions PSU JDK-8313657 11, 17 com.sun.jndi.ldap.Connection.cleanup does not close connections on SocketTimeoutErrors PSU JDK-8313691 11, 17 use close after failing os::fdopen in vmError and ciEnv PSU JDK-8313756 21 [BACKOUT] 8308682: Enhance AES performance PSU JDK-8313760 21 [REDO] Enhance AES performance PSU JDK-8313779 17, 21 RISC-V: use andn / orn in the MD5 instrinsic PSU JDK-8313781 17, 21 Add regression tests for large page logging and user-facing error messages PSU JDK-8313782 17, 21 Add user-facing warning if THPs are enabled but cannot be used PSU JDK-8313792 11, 17, 21 Verify 4th party information in src/jdk.internal.le/share/legal/jline.md PSU JDK-8313815 11 The exception messages printed by jcmd ManagementAgent.start are corrupted on Japanese Windows PSU JDK-8313873 21 java/nio/channels/DatagramChannel/SendReceiveMaxSize.java fails on AIX due to small default RCVBUF size and different IPv6 Header interpretation PSU JDK-8314045 17, 21 ArithmeticException in GaloisCounterMode PSU JDK-8314063 11, 17 The socket is not closed in Connection::createSocket when the handshake failed for LDAP connection PSU JDK-8314094 11, 17, 21 java/lang/ProcessHandle/InfoTest.java fails on Windows when run as user with Administrator privileges PSU JDK-8314120 21 Add tests for FileDescriptor.sync PSU JDK-8314121 17, 21 test tools/jpackage/share/RuntimePackageTest.java#id0 fails on RHEL8 PSU JDK-8314139 17 TEST_BUG: runtime/os/THPsInThreadStackPreventionTest.java could fail on machine with large number of cores PSU JDK-8314144 17 gc/g1/ihop/TestIHOPStatic.java fails due to extra concurrent mark with -Xcomp PSU JDK-8314191 21 C2 compilation fails with \"bad AD file\" PSU JDK-8314226 21 Series of colon-style fallthrough switch cases with guards compiled incorrectly PSU JDK-8314242 11, 17, 21 Update applications/scimark/Scimark.java to accept VM flags PSU JDK-8314246 21 javax/swing/JToolBar/4529206/bug4529206.java fails intermittently on Linux PSU JDK-8314263 11, 17, 21 Signed jars triggering Logger finder recursion and StackOverflowError PSU JDK-8314330 21 java/foreign tests should respect vm flags when start new processes PSU JDK-8314476 21 TestJstatdPortAndServer.java failed with \"java.rmi.NoSuchObjectException: no such object in table\" PSU JDK-8314551 21 More generic way to handshake GC threads with monitor deflation PSU JDK-8314580 21 PhaseIdealLoop::transform_long_range_checks fails with assert \"was tested before\" PSU JDK-8314632 21 Intra-case dominance check fails in the presence of a guard PSU JDK-8314649 17, 21 Enhanced archival support redux PSU JDK-8314679 17 SA fails to properly attach to JVM after having just detached from a different JVM PSU JDK-8314759 21 VirtualThread.parkNanos timeout adjustment when pinned should be replaced PSU JDK-8314883 17, 21 Java_java_util_prefs_FileSystemPreferences_lockFile0 write result errno in missing case PSU JDK-8314935 21 Shenandoah: Unable to throw OOME on back-to-back Full GCs PSU JDK-8315026 21 java/lang/ProcessHandle/TreeTest.java fails intermittent on AIX in TreeTest.test5 PSU JDK-8315082 21 [REDO] Generational ZGC: Tests crash with assert(index == 0 || is_power_of_2(index)) PSU JDK-8315088 21 C2: assert(wq.size() - before == EMPTY_LOOP_SIZE) failed: expect the EMPTY_LOOP_SIZE nodes of this body if empty PSU JDK-8315135 8 Memory leak in the native implementation of Pack200.Unpacker.unpack() PSU JDK-8315195 17, 21 RISC-V: Update hwprobe query for new extensions PSU JDK-8315206 17, 21 RISC-V: hwprobe query is_set return wrong value PSU JDK-8315213 21 java/lang/ProcessHandle/TreeTest.java test enhance output of children PSU JDK-8315214 11, 17, 21 Do not run sun/tools/jhsdb tests concurrently PSU JDK-8315362 21 NMT: summary diff reports threads count incorrectly PSU JDK-8315377 17, 21 C2: assert(u→find_out_with(Op_AddP) == nullptr) failed: more than 2 chained AddP nodes? PSU JDK-8315383 21 jlink SystemModulesPlugin incorrectly parses the options PSU JDK-8315415 17, 21 OutputAnalyzer.shouldMatchByLine() fails in some cases PSU JDK-8315437 21 Enable parallelism in vmTestbase/nsk/monitoring/stress/classload tests PSU JDK-8315442 21 Enable parallelism in vmTestbase/nsk/monitoring/stress/thread tests PSU JDK-8315452 21 Erroneous AST missing modifiers for partial input PSU JDK-8315506 8 C99 compatibility issue in LinuxNativeDispatcher PSU JDK-8315545 21 C1: x86 cmove can use short branches PSU JDK-8315549 17, 21 CITime misreports code/total nmethod sizes PSU JDK-8315554 21 C1: Replace \"cmp reg, 0\" with \"test reg, reg\" on x86 PSU JDK-8315578 21 PPC builds are broken after JDK-8304913 PSU JDK-8315579 21 SPARC64 builds are broken after JDK-8304913 PSU JDK-8315606 17, 21 Open source few swing text/html tests PSU JDK-8315612 21 RISC-V: intrinsic for unsignedMultiplyHigh PSU JDK-8315644 17, 21 increase timeout of sun/security/tools/jarsigner/Warning.java PSU JDK-8315651 21 Stop hiding AIX specific multicast socket errors via NetworkConfiguration (aix) PSU JDK-8315683 11, 17, 21 Parallelize java/util/concurrent/tck/JSR166TestCase.java PSU JDK-8315684 21 Parallelize sun/security/util/math/TestIntegerModuloP.java PSU JDK-8315692 11, 17, 21 Parallelize gc/stress/TestStressRSetCoarsening.java test PSU JDK-8315696 11, 17, 21 SignedLoggerFinderTest.java test failed PSU JDK-8315702 21 jcmd Thread.dump_to_file slow with millions of virtual threads PSU JDK-8315706 21 com/sun/tools/attach/warnings/DynamicLoadWarningTest.java real fix for failure on AIX PSU JDK-8315735 21 VerifyError when switch statement used with synchronized block PSU JDK-8315751 17, 21 RandomTestBsi1999 fails often with timeouts on Linux ppc64le PSU JDK-8315766 11, 17, 21 Parallelize gc/stress/TestStressIHOPMultiThread.java test PSU JDK-8315770 11, 17, 21 serviceability/sa/TestJmapCoreMetaspace.java should run with -XX:-VerifyDependencies PSU JDK-8315774 21 Enable parallelism in vmTestbase/gc/g1/unloading tests PSU JDK-8315862 11 [11u] Backport 8227337: javax/management/remote/mandatory/connection/ReconnectTest.java NoSuchObjectException no such object in table PSU JDK-8315869 21 UseHeavyMonitors not used PSU JDK-8315920 21 C2: \"control input must dominate current control\" assert failure PSU JDK-8315931 21 RISC-V: xxxMaxVectorTestsSmokeTest fails when using RVV PSU JDK-8315936 21 Parallelize gc/stress/TestStressG1Humongous.java test PSU JDK-8315937 11, 17, 21 Enable parallelism in vmTestbase/nsk/stress/numeric tests PSU JDK-8315942 21 Sort platform enums and definitions after JDK-8304913 follow-ups PSU JDK-8315960 21 test/jdk/java/io/File/TempDirDoesNotExist.java leaves test files behind PSU JDK-8315971 21 ProblemList containers/docker/TestMemoryAwareness.java on linux-all PSU JDK-8316003 21 Update FileChooserSymLinkTest.java to HTML instructions PSU JDK-8316017 21 Refactor timeout handler in PassFailJFrame PSU JDK-8316025 21 Use testUI() method of PassFailJFrame.Builder in FileChooserSymLinkTest.java PSU JDK-8316030 21 Update Libpng to 1.6.40 PSU JDK-8316031 21 SSLFlowDelegate should not log from synchronized block PSU JDK-8316060 21 test/hotspot/jtreg/runtime/reflect/ReflectOutOfMemoryError.java may fail if heap is huge PSU JDK-8316087 11, 17, 21 Test SignedLoggerFinderTest.java is still failing PSU JDK-8316113 21 Infinite permission checking loop in java/net/spi/InetAddressResolverProvider/RuntimePermissionTest PSU JDK-8316123 21 ProblemList serviceability/dcmd/gc/RunFinalizationTest.java on AIX PSU JDK-8316130 21 Incorrect control in LibraryCallKit::inline_native_notify_jvmti_funcs PSU JDK-8316142 21 Enable parallelism in vmTestbase/nsk/monitoring/stress/lowmem tests PSU JDK-8316156 21 ByteArrayInputStream.transferTo causes MaxDirectMemorySize overflow PSU JDK-8316178 11, 17, 21 Better diagnostic header for CodeBlobs PSU JDK-8316179 21 Use consistent naming for lightweight locking in MacroAssembler PSU JDK-8316181 21 Move the fast locking implementation out of the .ad files PSU JDK-8316199 21 Remove sun/tools/jstatd/TestJstatd* tests from problemlist for Windows. PSU JDK-8316206 11, 17, 21 Test StretchedFontTest.java fails for Baekmuk font PSU JDK-8316304 21 (fs) Add support for BasicFileAttributes.creationTime() for Linux PSU JDK-8316337 21 (bf) Concurrency issue in DirectByteBuffer.Deallocator PSU JDK-8316341 21 sun/security/pkcs11/PKCS11Test.java needs adjustment on Linux ppc64le Ubuntu 22 PSU JDK-8316380 11 [11u] Backport 8170089: nsk/jdi/EventSet/resume/resume008: ERROR: suspendCounts don’t match for : Common-Cleaner PSU JDK-8316387 21 Exclude more failing multicast tests on AIX after JDK-8315651 PSU JDK-8316396 21 Endless loop in C2 compilation triggered by AddNode::IdealIL PSU JDK-8316399 21 Exclude java/net/MulticastSocket/Promiscuous.java on AIX PSU JDK-8316400 21 Exclude jdk/jfr/event/runtime/TestResidentSetSizeEvent.java on AIX PSU JDK-8316401 21 sun/tools/jhsdb/JStackStressTest.java failed with \"InternalError: We should have found a thread that owns the anonymous lock\" PSU JDK-8316411 21 compiler/compilercontrol/TestConflictInlineCommands.java fails intermittent with force inline by CompileCommand missing PSU JDK-8316414 21 C2: large byte array clone triggers \"failed: malformed control flow\" assertion failure on linux-x86 PSU JDK-8316415 21 Parallelize sun/security/rsa/SignedObjectChain.java subtests PSU JDK-8316418 21 containers/docker/TestMemoryWithCgroupV1.java get OOM killed with Parallel GC PSU JDK-8316436 21 ContinuationWrapper uses unhandled nullptr oop PSU JDK-8316468 21 os::write incorrectly handles partial write PSU JDK-8316514 11, 17, 21 Better diagnostic header for VtableStub PSU JDK-8316540 21 StoreReproducibilityTest fails on some locales PSU JDK-8316566 21 RISC-V: Zero extended narrow oop passed to Atomic::cmpxchg PSU JDK-8316581 21 Improve performance of Symbol::print_value_on() PSU JDK-8316585 21 [REDO] runtime/InvocationTests spend a lot of time on dependency verification PSU JDK-8316645 17, 21 RISC-V: Remove dependency on libatomic by adding cmpxchg 1b PSU JDK-8316659 21 assert(LockingMode != LM_LIGHTWEIGHT || flag == CCR0) failed: bad condition register PSU JDK-8316671 21 sun/security/ssl/SSLSocketImpl/SSLSocketCloseHang.java test fails intermittent with Read timed out PSU JDK-8316679 21 C2 SuperWord: wrong result, load should not be moved before store if not comparable PSU JDK-8316710 11, 17, 21 Exclude java/awt/font/Rotate/RotatedTextTest.java PSU JDK-8316719 21 C2 compilation still fails with \"bad AD file\" PSU JDK-8316735 21 Print LockStack in hs_err files PSU JDK-8316741 21 BasicStroke.createStrokedShape miter-limits failing on small shapes PSU JDK-8316743 17, 21 RISC-V: Change UseVectorizedMismatchIntrinsic option result to warning PSU JDK-8316746 11, 17, 21 Top of lock-stack does not match the unlocked object PSU JDK-8316778 17, 21 test hprof lib: invalid array element type from JavaValueArray.elementSize PSU JDK-8316859 17, 21 RISC-V: Disable detection of V through HWCAP PSU JDK-8316879 21 RegionMatches1Tests fails if CompactStrings are disabled after JDK-8302163 PSU JDK-8316880 21 AArch64: \"stop: Header is not fast-locked\" with -XX:-UseLSE since JDK-8315880 PSU JDK-8316906 11, 17, 21 Clarify TLABWasteTargetPercent flag PSU JDK-8316929 21 Shenandoah: Shenandoah degenerated GC and full GC need to cleanup old OopMapCache entries PSU JDK-8316933 21 RISC-V: compiler/vectorapi/VectorCastShape128Test.java fails when using RVV PSU JDK-8316935 21 [s390x] Use consistent naming for lightweight locking in MacroAssembler PSU JDK-8316958 21 Add test for unstructured locking PSU JDK-8316967 21 Correct the scope of vmtimer in UnregisteredClasses::load_class PSU JDK-8317040 8, 11, 17 Adapt a cleaner test for older releases PSU JDK-8317121 17 vector_masked_load instruction is moved too early after JDK-8286941 PSU JDK-8317136 21 [AIX] Problem List runtime/jni/terminatedThread/TestTerminatedThread.java PSU JDK-8317257 21 RISC-V: llvm build broken PSU JDK-8317262 21 LockStack::contains(oop) fails \"assert(t→is_Java_thread()) failed: incorrect cast to JavaThread\" PSU JDK-8317291 8 Missing null check for nmethod::is_native_method() PSU JDK-8317294 21 Classloading throws exceptions over already pending exceptions PSU JDK-8317331 21 Solaris build failed with \"declaration can not follow a statement (E_DECLARATION_IN_CODE)\" PSU JDK-8317335 21 Build on windows fails after 8316645 PSU JDK-8317336 21 Assertion error thrown during 'this' escape analysis PSU JDK-8317373 8, 11, 17, 21 Add Telia Root CA v2 PSU JDK-8317374 8, 11, 17, 21 Add Let’s Encrypt ISRG Root X2 PSU JDK-8317439 21 Updating RE Configs for BUILD REQUEST 21.0.2+1 PSU JDK-8317507 21 C2 compilation fails with \"Exceeded _node_regs array\" PSU JDK-8317581 21 [s390x] Multiple test failure with LockingMode=2 PSU JDK-8317603 21 Improve exception messages thrown by sun.nio.ch.Net native methods (win) PSU JDK-8317692 21 jcmd GC.heap_dump performance regression after JDK-8292818 PSU JDK-8317705 17, 21 ProblemList sun/tools/jstat/jstatLineCountsX.sh on linux-ppc64le and aix due to JDK-8248691 PSU JDK-8317706 17, 21 Exclude java/awt/Graphics2D/DrawString/RotTransText.java on linux PSU JDK-8317711 21 Exclude gtest/GTestWrapper.java on AIX PSU JDK-8317736 21 Stream::handleReset locks twice PSU JDK-8317751 21 ProblemList ConsumeForModalDialogTest.java, MenuItemActivatedTest.java & MouseModifiersUnitTest_Standard.java for windows PSU JDK-8317772 17, 21 NMT: Make peak values available in release builds PSU JDK-8317790 21 Fix Bug entry for exclusion of runtime/jni/terminatedThread/TestTerminatedThread.java on AIX PSU JDK-8317803 21 Exclude java/net/Socket/asyncClose/Race.java on AIX PSU JDK-8317818 21 Combinatorial explosion during 'this' escape analysis PSU JDK-8317834 17, 21 java/lang/Thread/IsAlive.java timed out PSU JDK-8317839 21 Exclude java/nio/channels/Channels/SocketChannelStreams.java on AIX PSU JDK-8317920 11, 17, 21 JDWP-agent sends broken exception event with onthrow option PSU JDK-8317959 21 Check return values of malloc in native java.base coding PSU JDK-8317964 21 java/awt/Mouse/MouseModifiersUnitTest/MouseModifiersUnitTest_Standard.java fails on macosx-all after JDK-8317751 PSU JDK-8317967 11, 17, 21 Enhance test/jdk/javax/net/ssl/TLSCommon/SSLEngineTestCase.java to handle default cases PSU JDK-8317987 21 C2 recompilations cause high memory footprint PSU JDK-8318078 21 ADLC: pass ASSERT and PRODUCT flags PSU JDK-8318089 21 Class space not marked as such with NMT when CDS is off PSU JDK-8318137 21 Change milestone to fcs for all releases PSU JDK-8318144 21 Match on enum constants with body compiles but fails with MatchException PSU JDK-8318183 21 C2: VM may crash after hitting node limit PSU JDK-8318240 21 [AIX] Cleaners.java test failure PSU JDK-8318415 21 Adjust describing comment of os_getChildren after 8315026 PSU JDK-8318474 21 Fix memory reporter for thread_count PSU JDK-8318525 21 Atomic gtest should run as TEST_VM to access VM capabilities PSU JDK-8318528 21 Rename TestUnstructuredLocking test PSU JDK-8318562 21 Computational test more than 2x slower when AVX instructions are used PSU JDK-8318587 21 refresh libraries cache on AIX in print_vm_info PSU JDK-8318591 21 avoid leaks in loadlib_aix.cpp reload_table() PSU JDK-8318705 11, 17, 21 [macos] ProblemList java/rmi/registry/multipleRegistries/MultipleRegistries.java PSU JDK-8318736 21 com/sun/jdi/JdwpOnThrowTest.java failed with \"transport error 202: bind failed: Address already in use\" PSU JDK-8318759 8, 11, 17, 21 Add four DigiCert root certificates PSU JDK-8318855 17 Extra file added by mistake during the backport of JDK-8283326 PSU JDK-8318889 17, 21 C2: add bailout after assert Bad graph detected in build_loop_late PSU JDK-8318895 21 Deoptimization results in incorrect lightweight locking stack PSU JDK-8318951 21 Additional negative value check in JPEG decoding PSU JDK-8318953 17, 21 RISC-V: Small refactoring for MacroAssembler::test_bit PSU JDK-8318955 21 Add ReleaseIntArrayElements in Java_sun_awt_X11_XlibWrapper_SetBitmapShape XlbWrapper.c to early return PSU JDK-8318957 21 Enhance agentlib:jdwp help output by info about allow option PSU JDK-8318981 21 compiler/compilercontrol/TestConflictInlineCommands.java fails intermittent with 'disallowed by CompileCommand' missing from stdout/stderr PSU JDK-8319104 21 GtestWrapper crashes with SIGILL in AsyncLogTest::test_asynclog_raw on AIX opt PSU JDK-8319120 21 Unbound ScopedValue.get() throws the wrong exception PSU JDK-8319184 17, 21 RISC-V: improve MD5 intrinsic PSU JDK-8319187 8, 11, 17, 21 Add three eMudhra emSign roots PSU JDK-8319195 21 Move tier 1 vector API regression tests to tier 2 PSU JDK-8319268 21 Build failure with GCC8.3.1 after 8313643 PSU JDK-8319339 21 Internal error on spurious markup in a hybrid snippet PSU JDK-8319405 8 [s390] [jdk8] Increase javac default stack size for s390x zero PSU JDK-8319436 21 Proxy.newProxyInstance throws NPE if loader is null and interface not visible from class loader PSU JDK-8319525 17, 21 RISC-V: Rename *_riscv64.ad files to *_riscv.ad under riscv/gc PSU JDK-8319532 21 jshell - Non-sealed declarations sometimes break a snippet evaluation PSU JDK-8319542 21 Fix boundaries of region to be tested with os::is_readable_range PSU JDK-8319700 21 [AArch64] C2 compilation fails with \"Field too big for insn\" PSU JDK-8319828 21 runtime/NMT/VirtualAllocCommitMerge.java may fail if mixing interpreted and compiled native invocations PSU JDK-8319922 21 libCreationTimeHelper.so fails to link in JDK 21 PSU JDK-8319958 17, 21 test/jdk/java/io/File/libGetXSpace.c does not compile on Windows 32-bit PSU JDK-8319961 21 JvmtiEnvBase doesn’t zero _ext_event_callbacks PSU JDK-8320001 21 javac crashes while adding type annotations to the return type of a constructor PSU JDK-8320209 17, 21 VectorMaskGen clobbers rflags on x86_64 PSU JDK-8320280 21 RISC-V: Avoid passing t0 as temp register to MacroAssembler::lightweight_lock/unlock PSU JDK-8320363 21 ppc64 TypeEntries::type_unknown logic looks wrong, missed optimization opportunity PSU JDK-8320601 17, 21 ProblemList java/lang/invoke/lambda/LambdaFileEncodingSerialization.java on linux-all PSU JDK-8321067 21 Unlock experimental options in EATests.java PSU JDK-8322883 21 [BACKOUT] 8225377: type annotations are not visible to javac plugins across compilation boundaries PSU JDK-8322985 21 [BACKOUT] 8318562: Computational test more than 2x slower when AVX instructions are used PSU OpenJFX Fixes and Enhancements The following table describes the OpenJFX changes implemented in this release. OpenJDK Patch ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8181084 11 JavaFX show big icons in system menu on macOS with Retina display CPU,PSU JDK-8251240 11, 17, 21 Menus inaccessible on Linux with i3 wm PSU JDK-8284544 8 [Win] Name-Property of Spinner cannot be changed PSU JDK-8292922 11 [Linux] No more drag events when new Stage is created in drag handler PSU JDK-8307536 17, 21 FileAlreadyExistsException from NativeLibLoader when running concurrent applications with empty cache PSU JDK-8313321 8, 17, 21 Set minimum python version in WebKit cmake scripts PSU JDK-8313648 17, 21 JavaFX application continues to show a black screen after graphic card driver crash PSU JDK-8314484 17, 21 Update Gradle to 8.3 PSU JDK-8314486 17, 21 JavaFX build uses deprecated features that will be removed in gradle 8 PSU JDK-8315074 8, 17, 21 Possible null pointer access in native glass PSU JDK-8315958 8, 17, 21 Missing range checks in GlassPasteboard PSU JDK-8317370 17, 21 JavaFX runtime version is wrong at runtime PSU JDK-8317508 8, 17, 21 Provide media support for libavcodec version 60 PSU JDK-8318115 17, 21 Webkit build fails after gradle 8.4 PSU JDK-8318386 17, 21 Update Glib to 2.78.0 PSU JDK-8318387 17, 21 Update GStreamer to 1.22.6 PSU JDK-8318984 17, 21 Update to Xcode 14.3.1 on macOS PSU JDK-8319066 8, 11, 17, 21 Application window not activated in macOS 14 Sonoma when launched from command line PSU JDK-8319079 17, 21 Missing range checks in decora PSU JDK-8319231 11, 17, 21 Unrecognized \"minimum\" key in .jcheck/conf causes /reviewers command to be ignored PSU JDK-8319669 17, 21 [macos14] Running any JavaFX app prints Secure coding warning PSU JDK-8319762 17, 21 Update to Visual Studio 2022 version 17.6.5 on Windows PSU JDK-8319996 17, 21 Update to GCC 13.2.0 on Linux PSU JDK-8320267 11, 17, 21 WebView crashes on macOS 11 with WebKit 616.1 PSU Fixes and Enhancements Specific to Azul Zulu Builds of OpenJDK The following table describes the Azul Zulu bug fixes implemented in this release. Issue ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. ZULU-56016 8, 11, 17 BCFIPS should be updated to version 1.0.24 CPU,PSU ZULU-56533 6 Do selective changes re: transfer of LT and LV currencies to EUR CPU,PSU ZULU-29744 8 fix compilation issues for gcc9.3 PSU ZULU-34602 21 Failure in vmTestbase/nsk/jdi/ReferenceType/instances/instances003/instances003.java - com.sun.jdi.ObjectCollectedException PSU ZULU-34883 21 integrate CRS agent to Zulu17 PSU ZULU-34955 21 Failure in about 50 security tests - LinkageError occurred while loading main class com.sun.javatest.regtest.agent.MainWrapper PSU ZULU-35818 21 CDS tests fails with assertion if CRS enabled PSU ZULU-35819 21 regression tests runtime/SelectionResolution/* failed: SIGSEGV PSU ZULU-35876 21 Failure in java/lang/SecurityManager/CheckAccessClassInPackagePermissions.java - Module module com.azul.crs.client has not been granted (\"java.lang.RuntimePermission\" \"accessClassInPackage.com.azul.tooling.in\") PSU ZULU-37416 21 ClassNotFoundException com.azul.tooling.Handler PSU ZULU-37449 21 Add a configurable delay for starting of CRS code which has side effects on JDK initialization PSU ZULU-37617 21 High CPU load when CRS is enabled PSU ZULU-37651 21 JVM crashes in CI runs PSU ZULU-37670 21 CRS related renamings accordingly to PMM-282 PSU ZULU-37671 21 Failure in 19 tests in serviceability/sa/ and sun/tools/jhsdb/ - Unable to deduce type of thread from address PSU ZULU-37720 21 [REGRESSION] Test jdk/modules/etc/VerifyModuleDelegation.java fails with NPE PSU ZULU-38273 21 drainQueues() after disableCRS() crashes VM PSU ZULU-38294 21 Failure in java/lang/ClassLoader/securityManager/ClassLoaderTest.java - IllegalStateException: getSystemClassLoader cannot be called during the system class loader instantiation PSU ZULU-38301 21 Failure in several regression tests sun/security/krb5/auto/* and java/time/tck/java/time/chrono/* - Unexpected exit from test [exit code: -1073740791] PSU ZULU-38367 21 Fix for ZULU-38294 breaks zulu build PSU ZULU-38448 21 Failures in six various tests on all (and only) \"non-CRS\" platforms PSU ZULU-38511 21 All CRS modules should be loaded by boot class loader (again) PSU ZULU-40762 21 Zulu fastdebug failed to start with CRS enabled PSU ZULU-40964 21 Processing of VM_METHOD_FIRST_CALLED at client side PSU ZULU-40966 21 Fix 2 Address Sanitizer (ASAN) sscanf buffer overflows - any testcase PSU ZULU-43110 21 notify_class_load should be configurable by CrsClassLoadMessage::should_notify() PSU ZULU-43971 21 Update CRS client to version 1.0.11 PSU ZULU-45003 21 CRS agent without -XX:+UnlockExperimentalVMOptions/UnlockExperimentalCRS PSU ZULU-45268 21 Add sending of VM_METHOD_FIRST_CALLED to all supported JVMs PSU ZULU-46703 21 Use CRS Agent 1.0.26 PSU ZULU-47172 17, 21 [CRaC] jdk/jdk/crac jtreg tests failed on CentOS 8 PSU ZULU-48353 8 restore proper JNF bunding PSU ZULU-48356 21 Failure in com/sun/management/DiagnosticCommandMBean/DcmdMBeanPermissionsTest.java - SecurityException: (\"java.lang.RuntimePermission\" \"getClassLoader\") PSU ZULU-48669 21 unnecessary call of hash.cpp/sha256 method when CRS is not intended to be started PSU ZULU-48695 21 adding heuristic: report compilation events as VM_METHOD_FIRST_CALLED event PSU ZULU-48967 21 AVD agent to be used: 1.0.30 PSU ZULU-49206 21 AVD agent to be used: 1.0.32 PSU ZULU-51813 17 Enable BCFIPS provider configuration PSU ZULU-51814 11 FIPS for Zulu 11 PSU ZULU-51913 8 JBOSS EAP 7.4.0 fails with Zulu 8.74.0.11 PSU ZULU-52197 21 AVD for Zulu 21 PSU ZULU-52231 11 Move zulu11 aarch32 builds to ent jenkins env PSU ZULU-52236 21 Fix partial initialization warning for _listener_address PSU ZULU-53286 Rename linux-arm to linux-armhf in build matrix PSU ZULU-53497 8 Improve zoich build infra PSU ZULU-53520 21 Upgrade boot jdk for zulu21 PSU ZULU-53750 17, 21 Checkpoint while debugging PSU ZULU-54108 17, 21 Could not find criuengine for zulu with crac for win & mac PSU ZULU-54275 8, 11, 17, 21 AVD code inventory does not work properly on Zulu17 PSU ZULU-54288 11, 17 Add UseBCFIPS option for Zulu11 PSU ZULU-54295 17 libGetXSpace.c fails to compile on win32 PSU ZULU-54628 8 [OJ-reg] \"com/sun/jdi/StepTest.java\" test failed with \"java.lang.IllegalArgumentException: Bad method name/signature: com.azul.crac.Core.go:()V\" PSU ZULU-54881 17, 21 [CRaC] 4 jdk/crac jtreg tests fail on macosx in Zulu 17.46 and Zulu 21.30 builds PSU ZULU-54882 17, 21 [JCK21] Multiple \"api/java_lang/\" tests failed with \"java.lang.NullPointerException\" PSU ZULU-54890 17, 21 [CRaC] sun/misc/SunMiscSignalTest.java test fails on macosx in Zulu 17.46.27, 17.46.28, 21.30.19, 21.30.20 CRaC builds PSU ZULU-54928 22 EA fails to sign correctly after 22.0.51+ PSU ZULU-55359 21 CI for CRaC PSU ZULU-55361 Update base images for armv6hf-sdk and armv5sf-sdk PSU ZULU-55363 21 Backport test fixes from upstream PSU ZULU-55547 8 Remove OpenJSSE and Legacy8uJSSE from Zulu8 PSU ZULU-55559 17, 21 JMX cannot be enabled after restore PSU ZULU-55562 linux-armsf started to fail after transition to ent build env PSU ZULU-55812 21 Change to Xcode 14.3 for building on macOS PSU ZULU-55843 17, 21 Zulu CRaC + GC log PSU ZULU-56027 17, 21 Zulu21 CRaC build does not work with CRS on Windows PSU ZULU-56028 17, 21 CRS: --disable-precompiled-headers fails to compile PSU ZULU-56029 8, 11, 17, 21 review references to slackoverflow PSU ZULU-56061 17, 21 CRaC: OSX: --disable-precompiled-headers fails to compile PSU ZULU-56146 8 Mass build failures after 8138694 PSU ZULU-56164 8 Update .dependencies file with freetype for custom aarch64 compiler PSU ZULU-56206 17, 21 CRaC code has bad words PSU ZULU-56211 8 Fix PPC family builds PSU ZULU-56430 21 Allow Merge PRs in CI PSU ZULU-6566 21 Modules without classes can not be imported into jre image PSU Fixes and Enhancements Specific to Azul Zulu Builds of OpenJDK With JavaFX The following table describes the Azul ZuluFX bug fixes implemented in this release. Issue ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. ZULU-55389 8 jfx8: typo in Mesa 3-D Graphics Library version CPU,PSU ZULU-52487 8, 17, 21 Use VS2022-17.6.5 for WebKit v616.1 PSU ZULU-52980 17, 21 win32: webkit build is broken after 8238650 PSU ZULU-55581 17, 21 win32: glib build is broken after JDK-8318386 PSU"
}, {
  "objectID" : "7d35c9bf-a5f6-4017-b704-6c8d82a52c61",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Fixed Common Vulnerabilities and Exposures",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#fixed-common-vulnerabilities-and-exposures",
  "content" : "Fixed Common Vulnerabilities and Exposures This section summarizes Common Vulnerabilities and Exposures (CVE) fixed in this release. CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Azul Zulu Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20918 Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 2 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8, 7, 6 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8, 7, 6 Note 3 CVE-2024-20921 Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None 21, 17, 11, 8, 7, 6 Note 2 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8, 7, 6 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Zulu Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Zulu Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20955 This CVE is not applicable to Azul Zulu Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service."
}, {
  "objectID" : "c8e0f229-8e76-42b5-bf77-7a8b31402076",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#non-cve-security-fixes",
  "content" : "Non-CVE Security Fixes The following table summarizes non-CVE security fixes implemented in this release. OpenJDK Patch ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8308204 6, 7, 8, 11, 17, 21 Enhanced certificate processing CPU,PSU"
}, {
  "objectID" : "a3753e3b-9fb8-4b00-b7d3-e7435a77c293",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "OpenJDK Fixes and Enhancements",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#openjdk-fixes-and-enhancements",
  "content" : "OpenJDK Fixes and Enhancements The following table describes the OpenJDK changes implemented in this release. OpenJDK Patch ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8066103 6 C2’s range check smearing allows out of bound array accesses CPU,PSU JDK-8276123 17 ZipFile::getEntry will not return a file entry when there is a directory entry of the same name within a Zip File CPU,PSU JDK-8302017 6, 7, 8, 11, 17 Allocate BadPaddingException only if it will be thrown CPU,PSU JDK-8320597 6, 7, 8, 11, 17, 21 RSA signature verification fails on signed data that does not encode params correctly CPU,PSU JDK-6381945 11 (cal) Japanese calendar unit test system should avoid multiple static imports PSU JDK-6445283 11, 17 ProgressMonitorInputStream not large file aware (>2GB) PSU JDK-6528710 8 sRGB-ColorSpace to sRGB-ColorSpace Conversion PSU JDK-8026393 11 jarsigner never shows a warning in badKeyUsage case PSU JDK-8029995 8 accept yes/no for boolean krb5.conf settings PSU JDK-8038244 21 (fs) Check return value of malloc in Java_sun_nio_fs_AixNativeDispatcher_getmntctl() PSU JDK-8041447 11, 17 Test javax/swing/dnd/7171812/bug7171812.java fails with java.lang.RuntimeException: Test failed, scroll on drag doesn’t work PSU JDK-8053479 11 (dc) DatagramChannel.read() throws exception instead of discarding data when buffer too small PSU JDK-8061729 17 Update java/net tests to eliminate dependency on sun.net.www.MessageHeader and some other internal APIs PSU JDK-8067250 11 [mlvm] vm/mlvm/mixed/stress/regression/b6969574 fails and perf regression PSU JDK-8153090 11 TAB key cannot change input focus after the radio button in the Color Selection dialog PSU JDK-8161536 17, 21 sun/security/pkcs11/sslecc/ClientJSSEServerJSSE.java fails with ProviderException PSU JDK-8168408 11 Test java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowBlockingTest.java fails intermittentently on windows PSU JDK-8168469 17 Memory leak in JceSecurity PSU JDK-8176567 17 nsk/jdi/ReferenceType/instances/instances002: TestFailure: Unexpected size of referenceType.instances(nsk.share.jdi.TestInterfaceImplementer1): 11, expected: 10 PSU JDK-8183374 11 Refactor java/lang/Runtime shell tests to java PSU JDK-8185531 11 [TESTBUG] Improve test configuration for shared strings PSU JDK-8193543 17 Regression automated test '/open/test/jdk/java/awt/TrayIcon/SystemTrayInstance/SystemTrayInstanceTest.java' fails PSU JDK-8195589 11 T6587786.java failed after JDK-8189997 PSU JDK-8197825 11 [Test] Intermittent timeout with javax/swing JColorChooser Test PSU JDK-8198668 17 MemoryPoolMBean/isUsageThresholdExceeded/isexceeded001/TestDescription.java still failing PSU JDK-8202790 17 DnD test DisposeFrameOnDragTest.java does not clean up PSU JDK-8202931 17 [macos] java/awt/Choice/ChoicePopupLocation/ChoicePopupLocation.java fails PSU JDK-8205467 11 javax/management/remote/mandatory/connection/MultiThreadDeadLockTest.java possible deadlock PSU JDK-8207166 11, 17 jdk/jshell/JdiHangingLaunchExecutionControlTest.java - launch timeout PSU JDK-8207404 8 MulticastSocket tests failing on AIX PSU JDK-8209115 8 adjust libsplashscreen linux ppc64le builds for easier libpng update PSU JDK-8210168 11 JCK test .vm.classfmt.ins.code002.code00201m1.code__00201m1 hangs with -noverify PSU JDK-8210265 11 Crash in HSpaceCounters::update_used() PSU JDK-8211045 11 [Testbug] Fix for 8144279 didn’t define a test case! PSU JDK-8212677 8 X11 default visual support for IM status window on VNC PSU JDK-8212997 11 [TESTBUG] Remove defmeth tests for class file versions 50 and 51 PSU JDK-8213898 11 CDS dumping of springboot asserts in G1ArchiveAllocator::alloc_new_region PSU JDK-8214694 11 cleanup rawtypes warnings in open jndi tests PSU JDK-8217329 11 JTREG: Clean up, remove unused imports in gc folder PSU JDK-8218178 11 vmTestbase/vm/mlvm/mixed/stress/regression/b6969574/INDIFY_Test.java fails with -Xcomp PSU JDK-8219652 21 [aix] Tests failing with JNI attach problems. PSU JDK-8220083 11 Remove hard-coded 127.0.0.1 loopback address in JDK networking tests PSU JDK-8221396 11 Clean up serviceability/sa/TestUniverse.java PSU JDK-8223145 11 Replace wildcard address with loopback or local host in tests - part 1 PSU JDK-8223788 11 [macos] JSpinner buttons in JColorChooser dialog may capture focus using TAB Key. PSU JDK-8224035 11 Replace wildcard address with loopback or local host in tests - part 9 PSU JDK-8224204 11 Replace wildcard address with loopback or local host in tests - part 10 PSU JDK-8225313 17 serviceability/jvmti/HeapMonitor/MyPackage/HeapMonitorStatObjectCorrectnessTest.java failed with Unexpected high difference percentage PSU JDK-8225377 21 type annotations are not visible to javac plugins across compilation boundaries PSU JDK-8226825 11 Replace wildcard address with loopback or local host in tests - part 19 PSU JDK-8228990 17 JFR: TestNetworkUtilizationEvent.java expects 2+ Network interfaces on Linux but finding 1 PSU JDK-8230435 11 Replace wildcard address with loopback or local host in tests - part 22 PSU JDK-8230858 11 Replace wildcard address with loopback or local host in tests - part 23 PSU JDK-8231556 11 Wrong font ligatures used when 2 versions of same font used PSU JDK-8231931 11 [TESTBUG] serviceability/sa/TestUniverse.java looks for wrong string with Shenandoah PSU JDK-8232135 11 Add diagnostic output to test java/util/ProcessBuilder/Basic.java PSU JDK-8232513 11 java/net/DatagramSocket/PortUnreachable.java still fails intermittently with BindException PSU JDK-8232839 17, 21 JDI AfterThreadDeathTest.java failed due to \"FAILED: Did not get expected IllegalThreadStateException on a StepRequest.enable()\" PSU JDK-8232933 11, 17 Javac inferred type does not conform to equality constraint PSU JDK-8233000 11 Mark vmTestbase/vm/mlvm/meth/stress/compiler/deoptimize test as stress test PSU JDK-8233847 11 (sctp) Flx link-local IPv6 scope handling and test cleanup. PSU JDK-8237858 11 PlainSocketImpl.socketAccept() handles EINTR incorrectly PSU JDK-8238740 11 java/net/httpclient/whitebox/FlowTestDriver.java should not specify a TLS protocol PSU JDK-8239365 8 ProcessBuilder test modifications for AIX execution PSU JDK-8239801 17 [macos] java/awt/Focus/UnaccessibleChoice/AccessibleChoiceTest.java fails PSU JDK-8240235 11 jdk.test.lib.util.JarUtils updates jar files incorrectly PSU JDK-8240604 11 Rewrite sun/management/jmxremote/bootstrap/CustomLauncherTest.java test to make binaries from source file PSU JDK-8240754 11 Instrument FlowTest.java to provide more debug traces. PSU JDK-8242330 8, 11 Arrays should be cloned in several JAAS Callback classes PSU JDK-8244289 17 fatal error: Possible safepoint reached by thread that does not allow it PSU JDK-8244508 11 JFR: FlightRecorderOptions reset date format PSU JDK-8247351 17 [aarch64] NullPointerException during stack walking (clhsdb \"where -a\") PSU JDK-8249812 11 java/net/DatagramSocket/PortUnreachable.java still fails intermittently with SocketTimeoutException PSU JDK-8249826 17 5 javax/net/ssl/SSLEngine tests use @ignore w/o bug-id PSU JDK-8251177 11 [macosx] The text \"big\" is truncated in JTabbedPane PSU JDK-8252713 11 jtreg time out of CtrlASCII.java seems to hang the Xserver. PSU JDK-8254711 11 Add java.security.Provider.getService JFR Event PSU JDK-8255548 11 Missing coverage for javax.xml.crypto.dom.DOMCryptoContext PSU JDK-8258914 11 javax/net/ssl/DTLS/RespondToRetransmit.java timed out PSU JDK-8258951 17 java/net/httpclient/HandshakeFailureTest.java failed with \"RuntimeException: Not found expected SSLHandshakeException in java.io.IOException\" PSU JDK-8259266 11 com/sun/jdi/JdbOptions.java failed with \"RuntimeException: 'prop[boo] = >foo 2<' missing from stdout/stderr\" PSU JDK-8260035 11 Deproblemlist few problemlisted test PSU JDK-8260431 11 com/sun/jdi/JdbOptions.java failed with \"RuntimeException: 'prop[boo] = >foo<' missing from stdout/stderr\" PSU JDK-8262186 17 Call X509KeyManager.chooseClientAlias once for all key types PSU JDK-8262901 17 [macos_aarch64] NativeCallTest expected:←3.8194101E18> but was:<3.02668882E10> PSU JDK-8263530 11 sun.awt.X11.ListHelper.removeAll() should use clear() PSU JDK-8265586 11, 17 [windows] last button is not shown in AWT Frame with BorderLayout and MenuBar set. PSU JDK-8265678 11 Test java/awt/Focus/ActualFocusedWindowTest/ActualFocusedWindowBlockingTest.java fails intermittentently on windows PSU JDK-8266249 11 javax/swing/JPopupMenu/7156657/bug7156657.java fails on macOS PSU JDK-8266593 17 vmTestbase/nsk/jvmti/PopFrame/popframe011 fails with \"assert(java_thread == _state→get_thread()) failed: Must be\" PSU JDK-8267502 21 JDK-8246677 caused 16x performance regression in SynchronousQueue PSU JDK-8267509 21 Improve IllegalAccessException message to include the cause of the exception PSU JDK-8267860 11 Off-by-one bug when searching arrays in AlpnGreaseTest PSU JDK-8268433 17 serviceability/dcmd/framework/VMVersionTest.java fails with Unable to send object throw not established PipeIO Listener Thread connection PSU JDK-8268916 11, 17, 21 Tests for AffirmTrust roots PSU JDK-8269425 17 2 jdk/jfr/api/consumer/streaming tests failed to attach PSU JDK-8270199 17 Most SA tests are skipped on macosx-aarch64 because all executables are signed PSU JDK-8270447 17 [IR Framework] Add missing compilation level restriction when using FlipC1C2 stress option PSU JDK-8271073 17 Improve testing with VM option VerifyArchivedFields PSU JDK-8271519 11 java/awt/event/SequencedEvent/MultipleContextsFunctionalTest.java failed with \"Total [200] - Expected [400]\" PSU JDK-8271566 17 DSA signature length value is not accurate in P11Signature PSU JDK-8271824 17 mark hotspot runtime/CompressedOops tests which ignore external VM flags PSU JDK-8271826 17 mark hotspot runtime/condy tests which ignore external VM flags PSU JDK-8271828 17 mark hotspot runtime/classFileParserBug tests which ignore external VM flags PSU JDK-8271829 17 mark hotspot runtime/Throwable tests which ignore external VM flags PSU JDK-8271838 8 AmazonCA.java interop test fails PSU JDK-8271886 17 mark hotspot runtime/InvocationTests tests which ignore external VM flags PSU JDK-8271887 17 mark hotspot runtime/CDSCompressedKPtrs tests which ignore external VM flags PSU JDK-8271890 17 mark hotspot runtime/Dictionary tests which ignore external VM flags PSU JDK-8271891 17 mark hotspot runtime/Safepoint tests which ignore external VM flags PSU JDK-8271892 17 mark hotspot runtime/PrintStringTableStats/PrintStringTableStatsTest.java test as ignoring external VM flags PSU JDK-8271893 17 mark hotspot runtime/PerfMemDestroy/PerfMemDestroy.java test as ignoring external VM flags PSU JDK-8271904 17 mark hotspot runtime/ClassFile tests which ignore external VM flags PSU JDK-8271905 17 mark hotspot runtime/Metaspace tests which ignore external VM flags PSU JDK-8272099 17 mark hotspot runtime/Monitor tests which ignore external VM flags PSU JDK-8272291 17 mark hotspot runtime/logging tests which ignore external VM flags PSU JDK-8272551 17 mark hotspot runtime/modules tests which ignore external VM flags PSU JDK-8272552 17 mark hotspot runtime/cds tests which ignore external VM flags PSU JDK-8272998 17 ImageIO.read() throws incorrect exception type PSU JDK-8273456 17 Do not hold ttyLock around stack walking PSU JDK-8273522 17 Rename test property vm.cds.archived.java.heap to vm.cds.write.archived.java.heap PSU JDK-8273629 17 compiler/uncommontrap/TestDeoptOOM.java fails with release VMs PSU JDK-8273804 11 Platform.isTieredSupported should handle the no-compiler case PSU JDK-8273831 17 PrintServiceLookup spawns 2 threads in the current classloader, getting orphaned PSU JDK-8273921 17 Refactor NSK/JDI tests to create thread using factory PSU JDK-8274211 17 Test man page that options are documented PSU JDK-8275329 11, 17 ZGC: vmTestbase/gc/gctests/SoftReference/soft004/soft004.java fails with assert(_phases→length() ⇐ 1000) failed: Too many recored phases? PSU JDK-8275333 11, 17 Print count in \"Too many recored phases?\" assert PSU JDK-8275440 17 Remove VirtualSpaceList::is_full() PSU JDK-8275509 17 ModuleDescriptor.hashCode isn’t reproducible across builds PSU JDK-8276036 17 The value of full_count in the message of insufficient codecache is wrong PSU JDK-8276054 17 JMH benchmarks for Fences PSU JDK-8276711 17 compiler/codecache/cli tests failing when SegmentedCodeCache used with -Xint PSU JDK-8276819 17 javax/print/PrintServiceLookup/FlushCustomClassLoader.java fails to free PSU JDK-8277307 17 Pre shared key sent under both session_ticket and pre_shared_key extensions PSU JDK-8278456 11 Define jtreg jdk_desktop test group time-based sub-tasks for use by headful testing. PSU JDK-8279856 17 Parallel: Use PreservedMarks to record promotion-failed objects PSU JDK-8280004 11 DCmdArgument<jlong>::parse_value() should handle NULL input PSU JDK-8281015 17 Further simplify NMT backend PSU JDK-8281149 17 (fs) java/nio/file/FileStore/Basic.java fails with java.lang.RuntimeException: values differ by more than 1GB PSU JDK-8281874 17 Can’t unpack msi installers from test/jdk/tools/jpackage/windows/test/jdk/tools/jpackage/windows/WinShortcutPromptTest.java test PSU JDK-8282011 17 test/jdk/tools/jpackage/windows/WinL10nTest.java test fails if light.exe is not in %PATH% PSU JDK-8282017 17 sun/net/www/protocol/https/HttpsURLConnection/B6216082.java fails with \"SocketException: Unexpected end of file from server\" PSU JDK-8282143 11 Objects.requireNonNull should be ForceInline PSU JDK-8282404 11 DrawStringWithInfiniteXform.java failed with \"RuntimeException: drawString with InfiniteXform transform takes long time\" PSU JDK-8283441 8 C2: segmentation fault in ciMethodBlocks::make_block_at(int) PSU JDK-8283670 17 gtest os.release_multi_mappings_vm is still racy PSU JDK-8284047 17 Harmonize/Standardize the SSLSocket/SSLEngine/SSLSocketSSLEngine test templates PSU JDK-8284331 11 Add sanity check for signal handler modification warning. PSU JDK-8284910 8, 11, 17 Buffer clean in PasswordCallback PSU JDK-8285398 8 Cache the results of constraint checks PSU JDK-8285516 17 clearPassword should be called in a finally try block PSU JDK-8285612 11 Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/ImagePrinting/ClippedImages.java PSU JDK-8285687 11 Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/PageRangesDlgTest.java PSU JDK-8285696 8 AlgorithmConstraints:permits not throwing IllegalArgumentException when 'alg' is null PSU JDK-8285785 17 CheckCleanerBound test fails with PasswordCallback object is not released PSU JDK-8285867 17 Convert applet manual tests SelectionVisible.java to Frame and automate PSU JDK-8286473 17 Drop --enable-preview from Record related tests PSU JDK-8286474 17 Drop --enable-preview from Sealed Classes related tests PSU JDK-8286475 17 Drop --enable-preview from instanceof pattern matching related tests PSU JDK-8286503 8, 11, 17, 21 Enhance security classes PSU JDK-8286707 11 JFR: Don’t commit JFR internal jdk.JavaMonitorWait events PSU JDK-8286969 17 Add a new test library API to execute kinit in SecurityTools.java PSU JDK-8287596 17 Reorg jdk.test.lib.util.ForceGC PSU JDK-8287671 17 Adjust ForceGC to invoke System::gc fewer times for negative case PSU JDK-8287867 17 Bad merge of jdk/test/lib/util/ForceGC.java causing test compilation error PSU JDK-8288325 11, 17 [windows] Actual and Preferred Size of AWT Non-resizable frame are different PSU JDK-8288415 11 java/awt/PopupMenu/PopupMenuLocation.java is unstable in MacOS machines PSU JDK-8288961 17 jpackage: test MSI installation fix PSU JDK-8288993 11, 17 Make AwtFramePackTest generic by removing @requires tag PSU JDK-8289077 11 Add manual tests to open PSU JDK-8289238 11 Refactoring changes to PassFailJFrame Test Framework PSU JDK-8289547 11 Update javax/swing/Popup/TaskbarPositionTest.java PSU JDK-8289584 11, 17 (fs) Print size values in java/nio/file/FileStore/Basic.java when they differ by > 1GiB PSU JDK-8289745 11, 17 JfrStructCopyFailed uses heap words instead of bytes for object sizes PSU JDK-8289917 11 Metadata for regionsRefilled of G1EvacuationStatistics event is wrong PSU JDK-8290067 11 Show stack dimensions in UL logging when attaching threads PSU JDK-8290469 11 Add new positioning options to PassFailJFrame test framework PSU JDK-8290909 17 MemoryPoolMBean/isUsageThresholdExceeded tests failed with \"isUsageThresholdExceeded() returned false, and is still false, while threshold = MMMMMMM and used peak = NNNNNNN\" PSU JDK-8291154 17 Create a non static nested class without enclosing class throws VerifyError PSU JDK-8291550 17 RISC-V: jdk uses misaligned memory access when AvoidUnalignedAccess enabled PSU JDK-8291911 17 java/io/File/GetXSpace.java fails with \"53687091200 != 161051996160\" PSU JDK-8292067 17 Convert test/sun/management/jmxremote/bootstrap shell tests to java version PSU JDK-8292072 17 NMT: repurpose Tracking overhead counter as global malloc counter PSU JDK-8292261 17 adjust timeouts in JLI GetObjectSizeIntrinsicsTest.java PSU JDK-8292381 17 java/net/httpclient/SpecialHeadersTest.java fails with \"ERROR: Shutting down connection: HTTP/2 client stopped\" PSU JDK-8292407 11 Improve Weak CAS VarHandle/Unsafe tests resilience under spurious failures PSU JDK-8292636 17 (dc) Problem listing of java/nio/channels/DatagramChannel/Unref.java has incorrect issue ID PSU JDK-8292683 11 Remove BadKeyUsageTest.java from Problem List PSU JDK-8292713 11 Unsafe.allocateInstance should be intrinsified without UseUnalignedAccesses PSU JDK-8293156 17 Dcmd VM.classloaders fails to print the full hierarchy PSU JDK-8293166 11 jdk/jfr/jvm/TestDumpOnCrash.java fails on Linux ppc64le and Linux aarch64 PSU JDK-8293335 17 sun/management/jmxremote/bootstrap/RmiBootstrapTest.java#id1failed with \"Agent communication error: java.io.EOFException\" PSU JDK-8293343 17 sun/management/jmxremote/bootstrap/RmiSslNoKeyStoreTest.java failed with \"Agent communication error: java.io.EOFException\" PSU JDK-8293466 11 libjsig should ignore non-modifying sigaction calls PSU JDK-8293563 17 [macos-aarch64] SA core file tests failing with sun.jvm.hotspot.oops.UnknownOopException PSU JDK-8293579 17 tools/jpackage/share/jdk/jpackage/tests/UnicodeArgsTest.java fails on Japanese Windows platform PSU JDK-8293811 11 Provide a reason for PassFailJFrame.forceFail PSU JDK-8294156 21 Allow PassFailJFrame.Builder to create test UI PSU JDK-8294158 21 HTML formatting for PassFailJFrame instructions PSU JDK-8294402 17 Add diagnostic logging to VMProps.checkDockerSupport PSU JDK-8294427 11, 17, 21 Check boxes and radio buttons have rendering issues on Windows in High DPI env PSU JDK-8294535 21 Add screen capture functionality to PassFailJFrame PSU JDK-8294673 11 JFR: Add SecurityProviderService#threshold to TestActiveSettingEvent.java PSU JDK-8294881 17 test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/dispose/dispose003/TestDescription.java fails PSU JDK-8295068 21 SSLEngine throws NPE parsing CertificateRequests PSU JDK-8295424 17 adjust timeout for another JLI GetObjectSizeIntrinsicsTest.java subtest PSU JDK-8295555 21 Primitive wrapper caches could be @Stable PSU JDK-8295685 8 Update Libpng to 1.6.38 PSU JDK-8296275 11, 17 Write a test to verify setAccelerator method of JMenuItem PSU JDK-8296437 17 NMT incurs costs if disabled PSU JDK-8296581 11, 17 Better system proxy support PSU JDK-8296821 17 compiler/jvmci/jdk.vm.ci.code.test/src/jdk/vm/ci/code/test/NativeCallTest.java fails after JDK-8262901 PSU JDK-8297142 17 jdk/jfr/event/runtime/TestShutdown.java fails on Linux ppc64le and Linux aarch64 PSU JDK-8297296 11, 17 java/awt/Mouse/EnterExitEvents/DragWindowTest.java fails with \"No MouseReleased event on label!\" PSU JDK-8297367 17 disable TestRedirectLinks.java in slowdebug mode PSU JDK-8297640 11, 17 Increase buffer size for buf (insert_features_names) in Abstract_VM_Version::insert_features_names PSU JDK-8297798 17 Timeout with DTLSOverDatagram test template PSU JDK-8297856 8, 11, 17 Improve handling of Bidi characters PSU JDK-8297958 17 NMT: Display peak values PSU JDK-8298298 17 NMT: count deltas are printed with 32-bit signed size PSU JDK-8298619 17 java/io/File/GetXSpace.java is failing PSU JDK-8298735 17 Some tools/jpackage/windows/* tests fails with jtreg test timeout PSU JDK-8298867 17 Basics.java fails with SSL handshake exception PSU JDK-8298868 17 Update EngineCloseOnAlert.java for changes to TLS implementation PSU JDK-8298869 17 Update ConnectionTest.java for changes to TLS implementation PSU JDK-8298872 17 Update CheckStatus.java for changes to TLS implementation PSU JDK-8298873 17 Update IllegalRecordVersion.java for changes to TLS implementation PSU JDK-8298874 17 Update TestAllSuites.java for TLS v1.2 and 1.3 PSU JDK-8298905 11, 17 Test \"java/awt/print/PrinterJob/ImagePrinting/PrintARGBImage.java\" fails because the frames of instruction does not display PSU JDK-8298974 11, 17 Add ftcolor.c to imported freetype sources PSU JDK-8299075 17 TestStringDeduplicationInterned.java fails because extra deduplication PSU JDK-8299207 17 [Testbug] Add back test/jdk/java/awt/Graphics2D/DrawPrimitivesTest.java PSU JDK-8299241 17 jdk/jfr/api/consumer/streaming/TestJVMCrash.java generates unnecessary core file PSU JDK-8299255 11, 17 Unexpected round errors in FreetypeFontScaler PSU JDK-8299614 21 Shenandoah: STW mark should keep nmethod/oops referenced from stack chunk alive PSU JDK-8299677 17 Formatter.format might take a long time to format an integer or floating-point PSU JDK-8299748 17 java/util/zip/Deinflate.java failing on s390x PSU JDK-8300259 11, 17 Add test coverage for processing of pending block files in signed JARs PSU JDK-8300272 11, 17 Improve readability of the test JarWithOneNonDisabledDigestAlg PSU JDK-8300405 11 Screen capture for test JFileChooserSetLocationTest.java, failure case PSU JDK-8300663 21 java/util/concurrent/SynchronousQueue/Fairness.java failed with \"Error: fair=true i=0 j=1\" PSU JDK-8300727 17 java/awt/List/ListGarbageCollectionTest/AwtListGarbageCollectionTest.java failed with \"List wasn’t garbage collected\" PSU JDK-8301065 11, 17 Handle control characters in java_lang_String::print PSU JDK-8301167 11 Update VerifySignedJar to actually exercise and test verification PSU JDK-8301189 17 validate-source fails after JDK-8298873 PSU JDK-8301247 17, 21 JPackage app-image exe launches multiple exe’s in JDK 17+ PSU JDK-8301341 21 LinkedTransferQueue does not respect timeout for poll() PSU JDK-8301377 17 adjust timeout for JLI GetObjectSizeIntrinsicsTest.java subtest again PSU JDK-8301455 17 comments in TestTypeAnnotations still refer to resolved JDK-8068737 PSU JDK-8301457 17, 21 Code in SendPortZero.java is uncommented even after JDK-8236852 was fixed PSU JDK-8301489 17, 21 C1: ShortLoopOptimizer might lift instructions before their inputs PSU JDK-8301570 11, 17 Test runtime/jni/nativeStack/ needs to detach the native thread PSU JDK-8301701 17 java/net/DatagramSocket/DatagramSocketMulticasting.java should be hardened PSU JDK-8301846 21 Invalid TargetDataLine after screen lock when using JFileChooser or COM library PSU JDK-8302109 17 Trivial fixes to btree tests PSU JDK-8302525 11, 17 Write a test to check various components send Events while mouse and key are used simultaneously PSU JDK-8302607 17 increase timeout for ContinuousCallSiteTargetChange.java PSU JDK-8303384 8 Improved communication in CORBA PSU JDK-8303607 11, 17 SunMSCAPI provider leaks memory and keys PSU JDK-8303737 21 C2: Load can bypass subtype check that enforces it’s from the right object type PSU JDK-8304174 17 Remove delays from httpserver tests PSU JDK-8304954 17 SegmentedCodeCache fails when using large pages PSU JDK-8305502 17 adjust timeouts in three more M&M tests PSU JDK-8305505 17 NPE in javazic compiler PSU JDK-8305646 17 compile error on Alpine with gcc12 after 8298619 in libGetXSpace.c PSU JDK-8305815 8, 11, 17 Update Libpng to 1.6.39 PSU JDK-8306134 11 Open source some AWT tests relating to Button and a few other classes PSU JDK-8306135 11 Clean up and open source some AWT tests PSU JDK-8306280 11, 17 Open source several choice AWT tests PSU JDK-8306372 11 Open source AWT CardLayout and Checkbox tests PSU JDK-8306430 11 Open source some AWT tests related to TextComponent and Toolkit PSU JDK-8306561 21 gtest/NMTGtests.java#nmt crashes with SIGSEGV on AIX PSU JDK-8306575 11 Clean up and open source four Dialog related tests PSU JDK-8306765 11 Some client related jtreg problem list entries are malformed PSU JDK-8306881 8, 11, 17 Update FreeType to 2.13.0 PSU JDK-8306883 11 Thread stacksize is reported with wrong units in os::create_thread logging PSU JDK-8307079 11 Update test java/awt/Choice/DragOffNoSelect.java PSU JDK-8307123 17 Fix deprecation warnings in DPrinter PSU JDK-8307165 11 java/awt/dnd/NoFormatsDropTest/NoFormatsDropTest.java timed out PSU JDK-8307278 8, 11, 17, 21 Upgrade Libpng PSU JDK-8307286 8, 11, 17, 21 Upgrade FreeType PSU JDK-8307311 17 Timeouts on one macOS 12.6.1 host of two Swing JTableHeader tests PSU JDK-8307403 17 java/util/zip/DeInflate.java timed out PSU JDK-8308047 17 java/util/concurrent/ScheduledThreadPoolExecutor/BasicCancelTest.java timed out and also had jcmd pipe errors PSU JDK-8308103 17, 21 Massive (up to ~30x) increase in C2 compilation time since JDK 17 PSU JDK-8308116 17 jdk.test.lib.compiler.InMemoryJavaCompiler.compile does not close files PSU JDK-8308223 17 failure handler missed jcmd.vm.info command PSU JDK-8308452 21 Extend internal Architecture enum with byte order and address size PSU JDK-8308479 21 [s390x] Implement alternative fast-locking scheme PSU JDK-8308592 11, 17, 21 Framework for CA interoperability testing PSU JDK-8308593 17, 21 Add KEEPALIVE Extended Socket Options Support for Windows PSU JDK-8308910 11, 17 Allow executeAndLog to accept running process PSU JDK-8309032 17 jpackage does not work for module projects unless --module-path is specified PSU JDK-8309088 8 security/infra/java/security/cert/CertPathValidator/certification/AmazonCA.java fails PSU JDK-8309095 11 Remove UTF-8 character from TaskbarPositionTest.java PSU JDK-8309104 17 [JVMCI] compiler/unsafe/UnsafeGetStableArrayElement test asserts wrong values with Graal PSU JDK-8309209 21 C2 failed \"assert(_stack_guard_state == stack_guard_reserved_disabled) failed: inconsistent state\" PSU JDK-8309216 17 Cast from jchar* to char* in test java/io/GetXSpace.java PSU JDK-8309258 17 RISC-V: Add riscv_hwprobe syscall PSU JDK-8309305 21 sun/security/ssl/SSLSocketImpl/BlockedAsyncClose.java fails with jtreg test timeout PSU JDK-8309502 17 RISC-V: String.indexOf intrinsic may produce misaligned memory loads PSU JDK-8309545 21 Thread.interrupted from virtual thread needlessly resets interrupt status PSU JDK-8309663 21 test fails \"assert(check_alignment(result)) failed: address not aligned: 0x00000008baadbabe\" PSU JDK-8309778 17, 21 java/nio/file/Files/CopyAndMove.java fails when using second test directory PSU JDK-8309966 8, 11, 17, 21 Enhanced TLS connections PSU JDK-8309974 17, 21 some JVMCI tests fail when VM options include -XX:+EnableJVMCI PSU JDK-8310233 17 Fix THP detection on Linux PSU JDK-8310239 21 Add missing cross modifying fence in nmethod entry barriers PSU JDK-8310265 11, 17 (process) jspawnhelper should not use argv[0] PSU JDK-8310268 17 RISC-V: misaligned memory access in String.Compare intrinsic PSU JDK-8310512 21 Cleanup indentation in jfc files PSU JDK-8310549 11 avoid potential leaks in KeystoreImpl.m related to JNU_CHECK_EXCEPTION early returns PSU JDK-8310596 21 Utilize existing method frame::interpreter_frame_monitor_size_in_bytes() PSU JDK-8310656 17 RISC-V: builtin_clear_cache can fail silently. PSU JDK-8310687 17 JDK-8303215 is incomplete PSU JDK-8310982 21 jdk/internal/util/ArchTest.java fails after JDK-8308452 failed with Method isARM() PSU JDK-8311261 21 [AIX] TestAlwaysPreTouchStacks.java fails due to java.lang.RuntimeException: Did not find expected NMT output PSU JDK-8311285 11 report some fontconfig related environment variables in hs_err file PSU JDK-8311511 17 Improve description of NativeLibrary JFR event PSU JDK-8311514 17, 21 Incorrect regex in TestMetaSpaceLog.java PSU JDK-8311585 17, 21 Add JRadioButtonMenuItem to bug8031573.java PSU JDK-8311591 21 Add SystemModulesPlugin test case that splits module descriptors with new local variables defined by DedupSetBuilder PSU JDK-8311592 17 ECKeySizeParameterSpec causes too many exceptions on third party providers PSU JDK-8311630 21 [s390] Implementation of Foreign Function & Memory API (Preview) PSU JDK-8311631 17, 21 When multiple users run tools/jpackage/share/LicenseTest.java, Permission denied for writing /var/tmp/*.files PSU JDK-8311680 21 Update the release version after forking Oct CPU23_10 PSU JDK-8311681 21 Update the Jan CPU24_01 release date in master branch after forking Oct CPU23_10 PSU JDK-8311813 8, 11, 17, 21 C1: Uninitialized PhiResolver::_loop field PSU JDK-8312065 11, 17 Socket.connect does not timeout when profiling PSU JDK-8312078 17, 21 [PPC] JcmdScale.java Failing on AIX PSU JDK-8312126 11, 17, 21 NullPointerException in CertStore.getCRLs after 8297955 PSU JDK-8312166 21 (dc) DatagramChannel’s socket adaptor does not release carrier thread when blocking in receive PSU JDK-8312174 21 missing JVMTI events from vthreads parked during JVMTI attach PSU JDK-8312182 17 THPs cause huge RSS due to thread start timing issue PSU JDK-8312191 21 ColorConvertOp.filter for the default destination is too slow PSU JDK-8312248 17, 21 Enhanced archival support redux PSU JDK-8312367 8, 11, 17, 21 Enhance security classes PSU JDK-8312394 17 [linux] SIGSEGV if kernel was built without hugepage support PSU JDK-8312395 17 Improve assertions in growableArray PSU JDK-8312433 21 HttpClient request fails due to connection being considered idle and closed PSU JDK-8312434 21 SPECjvm2008/xml.transform with CDS fails with \"can’t seal package nu.xom\" PSU JDK-8312440 17, 21 assert(cast != nullptr) failed: must have added a cast to pin the node PSU JDK-8312489 8, 11, 17 Increase jdk.jar.maxSignatureFileSize default which is too low for JARs such as WhiteSource/Mend unified agent jar PSU JDK-8312535 8, 11, 17 MidiSystem.getSoundbank() throws unexpected SecurityException PSU JDK-8312573 11, 17 Failure during CompileOnly parsing leads to ShouldNotReachHere PSU JDK-8312585 17 Rename DisableTHPStackMitigation flag to THPStackMitigation PSU JDK-8312592 17, 21 New parentheses warnings after HarfBuzz 7.2.0 update PSU JDK-8312612 17, 21 Handle WideCharToMultiByte return values PSU JDK-8312620 17 WSL Linux build crashes after JDK-8310233 PSU JDK-8312625 17 Test serviceability/dcmd/vm/TrimLibcHeapTest.java failed: RSS use increased PSU JDK-8312909 17 C1 should not inline through interface calls with non-subtype receiver PSU JDK-8313164 17, 21 src/java.desktop/windows/native/libawt/windows/awt_Robot.cpp GetRGBPixels adjust releasing of resources PSU JDK-8313206 21 PKCS11 tests silently skip execution PSU JDK-8313252 17, 21 Java_sun_awt_windows_ThemeReader_paintBackground release resources in early returns PSU JDK-8313322 17, 21 RISC-V: implement MD5 intrinsic PSU JDK-8313368 21 (fc) FileChannel.size returns 0 on block special files PSU JDK-8313575 21 Refactor PKCS11Test tests PSU JDK-8313576 11, 17 GCC 7 reports compiler warning in bundled freetype 2.13.0 PSU JDK-8313616 21 support loading library members on AIX in os::dll_load PSU JDK-8313626 11, 17 C2 crash due to unexpected exception control flow PSU JDK-8313643 21 Update HarfBuzz to 8.2.2 PSU JDK-8313656 21 assert(!JvmtiExport::can_support_virtual_threads()) with -XX:-DoJVMTIVirtualThreadTransitions PSU JDK-8313657 11, 17 com.sun.jndi.ldap.Connection.cleanup does not close connections on SocketTimeoutErrors PSU JDK-8313691 11, 17 use close after failing os::fdopen in vmError and ciEnv PSU JDK-8313756 21 [BACKOUT] 8308682: Enhance AES performance PSU JDK-8313760 21 [REDO] Enhance AES performance PSU JDK-8313779 17, 21 RISC-V: use andn / orn in the MD5 instrinsic PSU JDK-8313781 17, 21 Add regression tests for large page logging and user-facing error messages PSU JDK-8313782 17, 21 Add user-facing warning if THPs are enabled but cannot be used PSU JDK-8313792 11, 17, 21 Verify 4th party information in src/jdk.internal.le/share/legal/jline.md PSU JDK-8313815 11 The exception messages printed by jcmd ManagementAgent.start are corrupted on Japanese Windows PSU JDK-8313873 21 java/nio/channels/DatagramChannel/SendReceiveMaxSize.java fails on AIX due to small default RCVBUF size and different IPv6 Header interpretation PSU JDK-8314045 17, 21 ArithmeticException in GaloisCounterMode PSU JDK-8314063 11, 17 The socket is not closed in Connection::createSocket when the handshake failed for LDAP connection PSU JDK-8314094 11, 17, 21 java/lang/ProcessHandle/InfoTest.java fails on Windows when run as user with Administrator privileges PSU JDK-8314120 21 Add tests for FileDescriptor.sync PSU JDK-8314121 17, 21 test tools/jpackage/share/RuntimePackageTest.java#id0 fails on RHEL8 PSU JDK-8314139 17 TEST_BUG: runtime/os/THPsInThreadStackPreventionTest.java could fail on machine with large number of cores PSU JDK-8314144 17 gc/g1/ihop/TestIHOPStatic.java fails due to extra concurrent mark with -Xcomp PSU JDK-8314191 21 C2 compilation fails with \"bad AD file\" PSU JDK-8314226 21 Series of colon-style fallthrough switch cases with guards compiled incorrectly PSU JDK-8314242 11, 17, 21 Update applications/scimark/Scimark.java to accept VM flags PSU JDK-8314246 21 javax/swing/JToolBar/4529206/bug4529206.java fails intermittently on Linux PSU JDK-8314263 11, 17, 21 Signed jars triggering Logger finder recursion and StackOverflowError PSU JDK-8314330 21 java/foreign tests should respect vm flags when start new processes PSU JDK-8314476 21 TestJstatdPortAndServer.java failed with \"java.rmi.NoSuchObjectException: no such object in table\" PSU JDK-8314551 21 More generic way to handshake GC threads with monitor deflation PSU JDK-8314580 21 PhaseIdealLoop::transform_long_range_checks fails with assert \"was tested before\" PSU JDK-8314632 21 Intra-case dominance check fails in the presence of a guard PSU JDK-8314649 17, 21 Enhanced archival support redux PSU JDK-8314679 17 SA fails to properly attach to JVM after having just detached from a different JVM PSU JDK-8314759 21 VirtualThread.parkNanos timeout adjustment when pinned should be replaced PSU JDK-8314883 17, 21 Java_java_util_prefs_FileSystemPreferences_lockFile0 write result errno in missing case PSU JDK-8314935 21 Shenandoah: Unable to throw OOME on back-to-back Full GCs PSU JDK-8315026 21 java/lang/ProcessHandle/TreeTest.java fails intermittent on AIX in TreeTest.test5 PSU JDK-8315082 21 [REDO] Generational ZGC: Tests crash with assert(index == 0 || is_power_of_2(index)) PSU JDK-8315088 21 C2: assert(wq.size() - before == EMPTY_LOOP_SIZE) failed: expect the EMPTY_LOOP_SIZE nodes of this body if empty PSU JDK-8315135 8 Memory leak in the native implementation of Pack200.Unpacker.unpack() PSU JDK-8315195 17, 21 RISC-V: Update hwprobe query for new extensions PSU JDK-8315206 17, 21 RISC-V: hwprobe query is_set return wrong value PSU JDK-8315213 21 java/lang/ProcessHandle/TreeTest.java test enhance output of children PSU JDK-8315214 11, 17, 21 Do not run sun/tools/jhsdb tests concurrently PSU JDK-8315362 21 NMT: summary diff reports threads count incorrectly PSU JDK-8315377 17, 21 C2: assert(u→find_out_with(Op_AddP) == nullptr) failed: more than 2 chained AddP nodes? PSU JDK-8315383 21 jlink SystemModulesPlugin incorrectly parses the options PSU JDK-8315415 17, 21 OutputAnalyzer.shouldMatchByLine() fails in some cases PSU JDK-8315437 21 Enable parallelism in vmTestbase/nsk/monitoring/stress/classload tests PSU JDK-8315442 21 Enable parallelism in vmTestbase/nsk/monitoring/stress/thread tests PSU JDK-8315452 21 Erroneous AST missing modifiers for partial input PSU JDK-8315506 8 C99 compatibility issue in LinuxNativeDispatcher PSU JDK-8315545 21 C1: x86 cmove can use short branches PSU JDK-8315549 17, 21 CITime misreports code/total nmethod sizes PSU JDK-8315554 21 C1: Replace \"cmp reg, 0\" with \"test reg, reg\" on x86 PSU JDK-8315578 21 PPC builds are broken after JDK-8304913 PSU JDK-8315579 21 SPARC64 builds are broken after JDK-8304913 PSU JDK-8315606 17, 21 Open source few swing text/html tests PSU JDK-8315612 21 RISC-V: intrinsic for unsignedMultiplyHigh PSU JDK-8315644 17, 21 increase timeout of sun/security/tools/jarsigner/Warning.java PSU JDK-8315651 21 Stop hiding AIX specific multicast socket errors via NetworkConfiguration (aix) PSU JDK-8315683 11, 17, 21 Parallelize java/util/concurrent/tck/JSR166TestCase.java PSU JDK-8315684 21 Parallelize sun/security/util/math/TestIntegerModuloP.java PSU JDK-8315692 11, 17, 21 Parallelize gc/stress/TestStressRSetCoarsening.java test PSU JDK-8315696 11, 17, 21 SignedLoggerFinderTest.java test failed PSU JDK-8315702 21 jcmd Thread.dump_to_file slow with millions of virtual threads PSU JDK-8315706 21 com/sun/tools/attach/warnings/DynamicLoadWarningTest.java real fix for failure on AIX PSU JDK-8315735 21 VerifyError when switch statement used with synchronized block PSU JDK-8315751 17, 21 RandomTestBsi1999 fails often with timeouts on Linux ppc64le PSU JDK-8315766 11, 17, 21 Parallelize gc/stress/TestStressIHOPMultiThread.java test PSU JDK-8315770 11, 17, 21 serviceability/sa/TestJmapCoreMetaspace.java should run with -XX:-VerifyDependencies PSU JDK-8315774 21 Enable parallelism in vmTestbase/gc/g1/unloading tests PSU JDK-8315862 11 [11u] Backport 8227337: javax/management/remote/mandatory/connection/ReconnectTest.java NoSuchObjectException no such object in table PSU JDK-8315869 21 UseHeavyMonitors not used PSU JDK-8315920 21 C2: \"control input must dominate current control\" assert failure PSU JDK-8315931 21 RISC-V: xxxMaxVectorTestsSmokeTest fails when using RVV PSU JDK-8315936 21 Parallelize gc/stress/TestStressG1Humongous.java test PSU JDK-8315937 11, 17, 21 Enable parallelism in vmTestbase/nsk/stress/numeric tests PSU JDK-8315942 21 Sort platform enums and definitions after JDK-8304913 follow-ups PSU JDK-8315960 21 test/jdk/java/io/File/TempDirDoesNotExist.java leaves test files behind PSU JDK-8315971 21 ProblemList containers/docker/TestMemoryAwareness.java on linux-all PSU JDK-8316003 21 Update FileChooserSymLinkTest.java to HTML instructions PSU JDK-8316017 21 Refactor timeout handler in PassFailJFrame PSU JDK-8316025 21 Use testUI() method of PassFailJFrame.Builder in FileChooserSymLinkTest.java PSU JDK-8316030 21 Update Libpng to 1.6.40 PSU JDK-8316031 21 SSLFlowDelegate should not log from synchronized block PSU JDK-8316060 21 test/hotspot/jtreg/runtime/reflect/ReflectOutOfMemoryError.java may fail if heap is huge PSU JDK-8316087 11, 17, 21 Test SignedLoggerFinderTest.java is still failing PSU JDK-8316113 21 Infinite permission checking loop in java/net/spi/InetAddressResolverProvider/RuntimePermissionTest PSU JDK-8316123 21 ProblemList serviceability/dcmd/gc/RunFinalizationTest.java on AIX PSU JDK-8316130 21 Incorrect control in LibraryCallKit::inline_native_notify_jvmti_funcs PSU JDK-8316142 21 Enable parallelism in vmTestbase/nsk/monitoring/stress/lowmem tests PSU JDK-8316156 21 ByteArrayInputStream.transferTo causes MaxDirectMemorySize overflow PSU JDK-8316178 11, 17, 21 Better diagnostic header for CodeBlobs PSU JDK-8316179 21 Use consistent naming for lightweight locking in MacroAssembler PSU JDK-8316181 21 Move the fast locking implementation out of the .ad files PSU JDK-8316199 21 Remove sun/tools/jstatd/TestJstatd* tests from problemlist for Windows. PSU JDK-8316206 11, 17, 21 Test StretchedFontTest.java fails for Baekmuk font PSU JDK-8316304 21 (fs) Add support for BasicFileAttributes.creationTime() for Linux PSU JDK-8316337 21 (bf) Concurrency issue in DirectByteBuffer.Deallocator PSU JDK-8316341 21 sun/security/pkcs11/PKCS11Test.java needs adjustment on Linux ppc64le Ubuntu 22 PSU JDK-8316380 11 [11u] Backport 8170089: nsk/jdi/EventSet/resume/resume008: ERROR: suspendCounts don’t match for : Common-Cleaner PSU JDK-8316387 21 Exclude more failing multicast tests on AIX after JDK-8315651 PSU JDK-8316396 21 Endless loop in C2 compilation triggered by AddNode::IdealIL PSU JDK-8316399 21 Exclude java/net/MulticastSocket/Promiscuous.java on AIX PSU JDK-8316400 21 Exclude jdk/jfr/event/runtime/TestResidentSetSizeEvent.java on AIX PSU JDK-8316401 21 sun/tools/jhsdb/JStackStressTest.java failed with \"InternalError: We should have found a thread that owns the anonymous lock\" PSU JDK-8316411 21 compiler/compilercontrol/TestConflictInlineCommands.java fails intermittent with force inline by CompileCommand missing PSU JDK-8316414 21 C2: large byte array clone triggers \"failed: malformed control flow\" assertion failure on linux-x86 PSU JDK-8316415 21 Parallelize sun/security/rsa/SignedObjectChain.java subtests PSU JDK-8316418 21 containers/docker/TestMemoryWithCgroupV1.java get OOM killed with Parallel GC PSU JDK-8316436 21 ContinuationWrapper uses unhandled nullptr oop PSU JDK-8316468 21 os::write incorrectly handles partial write PSU JDK-8316514 11, 17, 21 Better diagnostic header for VtableStub PSU JDK-8316540 21 StoreReproducibilityTest fails on some locales PSU JDK-8316566 21 RISC-V: Zero extended narrow oop passed to Atomic::cmpxchg PSU JDK-8316581 21 Improve performance of Symbol::print_value_on() PSU JDK-8316585 21 [REDO] runtime/InvocationTests spend a lot of time on dependency verification PSU JDK-8316645 17, 21 RISC-V: Remove dependency on libatomic by adding cmpxchg 1b PSU JDK-8316659 21 assert(LockingMode != LM_LIGHTWEIGHT || flag == CCR0) failed: bad condition register PSU JDK-8316671 21 sun/security/ssl/SSLSocketImpl/SSLSocketCloseHang.java test fails intermittent with Read timed out PSU JDK-8316679 21 C2 SuperWord: wrong result, load should not be moved before store if not comparable PSU JDK-8316710 11, 17, 21 Exclude java/awt/font/Rotate/RotatedTextTest.java PSU JDK-8316719 21 C2 compilation still fails with \"bad AD file\" PSU JDK-8316735 21 Print LockStack in hs_err files PSU JDK-8316741 21 BasicStroke.createStrokedShape miter-limits failing on small shapes PSU JDK-8316743 17, 21 RISC-V: Change UseVectorizedMismatchIntrinsic option result to warning PSU JDK-8316746 11, 17, 21 Top of lock-stack does not match the unlocked object PSU JDK-8316778 17, 21 test hprof lib: invalid array element type from JavaValueArray.elementSize PSU JDK-8316859 17, 21 RISC-V: Disable detection of V through HWCAP PSU JDK-8316879 21 RegionMatches1Tests fails if CompactStrings are disabled after JDK-8302163 PSU JDK-8316880 21 AArch64: \"stop: Header is not fast-locked\" with -XX:-UseLSE since JDK-8315880 PSU JDK-8316906 11, 17, 21 Clarify TLABWasteTargetPercent flag PSU JDK-8316929 21 Shenandoah: Shenandoah degenerated GC and full GC need to cleanup old OopMapCache entries PSU JDK-8316933 21 RISC-V: compiler/vectorapi/VectorCastShape128Test.java fails when using RVV PSU JDK-8316935 21 [s390x] Use consistent naming for lightweight locking in MacroAssembler PSU JDK-8316958 21 Add test for unstructured locking PSU JDK-8316967 21 Correct the scope of vmtimer in UnregisteredClasses::load_class PSU JDK-8317040 8, 11, 17 Adapt a cleaner test for older releases PSU JDK-8317121 17 vector_masked_load instruction is moved too early after JDK-8286941 PSU JDK-8317136 21 [AIX] Problem List runtime/jni/terminatedThread/TestTerminatedThread.java PSU JDK-8317257 21 RISC-V: llvm build broken PSU JDK-8317262 21 LockStack::contains(oop) fails \"assert(t→is_Java_thread()) failed: incorrect cast to JavaThread\" PSU JDK-8317291 8 Missing null check for nmethod::is_native_method() PSU JDK-8317294 21 Classloading throws exceptions over already pending exceptions PSU JDK-8317331 21 Solaris build failed with \"declaration can not follow a statement (E_DECLARATION_IN_CODE)\" PSU JDK-8317335 21 Build on windows fails after 8316645 PSU JDK-8317336 21 Assertion error thrown during 'this' escape analysis PSU JDK-8317373 8, 11, 17, 21 Add Telia Root CA v2 PSU JDK-8317374 8, 11, 17, 21 Add Let’s Encrypt ISRG Root X2 PSU JDK-8317439 21 Updating RE Configs for BUILD REQUEST 21.0.2+1 PSU JDK-8317507 21 C2 compilation fails with \"Exceeded _node_regs array\" PSU JDK-8317581 21 [s390x] Multiple test failure with LockingMode=2 PSU JDK-8317603 21 Improve exception messages thrown by sun.nio.ch.Net native methods (win) PSU JDK-8317692 21 jcmd GC.heap_dump performance regression after JDK-8292818 PSU JDK-8317705 17, 21 ProblemList sun/tools/jstat/jstatLineCountsX.sh on linux-ppc64le and aix due to JDK-8248691 PSU JDK-8317706 17, 21 Exclude java/awt/Graphics2D/DrawString/RotTransText.java on linux PSU JDK-8317711 21 Exclude gtest/GTestWrapper.java on AIX PSU JDK-8317736 21 Stream::handleReset locks twice PSU JDK-8317751 21 ProblemList ConsumeForModalDialogTest.java, MenuItemActivatedTest.java & MouseModifiersUnitTest_Standard.java for windows PSU JDK-8317772 17, 21 NMT: Make peak values available in release builds PSU JDK-8317790 21 Fix Bug entry for exclusion of runtime/jni/terminatedThread/TestTerminatedThread.java on AIX PSU JDK-8317803 21 Exclude java/net/Socket/asyncClose/Race.java on AIX PSU JDK-8317818 21 Combinatorial explosion during 'this' escape analysis PSU JDK-8317834 17, 21 java/lang/Thread/IsAlive.java timed out PSU JDK-8317839 21 Exclude java/nio/channels/Channels/SocketChannelStreams.java on AIX PSU JDK-8317920 11, 17, 21 JDWP-agent sends broken exception event with onthrow option PSU JDK-8317959 21 Check return values of malloc in native java.base coding PSU JDK-8317964 21 java/awt/Mouse/MouseModifiersUnitTest/MouseModifiersUnitTest_Standard.java fails on macosx-all after JDK-8317751 PSU JDK-8317967 11, 17, 21 Enhance test/jdk/javax/net/ssl/TLSCommon/SSLEngineTestCase.java to handle default cases PSU JDK-8317987 21 C2 recompilations cause high memory footprint PSU JDK-8318078 21 ADLC: pass ASSERT and PRODUCT flags PSU JDK-8318089 21 Class space not marked as such with NMT when CDS is off PSU JDK-8318137 21 Change milestone to fcs for all releases PSU JDK-8318144 21 Match on enum constants with body compiles but fails with MatchException PSU JDK-8318183 21 C2: VM may crash after hitting node limit PSU JDK-8318240 21 [AIX] Cleaners.java test failure PSU JDK-8318415 21 Adjust describing comment of os_getChildren after 8315026 PSU JDK-8318474 21 Fix memory reporter for thread_count PSU JDK-8318525 21 Atomic gtest should run as TEST_VM to access VM capabilities PSU JDK-8318528 21 Rename TestUnstructuredLocking test PSU JDK-8318562 21 Computational test more than 2x slower when AVX instructions are used PSU JDK-8318587 21 refresh libraries cache on AIX in print_vm_info PSU JDK-8318591 21 avoid leaks in loadlib_aix.cpp reload_table() PSU JDK-8318705 11, 17, 21 [macos] ProblemList java/rmi/registry/multipleRegistries/MultipleRegistries.java PSU JDK-8318736 21 com/sun/jdi/JdwpOnThrowTest.java failed with \"transport error 202: bind failed: Address already in use\" PSU JDK-8318759 8, 11, 17, 21 Add four DigiCert root certificates PSU JDK-8318855 17 Extra file added by mistake during the backport of JDK-8283326 PSU JDK-8318889 17, 21 C2: add bailout after assert Bad graph detected in build_loop_late PSU JDK-8318895 21 Deoptimization results in incorrect lightweight locking stack PSU JDK-8318951 21 Additional negative value check in JPEG decoding PSU JDK-8318953 17, 21 RISC-V: Small refactoring for MacroAssembler::test_bit PSU JDK-8318955 21 Add ReleaseIntArrayElements in Java_sun_awt_X11_XlibWrapper_SetBitmapShape XlbWrapper.c to early return PSU JDK-8318957 21 Enhance agentlib:jdwp help output by info about allow option PSU JDK-8318981 21 compiler/compilercontrol/TestConflictInlineCommands.java fails intermittent with 'disallowed by CompileCommand' missing from stdout/stderr PSU JDK-8319104 21 GtestWrapper crashes with SIGILL in AsyncLogTest::test_asynclog_raw on AIX opt PSU JDK-8319120 21 Unbound ScopedValue.get() throws the wrong exception PSU JDK-8319184 17, 21 RISC-V: improve MD5 intrinsic PSU JDK-8319187 8, 11, 17, 21 Add three eMudhra emSign roots PSU JDK-8319195 21 Move tier 1 vector API regression tests to tier 2 PSU JDK-8319268 21 Build failure with GCC8.3.1 after 8313643 PSU JDK-8319339 21 Internal error on spurious markup in a hybrid snippet PSU JDK-8319405 8 [s390] [jdk8] Increase javac default stack size for s390x zero PSU JDK-8319436 21 Proxy.newProxyInstance throws NPE if loader is null and interface not visible from class loader PSU JDK-8319525 17, 21 RISC-V: Rename *_riscv64.ad files to *_riscv.ad under riscv/gc PSU JDK-8319532 21 jshell - Non-sealed declarations sometimes break a snippet evaluation PSU JDK-8319542 21 Fix boundaries of region to be tested with os::is_readable_range PSU JDK-8319700 21 [AArch64] C2 compilation fails with \"Field too big for insn\" PSU JDK-8319828 21 runtime/NMT/VirtualAllocCommitMerge.java may fail if mixing interpreted and compiled native invocations PSU JDK-8319922 21 libCreationTimeHelper.so fails to link in JDK 21 PSU JDK-8319958 17, 21 test/jdk/java/io/File/libGetXSpace.c does not compile on Windows 32-bit PSU JDK-8319961 21 JvmtiEnvBase doesn’t zero _ext_event_callbacks PSU JDK-8320001 21 javac crashes while adding type annotations to the return type of a constructor PSU JDK-8320209 17, 21 VectorMaskGen clobbers rflags on x86_64 PSU JDK-8320280 21 RISC-V: Avoid passing t0 as temp register to MacroAssembler::lightweight_lock/unlock PSU JDK-8320363 21 ppc64 TypeEntries::type_unknown logic looks wrong, missed optimization opportunity PSU JDK-8320601 17, 21 ProblemList java/lang/invoke/lambda/LambdaFileEncodingSerialization.java on linux-all PSU JDK-8321067 21 Unlock experimental options in EATests.java PSU JDK-8322883 21 [BACKOUT] 8225377: type annotations are not visible to javac plugins across compilation boundaries PSU JDK-8322985 21 [BACKOUT] 8318562: Computational test more than 2x slower when AVX instructions are used PSU"
}, {
  "objectID" : "12309d7e-235d-44b0-9da2-64005ad4f28e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "OpenJFX Fixes and Enhancements",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#openjfx-fixes-and-enhancements",
  "content" : "OpenJFX Fixes and Enhancements The following table describes the OpenJFX changes implemented in this release. OpenJDK Patch ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8181084 11 JavaFX show big icons in system menu on macOS with Retina display CPU,PSU JDK-8251240 11, 17, 21 Menus inaccessible on Linux with i3 wm PSU JDK-8284544 8 [Win] Name-Property of Spinner cannot be changed PSU JDK-8292922 11 [Linux] No more drag events when new Stage is created in drag handler PSU JDK-8307536 17, 21 FileAlreadyExistsException from NativeLibLoader when running concurrent applications with empty cache PSU JDK-8313321 8, 17, 21 Set minimum python version in WebKit cmake scripts PSU JDK-8313648 17, 21 JavaFX application continues to show a black screen after graphic card driver crash PSU JDK-8314484 17, 21 Update Gradle to 8.3 PSU JDK-8314486 17, 21 JavaFX build uses deprecated features that will be removed in gradle 8 PSU JDK-8315074 8, 17, 21 Possible null pointer access in native glass PSU JDK-8315958 8, 17, 21 Missing range checks in GlassPasteboard PSU JDK-8317370 17, 21 JavaFX runtime version is wrong at runtime PSU JDK-8317508 8, 17, 21 Provide media support for libavcodec version 60 PSU JDK-8318115 17, 21 Webkit build fails after gradle 8.4 PSU JDK-8318386 17, 21 Update Glib to 2.78.0 PSU JDK-8318387 17, 21 Update GStreamer to 1.22.6 PSU JDK-8318984 17, 21 Update to Xcode 14.3.1 on macOS PSU JDK-8319066 8, 11, 17, 21 Application window not activated in macOS 14 Sonoma when launched from command line PSU JDK-8319079 17, 21 Missing range checks in decora PSU JDK-8319231 11, 17, 21 Unrecognized \"minimum\" key in .jcheck/conf causes /reviewers command to be ignored PSU JDK-8319669 17, 21 [macos14] Running any JavaFX app prints Secure coding warning PSU JDK-8319762 17, 21 Update to Visual Studio 2022 version 17.6.5 on Windows PSU JDK-8319996 17, 21 Update to GCC 13.2.0 on Linux PSU JDK-8320267 11, 17, 21 WebView crashes on macOS 11 with WebKit 616.1 PSU"
}, {
  "objectID" : "8c3073b8-0004-40eb-b865-dc06bf3fee7d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Fixes and Enhancements Specific to Azul Zulu Builds of OpenJDK",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#fixes-and-enhancements-specific-to-azul-zulu-builds-of-openjdk",
  "content" : "Fixes and Enhancements Specific to Azul Zulu Builds of OpenJDK The following table describes the Azul Zulu bug fixes implemented in this release. Issue ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. ZULU-56016 8, 11, 17 BCFIPS should be updated to version 1.0.24 CPU,PSU ZULU-56533 6 Do selective changes re: transfer of LT and LV currencies to EUR CPU,PSU ZULU-29744 8 fix compilation issues for gcc9.3 PSU ZULU-34602 21 Failure in vmTestbase/nsk/jdi/ReferenceType/instances/instances003/instances003.java - com.sun.jdi.ObjectCollectedException PSU ZULU-34883 21 integrate CRS agent to Zulu17 PSU ZULU-34955 21 Failure in about 50 security tests - LinkageError occurred while loading main class com.sun.javatest.regtest.agent.MainWrapper PSU ZULU-35818 21 CDS tests fails with assertion if CRS enabled PSU ZULU-35819 21 regression tests runtime/SelectionResolution/* failed: SIGSEGV PSU ZULU-35876 21 Failure in java/lang/SecurityManager/CheckAccessClassInPackagePermissions.java - Module module com.azul.crs.client has not been granted (\"java.lang.RuntimePermission\" \"accessClassInPackage.com.azul.tooling.in\") PSU ZULU-37416 21 ClassNotFoundException com.azul.tooling.Handler PSU ZULU-37449 21 Add a configurable delay for starting of CRS code which has side effects on JDK initialization PSU ZULU-37617 21 High CPU load when CRS is enabled PSU ZULU-37651 21 JVM crashes in CI runs PSU ZULU-37670 21 CRS related renamings accordingly to PMM-282 PSU ZULU-37671 21 Failure in 19 tests in serviceability/sa/ and sun/tools/jhsdb/ - Unable to deduce type of thread from address PSU ZULU-37720 21 [REGRESSION] Test jdk/modules/etc/VerifyModuleDelegation.java fails with NPE PSU ZULU-38273 21 drainQueues() after disableCRS() crashes VM PSU ZULU-38294 21 Failure in java/lang/ClassLoader/securityManager/ClassLoaderTest.java - IllegalStateException: getSystemClassLoader cannot be called during the system class loader instantiation PSU ZULU-38301 21 Failure in several regression tests sun/security/krb5/auto/* and java/time/tck/java/time/chrono/* - Unexpected exit from test [exit code: -1073740791] PSU ZULU-38367 21 Fix for ZULU-38294 breaks zulu build PSU ZULU-38448 21 Failures in six various tests on all (and only) \"non-CRS\" platforms PSU ZULU-38511 21 All CRS modules should be loaded by boot class loader (again) PSU ZULU-40762 21 Zulu fastdebug failed to start with CRS enabled PSU ZULU-40964 21 Processing of VM_METHOD_FIRST_CALLED at client side PSU ZULU-40966 21 Fix 2 Address Sanitizer (ASAN) sscanf buffer overflows - any testcase PSU ZULU-43110 21 notify_class_load should be configurable by CrsClassLoadMessage::should_notify() PSU ZULU-43971 21 Update CRS client to version 1.0.11 PSU ZULU-45003 21 CRS agent without -XX:+UnlockExperimentalVMOptions/UnlockExperimentalCRS PSU ZULU-45268 21 Add sending of VM_METHOD_FIRST_CALLED to all supported JVMs PSU ZULU-46703 21 Use CRS Agent 1.0.26 PSU ZULU-47172 17, 21 [CRaC] jdk/jdk/crac jtreg tests failed on CentOS 8 PSU ZULU-48353 8 restore proper JNF bunding PSU ZULU-48356 21 Failure in com/sun/management/DiagnosticCommandMBean/DcmdMBeanPermissionsTest.java - SecurityException: (\"java.lang.RuntimePermission\" \"getClassLoader\") PSU ZULU-48669 21 unnecessary call of hash.cpp/sha256 method when CRS is not intended to be started PSU ZULU-48695 21 adding heuristic: report compilation events as VM_METHOD_FIRST_CALLED event PSU ZULU-48967 21 AVD agent to be used: 1.0.30 PSU ZULU-49206 21 AVD agent to be used: 1.0.32 PSU ZULU-51813 17 Enable BCFIPS provider configuration PSU ZULU-51814 11 FIPS for Zulu 11 PSU ZULU-51913 8 JBOSS EAP 7.4.0 fails with Zulu 8.74.0.11 PSU ZULU-52197 21 AVD for Zulu 21 PSU ZULU-52231 11 Move zulu11 aarch32 builds to ent jenkins env PSU ZULU-52236 21 Fix partial initialization warning for _listener_address PSU ZULU-53286 Rename linux-arm to linux-armhf in build matrix PSU ZULU-53497 8 Improve zoich build infra PSU ZULU-53520 21 Upgrade boot jdk for zulu21 PSU ZULU-53750 17, 21 Checkpoint while debugging PSU ZULU-54108 17, 21 Could not find criuengine for zulu with crac for win & mac PSU ZULU-54275 8, 11, 17, 21 AVD code inventory does not work properly on Zulu17 PSU ZULU-54288 11, 17 Add UseBCFIPS option for Zulu11 PSU ZULU-54295 17 libGetXSpace.c fails to compile on win32 PSU ZULU-54628 8 [OJ-reg] \"com/sun/jdi/StepTest.java\" test failed with \"java.lang.IllegalArgumentException: Bad method name/signature: com.azul.crac.Core.go:()V\" PSU ZULU-54881 17, 21 [CRaC] 4 jdk/crac jtreg tests fail on macosx in Zulu 17.46 and Zulu 21.30 builds PSU ZULU-54882 17, 21 [JCK21] Multiple \"api/java_lang/\" tests failed with \"java.lang.NullPointerException\" PSU ZULU-54890 17, 21 [CRaC] sun/misc/SunMiscSignalTest.java test fails on macosx in Zulu 17.46.27, 17.46.28, 21.30.19, 21.30.20 CRaC builds PSU ZULU-54928 22 EA fails to sign correctly after 22.0.51+ PSU ZULU-55359 21 CI for CRaC PSU ZULU-55361 Update base images for armv6hf-sdk and armv5sf-sdk PSU ZULU-55363 21 Backport test fixes from upstream PSU ZULU-55547 8 Remove OpenJSSE and Legacy8uJSSE from Zulu8 PSU ZULU-55559 17, 21 JMX cannot be enabled after restore PSU ZULU-55562 linux-armsf started to fail after transition to ent build env PSU ZULU-55812 21 Change to Xcode 14.3 for building on macOS PSU ZULU-55843 17, 21 Zulu CRaC + GC log PSU ZULU-56027 17, 21 Zulu21 CRaC build does not work with CRS on Windows PSU ZULU-56028 17, 21 CRS: --disable-precompiled-headers fails to compile PSU ZULU-56029 8, 11, 17, 21 review references to slackoverflow PSU ZULU-56061 17, 21 CRaC: OSX: --disable-precompiled-headers fails to compile PSU ZULU-56146 8 Mass build failures after 8138694 PSU ZULU-56164 8 Update .dependencies file with freetype for custom aarch64 compiler PSU ZULU-56206 17, 21 CRaC code has bad words PSU ZULU-56211 8 Fix PPC family builds PSU ZULU-56430 21 Allow Merge PRs in CI PSU ZULU-6566 21 Modules without classes can not be imported into jre image PSU"
}, {
  "objectID" : "bdf21691-aca9-4a10-8674-e28fbf9480d3",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Fixes and Enhancements Specific to Azul Zulu Builds of OpenJDK With JavaFX",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#fixes-and-enhancements-specific-to-azul-zulu-builds-of-openjdk-with-javafx",
  "content" : "Fixes and Enhancements Specific to Azul Zulu Builds of OpenJDK With JavaFX The following table describes the Azul ZuluFX bug fixes implemented in this release. Issue ID Azul Zulu Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. ZULU-55389 8 jfx8: typo in Mesa 3-D Graphics Library version CPU,PSU ZULU-52487 8, 17, 21 Use VS2022-17.6.5 for WebKit v616.1 PSU ZULU-52980 17, 21 win32: webkit build is broken after 8238650 PSU ZULU-55581 17, 21 win32: glib build is broken after JDK-8318386 PSU"
}, {
  "objectID" : "1ecad5d0-9f86-4e36-979b-d4f0abc70f88",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Third Party Licenses",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#third-party-licenses",
  "content" : "Third Party Licenses"
}, {
  "objectID" : "c2263440-da25-48b0-a1e5-120ceb9b4b27",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Quarterly Update Release Notes",
  "section" : "Azul Platform Core January 2024 CPU Release",
  "url" : "https://docs.azul.com/core/release-notes",
  "link" : "https://docs.azul.com/core/release-notes#azul-platform-core-january-2024-cpu-release",
  "content" : "Azul Platform Core January 2024 CPU Release Java Version Azul Platform Core TPL Azul Zulu JavaFX Components 21 HTML, PDF HTML, PDF 17 HTML, PDF HTML, PDF 11 HTML, PDF HTML, PDF 8 HTML, PDF HTML, PDF 7 HTML, PDF N/A 6 HTML, PDF N/A"
}, {
  "objectID" : "8c877d31-0f81-4ff4-9aa3-fcce6af37dc2",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Supported Platforms",
  "section" : "",
  "url" : "https://docs.azul.com/core/supported-platforms",
  "link" : "https://docs.azul.com/core/supported-platforms",
  "content" : "This section lists the operating systems that are supported with the release of Azul Zulu of January 2024."
}, {
  "objectID" : "a528c1ab-6634-45c5-8a6b-50cca1be7c14",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Supported Platforms",
  "section" : "Azul Zulu Builds of OpenJDK Without and With OpenJFX",
  "url" : "https://docs.azul.com/core/supported-platforms",
  "link" : "https://docs.azul.com/core/supported-platforms#azul-zulu-builds-of-openjdk-without-and-with-openjfx",
  "content" : "Azul Zulu Builds of OpenJDK Without and With OpenJFX Some versions of Azul Zulu are available in different packages for specific platforms, as indicated in this overview table with: : Build of OpenJDK without OpenJFX. : Build of OpenJDK without and with OpenJFX. Note The list of supported configurations and platform includes, but is not limited to, the table below. Don’t hesitate to contact Support if you have issues with Azul Zulu Builds of OpenJDK on any other platform or configuration. Operating System Azul Zulu Version 6 7 8 11 17 21 Windows (x86 32/64-bit) Windows Server 2022 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows Server 2019 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows Server 2016 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows 11 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows 10 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Windows (ARM 64-bit) Windows 11 n/a n/a n/a n/a n/a Windows 10 n/a n/a n/a n/a n/a Linux (x86 32/64-bit) RHEL 9.x n/a [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. RHEL 8.x [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. RHEL 7.x [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. SLES 15 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. SLES 12 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. CentOS Stream [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 22.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 20.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Ubuntu 18.04 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 12 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 11 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Debian 10 [1]Build of OpenJDK (with and without OpenJFX) only for 64-bit. Wind River 8.x n/a n/a n/a n/a CoreOS n/a n/a Alpine Linux 3.11 or later n/a n/a Amazon Linux 2023 n/a n/a n/a Linux (ARM 64-bit) Ubuntu 22.04 n/a n/a Ubuntu 20.04 n/a n/a Ubuntu 18.04 n/a n/a n/a n/a Debian 12 n/a n/a Debian 11 n/a n/a Alpine Linux 3.11 or later n/a n/a Amazon Linux 2023 n/a n/a n/a Linux with kernel 3.10.x and glibc 2.23 [2]Bundles with the Checkpoint/Restore (with the criu suffix) functionality require kernel 4.4.0+. [3]Bundles compiled with GCC 9 (with the gcc9 suffix) require glibc 2.29. n/a n/a n/a n/a Linux (ARM 32-bit Hard-Float) Ubuntu 18.04 [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a Raspbian 10 Buster [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a Raspbian 9 Stretch [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. n/a n/a n/a n/a Linux with kernel 3.10.x and glibc 2.9 [4]Bundles with the C1 compiler were tested on ARMv6/ARMv7/ARMv8 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7/ARMv8 hardware. [5]Bundles with the CRaM (with the cr suffix) functionality require glibc 2.13. n/a n/a n/a n/a Linux (ARM 32-bit Soft-Float) [6]Bundles with the C1 compiler will use FPU, if it is present and available, to speed up floating point operations. Bundles with both C1 and C2 compilers require FPU. Linux with kernel 2.6.34 and glibc 2.5 [7]Bundles with the C1 compiler. Tested on ARMv5 hardware. n/a n/a n/a n/a Debian 7 Wheezy [8]Bundles with the C1 compiler were tested on ARMv6 and ARMv7 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7 hardware. n/a n/a n/a n/a Linux with kernel 3.10.x and glibc 2.9 [8]Bundles with the C1 compiler were tested on ARMv6 and ARMv7 hardware. Bundles with both C1 and C2 compilers were tested on ARMv7 hardware. n/a n/a n/a n/a Linux (MIPS 32-bit) [9]MIPS32r2 ISA, Big Endian, FPU in 32-bit mode or equivalent emulation. Linux with kernel 4.9.59 and glibc 2.9 [10]Linux soft-float O32 MIPS ABI n/a n/a n/a n/a n/a Linux (ppc64 Big Endian) Linux with kernel 3.8.13 and glibc 2.22 [11]Bundles for this platform were tested on QorIQ® T4240-RDB. n/a n/a n/a n/a n/a Linux (ppc32 Hard-float and SPE) Linux with kernel 3.12.37 and glibc 2.20 [12]Hard-Float EABI bundles were tested on QorIQ® T1024RDB. SPE ABI bundles were tested on NXP® P2020RDB. n/a n/a n/a n/a n/a QNX (ARMv7 32-bit Hard-Float ABI) QNX 7.0 n/a n/a n/a n/a n/a MacOS (x86 64-bit) macOS 12+ n/a MacOS (Apple Silicon) macOS 12+ n/a n/a Solaris (x86 and Sparc) Solaris 11 n/a n/a n/a Solaris 10 n/a n/a n/a n/a AIX (ppc64) AIX 7.3 n/a n/a n/a n/a n/a"
}, {
  "objectID" : "6679717a-192c-4989-b9ed-02c9d4124428",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "January 2024 Supported Platforms",
  "section" : "Azul Zulu Builds of OpenJDK With CRaC",
  "url" : "https://docs.azul.com/core/supported-platforms",
  "link" : "https://docs.azul.com/core/supported-platforms#azul-zulu-builds-of-openjdk-with-crac",
  "content" : "Azul Zulu Builds of OpenJDK With CRaC Note Currently, CRaC is only available for the specified Linux systems, in version 17 and 21 of Azul Zulu Builds of OpenJDK. For development, you can use the CRaC Java library on any platform and simulate the CRaC functionality. : Build of OpenJDK with full CRaC support. : Build of OpenJDK with CRaC support for development purposes. These provide a simulated checkpoint/restore mechanism to be used for development and testing. Operating System Azul Zulu Version 17 21 x86 64-bit ARM 64-bit x86 64-bit ARM 64-bit Linux Alpine Linux 3.11+ Windows n/a n/a macOS"
}, {
  "objectID" : "e2c23f0c-d90f-41ba-9aeb-8ac151ded992",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl",
  "content" : "This page contains links to the documents with licenses for third party software included in the latest version of Azul Platform Core."
}, {
  "objectID" : "63465e73-6946-42de-b251-f087833be674",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "Azul Platform Core January 2024 CPU Release",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#azul-platform-core-january-2024-cpu-release",
  "content" : "Azul Platform Core January 2024 CPU Release Java Version Azul Platform Core TPL Azul Zulu JavaFX Components 21 HTML, PDF HTML, PDF 17 HTML, PDF HTML, PDF 11 HTML, PDF HTML, PDF 8 HTML, PDF HTML, PDF 7 HTML, PDF N/A 6 HTML, PDF N/A"
}, {
  "objectID" : "c8c4e16c-68e2-43aa-a49b-f5cc99b99cda",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "TPL Documents Archive",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#tpl-documents-archive",
  "content" : "TPL Documents Archive October 2023 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 17 Zulu 21 - - JFX 8 JFX 11 JFX 17 JFX 21 September 2023 (21-ga) Zulu 21 JFX 21 July 2023 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 17 Zulu 20 - - JFX 8 JFX 11 JFX 17 JFX 20 April 2023 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 17 Zulu 20 - - JFX 8 JFX 11 JFX 17 JFX 20 March 2023 (20-ga) Zulu 20 JFX 20 January 2023 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 Zulu 19 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 JFX 19 October 2022 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 Zulu 19 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 JFX 19 September 2022 (19-ga) Zulu 19 JFX 19 July 2022 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 Zulu 18 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 JFX 18 April 2022 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 Zulu 18 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 JFX 18 March 2022 (18-ga) Zulu 18 JFX 18 January 2022 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 October 2021 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 September 2021 (17-ga) Zulu 17 JFX 17 July 2021 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 16 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 16 April 2021 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 16 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 16"
}, {
  "objectID" : "e04c0a63-7c8c-4821-8596-7bc9557c027d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "October 2023",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#october-2023",
  "content" : "October 2023 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 17 Zulu 21 - - JFX 8 JFX 11 JFX 17 JFX 21"
}, {
  "objectID" : "f441fddf-f7d1-4f9e-b2ab-2ede3e59a87c",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "September 2023 (21-ga)",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#september-2023-21-ga",
  "content" : "September 2023 (21-ga) Zulu 21 JFX 21"
}, {
  "objectID" : "ab872f6a-3e63-4384-8437-969f8ad7ba4b",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "July 2023",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#july-2023",
  "content" : "July 2023 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 17 Zulu 20 - - JFX 8 JFX 11 JFX 17 JFX 20"
}, {
  "objectID" : "147cc32a-6e59-4ff3-8df5-068f4e00379a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "April 2023",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#april-2023",
  "content" : "April 2023 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 17 Zulu 20 - - JFX 8 JFX 11 JFX 17 JFX 20"
}, {
  "objectID" : "2289c0e0-928a-441e-afaa-864f6c53bf8d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "March 2023 (20-ga)",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#march-2023-20-ga",
  "content" : "March 2023 (20-ga) Zulu 20 JFX 20"
}, {
  "objectID" : "14089010-982f-445f-9a01-6229a7e98337",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "January 2023",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#january-2023",
  "content" : "January 2023 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 Zulu 19 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 JFX 19"
}, {
  "objectID" : "f62258bd-209f-42d6-9b05-32ca40c0b7a9",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "October 2022",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#october-2022",
  "content" : "October 2022 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 Zulu 19 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 JFX 19"
}, {
  "objectID" : "e2ce88e7-dc7b-4409-b679-7721c90a2999",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "September 2022 (19-ga)",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#september-2022-19-ga",
  "content" : "September 2022 (19-ga) Zulu 19 JFX 19"
}, {
  "objectID" : "3f8e0e49-0f8f-4047-8a1f-d95bb0c94312",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "July 2022",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#july-2022",
  "content" : "July 2022 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 Zulu 18 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 JFX 18"
}, {
  "objectID" : "c7b2b956-c837-4cc4-83b2-a313bb740c3b",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "April 2022",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#april-2022",
  "content" : "April 2022 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 Zulu 18 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17 JFX 18"
}, {
  "objectID" : "95a8b154-ef2f-48f2-acc1-6f29b51fac77",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "March 2022 (18-ga)",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#march-2022-18-ga",
  "content" : "March 2022 (18-ga) Zulu 18 JFX 18"
}, {
  "objectID" : "f09d582a-f119-4623-bdc5-f2868e7c0b5c",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "January 2022",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#january-2022",
  "content" : "January 2022 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17"
}, {
  "objectID" : "4953f503-6b62-471d-b0af-fb16da7d641c",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "October 2021",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#october-2021",
  "content" : "October 2021 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 17 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 17"
}, {
  "objectID" : "52263dcb-8bc3-4887-9be3-f231fd951580",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "September 2021 (17-ga)",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#september-2021-17-ga",
  "content" : "September 2021 (17-ga) Zulu 17 JFX 17"
}, {
  "objectID" : "b61d58fa-6221-43bc-99f7-1142fa0a55d0",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "July 2021",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#july-2021",
  "content" : "July 2021 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 16 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 16"
}, {
  "objectID" : "82c1dbdd-4812-4577-aab3-706056359e19",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "April 2021",
  "url" : "https://docs.azul.com/core/tpl",
  "link" : "https://docs.azul.com/core/tpl#april-2021",
  "content" : "April 2021 Zulu 6 Zulu 7 Zulu 8 Zulu 11 Zulu 13 Zulu 15 Zulu 16 - - JFX 8 JFX 11 JFX 13 JFX 15 JFX 16"
}, {
  "objectID" : "170f92c0-6ec0-419a-9d04-790c0127f009",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Run Azul Zulu in a Docker Container",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/docker",
  "link" : "https://docs.azul.com/core/install/docker",
  "content" : "This section shows how to run Azul Zulu inside a Docker container."
}, {
  "objectID" : "684e2640-a22d-4023-9922-44ccd9c96672",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Run Azul Zulu in a Docker Container",
  "section" : "Prerequisites",
  "url" : "https://docs.azul.com/core/install/docker",
  "link" : "https://docs.azul.com/core/install/docker#prerequisites",
  "content" : "Prerequisites Install Docker by following the Docker documentation."
}, {
  "objectID" : "7d890db9-4d71-4ec0-8401-ba87db4faf2a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Run Azul Zulu in a Docker Container",
  "section" : "Azul Docker images",
  "url" : "https://docs.azul.com/core/install/docker",
  "link" : "https://docs.azul.com/core/install/docker#azul-docker-images",
  "content" : "Azul Docker images Azul provides Docker images with Azul Zulu Builds of OpenJDK pre-installed on one of the following operating systems: OS Image Name Ubuntu azul/zulu-openjdk Debian azul/zulu-openjdk-debian Alpine Linux azul/zulu-openjdk-alpine CentOS azul/zulu-openjdk-centos To pull a specific image, use the corresponding image name in the docker pull command. For example, to pull the Alpine Linux image with Azul Zulu JDK 15, run:  docker pull azul/zulu-openjdk-alpine:15"
}, {
  "objectID" : "b8b76562-e12f-4afb-bdc9-878afedc7eed",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Run Azul Zulu in a Docker Container",
  "section" : "Run Java apps",
  "url" : "https://docs.azul.com/core/install/docker",
  "link" : "https://docs.azul.com/core/install/docker#run-java-apps",
  "content" : "Run Java apps You can test the Docker image by running the following command in a terminal:  docker run -it --rm azul/zulu-openjdk:15 java -version The command allocates a terminal and runs java. It prints a message similar to this:  openjdk version \"15.0.2\" 2021-01-19\nOpenJDK Runtime Environment Zulu15.29+15-CA (build 15.0.2+7)\nOpenJDK 64-Bit Server VM Zulu15.29+15-CA (build 15.0.2+7, mixed mode, sharing) If you see this message in your terminal, you’ve successfully executed java inside a container. The command above simply executes java. To run a Java application, you must provide your application classes and resources to the java command. You do this by mounting a local directory from the container. As an example, let’s assume that your application files are located in a single directory. You would normally run the app by executing java MyApp in that directory. Use the -v option of docker run to make the directory available inside the container. The command might look like this:  docker run -it --rm \\\n    -v ${PWD}:/usr/src/project  \\\n    -e CLASSPATH=/usr/src/project \\\n    azul/zulu-openjdk:11 java MyApp"
}, {
  "objectID" : "5443f3e5-611e-4938-87d8-4d40a1dfc00f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows",
  "content" : "This section explains how to install Azul Zulu Builds of OpenJDK on Windows."
}, {
  "objectID" : "649df4d7-4fb7-4fad-a8c7-d245d710196c",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "Install Azul Zulu with MSI installer",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows#install-azul-zulu-with-msi-installer",
  "content" : "Install Azul Zulu with MSI installer Note For per-machine installation, you must have administrator privileges to run the .msi installer. When running an Azul Zulu MSI installer, you can select the features that you want to enable and/or change the installation folder. Optional features include: Add to PATH - Adds the <installation_folder>\\bin folder to the PATH environment variable. Set JAVA_HOME variable - (Not available in Azul Zulu 6 and 7) Sets the JAVA_HOME environment variable to point to the installation directory. JavaSoft (Oracle) registry keys - Overwrites JavaSoft (Oracle) registry keys (for details, see Azul Zulu registry keys). Install using Setup Wizard Double-click the downloaded .msi file to launch the Setup Wizard and follow the instructions in the wizard. The default installation folder is C:\\Program Files\\Zulu\\<zulu_dir>\\, where <zulu_dir> depends on the type of package (JDK or JRE). Package Installation Folder Example JDK zulu-<major_version> zulu-11 JRE zulu-<major_version>-jre zulu-11-jre To verify your Azul Zulu installation, run the following command:  <installation_folder>\\bin\\java -version If you chose to update the PATH environment variable during installation, simply run:  java -version You should see output similar to the following:  openjdk version \"11.0.10\" 2021-01-19 LTS\nOpenJDK Runtime Environment Zulu11.45+27-CA (build 11.0.10+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.45+27-CA (build 11.0.10+9-LTS, mixed mode) Install from Command Prompt To install Azul Zulu MSI installer from a Command Prompt, follow these steps: Open a command prompt or terminal window in the directory where you saved the .msi file. The general installation command looks like as follows:  msiexec /i <zulu_package>.msi ADDLOCAL=<feature1>,...,<featureN> INSTALLDIR=\"<absolute_path_to_dir>\" /qn The following features are available: ZuluInstallation - installs Azul Zulu into the specified location FeatureEnvironment - updates the PATH environment variable FeatureOracleJavaSoft - updates the registry keys under the HKLM\\SOFTWARE\\JavaSoft\\ section FeatureJavaHome - sets the JAVA_HOME environment variable to point to the installation directory Note These features are only supported since the October 2021 releases, e.g. version 8u312 or newer of JDK8. To enable a specific feature, add the name of the feature to the ADDLOCAL parameter. For example, to install Azul Zulu and update the PATH environment variable, run the following command:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureEnvironment INSTALLDIR=\"c:\\java\\jdk11\" /qn Example 1 To install Azul Zulu into the default installation folder, run:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi /qn No optional features are selected. Example 2 To install Azul Zulu into the c:\\java\\jdk11\\ folder and add c:\\java\\jdk11\\bin to the PATH environment variable, run:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureEnvironment INSTALLDIR=\"c:\\java\\jdk11\" /qn Example 3 To install Azul Zulu and set the JAVA_HOME environment variable, run:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureJavaHome INSTALLDIR=\"c:\\java\\jdk11\" /qn To verify that JAVA_HOME is set correctly, restart Command Prompt to update the list of environment variables and run:  > echo %JAVA_HOME%\nC:\\java\\jdk11 Per-user installation You can install Azul Zulu to be available only for a specific Windows user. This type of installation requires no administrator privileges and stores all the Azul Zulu files in the current user’s workspace. This installation type is added in the following Azul Zulu versions: 17.30, 15.36, 13.44, 11.52, 8.58, 7.50. To install Azul Zulu only for the current Windows user, use the option MSIINSTALLPERUSER=1 as shown in the example below.  msiexec /i zulu11.52.13-ca-jdk11.0.13-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureEnvironment MSIINSTALLPERUSER=1 /qn When working with a per-user Azul Zulu instance, consider the following: Avoid using per-user and per-machine Azul Zulu installations simultaneously if the two have identical major version but different minor versions (for example, Azul Zulu 8.54 and 8.56). You cannot upgrade a per-user Azul Zulu installation to the per-machine type. You cannot use the FeatureOracleJavaSoft option (updates Windows registry keys under HKLM\\SOFTWARE\\JavaSoft\\) with the per-user installation. The system PATH environment variable takes precedence over the user PATH. Thus, if a system has a per-machine and a per-user Azul Zulu instances both added to user/system PATH, calling Java from an arbitrary location runs the per-machine Azul Zulu instance. Azul Zulu registry keys During the installation, the MSI installer uses the registry to store path and version information. The installer creates two sets of registry keys depending on the installation type: per-machine installation creates Azul Zulu keys and Generic keys. Generic keys are typically created by Java installers and are used to ensure Azul Zulu is compatible with other tools such as Launch4j and WinRun4J. per-user installation creates only Azul Zulu keys. The table below shows the registry keys created during the installation of various types of Azul Zulu packages. Binary type Azul Zulu keys Generic keys Installation: per-machine JRE 64-bit HKLM\\SOFTWARE\\Azul Systems\\Zulu\\zulu-<version>-jre HKLM\\SOFTWARE\\JavaSoft\\Java Runtime Environment JRE 32-bit HKLM\\SOFTWARE\\WOW6432Node\\Azul Systems\\Zulu 32-bit\\zulu-<version>-jre HKLM\\SOFTWARE\\WOW6432Node\\JavaSoft\\Java Runtime Environment JDK 64-bit HKLM\\SOFTWARE\\Azul Systems\\Zulu\\zulu-<version> HKLM\\SOFTWARE\\JavaSoft\\Java Development Kit JDK 32-bit HKLM\\SOFTWARE\\WOW6432Node\\Azul Systems\\Zulu 32-bit\\zulu-<version> HKLM\\SOFTWARE\\WOW6432Node\\JavaSoft\\Java Development Kit Installation: per-user JRE 64-bit HKCU\\SOFTWARE\\Azul Systems\\Zulu\\zulu-<version>-jre N/A JRE 32-bit HKCU\\SOFTWARE\\Azul Systems\\Zulu 32-bit\\zulu-<version>-jre N/A JDK 64-bit HKCU\\SOFTWARE\\Azul Systems\\Zulu\\zulu-<version> N/A JDK 32-bit HKCU\\SOFTWARE\\Azul Systems\\Zulu 32-bit\\zulu-<version> N/A Where <version> in zulu-<version>-jre stands for the version of Azul Zulu, for example, zulu-11-jre. The MSI Installer creates registry keys during Azul Zulu installation and removes these keys during uninstallation. Please note that the MSI Installer creates the Generic keys only if Oracle Java has not yet been installed on the computer. If Java is already installed, this means that the keys exist, and the installer does not overwrite them."
}, {
  "objectID" : "489d9f97-ee00-4ee7-9b7f-1bba898a4ebe",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "Install using Setup Wizard",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows#install-using-setup-wizard",
  "content" : "Install using Setup Wizard Double-click the downloaded .msi file to launch the Setup Wizard and follow the instructions in the wizard. The default installation folder is C:\\Program Files\\Zulu\\<zulu_dir>\\, where <zulu_dir> depends on the type of package (JDK or JRE). Package Installation Folder Example JDK zulu-<major_version> zulu-11 JRE zulu-<major_version>-jre zulu-11-jre To verify your Azul Zulu installation, run the following command:  <installation_folder>\\bin\\java -version If you chose to update the PATH environment variable during installation, simply run:  java -version You should see output similar to the following:  openjdk version \"11.0.10\" 2021-01-19 LTS\nOpenJDK Runtime Environment Zulu11.45+27-CA (build 11.0.10+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.45+27-CA (build 11.0.10+9-LTS, mixed mode)"
}, {
  "objectID" : "e7ad650e-e01f-4a91-a558-c05aae0bd3fb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows",
  "content" : "The default installation folder is C:\\Program Files\\Zulu\\<zulu_dir>\\, where <zulu_dir> depends on the type of package (JDK or JRE). Package Installation Folder Example JDK zulu-<major_version> zulu-11 JRE zulu-<major_version>-jre zulu-11-jre"
}, {
  "objectID" : "50aac96a-941a-4147-9e19-49b9c85e58fb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows",
  "content" : "<installation_folder>\\bin\\java -version If you chose to update the PATH environment variable during installation, simply run:  java -version You should see output similar to the following:  openjdk version \"11.0.10\" 2021-01-19 LTS\nOpenJDK Runtime Environment Zulu11.45+27-CA (build 11.0.10+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.45+27-CA (build 11.0.10+9-LTS, mixed mode)"
}, {
  "objectID" : "eb13da44-b52a-4952-81e0-6392a001905d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "Install from Command Prompt",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows#install-from-command-prompt",
  "content" : "Install from Command Prompt To install Azul Zulu MSI installer from a Command Prompt, follow these steps: Open a command prompt or terminal window in the directory where you saved the .msi file. The general installation command looks like as follows:  msiexec /i <zulu_package>.msi ADDLOCAL=<feature1>,...,<featureN> INSTALLDIR=\"<absolute_path_to_dir>\" /qn The following features are available: ZuluInstallation - installs Azul Zulu into the specified location FeatureEnvironment - updates the PATH environment variable FeatureOracleJavaSoft - updates the registry keys under the HKLM\\SOFTWARE\\JavaSoft\\ section FeatureJavaHome - sets the JAVA_HOME environment variable to point to the installation directory Note These features are only supported since the October 2021 releases, e.g. version 8u312 or newer of JDK8. To enable a specific feature, add the name of the feature to the ADDLOCAL parameter. For example, to install Azul Zulu and update the PATH environment variable, run the following command:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureEnvironment INSTALLDIR=\"c:\\java\\jdk11\" /qn Example 1 To install Azul Zulu into the default installation folder, run:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi /qn No optional features are selected. Example 2 To install Azul Zulu into the c:\\java\\jdk11\\ folder and add c:\\java\\jdk11\\bin to the PATH environment variable, run:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureEnvironment INSTALLDIR=\"c:\\java\\jdk11\" /qn Example 3 To install Azul Zulu and set the JAVA_HOME environment variable, run:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureJavaHome INSTALLDIR=\"c:\\java\\jdk11\" /qn To verify that JAVA_HOME is set correctly, restart Command Prompt to update the list of environment variables and run:  > echo %JAVA_HOME%\nC:\\java\\jdk11"
}, {
  "objectID" : "02e143c5-0ca4-47d7-a9da-9d2a78dbb0d8",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows",
  "content" : "msiexec /i <zulu_package>.msi ADDLOCAL=<feature1>,...,<featureN> INSTALLDIR=\"<absolute_path_to_dir>\" /qn The following features are available: ZuluInstallation - installs Azul Zulu into the specified location FeatureEnvironment - updates the PATH environment variable FeatureOracleJavaSoft - updates the registry keys under the HKLM\\SOFTWARE\\JavaSoft\\ section FeatureJavaHome - sets the JAVA_HOME environment variable to point to the installation directory Note These features are only supported since the October 2021 releases, e.g. version 8u312 or newer of JDK8. To enable a specific feature, add the name of the feature to the ADDLOCAL parameter. For example, to install Azul Zulu and update the PATH environment variable, run the following command:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureEnvironment INSTALLDIR=\"c:\\java\\jdk11\" /qn Example 1 To install Azul Zulu into the default installation folder, run:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi /qn No optional features are selected. Example 2 To install Azul Zulu into the c:\\java\\jdk11\\ folder and add c:\\java\\jdk11\\bin to the PATH environment variable, run:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureEnvironment INSTALLDIR=\"c:\\java\\jdk11\" /qn Example 3 To install Azul Zulu and set the JAVA_HOME environment variable, run:  msiexec /i zulu11.50.19-ca-jdk11.0.12-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureJavaHome INSTALLDIR=\"c:\\java\\jdk11\" /qn To verify that JAVA_HOME is set correctly, restart Command Prompt to update the list of environment variables and run:  > echo %JAVA_HOME%\nC:\\java\\jdk11"
}, {
  "objectID" : "ea82cfb2-fc4e-4ce9-afb1-f611f42e0c29",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "Per-user installation",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows#per-user-installation",
  "content" : "Per-user installation You can install Azul Zulu to be available only for a specific Windows user. This type of installation requires no administrator privileges and stores all the Azul Zulu files in the current user’s workspace. This installation type is added in the following Azul Zulu versions: 17.30, 15.36, 13.44, 11.52, 8.58, 7.50. To install Azul Zulu only for the current Windows user, use the option MSIINSTALLPERUSER=1 as shown in the example below.  msiexec /i zulu11.52.13-ca-jdk11.0.13-win_x64.msi ADDLOCAL=ZuluInstallation,FeatureEnvironment MSIINSTALLPERUSER=1 /qn When working with a per-user Azul Zulu instance, consider the following: Avoid using per-user and per-machine Azul Zulu installations simultaneously if the two have identical major version but different minor versions (for example, Azul Zulu 8.54 and 8.56). You cannot upgrade a per-user Azul Zulu installation to the per-machine type. You cannot use the FeatureOracleJavaSoft option (updates Windows registry keys under HKLM\\SOFTWARE\\JavaSoft\\) with the per-user installation. The system PATH environment variable takes precedence over the user PATH. Thus, if a system has a per-machine and a per-user Azul Zulu instances both added to user/system PATH, calling Java from an arbitrary location runs the per-machine Azul Zulu instance."
}, {
  "objectID" : "2a4dabb8-0c51-4098-a30f-2a6a6247b3e6",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "Azul Zulu registry keys",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows#azul-zulu-registry-keys",
  "content" : "Azul Zulu registry keys During the installation, the MSI installer uses the registry to store path and version information. The installer creates two sets of registry keys depending on the installation type: per-machine installation creates Azul Zulu keys and Generic keys. Generic keys are typically created by Java installers and are used to ensure Azul Zulu is compatible with other tools such as Launch4j and WinRun4J. per-user installation creates only Azul Zulu keys. The table below shows the registry keys created during the installation of various types of Azul Zulu packages. Binary type Azul Zulu keys Generic keys Installation: per-machine JRE 64-bit HKLM\\SOFTWARE\\Azul Systems\\Zulu\\zulu-<version>-jre HKLM\\SOFTWARE\\JavaSoft\\Java Runtime Environment JRE 32-bit HKLM\\SOFTWARE\\WOW6432Node\\Azul Systems\\Zulu 32-bit\\zulu-<version>-jre HKLM\\SOFTWARE\\WOW6432Node\\JavaSoft\\Java Runtime Environment JDK 64-bit HKLM\\SOFTWARE\\Azul Systems\\Zulu\\zulu-<version> HKLM\\SOFTWARE\\JavaSoft\\Java Development Kit JDK 32-bit HKLM\\SOFTWARE\\WOW6432Node\\Azul Systems\\Zulu 32-bit\\zulu-<version> HKLM\\SOFTWARE\\WOW6432Node\\JavaSoft\\Java Development Kit Installation: per-user JRE 64-bit HKCU\\SOFTWARE\\Azul Systems\\Zulu\\zulu-<version>-jre N/A JRE 32-bit HKCU\\SOFTWARE\\Azul Systems\\Zulu 32-bit\\zulu-<version>-jre N/A JDK 64-bit HKCU\\SOFTWARE\\Azul Systems\\Zulu\\zulu-<version> N/A JDK 32-bit HKCU\\SOFTWARE\\Azul Systems\\Zulu 32-bit\\zulu-<version> N/A Where <version> in zulu-<version>-jre stands for the version of Azul Zulu, for example, zulu-11-jre. The MSI Installer creates registry keys during Azul Zulu installation and removes these keys during uninstallation. Please note that the MSI Installer creates the Generic keys only if Oracle Java has not yet been installed on the computer. If Java is already installed, this means that the keys exist, and the installer does not overwrite them."
}, {
  "objectID" : "2fdaad70-f498-4797-a9be-6798d97b63eb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "Upgrade Azul Zulu",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows#upgrade-azul-zulu",
  "content" : "Upgrade Azul Zulu If you installed Azul Zulu using the MSI installer, you can upgrade it by following the same installation instructions. Note that you can upgrade within the same major version, for example from 8.52 to 8.54. If you install a different major version of Azul Zulu, such as 11, the installer does not remove the previous one but simply adds the new version to your machine."
}, {
  "objectID" : "2e934991-7c22-429a-b506-12388a8bcee2",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Windows",
  "section" : "Install Azul Zulu from ZIP or TAR.GZ package",
  "url" : "https://docs.azul.com/core/install/windows",
  "link" : "https://docs.azul.com/core/install/windows#install-azul-zulu-from-zip-or-tar-gz-package",
  "content" : "Install Azul Zulu from ZIP or TAR.GZ package Download the Azul Zulu ZIP or TAR.GZ file from the Downloads page. Extract the content of the archive into a folder. This folder is your Azul Zulu installation folder. To verify that the package was extracted correctly, run the following command from a command prompt. You should see output similar to the following:  > <installation_folder>\\bin\\java -version\nopenjdk version \"16\" 2021-03-16\nOpenJDK Runtime Environment Zulu16.28+11-CA (build 16+36)\nOpenJDK 64-Bit Server VM Zulu16.28+11-CA (build 16+36, mixed mode, sharing) (Optional) Add <installation_folder>\\bin to your PATH system variable, so that you can execute java from any directory without specifying the full path. To update the PATH system variable: Open Control Panel and go to System and Security → System. Click Advanced system settings. On the Advanced tab, click the Environment Variables button. In the System Variables area, select the Path environment variable and click Edit. In the dialog that opens, add the bin folder of your Azul Zulu installation (the directory where you unpacked the .zip file). Make sure the bin folder is placed at the top of the list as shown in the image below:"
}, {
  "objectID" : "5a8949d1-f340-4380-815c-f5b9251a68ca",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on macOS",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/macos",
  "link" : "https://docs.azul.com/core/install/macos",
  "content" : "This section explains how to install Azul Zulu Builds of OpenJDK on macOS."
}, {
  "objectID" : "4fa08089-dd0f-4804-8cfc-b2450f249d43",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on macOS",
  "section" : "Install using a DMG installer",
  "url" : "https://docs.azul.com/core/install/macos",
  "link" : "https://docs.azul.com/core/install/macos#install-using-a-dmg-installer",
  "content" : "Install using a DMG installer Download a DMG installer for Azul Zulu from Azul Downloads. Double-click the file to start the installation and follow the wizard instructions. The default installation folder is:  /Library/Java/JavaVirtualMachines/<zulu_folder>/Contents/Home The <zulu_folder> placeholder represents the type of the Azul Zulu package (JDK or JRE) and its version: Package Azul Zulu folder name Example JDK zulu-<major_version>.jdk zulu-11.jdk JRE zulu-<major_version>.jre zulu-11.jre For example, the default installation folder for Azul Zulu JDK 11 is:  /Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home To verify your Azul Zulu installation, run the java command in a terminal window:  java -version You should see output similar to the following:  openjdk version \"11.0.11\" 2021-04-20 LTS\nOpenJDK Runtime Environment Zulu11.48+21-CA (build 11.0.11+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.48+21-CA (build 11.0.11+9-LTS, mixed mode)"
}, {
  "objectID" : "31df7028-385a-42f7-9b78-acd54fcbab90",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on macOS",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/macos",
  "link" : "https://docs.azul.com/core/install/macos",
  "content" : "The default installation folder is:  /Library/Java/JavaVirtualMachines/<zulu_folder>/Contents/Home The <zulu_folder> placeholder represents the type of the Azul Zulu package (JDK or JRE) and its version: Package Azul Zulu folder name Example JDK zulu-<major_version>.jdk zulu-11.jdk JRE zulu-<major_version>.jre zulu-11.jre For example, the default installation folder for Azul Zulu JDK 11 is:  /Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home"
}, {
  "objectID" : "d2349ea3-8559-432f-b823-e43d65efd9b3",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on macOS",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/macos",
  "link" : "https://docs.azul.com/core/install/macos",
  "content" : "java -version You should see output similar to the following:  openjdk version \"11.0.11\" 2021-04-20 LTS\nOpenJDK Runtime Environment Zulu11.48+21-CA (build 11.0.11+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.48+21-CA (build 11.0.11+9-LTS, mixed mode)"
}, {
  "objectID" : "b7377b89-1ea3-4c36-8d47-0ae5d8dba81f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on macOS",
  "section" : "Install from a ZIP or TAR.GZ file",
  "url" : "https://docs.azul.com/core/install/macos",
  "link" : "https://docs.azul.com/core/install/macos#install-from-a-zip-or-tar-gz-file",
  "content" : "Install from a ZIP or TAR.GZ file Download Azul Zulu as a ZIP or TAR.GZ file from Azul Downloads. Launch Finder and navigate to the download folder. Double click the file to unpack it. If you download the file using Safari, it may automatically unpack the file. Alternatively, you can use one of the commands below to unpack the file: For ZIP:  unzip <zulu_package>.zip For TAR.GZ:  tar -xzvf <zulu_package>.tar.gz The folder where you unpacked the archive is your Azul Zulu installation folder. To verify your Azul Zulu installation, run the following command in a terminal window:  <installation_folder>/bin/java -version (Optional) Add <installation_folder>/bin to your PATH environment variable, so that you can execute java from any folder without specifying the full path."
}, {
  "objectID" : "936ae959-ae87-4aae-996c-01676ca51100",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on macOS",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/macos",
  "link" : "https://docs.azul.com/core/install/macos",
  "content" : "Alternatively, you can use one of the commands below to unpack the file: For ZIP:  unzip <zulu_package>.zip For TAR.GZ:  tar -xzvf <zulu_package>.tar.gz The folder where you unpacked the archive is your Azul Zulu installation folder."
}, {
  "objectID" : "1b34d5f2-c954-41e9-9067-7a8dcae2c5a5",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian",
  "content" : "This section explains how to install Azul Zulu Builds of OpenJDK on Debian or Ubuntu, or other supported Debian-based operating systems. You can use the Azul’s APT repository, download a DEB package manually, or download a binary TAR.GZ package."
}, {
  "objectID" : "dafff1b7-86bc-4c01-a063-9026d702b04e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "Install from Azul APT repository",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian#install-from-azul-apt-repository",
  "content" : "Install from Azul APT repository You can add Azul’s APT repository to the list of package sources on your system and install Azul Zulu by using your OS package manager. Note The Azul APT repository contains DEB packages for the x86 and arm64 architectures. If your machine has a different CPU architecture (for example, arm32), consider installing the appropriate TAR.GZ package. You can find TAR.GZ packages for all supported platforms on the Downloads page. Installing with a package manager requires root privileges. Log in as root or use sudo when running the commands below. Import Azul’s public key:  sudo apt install gnupg ca-certificates curl\n\ncurl -s https://repos.azul.com/azul-repo.key | sudo gpg --dearmor -o /usr/share/keyrings/azul.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/azul.gpg] https://repos.azul.com/zulu/deb stable main\" | sudo tee /etc/apt/sources.list.d/zulu.list Update the information about available packages:  sudo apt update Install the required Azul Zulu package:  sudo apt install zulu<jdk-version>-jdk\n\n# For example\nsudo apt install zulu17-jdk To verify your installation, run the java -version command. You should see output similar to the following:  $ java -version\nopenjdk version \"17.0.6\" 2023-01-17 LTS\nOpenJDK Runtime Environment Zulu17.40+19-CA (build 17.0.6+10-LTS)\nOpenJDK 64-Bit Server VM Zulu17.40+19-CA (build 17.0.6+10-LTS, mixed mode, sharing) Azul Zulu Packages The Azul APT repository uses the package dependency paradigm typical for Linux distributions where packages that provide complex functionality depend on packages with more basic functionality. Thus, the JDK package is split into multiple packages, such as JRE, documentation, source files, and so on. When you install the JDK package, you install the package itself and all its dependencies. You can also install the dependent packages separately. For example, if your application requires JRE only, you can install just the JRE package (or headless JRE) without downloading unnecessary dependencies. The following table lists the DEB packages that are available from the Azul APT repository. The <X> placeholder stands for the major Java version. Package Description zulu<X>-ca An empty package that installs zulu<X>-jdk. zulu<X>-ca-jdk Java Development Kit (including graphic components). zulu<X>-ca-jdk-headless Headless Java Development Kit (without GUI support). zulu<X>-ca-jre Java Runtime Environment including graphic components. zulu<X>-ca-jre-headless Headless Java Runtime Environment (without GUI support). zulu<X>-ca-src Azul Zulu JDK source files. zulu<X>-ca-doc Man pages for the executable commands. zulu<X>-ca-demo JDK demos and examples. For each package listed in the table there is another package available without the -ca- suffix in its name. For example, zulu11-ca-jdk and zulu11-jdk. The latter is an empty package that has its \"ca\" counterpart as a dependency. Either package installs Azul Zulu JDK. Installation Folder The Azul Zulu DEB packages from the APT repository are installed in the following folder.  /usr/lib/jvm/zulu<X>-ca-<arch> Where <X> is a major Java version (for example, 8 or 15) and <arch> is the CPU architecture. For example, here is the default installation folder for Azul Zulu 15:  /usr/lib/jvm/zulu15-ca-amd64"
}, {
  "objectID" : "f2d4a860-331b-4b32-b2ed-79e8b455877a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "Azul Zulu Packages",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian#azul-zulu-packages",
  "content" : "Azul Zulu Packages The Azul APT repository uses the package dependency paradigm typical for Linux distributions where packages that provide complex functionality depend on packages with more basic functionality. Thus, the JDK package is split into multiple packages, such as JRE, documentation, source files, and so on. When you install the JDK package, you install the package itself and all its dependencies. You can also install the dependent packages separately. For example, if your application requires JRE only, you can install just the JRE package (or headless JRE) without downloading unnecessary dependencies. The following table lists the DEB packages that are available from the Azul APT repository. The <X> placeholder stands for the major Java version. Package Description zulu<X>-ca An empty package that installs zulu<X>-jdk. zulu<X>-ca-jdk Java Development Kit (including graphic components). zulu<X>-ca-jdk-headless Headless Java Development Kit (without GUI support). zulu<X>-ca-jre Java Runtime Environment including graphic components. zulu<X>-ca-jre-headless Headless Java Runtime Environment (without GUI support). zulu<X>-ca-src Azul Zulu JDK source files. zulu<X>-ca-doc Man pages for the executable commands. zulu<X>-ca-demo JDK demos and examples. For each package listed in the table there is another package available without the -ca- suffix in its name. For example, zulu11-ca-jdk and zulu11-jdk. The latter is an empty package that has its \"ca\" counterpart as a dependency. Either package installs Azul Zulu JDK."
}, {
  "objectID" : "0635b3e3-5ef3-4a07-90e2-530002fdf286",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "Installation Folder",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian#installation-folder",
  "content" : "Installation Folder The Azul Zulu DEB packages from the APT repository are installed in the following folder.  /usr/lib/jvm/zulu<X>-ca-<arch> Where <X> is a major Java version (for example, 8 or 15) and <arch> is the CPU architecture. For example, here is the default installation folder for Azul Zulu 15:  /usr/lib/jvm/zulu15-ca-amd64"
}, {
  "objectID" : "e5bb9e9f-de39-41ad-be24-b0a46784524f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "Install DEB package",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian#install-deb-package",
  "content" : "Install DEB package You can download the Azul Zulu DEB package from the Azul Download page and install it manually using the APT package manager. Azul provides three types of downloadable DEB packages: JDK, JDK with JavaFX, and JRE. See Downloadable DEB Packages for more information. Installing with a package manager requires root privileges. Log in to your root account or use sudo to run the commands listed below. Download the appropriate DEB package for your OS from the Downloads page. Verify that the checksum of the downloaded file matches the value provided on the download page. To calculate the checksum, use this command:  sha256sum <package>.deb Run the command below in the directory where you saved the DEB package. Replace the <package> placeholder with the actual name of the file. The command may ask you to confirm that you want to install the package dependencies.  sudo apt install ./<package>.deb For example, to install JDK 15 for AMD64, run:  sudo apt install ./zulu15.29.15-ca-jdk15.0.2-linux_amd64.deb The package is installed in /usr/lib/jvm/zulu-15-amd64. Verify your installation by running java -version in a terminal window. You should see output similar to the following:  $ java -version\nopenjdk version \"15.0.2\" 2021-01-19\nOpenJDK Runtime Environment Zulu15.29+15-CA (build 15.0.2+7)\nOpenJDK 64-Bit Server VM Zulu15.29+15-CA (build 15.0.2+7, mixed mode, sharing) Downloadable DEB Packages Unlike the packages available from the Azul APT repository, the downloadable DEB packages are all-in-one packages, meaning they do not depend on other Azul packages, but already contain all dependent components (docs, source files, etc). They also install Azul Zulu in a different folder. The following list provides information about the DEB packages you can download from Azul Downloads. Azul Zulu JDK package: Package Name: zulu-<major_version> Installation Folder: /usr/lib/jvm/zulu-<major_version>-<arch> JRE package: Package Name: zre-<major_version> Installation Folder: /usr/lib/jvm/zre-<major_version>-<arch> JDK package with JavaFX: Package Name: zulu-fx-<major_version> Installation Folder: /usr/lib/jvm/zulu-fx-<major_version>-<arch>"
}, {
  "objectID" : "3d236a95-aabc-4aa8-ba4e-ddb1fcdb02f6",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian",
  "content" : "sha256sum <package>.deb"
}, {
  "objectID" : "9e0b4c45-38e2-4a5e-be63-f253ee548d9c",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian",
  "content" : "sudo apt install ./<package>.deb For example, to install JDK 15 for AMD64, run:  sudo apt install ./zulu15.29.15-ca-jdk15.0.2-linux_amd64.deb The package is installed in /usr/lib/jvm/zulu-15-amd64."
}, {
  "objectID" : "a52839d8-7e5f-4936-93d7-90a760794919",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "Downloadable DEB Packages",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian#downloadable-deb-packages",
  "content" : "Downloadable DEB Packages Unlike the packages available from the Azul APT repository, the downloadable DEB packages are all-in-one packages, meaning they do not depend on other Azul packages, but already contain all dependent components (docs, source files, etc). They also install Azul Zulu in a different folder. The following list provides information about the DEB packages you can download from Azul Downloads. Azul Zulu JDK package: Package Name: zulu-<major_version> Installation Folder: /usr/lib/jvm/zulu-<major_version>-<arch> JRE package: Package Name: zre-<major_version> Installation Folder: /usr/lib/jvm/zre-<major_version>-<arch> JDK package with JavaFX: Package Name: zulu-fx-<major_version> Installation Folder: /usr/lib/jvm/zulu-fx-<major_version>-<arch>"
}, {
  "objectID" : "30f8614e-c67b-4762-9b48-07d1d11c5a21",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "Install from binary TAR.GZ file",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian#install-from-binary-tar-gz-file",
  "content" : "Install from binary TAR.GZ file You can download and use the binary tar.gz package, if necessary. Download the appropriate .tar.gz package for your OS from Azul Downloads. Verify that the checksum of the file matches the value provided on the download page. To calculate the checksum, use this command:  sha256sum <package>.tar.gz Example output:  $ sha256sum zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz\n0bd85593bae021314378f3b146cfe36a6c9b0afd964d897c34201034ace3e785  zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz Extract the package content into a folder.  tar -xzvf <package>.tar.gz This command creates a folder named to match the installation package name without .tar.gz. This is your Azul Zulu installation folder. Verify that the package was unpacked successfully by running the following command:  $ <installation_folder>/bin/java -version\nopenjdk version \"11.0.10\" 2021-01-19 LTS\nOpenJDK Runtime Environment Zulu11.45+27-CA (build 11.0.10+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.45+27-CA (build 11.0.10+9-LTS, mixed mode) (Optional) Add <installation_folder>/bin to your PATH environment variable, so that you can execute java from any directory without specifying the full path.  export PATH=<installation_folder>/bin:$PATH"
}, {
  "objectID" : "62254f9a-4990-420b-98eb-0437d41f5649",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian",
  "content" : "sha256sum <package>.tar.gz Example output:  $ sha256sum zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz\n0bd85593bae021314378f3b146cfe36a6c9b0afd964d897c34201034ace3e785  zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz"
}, {
  "objectID" : "d5bab25a-d0c6-431f-8afd-faca763215fa",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Debian-based Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/debian",
  "link" : "https://docs.azul.com/core/install/debian",
  "content" : "tar -xzvf <package>.tar.gz This command creates a folder named to match the installation package name without .tar.gz. This is your Azul Zulu installation folder."
}, {
  "objectID" : "0785c6fe-e3f7-470e-a3ab-f1f4f74c4e2d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux",
  "content" : "This section explains how to install Azul Zulu Builds of OpenJDK on RPM-based Linux distributions. Azul provides RPM packages for RHEL, SLES, and Oracle Linux."
}, {
  "objectID" : "094b52f3-4218-44f2-a9f7-d0f0b58b5061",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "Install from Azul RPM repository",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux#install-from-azul-rpm-repository",
  "content" : "Install from Azul RPM repository This section shows how to set up Azul’s RPM repository and install Azul Zulu using your package manager. Note The Azul repository contains RPM packages for the x86 and arm64 architectures. If your machine has a different CPU architecture (for example, arm32), consider installing the appropriate TAR.GZ package. You can find TAR.GZ packages for all supported platforms on the Downloads page. Installing with a package manager requires root privileges. Log in as root or use sudo to execute the commands listed below. Set up the Azul RPM repository. For RHEL or Oracle Linux:  # add the Azul RPM repository \nsudo yum install -y https://cdn.azul.com/zulu/bin/zulu-repo-1.0.0-1.noarch.rpm For SLES:  # download the package that adds Azul's RPM repository\ncurl -O https://cdn.azul.com/zulu/bin/zulu-repo-1.0.0-1.noarch.rpm\n\n# import Azul's public key\nsudo rpm --import https://www.azul.com/wp-content/uploads/2021/05/0xB1998361219BD9C9.txt\n\n# install the package\nsudo zypper install zulu-repo-1.0.0-1.noarch.rpm Install the required Azul Zulu package. For RHEL or Oracle Linux:  # install Azul Zulu 11 JDK \nsudo yum install zulu11-jdk For SLES:  # install Azul Zulu JDK 11 \nsudo zypper install zulu11-jdk The default installation folder is:  /usr/lib/jvm/java-<major_version>-zulu-openjdk-ca For example, the default installation folder for Azul Zulu JDK 11 is:  /usr/lib/jvm/java-11-zulu-openjdk-ca (Optional) You may want to add the <installation_folder>/bin to your PATH environment variable so you can run java without typing the full path.  export PATH=<installation_folder>/bin:$PATH"
}, {
  "objectID" : "9ebf2e7c-9ab2-413f-9b46-51e1e8dbc3b1",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux",
  "content" : "For RHEL or Oracle Linux:  # add the Azul RPM repository \nsudo yum install -y https://cdn.azul.com/zulu/bin/zulu-repo-1.0.0-1.noarch.rpm For SLES:  # download the package that adds Azul's RPM repository\ncurl -O https://cdn.azul.com/zulu/bin/zulu-repo-1.0.0-1.noarch.rpm\n\n# import Azul's public key\nsudo rpm --import https://www.azul.com/wp-content/uploads/2021/05/0xB1998361219BD9C9.txt\n\n# install the package\nsudo zypper install zulu-repo-1.0.0-1.noarch.rpm"
}, {
  "objectID" : "656d6d7f-b76d-4605-99bb-dd7f238a5590",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux",
  "content" : "For RHEL or Oracle Linux:  # install Azul Zulu 11 JDK \nsudo yum install zulu11-jdk For SLES:  # install Azul Zulu JDK 11 \nsudo zypper install zulu11-jdk The default installation folder is:  /usr/lib/jvm/java-<major_version>-zulu-openjdk-ca For example, the default installation folder for Azul Zulu JDK 11 is:  /usr/lib/jvm/java-11-zulu-openjdk-ca"
}, {
  "objectID" : "a8002bc2-779f-4131-bdcd-4ff9e28425eb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "Install Azul Zulu RPM package",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux#install-azul-zulu-rpm-package",
  "content" : "Install Azul Zulu RPM package You can download the RPM package and install it using a package manager. Download the RPM package for your OS from Azul Downloads. Verify that the checksum of the downloaded file matches the value provided on the download page. To calculate the checksum, use this command:  sha256sum <zulu_package>.rpm Here is an example output:  $ sha256sum zulu15.29.15-ca-jdk15.0.2-linux.x86_64.rpm\n0f76a6df17331befea86ecbb9f995e23a921b97320bac43c453d32e55d0d35f4  zulu15.29.15-ca-jdk15.0.2-linux.x86_64.rpm Install the package using the package manager of your OS. Using the package manager requires root privileges. Log in as root or use sudo to execute the commands listed below. For RHEL or Oracle Linux:  sudo yum install <package>.rpm For SLES:  sudo zypper install <package>.rpm"
}, {
  "objectID" : "fe576afc-0e7b-4654-ad9c-8b72f27a93d5",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux",
  "content" : "sha256sum <zulu_package>.rpm Here is an example output:  $ sha256sum zulu15.29.15-ca-jdk15.0.2-linux.x86_64.rpm\n0f76a6df17331befea86ecbb9f995e23a921b97320bac43c453d32e55d0d35f4  zulu15.29.15-ca-jdk15.0.2-linux.x86_64.rpm"
}, {
  "objectID" : "ab6bbbb5-4099-4c17-bccd-c3352173dd44",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux",
  "content" : "For RHEL or Oracle Linux:  sudo yum install <package>.rpm For SLES:  sudo zypper install <package>.rpm"
}, {
  "objectID" : "9d1546aa-32b4-4032-b3b1-ab1bfa670943",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "Install from binary TAR.GZ file",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux#install-from-binary-tar-gz-file",
  "content" : "Install from binary TAR.GZ file You can download and use the binary tar.gz package, if necessary. Download the appropriate .tar.gz package for your OS from Azul Downloads. Verify that the checksum of the file matches the value provided on the download page. To calculate the checksum, use this command:  sha256sum <package>.tar.gz Example output:  $ sha256sum zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz\n0bd85593bae021314378f3b146cfe36a6c9b0afd964d897c34201034ace3e785  zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz Extract the package content into a folder.  tar -xzvf <package>.tar.gz This command creates a folder named to match the installation package name without .tar.gz. This is your Azul Zulu installation folder. Verify that the package was unpacked successfully by running the following command:  $ <installation_folder>/bin/java -version\nopenjdk version \"11.0.10\" 2021-01-19 LTS\nOpenJDK Runtime Environment Zulu11.45+27-CA (build 11.0.10+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.45+27-CA (build 11.0.10+9-LTS, mixed mode) (Optional) Add <installation_folder>/bin to your PATH environment variable, so that you can execute java from any directory without specifying the full path.  export PATH=<installation_folder>/bin:$PATH"
}, {
  "objectID" : "a4a54e1f-e50d-4c79-9b71-aa8d3bf325d2",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux",
  "content" : "sha256sum <package>.tar.gz Example output:  $ sha256sum zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz\n0bd85593bae021314378f3b146cfe36a6c9b0afd964d897c34201034ace3e785  zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz"
}, {
  "objectID" : "bcc82bbb-d136-4539-a6f3-a24b98bb99e8",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on RPM-based Linux (RHEL, SLES, Oracle Linux)",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/rpm-based-linux",
  "link" : "https://docs.azul.com/core/install/rpm-based-linux",
  "content" : "tar -xzvf <package>.tar.gz This command creates a folder named to match the installation package name without .tar.gz. This is your Azul Zulu installation folder."
}, {
  "objectID" : "a3e0a512-688e-4f19-af3b-a05eabe355ff",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Alpine Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/alpine-linux",
  "link" : "https://docs.azul.com/core/install/alpine-linux",
  "content" : "This section explains how to install Azul Zulu Builds of OpenJDK on Alpine Linux."
}, {
  "objectID" : "6b066daf-8af7-4c4c-822d-a2626b6af707",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Alpine Linux",
  "section" : "Install from Azul’s APK repository",
  "url" : "https://docs.azul.com/core/install/alpine-linux",
  "link" : "https://docs.azul.com/core/install/alpine-linux#install-from-azuls-apk-repository",
  "content" : "Install from Azul’s APK repository This section shows how to install Azul Zulu from the Azul APK repository using the apk package manager. Installing with the package manager requires root privileges. Log in as root or prefix the commands listed below with sudo. Set up the Azul APK repository:  # add Azul's public key\nsudo wget -P /etc/apk/keys/ \\\nhttps://cdn.azul.com/public_keys/[email protected] \n\n# add the Azul APK repository\necho \"https://repos.azul.com/zulu/alpine\" | sudo tee -a /etc/apk/repositories\n\n# update the list of packages\nsudo apk update Install the required Azul Zulu package. For example, to install Azul Zulu 11 JDK, run:  sudo apk add zulu11-jdk To verify your installation, run the java -version command. You should see output similar to the following:  $ java -version\nopenjdk version \"11.0.10\" 2021-01-19 LTS\nOpenJDK Runtime Environment Zulu11.45+27-CA (build 11.0.10+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.45+27-CA (build 11.0.10+9-LTS, mixed mode)"
}, {
  "objectID" : "c6a1b8f4-9097-46db-aa2a-ec1ae15b83ac",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Alpine Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/alpine-linux",
  "link" : "https://docs.azul.com/core/install/alpine-linux",
  "content" : "For example, to install Azul Zulu 11 JDK, run:  sudo apk add zulu11-jdk"
}, {
  "objectID" : "1610061b-83bf-49b3-9b3a-42f95d3da560",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Alpine Linux",
  "section" : "Install from binary TAR.GZ file",
  "url" : "https://docs.azul.com/core/install/alpine-linux",
  "link" : "https://docs.azul.com/core/install/alpine-linux#install-from-binary-tar-gz-file",
  "content" : "Install from binary TAR.GZ file You can download and use the binary tar.gz package, if necessary. Download the appropriate .tar.gz package for your OS from Azul Downloads. Verify that the checksum of the file matches the value provided on the download page. To calculate the checksum, use this command:  sha256sum <package>.tar.gz Example output:  $ sha256sum zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz\n0bd85593bae021314378f3b146cfe36a6c9b0afd964d897c34201034ace3e785  zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz Extract the package content into a folder.  tar -xzvf <package>.tar.gz This command creates a folder named to match the installation package name without .tar.gz. This is your Azul Zulu installation folder. Verify that the package was unpacked successfully by running the following command:  $ <installation_folder>/bin/java -version\nopenjdk version \"11.0.10\" 2021-01-19 LTS\nOpenJDK Runtime Environment Zulu11.45+27-CA (build 11.0.10+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.45+27-CA (build 11.0.10+9-LTS, mixed mode) (Optional) Add <installation_folder>/bin to your PATH environment variable, so that you can execute java from any directory without specifying the full path.  export PATH=<installation_folder>/bin:$PATH"
}, {
  "objectID" : "66e7d49b-3095-4c77-933d-177ee8fe2d8e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Alpine Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/alpine-linux",
  "link" : "https://docs.azul.com/core/install/alpine-linux",
  "content" : "sha256sum <package>.tar.gz Example output:  $ sha256sum zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz\n0bd85593bae021314378f3b146cfe36a6c9b0afd964d897c34201034ace3e785  zulu11.45.27-ca-jdk11.0.10-linux_x64.tar.gz"
}, {
  "objectID" : "d075b18a-3083-4cd4-b9a3-5740d0cd36f1",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Alpine Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/alpine-linux",
  "link" : "https://docs.azul.com/core/install/alpine-linux",
  "content" : "tar -xzvf <package>.tar.gz This command creates a folder named to match the installation package name without .tar.gz. This is your Azul Zulu installation folder."
}, {
  "objectID" : "6be4cbbd-aa09-4b35-9939-65ce76c2d3e9",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Solaris",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/solaris",
  "link" : "https://docs.azul.com/core/install/solaris",
  "content" : "unzip <package>.zip The command creates a folder named after the package but without the .zip extension. This is your Azul Zulu installation folder."
}, {
  "objectID" : "adcdd2e1-b5ee-4f78-9ee3-72b69d60e9e9",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Solaris",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/solaris",
  "link" : "https://docs.azul.com/core/install/solaris",
  "content" : "<installation_folder>/bin/java -version Example output:  $ zulu8.52.0.23-ca-jdk8.0.282-solaris/bin/java -version\nopenjdk version \"1.8.0_282\"\nOpenJDK Runtime Environment (Zulu 8.52.0.23-CA-solaris) (build 1.8.0_282-b08)\nOpenJDK 64-Bit Server VM (Zulu 8.52.0.23-CA-solaris) (build 25.282-b08, mixed mode)"
}, {
  "objectID" : "aedbe4f0-7817-43cb-98cf-39728b816b6b",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Linux and macOS with SDKMAN!",
  "section" : "Install SDKMAN!",
  "url" : "https://docs.azul.com/core/install/sdkman",
  "link" : "https://docs.azul.com/core/install/sdkman#install-sdkman",
  "content" : "Install SDKMAN! Follow the installation guidelines provided on the SDKMAN! website."
}, {
  "objectID" : "d1bd64f5-686e-475c-936d-2bb26e9f7196",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Linux and macOS with SDKMAN!",
  "section" : "Using SDKMAN!",
  "url" : "https://docs.azul.com/core/install/sdkman",
  "link" : "https://docs.azul.com/core/install/sdkman#using-sdkman",
  "content" : "Using SDKMAN! List Available Java Versions SDKMAN! detects your computer OS and platform and list all the available distributions and versions. For instance, on a macOS M1, all the Azul Zulu Builds of OpenJDK are listed:  $ sdk list java\n\n================================================================================\nAvailable Java Versions for macOS ARM 64bit\n================================================================================\n Vendor        | Use | Version      | Dist    | Status     | Identifier\n--------------------------------------------------------------------------------\n...\n Zulu          |     | 19.0.2       | zulu    |            | 19.0.2-zulu\n               |     | 19.0.2.fx    | zulu    |            | 19.0.2.fx-zulu\n               |     | 19.0.1       | zulu    |            | 19.0.1-zulu\n               |     | 19.0.1.fx    | zulu    |            | 19.0.1.fx-zulu\n               |     | 17.0.6       | zulu    |            | 17.0.6-zulu\n               |     | 17.0.6.fx    | zulu    |            | 17.0.6.fx-zulu\n               |     | 17.0.5       | zulu    |            | 17.0.5-zulu\n               |     | 17.0.5.fx    | zulu    |            | 17.0.5.fx-zulu\n               |     | 11.0.18      | zulu    |            | 11.0.18-zulu\n               |     | 11.0.18.fx   | zulu    |            | 11.0.18.fx-zulu\n               |     | 11.0.17      | zulu    |            | 11.0.17-zulu\n               |     | 11.0.17.fx   | zulu    |            | 11.0.17.fx-zulu\n               |     | 8.0.362      | zulu    |            | 8.0.362-zulu\n               |     | 8.0.362.fx   | zulu    |            | 8.0.362.fx-zulu\n               |     | 8.0.352      | zulu    |            | 8.0.352-zulu\n               |     | 8.0.352.fx   | zulu    |            | 8.0.352.fx-zulu\n================================================================================ Install a Specific Version To install a specific version, use the Identifier value from the table.  $ sdk install java 19.0.2-zulu\n\nDownloading: java 19.0.2-zulu\n\nIn progress...\n\n######################################################################## 100.0%\n\nRepackaging Java 19.0.2-zulu...\nDone repackaging...\n\nInstalling: java 19.0.2-zulu\nDone installing!\n\nSetting java 19.0.2-zulu as default. We can now check the installed Java version:  $ java -version\nopenjdk version \"19.0.2\" 2023-01-17\nOpenJDK Runtime Environment Zulu19.32+13-CA (build 19.0.2+7)\nOpenJDK 64-Bit Server VM Zulu19.32+13-CA (build 19.0.2+7, mixed mode, sharing) Uninstalling SDKMAN! also allows you to easily remove already installed Java versions:  $ sdk uninstall java 19.0.2-zulu\nDeselecting java 19.0.2-zulu...\nUninstalling java 19.0.2-zulu... Using SDKMAN! in Build Pipelines With some extra configuration, it’s also possible to use SDKMAN! within your build pipelines to install additional tools required for your builds. This is an example extract from a GitLab pipeline:  maven_build:\n  stage: build\n  script:\n    - curl -s \"https://get.sdkman.io\" | bash\n    - source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n    - sdkman_auto_answer=false\n    - sdkman_selfupdate_enable=false\n    - sdk install java 19-zulu\n    - sdk use java 19-zulu\n    - sdk install maven 3.8.6\n    - sdk use maven 3.8.6\n    - mvn package Other Use Cases Not only Java, but also a lot of other tools can be installed with SDKMAN!, e.g.: ActiveMQ Ant Asciidoctor JBake Spring Boot … You can get the full list, including a lot of info with:  $ sdk list\n\n================================================================================\nAvailable Candidates\n================================================================================\nq-quit                                  /-search down\nj-down                                  ?-search up\nk-up                                    h-help\n\n--------------------------------------------------------------------------------\nApache ActiveMQ (Classic) (5.17.1)                  https://activemq.apache.org/\n\nApache ActiveMQ<C2><AE> is a popular open source, multi-protocol, Java-based message\nbroker..."
}, {
  "objectID" : "02fe4ef6-8ba1-4c86-9253-5304ec2168e0",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Linux and macOS with SDKMAN!",
  "section" : "List Available Java Versions",
  "url" : "https://docs.azul.com/core/install/sdkman",
  "link" : "https://docs.azul.com/core/install/sdkman#list-available-java-versions",
  "content" : "List Available Java Versions SDKMAN! detects your computer OS and platform and list all the available distributions and versions. For instance, on a macOS M1, all the Azul Zulu Builds of OpenJDK are listed:  $ sdk list java\n\n================================================================================\nAvailable Java Versions for macOS ARM 64bit\n================================================================================\n Vendor        | Use | Version      | Dist    | Status     | Identifier\n--------------------------------------------------------------------------------\n...\n Zulu          |     | 19.0.2       | zulu    |            | 19.0.2-zulu\n               |     | 19.0.2.fx    | zulu    |            | 19.0.2.fx-zulu\n               |     | 19.0.1       | zulu    |            | 19.0.1-zulu\n               |     | 19.0.1.fx    | zulu    |            | 19.0.1.fx-zulu\n               |     | 17.0.6       | zulu    |            | 17.0.6-zulu\n               |     | 17.0.6.fx    | zulu    |            | 17.0.6.fx-zulu\n               |     | 17.0.5       | zulu    |            | 17.0.5-zulu\n               |     | 17.0.5.fx    | zulu    |            | 17.0.5.fx-zulu\n               |     | 11.0.18      | zulu    |            | 11.0.18-zulu\n               |     | 11.0.18.fx   | zulu    |            | 11.0.18.fx-zulu\n               |     | 11.0.17      | zulu    |            | 11.0.17-zulu\n               |     | 11.0.17.fx   | zulu    |            | 11.0.17.fx-zulu\n               |     | 8.0.362      | zulu    |            | 8.0.362-zulu\n               |     | 8.0.362.fx   | zulu    |            | 8.0.362.fx-zulu\n               |     | 8.0.352      | zulu    |            | 8.0.352-zulu\n               |     | 8.0.352.fx   | zulu    |            | 8.0.352.fx-zulu\n================================================================================"
}, {
  "objectID" : "51a13c8c-524b-4384-bef9-91eccd96cd8f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Linux and macOS with SDKMAN!",
  "section" : "Install a Specific Version",
  "url" : "https://docs.azul.com/core/install/sdkman",
  "link" : "https://docs.azul.com/core/install/sdkman#install-a-specific-version",
  "content" : "Install a Specific Version To install a specific version, use the Identifier value from the table.  $ sdk install java 19.0.2-zulu\n\nDownloading: java 19.0.2-zulu\n\nIn progress...\n\n######################################################################## 100.0%\n\nRepackaging Java 19.0.2-zulu...\nDone repackaging...\n\nInstalling: java 19.0.2-zulu\nDone installing!\n\nSetting java 19.0.2-zulu as default. We can now check the installed Java version:  $ java -version\nopenjdk version \"19.0.2\" 2023-01-17\nOpenJDK Runtime Environment Zulu19.32+13-CA (build 19.0.2+7)\nOpenJDK 64-Bit Server VM Zulu19.32+13-CA (build 19.0.2+7, mixed mode, sharing)"
}, {
  "objectID" : "fd68109f-9083-4906-bcf2-fd127128267a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Linux and macOS with SDKMAN!",
  "section" : "Uninstalling",
  "url" : "https://docs.azul.com/core/install/sdkman",
  "link" : "https://docs.azul.com/core/install/sdkman#uninstalling",
  "content" : "Uninstalling SDKMAN! also allows you to easily remove already installed Java versions:  $ sdk uninstall java 19.0.2-zulu\nDeselecting java 19.0.2-zulu...\nUninstalling java 19.0.2-zulu..."
}, {
  "objectID" : "3b700588-462e-4e8f-8878-2c783344b537",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Linux and macOS with SDKMAN!",
  "section" : "Using SDKMAN! in Build Pipelines",
  "url" : "https://docs.azul.com/core/install/sdkman",
  "link" : "https://docs.azul.com/core/install/sdkman#using-sdkman-in-build-pipelines",
  "content" : "Using SDKMAN! in Build Pipelines With some extra configuration, it’s also possible to use SDKMAN! within your build pipelines to install additional tools required for your builds. This is an example extract from a GitLab pipeline:  maven_build:\n  stage: build\n  script:\n    - curl -s \"https://get.sdkman.io\" | bash\n    - source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n    - sdkman_auto_answer=false\n    - sdkman_selfupdate_enable=false\n    - sdk install java 19-zulu\n    - sdk use java 19-zulu\n    - sdk install maven 3.8.6\n    - sdk use maven 3.8.6\n    - mvn package"
}, {
  "objectID" : "280b2e8b-e982-4ac2-91f8-6b40d7a9964f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install Azul Zulu on Linux and macOS with SDKMAN!",
  "section" : "Other Use Cases",
  "url" : "https://docs.azul.com/core/install/sdkman",
  "link" : "https://docs.azul.com/core/install/sdkman#other-use-cases",
  "content" : "Other Use Cases Not only Java, but also a lot of other tools can be installed with SDKMAN!, e.g.: ActiveMQ Ant Asciidoctor JBake Spring Boot … You can get the full list, including a lot of info with:  $ sdk list\n\n================================================================================\nAvailable Candidates\n================================================================================\nq-quit                                  /-search down\nj-down                                  ?-search up\nk-up                                    h-help\n\n--------------------------------------------------------------------------------\nApache ActiveMQ (Classic) (5.17.1)                  https://activemq.apache.org/\n\nApache ActiveMQ<C2><AE> is a popular open source, multi-protocol, Java-based message\nbroker..."
}, {
  "objectID" : "cba04046-0a46-4e0c-a88e-5b6ad89cf10f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Using Azul Metadata API",
  "section" : "",
  "url" : "https://docs.azul.com/core/install/metadata-api",
  "link" : "https://docs.azul.com/core/install/metadata-api",
  "content" : "This section explains how to use the Azul Metadata API. Note Please check out \"Transition from Zulu OpenJDK Discovery API to Azul Metadata API\" if you used the Zulu Discovery API (api.azul.com/zulu/download) in the past and want to migrate to this new Azul Metadata API (api.azul.com/metadata/v1)."
}, {
  "objectID" : "f0e0abca-898f-4fc3-a5e8-1f2c2a876655",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Using Azul Metadata API",
  "section" : "About the API",
  "url" : "https://docs.azul.com/core/install/metadata-api",
  "link" : "https://docs.azul.com/core/install/metadata-api#about-the-api",
  "content" : "About the API The Azul Metadata API is a free utility for viewing metadata and downloading Azul Zulu Builds of OpenJDK. Documentation on API endpoints can be found on api.azul.com/metadata/v1/docs/swagger. Via the Swagger UI, the API can be called to try the various APIs and filtering options, and also presents you with the CURL command to get the same results through the terminal. Searching a Zulu Version Note This is just an example at the time of the document being written. You may see a different output depending on the currently available Java versions. For instance, to find the Zulu downloads with the following criteria: java_version: 17 os: macos arch: arm javafx_bundled: `true the following CURL command is returned:  curl -X GET \\\n  \"https://api.azul.com/metadata/v1/zulu/packages/?java_version=17&os=macos&arch=arm&java_package_type=jdk&javafx_bundled=true&release_status=ga&availability_types=CA&certifications=tck&page=1&page_size=100\" \\\n  -H \"accept: application/json\" This returns the following result:  [\n  {\n    \"package_uuid\": \"2587945f-cc91-45ec-95df-f61903eea32f\",\n    \"name\": \"zulu17.40.19-ca-fx-jdk17.0.6-macosx_aarch64.zip\",\n    \"java_version\": [\n      17,\n      0,\n      6\n    ],\n    \"openjdk_build_number\": 10,\n    \"latest\": true,\n    \"download_url\": \"https://cdn.azul.com/zulu/bin/zulu17.40.19-ca-fx-jdk17.0.6-macosx_aarch64.zip\",\n    \"product\": \"zulu\",\n    \"distro_version\": [\n      17,\n      40,\n      19,\n      0\n    ],\n    \"availability_type\": \"CA\"\n  },\n  ...\n] Download Zulu The returned data contains the download_url field that contains a direct link to the download file of the Zulu version. In case of the previous example:  \"download_url\": \"https://cdn.azul.com/zulu/bin/zulu17.40.19-ca-fx-jdk17.0.6-macosx_aarch64.zip\" Note Packages retrieved with the filter availability-type=sa can only be downloaded by authenticating with an API token. Customers with a support contract can contact Azul Support ([email protected]) to get such a token. Data Model The Swagger UI also provides more info about the JSON data model that is returned by the API and can be opened to learn more about all the fields."
}, {
  "objectID" : "eef0ab05-d8c9-4b3d-bda8-b0c615f0f637",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Using Azul Metadata API",
  "section" : "Searching a Zulu Version",
  "url" : "https://docs.azul.com/core/install/metadata-api",
  "link" : "https://docs.azul.com/core/install/metadata-api#searching-a-zulu-version",
  "content" : "Searching a Zulu Version Note This is just an example at the time of the document being written. You may see a different output depending on the currently available Java versions. For instance, to find the Zulu downloads with the following criteria: java_version: 17 os: macos arch: arm javafx_bundled: `true the following CURL command is returned:  curl -X GET \\\n  \"https://api.azul.com/metadata/v1/zulu/packages/?java_version=17&os=macos&arch=arm&java_package_type=jdk&javafx_bundled=true&release_status=ga&availability_types=CA&certifications=tck&page=1&page_size=100\" \\\n  -H \"accept: application/json\" This returns the following result:  [\n  {\n    \"package_uuid\": \"2587945f-cc91-45ec-95df-f61903eea32f\",\n    \"name\": \"zulu17.40.19-ca-fx-jdk17.0.6-macosx_aarch64.zip\",\n    \"java_version\": [\n      17,\n      0,\n      6\n    ],\n    \"openjdk_build_number\": 10,\n    \"latest\": true,\n    \"download_url\": \"https://cdn.azul.com/zulu/bin/zulu17.40.19-ca-fx-jdk17.0.6-macosx_aarch64.zip\",\n    \"product\": \"zulu\",\n    \"distro_version\": [\n      17,\n      40,\n      19,\n      0\n    ],\n    \"availability_type\": \"CA\"\n  },\n  ...\n]"
}, {
  "objectID" : "df2da09f-5877-4d38-b9fd-6fe5c29820fb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Using Azul Metadata API",
  "section" : "Download Zulu",
  "url" : "https://docs.azul.com/core/install/metadata-api",
  "link" : "https://docs.azul.com/core/install/metadata-api#download-zulu",
  "content" : "Download Zulu The returned data contains the download_url field that contains a direct link to the download file of the Zulu version. In case of the previous example:  \"download_url\": \"https://cdn.azul.com/zulu/bin/zulu17.40.19-ca-fx-jdk17.0.6-macosx_aarch64.zip\" Note Packages retrieved with the filter availability-type=sa can only be downloaded by authenticating with an API token. Customers with a support contract can contact Azul Support ([email protected]) to get such a token."
}, {
  "objectID" : "e85184c9-6602-4854-b3d8-df2351a6065a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Using Azul Metadata API",
  "section" : "Data Model",
  "url" : "https://docs.azul.com/core/install/metadata-api",
  "link" : "https://docs.azul.com/core/install/metadata-api#data-model",
  "content" : "Data Model The Swagger UI also provides more info about the JSON data model that is returned by the API and can be opened to learn more about all the fields."
}, {
  "objectID" : "1296c8fb-6745-4fa2-8336-142462bbfaf8",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Windows",
  "section" : "",
  "url" : "https://docs.azul.com/core/uninstall/windows",
  "link" : "https://docs.azul.com/core/uninstall/windows",
  "content" : "Uninstalling Azul Zulu removes the files from the installed directories. Uninstalling one Azul Zulu JDK version does not affect any other Azul Zulu JDK versions you have installed. For example, removing Azul Zulu 7 from your system does not remove Azul Zulu 8 if it’s installed."
}, {
  "objectID" : "3d477d50-1393-45e0-9478-5a353dccb9d1",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Windows",
  "section" : "Uninstall Azul Zulu extracted from a ZIP or TAR.GZ file",
  "url" : "https://docs.azul.com/core/uninstall/windows",
  "link" : "https://docs.azul.com/core/uninstall/windows#uninstall-azul-zulu-extracted-from-a-zip-or-tar-gz-file",
  "content" : "Uninstall Azul Zulu extracted from a ZIP or TAR.GZ file To uninstall Azul Zulu extracted from a .zip package: Ensure there are no running processes that are using Azul Zulu. Delete the Azul Zulu installation directory. If you modified your PATH environment variables, remove the Azul Zulu path from it."
}, {
  "objectID" : "3680186a-932c-46af-bda5-963133b77b5d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Windows",
  "section" : "Uninstall Azul Zulu installed with MSI installer",
  "url" : "https://docs.azul.com/core/uninstall/windows",
  "link" : "https://docs.azul.com/core/uninstall/windows#uninstall-azul-zulu-installed-with-msi-installer",
  "content" : "Uninstall Azul Zulu installed with MSI installer To uninstall Azul Zulu installed with an .msi package: Ensure there are no running processes that are using Azul Zulu. Then uninstall Azul Zulu using one of the following methods. Uninstall via Control Panel From the Windows Control Panel, open Remove Program and select Azul Zulu package you want to remove. Then click Uninstall. Uninstall using the MSI installer Double-click the .msi file, choose Remove, and follow the prompts to uninstall Azul Zulu. Uninstall from the command prompt At the Command Prompt, run:  msiexec /x <zulu_package>.msi Uninstall using the product code If you do not have the .msi file at hand, you can use the product code (unique identifier for the particular Azul Zulu MSI package). The command that uninstalls a program by a given product code is as follows:  msiexec /x \"<zulu_product_code>\" To find the product code of the installed Azul Zulu package. Open Windows PowerShell and run the following command:  gwmi win32_product -filter \"Name LIKE '%Zulu%'\" The command prints the information about installed Azul Zulu MSI packages.  IdentifyingNumber : {F1DADDC8-CC2F-47B2-A78E-BA03A5123806}\nName              : Zulu JRE 13.30 (13.0.2.0.101), 64-bit\nVendor            : Azul Systems, Inc.\nVersion           : 13.30\nCaption           : Zulu JRE 13.30 (13.0.2.0.101), 64-bit\n\nIdentifyingNumber : {00DB76F8-D3C6-4A72-9511-E5D7A6B5E4C9}\nName              : Zulu JDK 8.52.0.23 (8u282), 64-bit\nVendor            : Azul Systems, Inc.\nVersion           : 8.52.0.23\nCaption           : Zulu JDK 8.52.0.23 (8u282), 64-bit The IdentifyingNumber is the product code. Copy the product code of the package you want to uninstall and run the uninstall command:  msiexec /x \"{E1D93E79-2A5E-4E8D-A70F-FF6F2BF42443}\""
}, {
  "objectID" : "860dcf84-88d3-4c88-8743-9300c37e6e52",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Windows",
  "section" : "Uninstall via Control Panel",
  "url" : "https://docs.azul.com/core/uninstall/windows",
  "link" : "https://docs.azul.com/core/uninstall/windows#uninstall-via-control-panel",
  "content" : "Uninstall via Control Panel From the Windows Control Panel, open Remove Program and select Azul Zulu package you want to remove. Then click Uninstall."
}, {
  "objectID" : "dfd8c373-6b04-4290-a4ed-26041b826fba",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Windows",
  "section" : "Uninstall using the MSI installer",
  "url" : "https://docs.azul.com/core/uninstall/windows",
  "link" : "https://docs.azul.com/core/uninstall/windows#uninstall-using-the-msi-installer",
  "content" : "Uninstall using the MSI installer Double-click the .msi file, choose Remove, and follow the prompts to uninstall Azul Zulu."
}, {
  "objectID" : "c011c8cf-12f5-418f-b467-7875abd6b5b5",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Windows",
  "section" : "Uninstall from the command prompt",
  "url" : "https://docs.azul.com/core/uninstall/windows",
  "link" : "https://docs.azul.com/core/uninstall/windows#uninstall-from-the-command-prompt",
  "content" : "Uninstall from the command prompt At the Command Prompt, run:  msiexec /x <zulu_package>.msi"
}, {
  "objectID" : "34dbb314-7bcc-43c7-83e4-8ec3cf94cdda",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Windows",
  "section" : "Uninstall using the product code",
  "url" : "https://docs.azul.com/core/uninstall/windows",
  "link" : "https://docs.azul.com/core/uninstall/windows#uninstall-using-the-product-code",
  "content" : "Uninstall using the product code If you do not have the .msi file at hand, you can use the product code (unique identifier for the particular Azul Zulu MSI package). The command that uninstalls a program by a given product code is as follows:  msiexec /x \"<zulu_product_code>\" To find the product code of the installed Azul Zulu package. Open Windows PowerShell and run the following command:  gwmi win32_product -filter \"Name LIKE '%Zulu%'\" The command prints the information about installed Azul Zulu MSI packages.  IdentifyingNumber : {F1DADDC8-CC2F-47B2-A78E-BA03A5123806}\nName              : Zulu JRE 13.30 (13.0.2.0.101), 64-bit\nVendor            : Azul Systems, Inc.\nVersion           : 13.30\nCaption           : Zulu JRE 13.30 (13.0.2.0.101), 64-bit\n\nIdentifyingNumber : {00DB76F8-D3C6-4A72-9511-E5D7A6B5E4C9}\nName              : Zulu JDK 8.52.0.23 (8u282), 64-bit\nVendor            : Azul Systems, Inc.\nVersion           : 8.52.0.23\nCaption           : Zulu JDK 8.52.0.23 (8u282), 64-bit The IdentifyingNumber is the product code. Copy the product code of the package you want to uninstall and run the uninstall command:  msiexec /x \"{E1D93E79-2A5E-4E8D-A70F-FF6F2BF42443}\""
}, {
  "objectID" : "905c6f11-106f-4dcf-bbe1-8024a3dc51b2",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on macOS",
  "section" : "",
  "url" : "https://docs.azul.com/core/uninstall/macos",
  "link" : "https://docs.azul.com/core/uninstall/macos",
  "content" : "This section explains how to uninstall Azul Zulu on macOS. If you use a DMG package to install Azul Zulu, it installs the product into the /Library/Java/JavaVirtualMachines directory. To see all Azul Zulu versions installed on your Mac, navigate to this directory. To uninstall a specific version of Azul Zulu using Finder: Open Finder and navigate to /Library/Java/JavaVirtualMachines/. Delete the directory of the Azul Zulu version you want to uninstall. You may be asked to provide your password. To uninstall a specific version of Azul Zulu using a terminal: Launch Terminal. Navigate to the JavaVirtualMachines directory:  cd /Library/Java/JavaVirtualMachines/ Display the list of directories:  % ls -1\nzulu-11.jdk\nzulu-13.jre\nzulu-15.jdk Each directory corresponds to a version of Azul Zulu. To uninstall a specific version of Azul Zulu, use the following command:  sudo rm -rf <zulu_directory> For example, to uninstall Azul Zulu 11 JDK, run:  sudo rm -rf zulu-11.jdk"
}, {
  "objectID" : "537a686f-92d8-472f-b3b1-19640d5a8788",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/uninstall/linux",
  "link" : "https://docs.azul.com/core/uninstall/linux",
  "content" : "This section shows how to remove Azul Zulu from your computer."
}, {
  "objectID" : "415561d5-009b-4ea8-9287-fd0a47e72364",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Linux",
  "section" : "Debian or Ubuntu",
  "url" : "https://docs.azul.com/core/uninstall/linux",
  "link" : "https://docs.azul.com/core/uninstall/linux#debian-or-ubuntu",
  "content" : "Debian or Ubuntu If you installed Azul Zulu using a DEB package, use your package manager to uninstall it:  sudo apt remove <zulu_package_name>"
}, {
  "objectID" : "405761c3-031e-4561-89a0-e717d344fd0c",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall Azul Zulu on Linux",
  "section" : "RPM-based Linux",
  "url" : "https://docs.azul.com/core/uninstall/linux",
  "link" : "https://docs.azul.com/core/uninstall/linux#rpm-based-linux",
  "content" : "RPM-based Linux If you installed Azul Zulu using an RPM package, you can uninstall it using your package manager. For SLES:  sudo zypper remove <zulu_package_name> For RHEL or Oracle Linux:  sudo yum remove <zulu_package_name>"
}, {
  "objectID" : "aaa03dcd-2b2e-4f45-afdc-a8606154709f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions",
  "content" : "When you install a (newer) version of Azul Zulu, it’s not required to remove other installations of Azul Zulu or other distributions. Different versions can exist on your system next to each other, and you can use them independently. SDKMAN, for instance, is a tool that can assist you in this and is used by many developers to easily switch between different Java versions during development and/or testing. But if you want to keep your system \"clean\", it can be a good idea to remove the installations you are no longer using. To remove Azul Zulu distributions, use the guidelines provided for: Windows macOS Linux"
}, {
  "objectID" : "0190250f-11d2-42de-8af2-8c6ebd33f855",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "Finding All Installed Java Versions with JavaFinder",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions#finding-all-installed-java-versions-with-javafinder",
  "content" : "Finding All Installed Java Versions with JavaFinder JavaFinder is a little command line tool to find all Java installations in a given path (incl. subfolders). This can be useful if you need to figure out what kind of distribution(s) you have installed on your machine. It should find builds of OpenJDK and GraalVM of all distributors. The sources and binaries of this tool are available on GitHub. If you run JavaFinder without any parameter, it will scan the following predefined paths: Windows: C:\\Program Files\\Java\\ Linux : /usr/lib/jvm MacOS : /System/Volumes/Data/Library/Java/JavaVirtualMachines/ You can adjust this with the following parameters: -h: show some info -v: show the version number csv /PATH: output the result in csv format, starting from the given path json /PATH: output the result in json with beautified formatting, starting from the given path If no output format is specified, json (not beautified) is used For example:  % ./javafinder json ~/.sdkman/\n\n{\n    \"timestamp\":1686139381,\n    \"search_path\":\"/Users/test/.sdkman/\",\n    \"sysinfo\":{\n        \"operating_system\":\"Mac OS\",\n        \"architecture\":\"ARM64\",\n        \"bit\":\"64 Bit\"\n    },\n    \"distributions\":\n    [\n        {\n            \"vendor\":\"Azul\",\n            \"name\":\"Zulu\",\n            \"version\":\"19.0.1\",\n            \"timestamp\":1686139381,\n            \"path\":\"/Users/test/.sdkman/candidates/java/19.0.1.fx-zulu/zulu-19.jdk/Contents/Home/\",\n            \"build_scope\":\"OpenJDK\",\n            \"in_use\":false,\n            \"used_by\":[]\n        },\n        ...\n    ]\n}"
}, {
  "objectID" : "88653b86-23f3-4799-a44b-607111301a0c",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "Guidelines to Remove Other Distributions of OpenJDK",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions#guidelines-to-remove-other-distributions-of-openjdk",
  "content" : "Guidelines to Remove Other Distributions of OpenJDK Windows During installation of Java, new keys are added to the Windows Registry. For a complete clean-up, it can be necessary to search in the registry and remove the unneeded versions. A few examples of keys used in the Windows Registry, depending on the version:  HKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\JRE\nHKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\JRE\\9\nHKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\Java Runtime Environment\nHKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\Java Runtime Environment\\1.8\nHKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\Java Runtime Environment\\8.0.282\nHKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\JavaSoft\\Java Runtime Environment\\1.8.0_371 macOS and Linux Depending on your software packaging and deployment system, different commands can be used on macOS and Linux. Brew  # Check all the installed packages\n% brew list\n\n# Uninstall example, depending on the installed package, for example 'openjdk'\n% brew uninstall --formulae openjdk Apt  # Check all the installed packages\n$ sudo apt list --installed\n\n# Uninstall example, depending on the installed package, for example 'openjdk-17-jre'\n$ sudo apt remove openjdk-17-jre\n\n# To remove the package including all its files and configuration files, instead use\n$ sudo apt purge openjdk-17-jre\n\n# To remove that were installed as dependencies but are no longer needed\n$ sudo apt autoremove Yum  # Check all the installed packages\n$ yum list installed java*\n\n# Uninstall example, depending on the installed package, for example 'java-1.8.0-openjdk'\n$ sudo yum remove java-1.8.0-openjdk\n\n# Uninstall example, depending on the installed packages, for multiple packages\n$ sudo yum remove java-1.8.0-openjdk java-11-openjdk Rpm  # Check all the installed packages\n$ rpm -qa | grep java\n\n# Uninstall example, depending on the installed package, for example 'java-1.8.0-openjdk'\n$ sudo rpm -e java-1.8.0-openjdk\n\n# Uninstall example, depending on the installed packages, for multiple packages\n$ sudo rpm -e java-1.8.0-openjdk java-11-openjdk Using SDKMAN Follow these steps to uninstall Java versions with SDKMAN: Open a terminal or command prompt. Run the following command:  sdk uninstall java {version} For instance, to remove 17.0.5-oracle:  sdk uninstall java 17.0.5-oracle To remove all installed versions of Java, run the command:  sdk uninstall java Verify the (un)installed versions with the command:  sdk list java You can check the versions that are installed by SDKMAN in the directory:  ~/.sdkman/candidates/java/"
}, {
  "objectID" : "ccf79337-e6a2-4b18-a85d-1ab58b6d1d00",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "Windows",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions#windows",
  "content" : "Windows During installation of Java, new keys are added to the Windows Registry. For a complete clean-up, it can be necessary to search in the registry and remove the unneeded versions. A few examples of keys used in the Windows Registry, depending on the version:  HKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\JRE\nHKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\JRE\\9\nHKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\Java Runtime Environment\nHKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\Java Runtime Environment\\1.8\nHKEY_LOCAL_MACHINE\\SOFTWARE\\JavaSoft\\Java Runtime Environment\\8.0.282\nHKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\JavaSoft\\Java Runtime Environment\\1.8.0_371"
}, {
  "objectID" : "7bf71452-d053-4028-bcbd-543066e8684a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "macOS and Linux",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions#macos-and-linux",
  "content" : "macOS and Linux Depending on your software packaging and deployment system, different commands can be used on macOS and Linux. Brew  # Check all the installed packages\n% brew list\n\n# Uninstall example, depending on the installed package, for example 'openjdk'\n% brew uninstall --formulae openjdk Apt  # Check all the installed packages\n$ sudo apt list --installed\n\n# Uninstall example, depending on the installed package, for example 'openjdk-17-jre'\n$ sudo apt remove openjdk-17-jre\n\n# To remove the package including all its files and configuration files, instead use\n$ sudo apt purge openjdk-17-jre\n\n# To remove that were installed as dependencies but are no longer needed\n$ sudo apt autoremove Yum  # Check all the installed packages\n$ yum list installed java*\n\n# Uninstall example, depending on the installed package, for example 'java-1.8.0-openjdk'\n$ sudo yum remove java-1.8.0-openjdk\n\n# Uninstall example, depending on the installed packages, for multiple packages\n$ sudo yum remove java-1.8.0-openjdk java-11-openjdk Rpm  # Check all the installed packages\n$ rpm -qa | grep java\n\n# Uninstall example, depending on the installed package, for example 'java-1.8.0-openjdk'\n$ sudo rpm -e java-1.8.0-openjdk\n\n# Uninstall example, depending on the installed packages, for multiple packages\n$ sudo rpm -e java-1.8.0-openjdk java-11-openjdk"
}, {
  "objectID" : "e028fa3d-b787-44c8-ad58-b0fff5e57cc9",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "Brew",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions#brew",
  "content" : "Brew  # Check all the installed packages\n% brew list\n\n# Uninstall example, depending on the installed package, for example 'openjdk'\n% brew uninstall --formulae openjdk"
}, {
  "objectID" : "075771a7-6a16-4575-ad81-de89d1123431",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "Apt",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions#apt",
  "content" : "Apt  # Check all the installed packages\n$ sudo apt list --installed\n\n# Uninstall example, depending on the installed package, for example 'openjdk-17-jre'\n$ sudo apt remove openjdk-17-jre\n\n# To remove the package including all its files and configuration files, instead use\n$ sudo apt purge openjdk-17-jre\n\n# To remove that were installed as dependencies but are no longer needed\n$ sudo apt autoremove"
}, {
  "objectID" : "8261155a-be87-430f-85e6-fc75d6b1bc83",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "Yum",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions#yum",
  "content" : "Yum  # Check all the installed packages\n$ yum list installed java*\n\n# Uninstall example, depending on the installed package, for example 'java-1.8.0-openjdk'\n$ sudo yum remove java-1.8.0-openjdk\n\n# Uninstall example, depending on the installed packages, for multiple packages\n$ sudo yum remove java-1.8.0-openjdk java-11-openjdk"
}, {
  "objectID" : "1097bcf0-0a00-44f3-83e5-e1f5dc875e10",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "Rpm",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions#rpm",
  "content" : "Rpm  # Check all the installed packages\n$ rpm -qa | grep java\n\n# Uninstall example, depending on the installed package, for example 'java-1.8.0-openjdk'\n$ sudo rpm -e java-1.8.0-openjdk\n\n# Uninstall example, depending on the installed packages, for multiple packages\n$ sudo rpm -e java-1.8.0-openjdk java-11-openjdk"
}, {
  "objectID" : "5365cafd-0adb-4d6c-9941-1e861362e49f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Uninstall other OpenJDK distributions",
  "section" : "Using SDKMAN",
  "url" : "https://docs.azul.com/core/uninstall/other-distributions",
  "link" : "https://docs.azul.com/core/uninstall/other-distributions#using-sdkman",
  "content" : "Using SDKMAN Follow these steps to uninstall Java versions with SDKMAN: Open a terminal or command prompt. Run the following command:  sdk uninstall java {version} For instance, to remove 17.0.5-oracle:  sdk uninstall java 17.0.5-oracle To remove all installed versions of Java, run the command:  sdk uninstall java Verify the (un)installed versions with the command:  sdk list java You can check the versions that are installed by SDKMAN in the directory:  ~/.sdkman/candidates/java/"
}, {
  "objectID" : "8151646d-acdd-4e2f-96f3-7eab4c3fbd3b",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Manage Multiple Azul Zulu Versions on Windows",
  "section" : "",
  "url" : "https://docs.azul.com/core/manage-multiple-zulu-versions/windows",
  "link" : "https://docs.azul.com/core/manage-multiple-zulu-versions/windows",
  "content" : "You can install multiple major versions of Azul Zulu on the same machine and switch between them when necessary. If you use the MSI installer to install Azul Zulu, the installer adds the java executable to the beginning of the string of the system PATH environment variable and makes it the default command for running Java. For example, if you have Azul Zulu 11 and Azul Zulu 8 installed, you have the following segments in the PATH string: C:\\Program Files\\Zulu\\zulu-11\\bin\\ C:\\Program Files\\Zulu\\zulu-8\\bin\\ To switch between your Azul Zulu installations on Windows, modify the PATH environment variable as follows: Select Control Panel and then System. Click the Advanced system settings link. Click the Environment Variables button. In the System Variables area, find the PATH environment variable and select it. Click the Edit button. In the Variable value field, put the segment of the desired installation at the beginning of the string. Click OK. Close all remaining windows by clicking OK."
}, {
  "objectID" : "58738941-dc4c-44c8-a917-8f954ab89b18",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Manage Multiple Azul Zulu Versions on macOS",
  "section" : "",
  "url" : "https://docs.azul.com/core/manage-multiple-zulu-versions/macos",
  "link" : "https://docs.azul.com/core/manage-multiple-zulu-versions/macos",
  "content" : "If you use a DMG installer to install Azul Zulu, the default installation directory is /Library/Java/JavaVirtualMachines/<azul_zulu_folder>/. The <azul_zulu_folder> represents the type of Azul Zulu package (JDK or JRE) and its version, for example zulu-11.jdk. You can view all Azul Zulu versions installed on your Mac by navigating to the JavaVirtualMachines directory. Use Finder or launch Terminal and run the following command:  % ls -1 /Library/Java/JavaVirtualMachines/\nzulu-11.jdk\nzulu-13.jre\nzulu-15.jdk To see which version of Java is used by default, use the java_home tool:  % /usr/libexec/java_home\n/Library/Java/JavaVirtualMachines/zulu-15.jdk/Contents/Home To execute a different version of Java, use the following command:  % /usr/libexec/java_home -v 11 --exec java -version\nopenjdk version \"11.0.11\" 2021-04-20 LTS\nOpenJDK Runtime Environment Zulu11.48+21-CA (build 11.0.11+9-LTS)\nOpenJDK 64-Bit Server VM Zulu11.48+21-CA (build 11.0.11+9-LTS, mixed mode)"
}, {
  "objectID" : "e40bbae3-7758-44fc-ade0-56e2e88bc741",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Manage Multiple Azul Zulu Versions on Linux",
  "section" : "",
  "url" : "https://docs.azul.com/core/manage-multiple-zulu-versions/linux",
  "link" : "https://docs.azul.com/core/manage-multiple-zulu-versions/linux",
  "content" : "You can install different major versions of Azul Zulu on the same machine and switch between them when necessary."
}, {
  "objectID" : "7580c78b-5126-4fd6-aa89-ea6635910a96",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Manage Multiple Azul Zulu Versions on Linux",
  "section" : "Update PATH environment variable",
  "url" : "https://docs.azul.com/core/manage-multiple-zulu-versions/linux",
  "link" : "https://docs.azul.com/core/manage-multiple-zulu-versions/linux#update-path-environment-variable",
  "content" : "Update PATH environment variable You can add <zulu_installation_folder>/bin to your PATH environment variable.  export PATH=<zulu_installation_folder>/bin:$PATH This makes all executables from <zulu_installation_folder>/bin available to Java programs from anywhere on your system. If you have previously added another version of Azul Zulu to PATH, just change the path to the version you want to use by default."
}, {
  "objectID" : "b076ded9-6505-412b-8c13-a5281c6c4782",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Manage Multiple Azul Zulu Versions on Linux",
  "section" : "Change default \"java\" command",
  "url" : "https://docs.azul.com/core/manage-multiple-zulu-versions/linux",
  "link" : "https://docs.azul.com/core/manage-multiple-zulu-versions/linux#change-default-java-command",
  "content" : "Change default \"java\" command If you install multiple Azul Zulu versions using installable packages (DEB, RPM, and so on), you can use update-alternatives to set which java command is used by default. To view the alternative java commands installed on your system, run:  $ sudo update-alternatives --config java\n\nThere are 3 choices for the alternative java (providing /usr/bin/java).\n\n  Selection    Path                                         Priority   Status\n------------------------------------------------------------\n* 0            /usr/lib/jvm/zulu-15-amd64/bin/java           2152700   auto mode\n  1            /usr/lib/jvm/java-11-openjdk-amd64/bin/java   1111      manual mode\n  2            /usr/lib/jvm/zulu-15-amd64/bin/java           2152700   manual mode\n  3            /usr/lib/jvm/zulu8/jre/bin/java               1805201   manual mode\n\nPress <enter> to keep the current choice[*], or type selection number: The command lists available java executables and lets you choose the default command. Type the number of the command and press Enter. You should see a messages similar to this:  update-alternatives: using /usr/lib/jvm/zulu8/jre/bin/java to provide /usr/bin/java (java) in manual mode Verify that the default java command has changed:  java -version"
}, {
  "objectID" : "4fd3a39d-b94d-43ad-8e13-610537877d9b",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Zulu Versioning and Naming Conventions",
  "section" : "",
  "url" : "https://docs.azul.com/core/versioning-and-naming",
  "link" : "https://docs.azul.com/core/versioning-and-naming",
  "content" : "This section explains the naming convention and versioning schemes for Azul Zulu binary packages."
}, {
  "objectID" : "cfdf5474-bbb5-4246-9de1-02293069e763",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Zulu Versioning and Naming Conventions",
  "section" : "Versioning Scheme",
  "url" : "https://docs.azul.com/core/versioning-and-naming",
  "link" : "https://docs.azul.com/core/versioning-and-naming#versioning-scheme",
  "content" : "Versioning Scheme For historical reasons, Azul Zulu releases use different versioning schemes for different major versions. For Azul Zulu 8 and earlier, the version consists of 4 numbers: XX.YY.0.BB, the third number is always \"0\". For Azul Zulu 11 and later, the version consists of 3 numbers: XX.YY.BB. Note For each quarterly release, the release version is defined by the major version and minor version (first two numbers, XX.YY). The build number (BB) may vary within a release. As of April 2021 release, the Azul Zulu versions use the following scheme: Azul Zulu Major Version Full Version Format 8 and earlier XX.YY.0.BB 11 and later XX.YY.BB The following table explains the meaning of XX, YY, and BB. XX The major version. YY The minor version. even numbers indicate a PSU release odd numbers indicate a CPU release BB The build number. even numbers indicate an SA bundle odd numbers indicate a CA or NV bundle BB ≤ 50 indicate regular Update bundles 51 ≤ BB < 1000 indicate BPR (Bundled Patch Release) bundles BB ≥ 1000 indicate FVB (Fix Verification Bundle) bundles Note Based on building and testing results, the build number can be different within a release, typically grouping different platforms. Versioning Examples 8.54.0.21 - Azul Zulu 8, a CA bundle of a regular CPU release 8.54.0.22 - Azul Zulu 8, a SA bundle of a regular PSU release 8.54.0.56 - Azul Zulu 8, an SA bundle of a PSU-based bundled patch release (BPR) 8.54.0.1018 - Azul Zulu 8, an SA fix verification bundle (FVB) for a PSU release 11.48.22 - Azul Zulu 11, an SA bundle of a regular PSU release 13.39.15 - Azul Zulu 13, an NV bundle of a regular CPU release 15.32.54 - Azul Zulu 15, an SA bundle of a PSU-based bundled patch release (BPR) 11.48.1004 - Azul Zulu 11, an SA fix verification bundle (FVB) for a PSU release"
}, {
  "objectID" : "e8b2eb34-ac93-4cc9-a640-4a707c1e09ba",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Zulu Versioning and Naming Conventions",
  "section" : "Versioning Examples",
  "url" : "https://docs.azul.com/core/versioning-and-naming",
  "link" : "https://docs.azul.com/core/versioning-and-naming#versioning-examples",
  "content" : "Versioning Examples 8.54.0.21 - Azul Zulu 8, a CA bundle of a regular CPU release 8.54.0.22 - Azul Zulu 8, a SA bundle of a regular PSU release 8.54.0.56 - Azul Zulu 8, an SA bundle of a PSU-based bundled patch release (BPR) 8.54.0.1018 - Azul Zulu 8, an SA fix verification bundle (FVB) for a PSU release 11.48.22 - Azul Zulu 11, an SA bundle of a regular PSU release 13.39.15 - Azul Zulu 13, an NV bundle of a regular CPU release 15.32.54 - Azul Zulu 15, an SA bundle of a PSU-based bundled patch release (BPR) 11.48.1004 - Azul Zulu 11, an SA fix verification bundle (FVB) for a PSU release"
}, {
  "objectID" : "77aace91-55ee-4e59-ab68-8d49eefc8ce4",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Azul Zulu Versioning and Naming Conventions",
  "section" : "Bundle Name Convention",
  "url" : "https://docs.azul.com/core/versioning-and-naming",
  "link" : "https://docs.azul.com/core/versioning-and-naming#bundle-name-convention",
  "content" : "Bundle Name Convention Azul Zulu uses a naming convention that encodes relevant information about a bundle into the bundle name. For example:  zulu15.31.14-sa-jre15.0.2.0.101-linux_musl_x64.tar.gz The following table details most common components that make up a name of downloadable Azul Zulu package. Bundle name part Description zulu15.29.14-sa-jdk15.0.2-linux_x64.tar.gz Azul Zulu Version. See Versioning Scheme for details. zulu15.29.14-sa-jdk15.0.2-linux_x64.tar.gz Distribution type (SA, CA, NV): sa - subscriber availability ca - community availability nv - \"non-verified\" builds zulu15.29.14-sa-jdk15.0.2-linux_x64.tar.gz Java functionality included in the bundle: jdk - Java Development Kit jre - Java Runtime Environment hl - Headless version of a JDK or JRE (without GUI components) fx-jdk - JDK with JavaFX support fx-jre - JRE with JavaFX support zulu15.29.14-sa-jdk15.0.2-linux_x64.tar.gz Java update version zulu15.29.14-sa-jdk15.0.2-linux_x64.tar.gz OS family: linux, linux_musl, win, macosx, solaris, qnx zulu15.29.14-sa-jdk15.0.2-linux_x64.tar.gz CPU architecture: x64, i686, i386, amd64, aarch64, aarch32sf, aarch32hf, ppc64, ppc32hf, ppc32spe, mips32sf Note Please note that Azul does not build bundles for all possible combinations of the values provided in the table above. Rather, you can use this table to understand what is included in a specific bundle. There are additional optional suffixes that may appear in the name of a bundle. For example:  zulu8.54.0.22-sa-cp2-embvm-jre8.0.292-c2-linux_ppc64.tar.gz Below is a description of the additional suffixes: Suffix Description beta or ea Early Access bundles. Both SA and CA distributions may contain Early Access builds noted with -beta- or -ea- in their filename. Early Access builds may not be TCK certified. embvm The bundle is built with the JAVASE_EMBEDDED option. Bundles with this suffix were discontinued in October 2021. cp1, cp2, or cp3 One of the Java SE Embedded Compact profiles. Read more about compact profiles at https://foojay.io/pedia/compactprofiles/. c2 Indicates that the bundle contains both Client and Server HotSpot JIT compilers. Bundles that don’t have this suffix contain only the Client compilers. This suffix can be present in bundles for the ARM 32-bit architecture. criu Bundles with the checkpoint/restore functionality. cr Bundles with the CRaM (Checkpoint / Restore at Main) functionality. crac Bundles with the CRaC (Coordinated Restore at Checkpoint) functionality. gcc9 Bundles compiled with the GCC 9 toolchain."
}, {
  "objectID" : "4c1a1ed2-77be-41ad-acb5-f45d619e7a05",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration",
  "content" : "Since the beginning of 2023, Azul promotes the Metadata API in favor of the Discovery API. This new API is able to provide more information about the various builds and products of Azul, while the Discovery API only provided info about Azul Zulu Builds of OpenJDK. This document provides an overview to migrate to the new Metadata API."
}, {
  "objectID" : "a0424cef-485b-4418-90bc-6692e7d5743d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "URL Changes",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#url-changes",
  "content" : "URL Changes Base URL of the new Metadata API is api.azul.com/metadata/v1, for instance: https://api.azul.com/metadata/v1/docs/swagger https://api.azul.com/metadata/v1/zulu/packages/ and more… This replaces these base URLs of the Zulu Discovery API: api.azul.com/zulu/download/community/v1.0 api.azul.com/zulu/download/sa/v1-early-access api.azul.com/zulu/download/azure-only/v1.0 The Metadata API supports both community availability (CA) and subscriber availability (SA) packages of Azul Platform Core in a single API. Since no new Azure-only bundles and packages are being published, API support for Azure-only data is limited. The underlying metadata is the same, and the Metadata API endpoints are very similar, so users can easily migrate to this new Metadata API."
}, {
  "objectID" : "6ec83821-ffa2-47b7-8245-4fd2dc30c176",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Overview of changes",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#overview-of-changes",
  "content" : "Overview of changes Where the Zulu Discovery APIs use the term bundle, the Metadata API uses the term package. While the Zulu Discovery APIs have different APIs for supported and free packages, the new Metadata API uses availability-type filters to determine if a package is freely available or not. All customer packages require an API token to download, similar to the token used by the old api.azul.com/zulu/download/sa/v1-early-access. Packages previously available from api.azul.com/zulu/download/community/v1.0 should use the filter availability-type=ca. Packages previously available from api.azul.com/zulu/download/sa/v1-early-access should use the filter availability-type=sa and must authenticate with an API token. Customers with a support contract can contact Azul Support ([email protected]) to get an API token. Azure-only has been deprecated, since no new azure only packages are being published. The Metadata API has dropped support for /bundles/latest* and /bundles/sha256* endpoints and added support for retrieving a package’s UUID using a SHA256 hash or MD5 hash. See below for examples of how to replace requests using the dropped endpoints."
}, {
  "objectID" : "1659d51f-120d-42ae-a934-5b8db0a25005",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Updated Package List Endpoint",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#updated-package-list-endpoint",
  "content" : "Updated Package List Endpoint New metadata endpoint: https://api.azul.com/metadata/v1/zulu/packages/ Replacement examples: https://api.azul.com/zulu/download/community/v1.0/bundles/ has been replaced by https://api.azul.com/metadata/v1/zulu/packages/?availability_types=ca https://api.azul.com/zulu/download/sa/v1-early-access/bundles/ has been replaced by https://api.azul.com/metadata/v1/zulu/packages/?availability_types=sa Request Filter Differences Filters for the Metadata API list-endpoint work in much the same way as those for the Zulu Discovery API, however, a few filters have been combined in to a single filter. The differences are listed in this table. Zulu Discovery API Metadata API Description Filter Filter Name Value(s) Name Value(s) jdk_version dot separated string, ie 17.0.1 java_version dot separated string, ie 17.0.1 Filter name change only. zulu_version dot separated string, ie 8.68.0.21 distro_version dot separated string, ie 8.68.0.21 Filter name change only. os linux, linux_musl, macos, windows, solaris, qnx os linux, linux_musl, linux_glibc, macos, windows,solaris, qnx Filter value change. + The Metadata API OS filter combines OS and lib-c attributes. This mainly effects Linux filters, the linux filter now returns both linux-musl and linux-glibc packages. Use linux-glibc filter instead of linux to get only linux glib-c packages. arch x86, arm, mips, ppc, sparcv9 arch x86, x64, amd64, i686, arm, aarch64, aarch32, aarch32sf, aarch32hf, ppc, ppc64, ppc32, ppc32hf, ppc32spe, sparc, sparc64, sparc32, sparcv9, sparcv9-64, sparcv9-32 Filter value change. + The Metadata API combines arch, hw-bitness and abi filters, and supports values used in the package names. hw_bitness 64, 32 n/a n/a The filter was dropped in the Metadata API, use the arch filter instead. abi soft_float, hard_float n/a n/a The filter was dropped in the Metadata API, use the arch filter instead. ext deb, rpm, dmg, tar.gz, zip, cab, msi archive_type deb, rpm, dmg, tar.gz, zip, cab, msi Filter name change only. bundle_type jdk, jre java_package_type jdk, jre Filter name change only. javafx true, false javafx_bundled true, false Filter name change only. release_status ga, ea, both release_status ga, ea, both No change. support_term lts, mts, sts support_term lts, mts, sts No change. features cp3, fx, headful, headfull, headless, jdk java_package_features cp1, cp2, cp3, headful, headfull, headless, fx, jdk Filter name change and additional filter values. release_type CPU, PSU release_type CPU, PSU No change. include_fields any bundle detail key include_fields any package detail key Filter value changes due to different package detail keys. latest true, false latest true, false No change. n/a n/a availability_types list with value(s): ca, sa Filter added in the Metadata API. n/a n/a certifications tck, none Filter added in the Metadata API. n/a n/a page integer Filter added in the Metadata API. n/a n/a page_size integer Filter added in the Metadata API. Response Differences The Metadata API data are paginated and return 100 items by default, with a max page size of 1000, depending on the list filters. Multiple HTTP requests may be needed to retrieve a full list of packages. Data are sorted, with the newest packages being returned first. Zulu Discovery API Metadata API Description Attribute Attribute Name Value type Name Value type id integer package_uuid string The package_uuid is used to identify packages. java_version array of integers java_version array of integers No change. jdk_version array of integers n/a n/a Is dropped in the Metadata API, use java_version. openjdk_build_number integer openjdk_build_number integer No change. name string name string No change. url string download_url string Attribute name change only. zulu_version array of integers distro_version array of integers Attribute name change only. n/a n/a latest true, false Added in the Metadata API list return data. n/a n/a availability_type ca, sa Added in the Metadata API list return data. n/a n/a product zulu, zulu_prime Added in the Metadata API list return data. Examples: Get OpenJDK builds with major version 17 https://api.azul.com/zulu/download/community/v1.0/bundles?java-version=17 has been replaced by https://api.azul.com/metadata/v1/zulu/packages?availability_types=ca&java-version=17 Get OpenJDK builds compatible with ARM, 32 bit, soft float (using include fields to verify) https://api.azul.com/zulu/download/community/v1.0/bundles?arch=arm&hw_bitness=32&abi=soft_float&include-fields=arch,hw_bitness,abi has been replaced by https://api.azul.com/metadata/v1/zulu/packages/?availability_types=ca&arch=aarch32sf&include-fields=arch,hw_bitness,abi Get latest OpenJDK builds compatible with Alpine Linux (using include fields to verify) https://api.azul.com/zulu/download/community/v1.0/bundles?os=linux-musl&latest=true&include-fields=os,lib_c_type has been replaced by https://api.azul.com/metadata/v1/zulu/packages/?availability_types=ca&os=linux-musl&latest=true&include-fields=os,lib_c_type"
}, {
  "objectID" : "5f8972f4-dc0f-4d8d-9e87-02ec93cfd71d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Request Filter Differences",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#request-filter-differences",
  "content" : "Request Filter Differences Filters for the Metadata API list-endpoint work in much the same way as those for the Zulu Discovery API, however, a few filters have been combined in to a single filter. The differences are listed in this table. Zulu Discovery API Metadata API Description Filter Filter Name Value(s) Name Value(s) jdk_version dot separated string, ie 17.0.1 java_version dot separated string, ie 17.0.1 Filter name change only. zulu_version dot separated string, ie 8.68.0.21 distro_version dot separated string, ie 8.68.0.21 Filter name change only. os linux, linux_musl, macos, windows, solaris, qnx os linux, linux_musl, linux_glibc, macos, windows,solaris, qnx Filter value change. + The Metadata API OS filter combines OS and lib-c attributes. This mainly effects Linux filters, the linux filter now returns both linux-musl and linux-glibc packages. Use linux-glibc filter instead of linux to get only linux glib-c packages. arch x86, arm, mips, ppc, sparcv9 arch x86, x64, amd64, i686, arm, aarch64, aarch32, aarch32sf, aarch32hf, ppc, ppc64, ppc32, ppc32hf, ppc32spe, sparc, sparc64, sparc32, sparcv9, sparcv9-64, sparcv9-32 Filter value change. + The Metadata API combines arch, hw-bitness and abi filters, and supports values used in the package names. hw_bitness 64, 32 n/a n/a The filter was dropped in the Metadata API, use the arch filter instead. abi soft_float, hard_float n/a n/a The filter was dropped in the Metadata API, use the arch filter instead. ext deb, rpm, dmg, tar.gz, zip, cab, msi archive_type deb, rpm, dmg, tar.gz, zip, cab, msi Filter name change only. bundle_type jdk, jre java_package_type jdk, jre Filter name change only. javafx true, false javafx_bundled true, false Filter name change only. release_status ga, ea, both release_status ga, ea, both No change. support_term lts, mts, sts support_term lts, mts, sts No change. features cp3, fx, headful, headfull, headless, jdk java_package_features cp1, cp2, cp3, headful, headfull, headless, fx, jdk Filter name change and additional filter values. release_type CPU, PSU release_type CPU, PSU No change. include_fields any bundle detail key include_fields any package detail key Filter value changes due to different package detail keys. latest true, false latest true, false No change. n/a n/a availability_types list with value(s): ca, sa Filter added in the Metadata API. n/a n/a certifications tck, none Filter added in the Metadata API. n/a n/a page integer Filter added in the Metadata API. n/a n/a page_size integer Filter added in the Metadata API."
}, {
  "objectID" : "fc8d7cb5-da8f-464e-8a4e-899094939a86",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Response Differences",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#response-differences",
  "content" : "Response Differences The Metadata API data are paginated and return 100 items by default, with a max page size of 1000, depending on the list filters. Multiple HTTP requests may be needed to retrieve a full list of packages. Data are sorted, with the newest packages being returned first. Zulu Discovery API Metadata API Description Attribute Attribute Name Value type Name Value type id integer package_uuid string The package_uuid is used to identify packages. java_version array of integers java_version array of integers No change. jdk_version array of integers n/a n/a Is dropped in the Metadata API, use java_version. openjdk_build_number integer openjdk_build_number integer No change. name string name string No change. url string download_url string Attribute name change only. zulu_version array of integers distro_version array of integers Attribute name change only. n/a n/a latest true, false Added in the Metadata API list return data. n/a n/a availability_type ca, sa Added in the Metadata API list return data. n/a n/a product zulu, zulu_prime Added in the Metadata API list return data. Examples: Get OpenJDK builds with major version 17 https://api.azul.com/zulu/download/community/v1.0/bundles?java-version=17 has been replaced by https://api.azul.com/metadata/v1/zulu/packages?availability_types=ca&java-version=17 Get OpenJDK builds compatible with ARM, 32 bit, soft float (using include fields to verify) https://api.azul.com/zulu/download/community/v1.0/bundles?arch=arm&hw_bitness=32&abi=soft_float&include-fields=arch,hw_bitness,abi has been replaced by https://api.azul.com/metadata/v1/zulu/packages/?availability_types=ca&arch=aarch32sf&include-fields=arch,hw_bitness,abi Get latest OpenJDK builds compatible with Alpine Linux (using include fields to verify) https://api.azul.com/zulu/download/community/v1.0/bundles?os=linux-musl&latest=true&include-fields=os,lib_c_type has been replaced by https://api.azul.com/metadata/v1/zulu/packages/?availability_types=ca&os=linux-musl&latest=true&include-fields=os,lib_c_type"
}, {
  "objectID" : "c64cf04b-0d94-4d54-b19e-7d2b2df2b50e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Updated Package Detail Endpoint",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#updated-package-detail-endpoint",
  "content" : "Updated Package Detail Endpoint New metadata endpoint: https://api.azul.com/metadata/v1/zulu/packages/{package_uuid} Replacement examples: https://api.azul.com/zulu/download/community/v1.0/bundles/{bundle_id} has been replaced by https://api.azul.com/metadata/v1/zulu/packages/{package_uuid} https://api.azul.com/zulu/download/sa/v1-early-access/bundles/{bundle_id} has been replaced by https://api.azul.com/metadata/v1/zulu/packages/{package_uuid} Request Parameter Differences Parameters for the Metadata API detail endpoint use a package UUID instead of a bundle ID. Unlike the Zulu download bundle_id, the package_uuid never changes, and can always be used to identifying a package. Zulu Discovery API Metadata API Description Parameter Parameter Name Value type Name Value type bundle_id integer package_uuid string Value that uniquely identifies a package is now a UUID string, for example 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833. Response Differences Zulu Discovery API Metadata API Description Attribute Attribute Name Value type Name Value type bundle_uuid string package_uuid string Attribute name change + NOTE: package_uuid is used as the primary unique identifier. id integer n/a n/a Attribute dropped in the Metadata API, use package_uuid to identify the package. name string name string No change. md5_hash string md5_hash string No change. sha256_hash string sha256_hash string No change. last_modified date string last_modified date string No change. url string download_url string Attribute name change only. java_version array of integers java_version array of integers No change. jdk_version array of integers n/a n/a Dropped in the Metadata API, use java_version. openjdk_build_number integer openjdk_build_number integer No change. bundle_type jdk, jre java_package_type jdk, jre Attribute name change only. javafx true, false javafx_bundled true, false Attribute name change only. features cp3, fx, headfull, headless, jdk java_package_features cp1, cp2, cp3, headfull, headless, fx, jdk Attribute name change and additional values. release_type CPU, PSU release_type CPU, PSU No change. os linux, linux_musl, macos, windows, solaris, qnx os linux, macos, windows, solaris, qnx Attribute value changes, the Metadata API OS value contains no lib-c info, use lib_c_type to determine linux_musl. n/a n/a lib_c_type glibc, uclibc, musl Added in the Metadata API. cpu_gen list containing value(s): v5, v6k/v6kz, v6t2, v7, v8 cpu_gen list containing value(s): v5, v6k/v6kz, v6t2, v7, v8 No change. arch arm, x86, mips, ppc, sparcv9, sparc arch arm, x86, mips, ppc, sparcv9, sparc No change. hw_bitness 32, 64 hw_bitness 32, 64 No change. abi soft_float, hard_float, spe abi soft_float, hard_float, spe No change. ext deb, rpm, dmg, tar.gz, zip, cab, msi archive_type deb, rpm, dmg, tar.gz, zip, cab, msi Attribute name change only. release_status ga, ea, both release_status ga, ea, both No change. support_term lts, mts, sts support_term lts, mts, sts No change. latest true, false latest true, false No change. size integer size integer No change. zulu_version array of integers distro_version array of integers Attribute name change only. signatures list of objects signatures list of objects No change. n/a n/a build_date date string Added in the Metadata API. n/a n/a product zulu, zulu_prime Added in the Metadata API. n/a n/a availability_type ca, sa Added in the Metadata API. n/a n/a certifications null or list containing value(s): tck, aqavit Added in the Metadata API. Example: Get OpenJDK bundle with uuid 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833 https://api.azul.com/zulu/download/community/v1.0/bundles/16088 has been replaced by https://api.azul.com/metadata/v1/zulu/packages/6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833"
}, {
  "objectID" : "cdc9fb9b-40d3-4717-b9ee-853e75fdb485",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Request Parameter Differences",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#request-parameter-differences",
  "content" : "Request Parameter Differences Parameters for the Metadata API detail endpoint use a package UUID instead of a bundle ID. Unlike the Zulu download bundle_id, the package_uuid never changes, and can always be used to identifying a package. Zulu Discovery API Metadata API Description Parameter Parameter Name Value type Name Value type bundle_id integer package_uuid string Value that uniquely identifies a package is now a UUID string, for example 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833."
}, {
  "objectID" : "2bff646f-1f61-4edf-bc47-9c6101366829",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Response Differences",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#response-differences-2",
  "content" : "Response Differences Zulu Discovery API Metadata API Description Attribute Attribute Name Value type Name Value type bundle_uuid string package_uuid string Attribute name change + NOTE: package_uuid is used as the primary unique identifier. id integer n/a n/a Attribute dropped in the Metadata API, use package_uuid to identify the package. name string name string No change. md5_hash string md5_hash string No change. sha256_hash string sha256_hash string No change. last_modified date string last_modified date string No change. url string download_url string Attribute name change only. java_version array of integers java_version array of integers No change. jdk_version array of integers n/a n/a Dropped in the Metadata API, use java_version. openjdk_build_number integer openjdk_build_number integer No change. bundle_type jdk, jre java_package_type jdk, jre Attribute name change only. javafx true, false javafx_bundled true, false Attribute name change only. features cp3, fx, headfull, headless, jdk java_package_features cp1, cp2, cp3, headfull, headless, fx, jdk Attribute name change and additional values. release_type CPU, PSU release_type CPU, PSU No change. os linux, linux_musl, macos, windows, solaris, qnx os linux, macos, windows, solaris, qnx Attribute value changes, the Metadata API OS value contains no lib-c info, use lib_c_type to determine linux_musl. n/a n/a lib_c_type glibc, uclibc, musl Added in the Metadata API. cpu_gen list containing value(s): v5, v6k/v6kz, v6t2, v7, v8 cpu_gen list containing value(s): v5, v6k/v6kz, v6t2, v7, v8 No change. arch arm, x86, mips, ppc, sparcv9, sparc arch arm, x86, mips, ppc, sparcv9, sparc No change. hw_bitness 32, 64 hw_bitness 32, 64 No change. abi soft_float, hard_float, spe abi soft_float, hard_float, spe No change. ext deb, rpm, dmg, tar.gz, zip, cab, msi archive_type deb, rpm, dmg, tar.gz, zip, cab, msi Attribute name change only. release_status ga, ea, both release_status ga, ea, both No change. support_term lts, mts, sts support_term lts, mts, sts No change. latest true, false latest true, false No change. size integer size integer No change. zulu_version array of integers distro_version array of integers Attribute name change only. signatures list of objects signatures list of objects No change. n/a n/a build_date date string Added in the Metadata API. n/a n/a product zulu, zulu_prime Added in the Metadata API. n/a n/a availability_type ca, sa Added in the Metadata API. n/a n/a certifications null or list containing value(s): tck, aqavit Added in the Metadata API. Example: Get OpenJDK bundle with uuid 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833 https://api.azul.com/zulu/download/community/v1.0/bundles/16088 has been replaced by https://api.azul.com/metadata/v1/zulu/packages/6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833"
}, {
  "objectID" : "088dd8db-b14a-48f2-9e14-c5a4e1c03f45",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Updated Package Binary Endpoint",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#updated-package-binary-endpoint",
  "content" : "Updated Package Binary Endpoint New metadata endpoint: https://api.azul.com/metadata/v1/zulu/packages/{package_uuid}/binary Replacement examples: https://api.azul.com/zulu/download/community/v1.0/bundles/{bundle_id}/binary has been replaced by https://api.azul.com/metadata/v1/zulu/packages/{package_uuid}/binary https://api.azul.com/zulu/download/sa/v1-early-access/bundles/{bundle_id}/binary has been replaced by https://api.azul.com/metadata/v1/zulu/packages/{package_uuid}/binary Request Parameter Differences The parameter for the Metadata API package binary endpoint uses a package UUID instead of a bundle ID. Unlike the Zulu download bundle_id, the package_uuid never changes and can always be used to identify and download a package. Zulu Discovery API Metadata API Description Parameter Parameter Name Value type Name Value type bundle_id integer package_uuid string Value that uniquely identifies a package is now a UUID string, for example 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833. Binary Response There is no change in the HTTP response. It is a redirect to the package’s download URL. Example: Download OpenJDK bundle with uuid 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833 https://api.azul.com/zulu/download/community/v1.0/bundles/16088/binary has been replaced by https://api.azul.com/metadata/v1/zulu/packages/6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833/binary"
}, {
  "objectID" : "f9798774-e6bc-4c32-b504-aa814eb99547",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Request Parameter Differences",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#request-parameter-differences-2",
  "content" : "Request Parameter Differences The parameter for the Metadata API package binary endpoint uses a package UUID instead of a bundle ID. Unlike the Zulu download bundle_id, the package_uuid never changes and can always be used to identify and download a package. Zulu Discovery API Metadata API Description Parameter Parameter Name Value type Name Value type bundle_id integer package_uuid string Value that uniquely identifies a package is now a UUID string, for example 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833."
}, {
  "objectID" : "ba2942ff-d6ca-4fba-9ddf-db64ecdcc177",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Binary Response",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#binary-response",
  "content" : "Binary Response There is no change in the HTTP response. It is a redirect to the package’s download URL. Example: Download OpenJDK bundle with uuid 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833 https://api.azul.com/zulu/download/community/v1.0/bundles/16088/binary has been replaced by https://api.azul.com/metadata/v1/zulu/packages/6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833/binary"
}, {
  "objectID" : "6b1ecab5-5037-4866-b8d6-da9bc6e7abb8",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Updated Package Signature Binary Endpoint",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#updated-package-signature-binary-endpoint",
  "content" : "Updated Package Signature Binary Endpoint New metadata endpoint: https://api.azul.com/metadata/v1/zulu/packages/{package_uuid}/signature-binary Replacement examples: https://api.azul.com/zulu/download/community/v1.0/bundles/{bundle_id}/signature-binary has been replaced by https://api.azul.com/metadata/v1/zulu/packages/{package_uuid}/signature-binary https://api.azul.com/zulu/download/sa/v1-early-access/bundles/{bundle_id}/signature-binary has been replaced by https://api.azul.com/metadata/v1/zulu/packages/{package_uuid}/signature-binary Request Parameter Differences The parameter for the Metadata API signature binary endpoint uses a package UUID instead of a bundle ID. Unlike the Zulu download bundle_id, the package_uuid never changes and can always be used to identify and download a package. Zulu Discovery API Metadata API Description Parameter Parameter Name Value type Name Value type bundle_id integer package_uuid string Value that uniquely identifies a package is now a UUID string, for example 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833. Response There is no change in the HTTP response. It is a redirect to the URL that returns a package’s signature. Example: Download OpenJDK bundle with uuid 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833 https://api.azul.com/zulu/download/community/v1.0/bundles/16088/signature-binary has been replaced by https://api.azul.com/metadata/v1/zulu/packages/6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833/signature-binary"
}, {
  "objectID" : "f692059c-3206-4a7d-8384-a71810b41c60",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Request Parameter Differences",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#request-parameter-differences-3",
  "content" : "Request Parameter Differences The parameter for the Metadata API signature binary endpoint uses a package UUID instead of a bundle ID. Unlike the Zulu download bundle_id, the package_uuid never changes and can always be used to identify and download a package. Zulu Discovery API Metadata API Description Parameter Parameter Name Value type Name Value type bundle_id integer package_uuid string Value that uniquely identifies a package is now a UUID string, for example 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833."
}, {
  "objectID" : "29dabc15-0894-4284-bf23-e3fd34b6a837",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Response",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#response",
  "content" : "Response There is no change in the HTTP response. It is a redirect to the URL that returns a package’s signature. Example: Download OpenJDK bundle with uuid 6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833 https://api.azul.com/zulu/download/community/v1.0/bundles/16088/signature-binary has been replaced by https://api.azul.com/metadata/v1/zulu/packages/6f89cfa2-dd4c-11ea-a8fe-fa163ed8e833/signature-binary"
}, {
  "objectID" : "3c1aa505-8f44-4115-95ba-8c78a2dbf18a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "New Get UUID Using Hash Endpoint",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#new-get-uuid-using-hash-endpoint",
  "content" : "New Get UUID Using Hash Endpoint New metadata endpoint: https://api.azul.com/metadata/v1/zulu/packages/{hash-type}/{hash-value} Request Parameter Details Metadata API Description Parameter Name Value type hash-type sha256 or md5 Type of hash hash-value string MD5 or SHA256 hash value. Response Response JSON Description Key Value Type or Value package_uuid string Identifier for the package. product zulu or zulu_prime Product for the package UUID. Examples: Get uuid for package with sha56 hash e043cde3bc0293957985cd612e5eb7a86ffc3df1eaecefbca2b0d0e69107ae71 https://api.azul.com/metadata/v1/zulu/packages/sha256/e043cde3bc0293957985cd612e5eb7a86ffc3df1eaecefbca2b0d0e69107ae71 Get uuid for package with md5 hash 19c2609d17f029b9078a84c2c4b1b3bd https://api.azul.com/metadata/v1/zulu/packages/md5/19c2609d17f029b9078a84c2c4b1b3bd"
}, {
  "objectID" : "fddc8f17-95ed-4ff1-a0ea-de5a8b7381fb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Request Parameter Details",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#request-parameter-details",
  "content" : "Request Parameter Details Metadata API Description Parameter Name Value type hash-type sha256 or md5 Type of hash hash-value string MD5 or SHA256 hash value."
}, {
  "objectID" : "e921a9ef-5374-4f1d-b79a-d789a1afb3b0",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Response",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#response-2",
  "content" : "Response Response JSON Description Key Value Type or Value package_uuid string Identifier for the package. product zulu or zulu_prime Product for the package UUID. Examples: Get uuid for package with sha56 hash e043cde3bc0293957985cd612e5eb7a86ffc3df1eaecefbca2b0d0e69107ae71 https://api.azul.com/metadata/v1/zulu/packages/sha256/e043cde3bc0293957985cd612e5eb7a86ffc3df1eaecefbca2b0d0e69107ae71 Get uuid for package with md5 hash 19c2609d17f029b9078a84c2c4b1b3bd https://api.azul.com/metadata/v1/zulu/packages/md5/19c2609d17f029b9078a84c2c4b1b3bd"
}, {
  "objectID" : "e8419c77-dea9-43d5-863d-53ebf325ae66",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Upgrading Deprecated Endpoints",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#upgrading-deprecated-endpoints",
  "content" : "Upgrading Deprecated Endpoints Deprecated endpoints that are no longer available in the Metadata API: /bundles/latest /bundles/latest/binary /bundles/sha256/{sha256checksum} /bundles/sha256/{sha256checksum}/binary These endpoints can be replaced by using the new packages-endpoint, following these examples. Get Latest Version Get list of latest OpenJDK major version 17, mac, arm, JRE no java FX, dmg: https://api.azul.com/metadata/v1/zulu/packages?availability_types=ca&java-version=17&os=macos&arch=arm&java-package-type=JRE&javafx-bundled=false&archive-type=dmg&latest=true Parse the response to retrieve the package_uuid from the first list entry. Make request to: GET package details https://api.azul.com/metadata/v1/zulu/packages/{package_uuid_from_step_two} Download package https://api.azul.com/metadata/v1/zulu/packages/{package_uuid_from_step_two}/binary/ Get By Checksum Get uuid for package with sha256 hash e043cde3bc0293957985cd612e5eb7a86ffc3df1eaecefbca2b0d0e69107ae71: https://api.azul.com/metadata/v1/zulu/packages/sha256/e043cde3bc0293957985cd612e5eb7a86ffc3df1eaecefbca2b0d0e69107ae71 Parse response to retrieve the package_uuid. Make request to: GET package details https://api.azul.com/metadata/v1/zulu/packages/{package_uuid_from_step_two} Download package https://api.azul.com/metadata/v1/zulu/packages/{package_uuid_from_step_two}/binary/"
}, {
  "objectID" : "ae6060ca-82da-4be8-aff8-69a8706cd1cb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Get Latest Version",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#get-latest-version",
  "content" : "Get Latest Version Get list of latest OpenJDK major version 17, mac, arm, JRE no java FX, dmg: https://api.azul.com/metadata/v1/zulu/packages?availability_types=ca&java-version=17&os=macos&arch=arm&java-package-type=JRE&javafx-bundled=false&archive-type=dmg&latest=true Parse the response to retrieve the package_uuid from the first list entry. Make request to: GET package details https://api.azul.com/metadata/v1/zulu/packages/{package_uuid_from_step_two} Download package https://api.azul.com/metadata/v1/zulu/packages/{package_uuid_from_step_two}/binary/"
}, {
  "objectID" : "9a463f40-52ca-41a0-a66e-afbcd8f73164",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Migrate from Zulu OpenJDK Discovery API to Azul Metadata API",
  "section" : "Get By Checksum",
  "url" : "https://docs.azul.com/core/metadata-api-migration",
  "link" : "https://docs.azul.com/core/metadata-api-migration#get-by-checksum",
  "content" : "Get By Checksum Get uuid for package with sha256 hash e043cde3bc0293957985cd612e5eb7a86ffc3df1eaecefbca2b0d0e69107ae71: https://api.azul.com/metadata/v1/zulu/packages/sha256/e043cde3bc0293957985cd612e5eb7a86ffc3df1eaecefbca2b0d0e69107ae71 Parse response to retrieve the package_uuid. Make request to: GET package details https://api.azul.com/metadata/v1/zulu/packages/{package_uuid_from_step_two} Download package https://api.azul.com/metadata/v1/zulu/packages/{package_uuid_from_step_two}/binary/"
}, {
  "objectID" : "c1a7e36c-d1ac-4d92-aecb-300f5eb3b8d8",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Timezone Updater",
  "section" : "",
  "url" : "https://docs.azul.com/core/timezone-updater",
  "link" : "https://docs.azul.com/core/timezone-updater",
  "content" : "Starting with the 2018e version, the Time Zone distribution uses a new vanguard format. The ZIUpdater tool does not support this format for Azul Zulu 7. To use ZIUpdater with Azul Zulu 7, you must build the tzdata tarball in the rearguard format."
}, {
  "objectID" : "2681791a-8767-418d-9f54-ac38df06f60a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Incubator and Preview Features in OpenJDK",
  "section" : "Difference Between Incubator and Preview",
  "url" : "https://docs.azul.com/core/incubator-preview-features",
  "link" : "https://docs.azul.com/core/incubator-preview-features#difference-between-incubator-and-preview",
  "content" : "Difference Between Incubator and Preview Incubator Feature Incubator (or experimental) features are not mature yet but allow early adopters and enthusiasts to use them in experiments. You can expect them to be buggy or unstable as they need to further mature in the next releases. But they can even be removed again, based on the feedback and the evolution of their development. Some examples: OpenJDK 19: Structured Concurrency (Incubator), JEP 428 OpenJDK 21: Vector API (Sixth Incubator), JEP 448 Preview Feature Preview features have been fully specified, developed, and implemented, but are still being evaluated and can further change. They can be used in development to experiment with upcoming new features and can be expected to become available in a future version, although this is still not guaranteed. Some examples: OpenJDK 18: Pattern Matching for switch (Second Preview), JEP 420 OpenJDK 14: Text Blocks (Second Preview), JEP 368 OpenJDK 14: Records (Preview), JEP 359"
}, {
  "objectID" : "48fc15a8-e06e-442d-82a4-99860cb7ec17",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Incubator and Preview Features in OpenJDK",
  "section" : "Incubator Feature",
  "url" : "https://docs.azul.com/core/incubator-preview-features",
  "link" : "https://docs.azul.com/core/incubator-preview-features#incubator-feature",
  "content" : "Incubator Feature Incubator (or experimental) features are not mature yet but allow early adopters and enthusiasts to use them in experiments. You can expect them to be buggy or unstable as they need to further mature in the next releases. But they can even be removed again, based on the feedback and the evolution of their development. Some examples: OpenJDK 19: Structured Concurrency (Incubator), JEP 428 OpenJDK 21: Vector API (Sixth Incubator), JEP 448"
}, {
  "objectID" : "66944203-3038-4157-823a-7c69f5481fdb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Incubator and Preview Features in OpenJDK",
  "section" : "Preview Feature",
  "url" : "https://docs.azul.com/core/incubator-preview-features",
  "link" : "https://docs.azul.com/core/incubator-preview-features#preview-feature",
  "content" : "Preview Feature Preview features have been fully specified, developed, and implemented, but are still being evaluated and can further change. They can be used in development to experiment with upcoming new features and can be expected to become available in a future version, although this is still not guaranteed. Some examples: OpenJDK 18: Pattern Matching for switch (Second Preview), JEP 420 OpenJDK 14: Text Blocks (Second Preview), JEP 368 OpenJDK 14: Records (Preview), JEP 359"
}, {
  "objectID" : "bd85c1e2-cd4d-4fb2-8fa8-e0cb1d8ec58e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Incubator and Preview Features in OpenJDK",
  "section" : "How to Use These Features",
  "url" : "https://docs.azul.com/core/incubator-preview-features",
  "link" : "https://docs.azul.com/core/incubator-preview-features#how-to-use-these-features",
  "content" : "How to Use These Features During Compilation When compiling code that uses incubator and/or preview features, you need to provide the additional flags --release and --enable-preview. For instance, for version 21:  javac --release 21 --enable-preview MyClass.java During Runtime To enable incubator and/or preview features during runting, only the additional flag --enable-preview is needed. For instance:  java --enable-preview -jar MyApp.jar"
}, {
  "objectID" : "ffae5885-d87b-42b1-9756-1efaab6684ae",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Incubator and Preview Features in OpenJDK",
  "section" : "During Compilation",
  "url" : "https://docs.azul.com/core/incubator-preview-features",
  "link" : "https://docs.azul.com/core/incubator-preview-features#during-compilation",
  "content" : "During Compilation When compiling code that uses incubator and/or preview features, you need to provide the additional flags --release and --enable-preview. For instance, for version 21:  javac --release 21 --enable-preview MyClass.java"
}, {
  "objectID" : "6d9743c7-bbd0-4ffc-98d1-cd57b23aaa2c",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Incubator and Preview Features in OpenJDK",
  "section" : "During Runtime",
  "url" : "https://docs.azul.com/core/incubator-preview-features",
  "link" : "https://docs.azul.com/core/incubator-preview-features#during-runtime",
  "content" : "During Runtime To enable incubator and/or preview features during runting, only the additional flag --enable-preview is needed. For instance:  java --enable-preview -jar MyApp.jar"
}, {
  "objectID" : "899571b3-bd70-4cc5-ba01-6f42ce3dfa5d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Incubator and Preview Features in OpenJDK",
  "section" : "Conclusion",
  "url" : "https://docs.azul.com/core/incubator-preview-features",
  "link" : "https://docs.azul.com/core/incubator-preview-features#conclusion",
  "content" : "Conclusion Incubator and preview features allow the Java-ecosystem to continuously evolve while getting feedback from the users about usability, consistency, and stability. You should never use these in production as they are not stable yet and can still evolve before they become generally available, or even get removed, in one of the next releases."
}, {
  "objectID" : "9cdff3a4-d4a1-491a-b329-c78799beec1a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Analyzing Your Application With JFR",
  "section" : "",
  "url" : "https://docs.azul.com/core/using-jfr",
  "link" : "https://docs.azul.com/core/using-jfr",
  "content" : "Java Flight Recorder (JFR) is a profiling and event collection framework built into the Java Virtual Machine (JVM). With JFR, you can collect detailed runtime information about various aspects of a Java application, such as method execution, memory allocation, garbage collection, and more. This information is valuable for performance analysis, troubleshooting, and optimization of Java applications."
}, {
  "objectID" : "7e5057ec-4cf4-425a-81ae-cf195e9b7dbf",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Analyzing Your Application With JFR",
  "section" : "Making a JFR Recording",
  "url" : "https://docs.azul.com/core/using-jfr",
  "link" : "https://docs.azul.com/core/using-jfr#making-a-jfr-recording",
  "content" : "Making a JFR Recording At Application Startup To enable recording from startup of an application, use the following command-line option:  -XX:StartFlightRecording=filename=rec.jfr,duration=60s,settings=profile filename=/tmp/rec.jfr: The file that will be used to store the recording. duration=600s: Specifies the maximum duration for a flight recording. It determines how long the recording will continue capturing events and metrics before automatically stopping. You can use this option to limit the duration of a recording to avoid capturing an excessive amount of data and to control the impact on the application’s performance. settings=profile: By default, Flight Recorder uses the settings defined in <java_home>/lib/jfr/default.jfc which gives a good balance between data and performance. In the same directory, you can find a second configuration profile.jfc which records more events and is useful while profiling an application. You can also create a copy of one these files and create your own configuration, e.g. my-config.jfc. Check JFR Command Line Options in the documentation of Azul Mission Control for all available options and more info. From a Running Application On the same host and userid as the Java process under analysis, run the following command to start a recording:  $ jcmd JVMID JFR.start filename=rec.jfr Where JVMID is either the process ID or the classname assigned with the java process as shown when running jcmd without parameters. To stop a recording, use:  $ jcmd JVMID JFR.stop name=1 To start a recording with more detailed metrics, use the following with extra options as explained above:  $ jcmd JVMID JFR.start filename=rec.jfr settings=profile"
}, {
  "objectID" : "8ad7300a-9896-4319-98c3-bd2a24ef67e9",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Analyzing Your Application With JFR",
  "section" : "At Application Startup",
  "url" : "https://docs.azul.com/core/using-jfr",
  "link" : "https://docs.azul.com/core/using-jfr#at-application-startup",
  "content" : "At Application Startup To enable recording from startup of an application, use the following command-line option:  -XX:StartFlightRecording=filename=rec.jfr,duration=60s,settings=profile filename=/tmp/rec.jfr: The file that will be used to store the recording. duration=600s: Specifies the maximum duration for a flight recording. It determines how long the recording will continue capturing events and metrics before automatically stopping. You can use this option to limit the duration of a recording to avoid capturing an excessive amount of data and to control the impact on the application’s performance. settings=profile: By default, Flight Recorder uses the settings defined in <java_home>/lib/jfr/default.jfc which gives a good balance between data and performance. In the same directory, you can find a second configuration profile.jfc which records more events and is useful while profiling an application. You can also create a copy of one these files and create your own configuration, e.g. my-config.jfc. Check JFR Command Line Options in the documentation of Azul Mission Control for all available options and more info."
}, {
  "objectID" : "99ee06c9-7bbc-4e13-b46f-16764dedbcd1",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Analyzing Your Application With JFR",
  "section" : "From a Running Application",
  "url" : "https://docs.azul.com/core/using-jfr",
  "link" : "https://docs.azul.com/core/using-jfr#from-a-running-application",
  "content" : "From a Running Application On the same host and userid as the Java process under analysis, run the following command to start a recording:  $ jcmd JVMID JFR.start filename=rec.jfr Where JVMID is either the process ID or the classname assigned with the java process as shown when running jcmd without parameters. To stop a recording, use:  $ jcmd JVMID JFR.stop name=1 To start a recording with more detailed metrics, use the following with extra options as explained above:  $ jcmd JVMID JFR.start filename=rec.jfr settings=profile"
}, {
  "objectID" : "859b742a-5f25-436a-a432-51e7dd8a5416",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Analyzing Your Application With JFR",
  "section" : "Analyzing a JFR Recording",
  "url" : "https://docs.azul.com/core/using-jfr",
  "link" : "https://docs.azul.com/core/using-jfr#analyzing-a-jfr-recording",
  "content" : "Analyzing a JFR Recording JFR recordings are most easily viewed in Azul Mission Control, and you can connect to a running application from within Azul Mission Control to create a recording. More info is available in the Azul Mission Control documentation."
}, {
  "objectID" : "411814c8-bfd4-4a76-a712-e24efc6ed44a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Common Vulnerabilities and Exposures",
  "section" : "",
  "url" : "https://docs.azul.com/core/cve",
  "link" : "https://docs.azul.com/core/cve",
  "content" : "This page provides a list of common vulnerabilities and exposures (CVE) fixed in Azul Zulu Builds of OpenJDK since July 2014. The CVEs fixed in earlier releases are not included in the list. CVEs are addressed in quarterly releases. The list of CVEs fixed in a specific Azul Zulu release matches up with the CVEs fixed in the corresponding release of OpenJDK. You can filter the list by CVE ID, Azul Zulu version, and/or JDK version. CVE ID OpenJDK Version Azul Zulu Version Quarter All Releases"
}, {
  "objectID" : "59197836-0a56-4463-876e-f56c80ac3d03",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Version Search Tool",
  "section" : "",
  "url" : "https://docs.azul.com/core/version-search",
  "link" : "https://docs.azul.com/core/version-search",
  "content" : "The following table allows you to find back which Zulu version corresponds to which OpenJDK release. OpenJDK Version Azul Zulu Version Quarter All Releases"
}, {
  "objectID" : "a269e20f-db0c-4a3b-9c7b-40f70a586478",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "About Azul Commercial Compatibility Kit",
  "section" : "",
  "url" : "https://docs.azul.com/core/cck/about-cck",
  "link" : "https://docs.azul.com/core/cck/about-cck",
  "content" : "The Azul Commercial Compatibility Kit (CCK) was created to narrow the gap between OpenJDK and Oracle JDK. When Sun released OpenJDK, many of the third party components that were present in the Sun Hotspot JDK required open source replacements. Not all components could be made open at that time, and some of them persist today and may cause compatibility problems when you move from Oracle JDK to a build of OpenJDK. These components of the closed-source Oracle JDK are not included in the OpenJDK project. They are not included in Azul Zulu as well because Azul Zulu is based on OpenJDK. The Azul Commercial Compatibility Kit is an add-on for Azul Zulu that provides alternatives to some of the missing components, but itself is not open-source. CCK is available for Azul Zulu 6, 7, and 8 and includes the following components: Monotype fonts. Monotype license in RTF format. Rhino JavaScript engine (in CCK 7 only) Note The Bigelow & Holmes Lucida family fonts (Lucida Sans, Lucida Bright, and Lucida Typewriter) fonts are licensed by Azul from Monotype for internal use only. If your product plans require that these fonts be available to your end customers, please contact your Azul representative."
}, {
  "objectID" : "7233fede-7c31-479c-8cd3-51779b37c4eb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install CCK",
  "section" : "Supported Azul Zulu Versions",
  "url" : "https://docs.azul.com/core/cck/install",
  "link" : "https://docs.azul.com/core/cck/install#supported-azul-zulu-versions",
  "content" : "Supported Azul Zulu Versions The following table lists Azul Zulu versions for which CCK is available. Azul Zulu Version CCK Version 8.2 and later 8 7.6 and later 7 6.5 and later 6 CCK Content CCK adds the following files to the Azul Zulu JDK installation: Content Files Monotype fonts jre/lib/fonts jre/lib/oblique-fonts Monotype license etc/ThirdPartyLicenses.txt Rhino JavaScript Engine (CCK 7 only) jre/lib/azul-rhino-<version>.jar jre/lib/ext/rhino-<version>.jar jre/lib/rhino.jar How to install CCK The Commercial Compatibility Kit can only be installed on top of your Azul Zulu installation. Download CCK If you installed Azul Zulu using one of the installable packages (MSI, DEB, RPM,…), you should download CCK in the same format. If you use Azul Zulu ZIP or TAR.GZ archive, download the CCK ZIP or .sh file. You can find the different CCK downloads on the Azul website. Install CCK Install CCK from ZIP archive on Windows Download the CCK Zip package for Windows. The CCK zip package contains a batch file called zcck-<version>-win64.bat. The file adds the CCK content to your Azul Zulu JDK installation. Run the script as administrator (right-click on the file and choose Run as Administrator). Install CCK from ZIP archive on Linux Download the CCK shell file (.sh) for Linux (select the desired architecture). The script is called zcck<version>-linux_x64.sh. Run the script as administrator.  sudo sh zcck8.0.0.8-linux_x64.sh When the script asks for the Azul Zulu installation folder, type the full path. Note that the installation folder may be different for specific OS and installation method. Review the license After you install CCK, review the third party license file:  <zulu_installation_folder>\\etc\\ThirdPartyLicenses.txt"
}, {
  "objectID" : "54f97d97-86af-4e21-84d1-82c4d39e9506",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install CCK",
  "section" : "Supported Azul Zulu Versions",
  "url" : "https://docs.azul.com/core/cck/install",
  "link" : "https://docs.azul.com/core/cck/install#supported-azul-zulu-versions",
  "content" : "Supported Azul Zulu Versions The following table lists Azul Zulu versions for which CCK is available. Azul Zulu Version CCK Version 8.2 and later 8 7.6 and later 7 6.5 and later 6"
}, {
  "objectID" : "bbdf5cac-360f-48b1-9d20-8240c66d2d55",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install CCK",
  "section" : "CCK Content",
  "url" : "https://docs.azul.com/core/cck/install",
  "link" : "https://docs.azul.com/core/cck/install#cck-content",
  "content" : "CCK Content CCK adds the following files to the Azul Zulu JDK installation: Content Files Monotype fonts jre/lib/fonts jre/lib/oblique-fonts Monotype license etc/ThirdPartyLicenses.txt Rhino JavaScript Engine (CCK 7 only) jre/lib/azul-rhino-<version>.jar jre/lib/ext/rhino-<version>.jar jre/lib/rhino.jar"
}, {
  "objectID" : "ef1d4e8e-0b3f-42b4-b575-16d8315b6643",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install CCK",
  "section" : "How to install CCK",
  "url" : "https://docs.azul.com/core/cck/install",
  "link" : "https://docs.azul.com/core/cck/install#how-to-install-cck",
  "content" : "How to install CCK The Commercial Compatibility Kit can only be installed on top of your Azul Zulu installation. Download CCK If you installed Azul Zulu using one of the installable packages (MSI, DEB, RPM,…), you should download CCK in the same format. If you use Azul Zulu ZIP or TAR.GZ archive, download the CCK ZIP or .sh file. You can find the different CCK downloads on the Azul website. Install CCK Install CCK from ZIP archive on Windows Download the CCK Zip package for Windows. The CCK zip package contains a batch file called zcck-<version>-win64.bat. The file adds the CCK content to your Azul Zulu JDK installation. Run the script as administrator (right-click on the file and choose Run as Administrator). Install CCK from ZIP archive on Linux Download the CCK shell file (.sh) for Linux (select the desired architecture). The script is called zcck<version>-linux_x64.sh. Run the script as administrator.  sudo sh zcck8.0.0.8-linux_x64.sh When the script asks for the Azul Zulu installation folder, type the full path. Note that the installation folder may be different for specific OS and installation method. Review the license After you install CCK, review the third party license file:  <zulu_installation_folder>\\etc\\ThirdPartyLicenses.txt"
}, {
  "objectID" : "8c8f78a5-015e-4362-a708-dc0c450103f7",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install CCK",
  "section" : "Download CCK",
  "url" : "https://docs.azul.com/core/cck/install",
  "link" : "https://docs.azul.com/core/cck/install#download-cck",
  "content" : "Download CCK If you installed Azul Zulu using one of the installable packages (MSI, DEB, RPM,…), you should download CCK in the same format. If you use Azul Zulu ZIP or TAR.GZ archive, download the CCK ZIP or .sh file. You can find the different CCK downloads on the Azul website."
}, {
  "objectID" : "95267e69-677e-4d95-b0f7-c603f38bdccf",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install CCK",
  "section" : "Install CCK",
  "url" : "https://docs.azul.com/core/cck/install",
  "link" : "https://docs.azul.com/core/cck/install#install-cck",
  "content" : "Install CCK Install CCK from ZIP archive on Windows Download the CCK Zip package for Windows. The CCK zip package contains a batch file called zcck-<version>-win64.bat. The file adds the CCK content to your Azul Zulu JDK installation. Run the script as administrator (right-click on the file and choose Run as Administrator). Install CCK from ZIP archive on Linux Download the CCK shell file (.sh) for Linux (select the desired architecture). The script is called zcck<version>-linux_x64.sh. Run the script as administrator.  sudo sh zcck8.0.0.8-linux_x64.sh When the script asks for the Azul Zulu installation folder, type the full path. Note that the installation folder may be different for specific OS and installation method."
}, {
  "objectID" : "5ca0f636-d0aa-4994-8092-2b32b2f6caa1",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install CCK",
  "section" : "Install CCK from ZIP archive on Windows",
  "url" : "https://docs.azul.com/core/cck/install",
  "link" : "https://docs.azul.com/core/cck/install#install-cck-from-zip-archive-on-windows",
  "content" : "Install CCK from ZIP archive on Windows Download the CCK Zip package for Windows. The CCK zip package contains a batch file called zcck-<version>-win64.bat. The file adds the CCK content to your Azul Zulu JDK installation. Run the script as administrator (right-click on the file and choose Run as Administrator)."
}, {
  "objectID" : "0d5f1e5e-5ea7-4a32-9f03-8dabbde9e7de",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install CCK",
  "section" : "Install CCK from ZIP archive on Linux",
  "url" : "https://docs.azul.com/core/cck/install",
  "link" : "https://docs.azul.com/core/cck/install#install-cck-from-zip-archive-on-linux",
  "content" : "Install CCK from ZIP archive on Linux Download the CCK shell file (.sh) for Linux (select the desired architecture). The script is called zcck<version>-linux_x64.sh. Run the script as administrator.  sudo sh zcck8.0.0.8-linux_x64.sh When the script asks for the Azul Zulu installation folder, type the full path. Note that the installation folder may be different for specific OS and installation method."
}, {
  "objectID" : "3c3575cf-7a49-4f57-806f-6bb55f80e0f7",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Install CCK",
  "section" : "Review the license",
  "url" : "https://docs.azul.com/core/cck/install",
  "link" : "https://docs.azul.com/core/cck/install#review-the-license",
  "content" : "Review the license After you install CCK, review the third party license file:  <zulu_installation_folder>\\etc\\ThirdPartyLicenses.txt"
}, {
  "objectID" : "f8c6bc88-882d-4c19-92f3-598bfbe71b6e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Rhino JavaScript Engine in Azul Zulu 7",
  "section" : "",
  "url" : "https://docs.azul.com/core/cck/rhino-javascript-engine",
  "link" : "https://docs.azul.com/core/cck/rhino-javascript-engine",
  "content" : "The Azul Commercial Compatibility Kit for Azul Zulu 7 includes the Rhino JavaScript engine, though it is not available in OpenJDK 7. To verify that the Rhino JavaScript engine is available, use the following code:  ScriptEngineManager manager = new ScriptEngineManager();\nScriptEngine engine = manager.getEngineByName(\"JavaScript\"); If engine is an object of com.sun.script.javascript.RhinoScriptEngine, the installation is successful."
}, {
  "objectID" : "4f6aef4e-910c-40df-b4a8-775db5e92366",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "About IcedTea-Web",
  "section" : "IcedTea-Web as a Solution to Replace Java Web Start",
  "url" : "https://docs.azul.com/core/icedteaweb/introduction",
  "link" : "https://docs.azul.com/core/icedteaweb/introduction#icedtea-web-as-a-solution-to-replace-java-web-start",
  "content" : "IcedTea-Web as a Solution to Replace Java Web Start IcedTea-Web is an opensource reimplementation of the Java Web Start technology, released under the GPL with Classpath Exception. It provides the most commonly used features of Java Web Start and the JNLP standard, so that users can continue running applications based on Java Web Start and JNLP without any change. IcedTea-Web follows the JNLP-specification defined in JSR-56. Azul provides builds of IcedTea-Web for multiple platforms. It should not be considered as a drop-in replacement and sometimes requires additional migration efforts. Our experience in large corporate projects, shows that a drop-in success rate of 95% is reached for applications switching from WebStart to IcedTea-Web. Azul Platform Core customers can contact [email protected] for any technical question or problem regarding IcedTea-Web. Note IcedTea-Web is tested and compatible with version 8 of Azul Zulu Builds of OpenJDK. Support for version 11 is not tested and is not an officially supported combination, but in our experience, IcedTea-Web generally works with Zulu 11. Other Zulu versions are not known to work with IcedTea-Web. History of Java Web Start Java Web Start was a deployment technology, which allowed for an application to automatically install and update when the user runs it. It has been part of Java since version 5. Java Web Start applications were configured through files with the .jnlp extension for Java Network Launch Protocol (JNLP). The JNLP extension was associated with the javaws.exe such that a Java Web Start application can be launched in the browser by double clicking it or from the command line with javaws <jnlp file or URL>. Java Web Start never became a part of the Java Standard (Java SE) and the source code was never released by Sun. It therefore was not made part of the OpenJDK. It was considered safer than Applets, but not safe enough for the Internet. Java Web Start has been deprecated for a while now."
}, {
  "objectID" : "5e9c5c95-2270-4984-b3d1-c543320479c1",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "About IcedTea-Web",
  "section" : "IcedTea-Web as a Solution to Replace Java Web Start",
  "url" : "https://docs.azul.com/core/icedteaweb/introduction",
  "link" : "https://docs.azul.com/core/icedteaweb/introduction#icedtea-web-as-a-solution-to-replace-java-web-start",
  "content" : "IcedTea-Web as a Solution to Replace Java Web Start IcedTea-Web is an opensource reimplementation of the Java Web Start technology, released under the GPL with Classpath Exception. It provides the most commonly used features of Java Web Start and the JNLP standard, so that users can continue running applications based on Java Web Start and JNLP without any change. IcedTea-Web follows the JNLP-specification defined in JSR-56. Azul provides builds of IcedTea-Web for multiple platforms. It should not be considered as a drop-in replacement and sometimes requires additional migration efforts. Our experience in large corporate projects, shows that a drop-in success rate of 95% is reached for applications switching from WebStart to IcedTea-Web. Azul Platform Core customers can contact [email protected] for any technical question or problem regarding IcedTea-Web. Note IcedTea-Web is tested and compatible with version 8 of Azul Zulu Builds of OpenJDK. Support for version 11 is not tested and is not an officially supported combination, but in our experience, IcedTea-Web generally works with Zulu 11. Other Zulu versions are not known to work with IcedTea-Web."
}, {
  "objectID" : "264bad91-634f-4a10-9aef-a41c2b86c67a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "About IcedTea-Web",
  "section" : "History of Java Web Start",
  "url" : "https://docs.azul.com/core/icedteaweb/introduction",
  "link" : "https://docs.azul.com/core/icedteaweb/introduction#history-of-java-web-start",
  "content" : "History of Java Web Start Java Web Start was a deployment technology, which allowed for an application to automatically install and update when the user runs it. It has been part of Java since version 5. Java Web Start applications were configured through files with the .jnlp extension for Java Network Launch Protocol (JNLP). The JNLP extension was associated with the javaws.exe such that a Java Web Start application can be launched in the browser by double clicking it or from the command line with javaws <jnlp file or URL>. Java Web Start never became a part of the Java Standard (Java SE) and the source code was never released by Sun. It therefore was not made part of the OpenJDK. It was considered safer than Applets, but not safe enough for the Internet. Java Web Start has been deprecated for a while now."
}, {
  "objectID" : "e002a28e-d686-4019-8e04-394aebba2be7",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Release Notes",
  "section" : "1.8.8-28 - July 24, 2023",
  "url" : "https://docs.azul.com/core/icedteaweb/itw-release-notes",
  "link" : "https://docs.azul.com/core/icedteaweb/itw-release-notes#1-8-8-28-july-24-2023",
  "content" : "1.8.8-28 - July 24, 2023 This release of Azul IcedTea-Web is based on the upstream version 1.8.8. Azul Bug Fixes The following table describes the Azul changes implemented in this release. Azul Patch ID Synopsis ZWS-10 Add option to provide additional flags to javaws.exe ZWS-12 log ITW/JRE versions ZWS-14 JNLPClassLoader.merge throws NPE ZWS-17 backport patch for LinkageError issue ZWS-19 don’t enforce https requests by default ZWS-20 extension jnlp with optional codebase ZWS-21 ITW dialogs may appear in background ZWS-22 main class isn’t found if it’s in extension jnlp ZWS-24 use deployment.proxy.bypass.list instead of deployment.proxy.override.hosts ZWS-25 wrong description on separator (should be comma instead of semicolon) ZWS-26 case-insensitive comparison for hosts in deployment.proxy.bypass.list ZWS-27 disable dns resolve if proxy is configured ZWS-28 better wording for deployment.proxy.bypass.list label ZWS-30 add nashorn based pac evaluator ZWS-35 minor issue around favicon access ZWS-37 ITW fails to download jnlp due to disabled cookies ZWS-38 javaws launcher is broken on linux ZWS-39 ITW fails to read granted permissions from its java.policy file ZWS-41 backport patch that gets desktop folder from registry ZWS-43 option to show/hide sandbox buttons in signature warning ZWS-45 ITW throws NPE when filename contains hash sign ZWS-46 support FX apps without main method ZWS-50 add jpeg compat jar to ITW bundle ZWS-52 prepend ITW install folder to PATH ZWS-53 ITW binaries signed ZWS-56 set properties declared in extension jnlp ZWS-58 ignore Location header for non-redirection responses ZWS-59 SingleInstanceService doesn’t work after restart ZWS-61 refix setting properties declared in extension jnlp files ZWS-66 replace println with log utility function in native launcher ZWS-67 Add support for -Xnosplash option ZWS-69 rewrite OutputController to use reentrant locks Supported Platforms Linux Windows macOS Supported Java Versions Java 8"
}, {
  "objectID" : "aed66823-1847-4698-9649-2ec384c03d3d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Release Notes",
  "section" : "Azul Bug Fixes",
  "url" : "https://docs.azul.com/core/icedteaweb/itw-release-notes",
  "link" : "https://docs.azul.com/core/icedteaweb/itw-release-notes#azul-bug-fixes",
  "content" : "Azul Bug Fixes The following table describes the Azul changes implemented in this release. Azul Patch ID Synopsis ZWS-10 Add option to provide additional flags to javaws.exe ZWS-12 log ITW/JRE versions ZWS-14 JNLPClassLoader.merge throws NPE ZWS-17 backport patch for LinkageError issue ZWS-19 don’t enforce https requests by default ZWS-20 extension jnlp with optional codebase ZWS-21 ITW dialogs may appear in background ZWS-22 main class isn’t found if it’s in extension jnlp ZWS-24 use deployment.proxy.bypass.list instead of deployment.proxy.override.hosts ZWS-25 wrong description on separator (should be comma instead of semicolon) ZWS-26 case-insensitive comparison for hosts in deployment.proxy.bypass.list ZWS-27 disable dns resolve if proxy is configured ZWS-28 better wording for deployment.proxy.bypass.list label ZWS-30 add nashorn based pac evaluator ZWS-35 minor issue around favicon access ZWS-37 ITW fails to download jnlp due to disabled cookies ZWS-38 javaws launcher is broken on linux ZWS-39 ITW fails to read granted permissions from its java.policy file ZWS-41 backport patch that gets desktop folder from registry ZWS-43 option to show/hide sandbox buttons in signature warning ZWS-45 ITW throws NPE when filename contains hash sign ZWS-46 support FX apps without main method ZWS-50 add jpeg compat jar to ITW bundle ZWS-52 prepend ITW install folder to PATH ZWS-53 ITW binaries signed ZWS-56 set properties declared in extension jnlp ZWS-58 ignore Location header for non-redirection responses ZWS-59 SingleInstanceService doesn’t work after restart ZWS-61 refix setting properties declared in extension jnlp files ZWS-66 replace println with log utility function in native launcher ZWS-67 Add support for -Xnosplash option ZWS-69 rewrite OutputController to use reentrant locks"
}, {
  "objectID" : "fdda24f4-63b7-4523-945a-7614cad2aaf0",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Release Notes",
  "section" : "Supported Platforms",
  "url" : "https://docs.azul.com/core/icedteaweb/itw-release-notes",
  "link" : "https://docs.azul.com/core/icedteaweb/itw-release-notes#supported-platforms",
  "content" : "Supported Platforms Linux Windows macOS"
}, {
  "objectID" : "bac06c38-48ff-4705-8275-a5dd10c2685e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Release Notes",
  "section" : "Supported Java Versions",
  "url" : "https://docs.azul.com/core/icedteaweb/itw-release-notes",
  "link" : "https://docs.azul.com/core/icedteaweb/itw-release-notes#supported-java-versions",
  "content" : "Supported Java Versions Java 8"
}, {
  "objectID" : "f120f3e2-531f-4593-825d-a8cb80884449",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Download and Installation",
  "section" : "Prerequisites",
  "url" : "https://docs.azul.com/core/icedteaweb/installation",
  "link" : "https://docs.azul.com/core/icedteaweb/installation#prerequisites",
  "content" : "Prerequisites Java 8 runtime needs to be installed before you can use IcedTea-Web. Download Downloads of IcedTea-Web for different platforms are provided via our website. Installation Instructions Windows From MSI-installer: Download the IcedTea-Web installation file (MSI) and double-click on it to start an installation wizard. Click \"Next\" on the first screen. Accept the license terms and click \"Next\". Choose and installation directory (C:\\Program Files\\IcedTeaWeb\\WebStart\\ by default) Click \"Install\", you need to have administrator privileges in order to install IcedTea-Web. Click \"Finish\" to end the installer. To verify the installation: It should be visible on the list of installed applications. The IcedTea-Web installation directory should be added to a PATH variable. IcedTea-Web’s runtime binary (javaws.exe) should be associated with .JNLP extension. From ZIP-archive: Unzip the archive to a reasonable location on your target system. Linux Unzip the archive to a reasonable location on your target system. Portable Portable scripts can be run on any supported OS (Windows, Linux, macOS). To install portable scripts/binaries, unzip the archive to a reasonable location on your target system."
}, {
  "objectID" : "dd2bd18a-39e3-48ad-aad1-c2c1c2002491",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Download and Installation",
  "section" : "Prerequisites",
  "url" : "https://docs.azul.com/core/icedteaweb/installation",
  "link" : "https://docs.azul.com/core/icedteaweb/installation#prerequisites",
  "content" : "Prerequisites Java 8 runtime needs to be installed before you can use IcedTea-Web."
}, {
  "objectID" : "19181ceb-8a8e-4a86-ba6b-e06442874154",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Download and Installation",
  "section" : "Download",
  "url" : "https://docs.azul.com/core/icedteaweb/installation",
  "link" : "https://docs.azul.com/core/icedteaweb/installation#download",
  "content" : "Download Downloads of IcedTea-Web for different platforms are provided via our website."
}, {
  "objectID" : "fe4194b7-733f-4ca5-88be-3febc1cf28c5",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Download and Installation",
  "section" : "Installation Instructions",
  "url" : "https://docs.azul.com/core/icedteaweb/installation",
  "link" : "https://docs.azul.com/core/icedteaweb/installation#installation-instructions",
  "content" : "Installation Instructions Windows From MSI-installer: Download the IcedTea-Web installation file (MSI) and double-click on it to start an installation wizard. Click \"Next\" on the first screen. Accept the license terms and click \"Next\". Choose and installation directory (C:\\Program Files\\IcedTeaWeb\\WebStart\\ by default) Click \"Install\", you need to have administrator privileges in order to install IcedTea-Web. Click \"Finish\" to end the installer. To verify the installation: It should be visible on the list of installed applications. The IcedTea-Web installation directory should be added to a PATH variable. IcedTea-Web’s runtime binary (javaws.exe) should be associated with .JNLP extension. From ZIP-archive: Unzip the archive to a reasonable location on your target system. Linux Unzip the archive to a reasonable location on your target system. Portable Portable scripts can be run on any supported OS (Windows, Linux, macOS). To install portable scripts/binaries, unzip the archive to a reasonable location on your target system."
}, {
  "objectID" : "ecf89998-9072-4f93-98fe-e4ea03e48b8d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Download and Installation",
  "section" : "Windows",
  "url" : "https://docs.azul.com/core/icedteaweb/installation",
  "link" : "https://docs.azul.com/core/icedteaweb/installation#windows",
  "content" : "Windows From MSI-installer: Download the IcedTea-Web installation file (MSI) and double-click on it to start an installation wizard. Click \"Next\" on the first screen. Accept the license terms and click \"Next\". Choose and installation directory (C:\\Program Files\\IcedTeaWeb\\WebStart\\ by default) Click \"Install\", you need to have administrator privileges in order to install IcedTea-Web. Click \"Finish\" to end the installer. To verify the installation: It should be visible on the list of installed applications. The IcedTea-Web installation directory should be added to a PATH variable. IcedTea-Web’s runtime binary (javaws.exe) should be associated with .JNLP extension. From ZIP-archive: Unzip the archive to a reasonable location on your target system."
}, {
  "objectID" : "8d18f35c-91a1-4eee-af22-765ddf3c3a8f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Download and Installation",
  "section" : "Linux",
  "url" : "https://docs.azul.com/core/icedteaweb/installation",
  "link" : "https://docs.azul.com/core/icedteaweb/installation#linux",
  "content" : "Linux Unzip the archive to a reasonable location on your target system."
}, {
  "objectID" : "0bb3dc8b-ba67-4829-bb45-69843acd3a60",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Download and Installation",
  "section" : "Portable",
  "url" : "https://docs.azul.com/core/icedteaweb/installation",
  "link" : "https://docs.azul.com/core/icedteaweb/installation#portable",
  "content" : "Portable Portable scripts can be run on any supported OS (Windows, Linux, macOS). To install portable scripts/binaries, unzip the archive to a reasonable location on your target system."
}, {
  "objectID" : "8a45789f-cafd-48ff-95e4-0120eb748e44",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "Validate Installation on Windows",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#validate-installation-on-windows",
  "content" : "Validate Installation on Windows Java 8 Make sure you have Java 8.  C:\\>java -version\nopenjdk version \"1.8.0_402\"\nOpenJDK Runtime Environment (Zulu 8.76.0.17-CA-win64) (build 1.8.0_402-b06)\nOpenJDK 64-Bit Server VM (Zulu 8.76.0.17-CA-win64) (build 25.402-b06, mixed mode) JAVA_HOME Check that the JAVA_HOME variable has been defined and points to the correct location of the Java installation.  C:\\>echo %JAVA_HOME%\nC:\\Program Files\\Zulu\\zulu-8\\ IcedTea-Web in PATH variable Check that the IcedTea-Web directory has been added to a PATH variable.  C:\\>echo %PATH%\nC:\\Program Files\\IcedTeaWeb\\WebStart\\bin;C:\\Program Files\\Zulu\\zulu-8\\bin\\;C:\\Windows\\system32;C:\\Windows;... How to Start a WebStart application with IcedTea-Web In modern browsers, a JNLP-file will be downloaded and saved to downloads folder, and can’t be opened in the browser. Once a JNLP-file has been downloaded, you can start it in several ways: Open the Downloads directory and double-click on the JNLP-file. This will only work if there is an association between the .jnlp extension and the javaws.exe binary. Start a JNLP-file from the command line:  C:\\Users\\YourName\\Downloads>javaws application.jnlp Use the full installation path of javaws.exe:  C:\\Users\\YourName\\Downloads>\"C:\\Program Files\\IcedTeaWeb\\WebStart\\bin\\javaws.exe\" application.jnlp Additional Tools A few other tools are provided with IcedTea-Web. Web Control Panel itweb-settings: allows to view and modify the settings for javaws and the browser plugin.  C:\\>itweb-settings PolicyEditor policyeditor: allows end-users to quickly and easily view or edit the contents of their applet policy.  C:\\>policyeditor How Iced-Tea-Web is Locating the Java Runtime javaws.exe needs a valid Java Runtime, and it will search for this runtime in the following order, until it finds it: Check deployment.properties for the deployment.jre.dir property. Check the JAVA_HOME environmental variable. Check if there is an embedded Java Runtime with IcedTea-Web. Check Windows registry keys. Check if there is a Java Runtime in the PATH variable."
}, {
  "objectID" : "9b6bdc03-afd5-4094-83f0-5c37098f7de2",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "Validate Installation on Windows",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#validate-installation-on-windows",
  "content" : "Validate Installation on Windows Java 8 Make sure you have Java 8.  C:\\>java -version\nopenjdk version \"1.8.0_402\"\nOpenJDK Runtime Environment (Zulu 8.76.0.17-CA-win64) (build 1.8.0_402-b06)\nOpenJDK 64-Bit Server VM (Zulu 8.76.0.17-CA-win64) (build 25.402-b06, mixed mode) JAVA_HOME Check that the JAVA_HOME variable has been defined and points to the correct location of the Java installation.  C:\\>echo %JAVA_HOME%\nC:\\Program Files\\Zulu\\zulu-8\\ IcedTea-Web in PATH variable Check that the IcedTea-Web directory has been added to a PATH variable.  C:\\>echo %PATH%\nC:\\Program Files\\IcedTeaWeb\\WebStart\\bin;C:\\Program Files\\Zulu\\zulu-8\\bin\\;C:\\Windows\\system32;C:\\Windows;..."
}, {
  "objectID" : "91dc785d-202b-4fe3-8306-e60e660277bd",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "Java 8",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#java-8",
  "content" : "Java 8 Make sure you have Java 8.  C:\\>java -version\nopenjdk version \"1.8.0_402\"\nOpenJDK Runtime Environment (Zulu 8.76.0.17-CA-win64) (build 1.8.0_402-b06)\nOpenJDK 64-Bit Server VM (Zulu 8.76.0.17-CA-win64) (build 25.402-b06, mixed mode)"
}, {
  "objectID" : "ae3dea9a-ca9d-4da4-92de-3ce81392536f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "JAVA_HOME",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#java_home",
  "content" : "JAVA_HOME Check that the JAVA_HOME variable has been defined and points to the correct location of the Java installation.  C:\\>echo %JAVA_HOME%\nC:\\Program Files\\Zulu\\zulu-8\\"
}, {
  "objectID" : "5d2dea56-a374-4dbc-b774-071abaf4aea0",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "IcedTea-Web in PATH variable",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#icedtea-web-in-path-variable",
  "content" : "IcedTea-Web in PATH variable Check that the IcedTea-Web directory has been added to a PATH variable.  C:\\>echo %PATH%\nC:\\Program Files\\IcedTeaWeb\\WebStart\\bin;C:\\Program Files\\Zulu\\zulu-8\\bin\\;C:\\Windows\\system32;C:\\Windows;..."
}, {
  "objectID" : "81298483-77bc-4a13-90d8-506967b35763",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "How to Start a WebStart application with IcedTea-Web",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#how-to-start-a-webstart-application-with-icedtea-web",
  "content" : "How to Start a WebStart application with IcedTea-Web In modern browsers, a JNLP-file will be downloaded and saved to downloads folder, and can’t be opened in the browser. Once a JNLP-file has been downloaded, you can start it in several ways: Open the Downloads directory and double-click on the JNLP-file. This will only work if there is an association between the .jnlp extension and the javaws.exe binary. Start a JNLP-file from the command line:  C:\\Users\\YourName\\Downloads>javaws application.jnlp Use the full installation path of javaws.exe:  C:\\Users\\YourName\\Downloads>\"C:\\Program Files\\IcedTeaWeb\\WebStart\\bin\\javaws.exe\" application.jnlp"
}, {
  "objectID" : "4db6db2a-3721-4789-9048-6be3cdda4bde",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "Additional Tools",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#additional-tools",
  "content" : "Additional Tools A few other tools are provided with IcedTea-Web. Web Control Panel itweb-settings: allows to view and modify the settings for javaws and the browser plugin.  C:\\>itweb-settings PolicyEditor policyeditor: allows end-users to quickly and easily view or edit the contents of their applet policy.  C:\\>policyeditor"
}, {
  "objectID" : "0e8dcbf1-e4db-4a80-a200-64d0b92a12af",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "Web Control Panel",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#web-control-panel",
  "content" : "Web Control Panel itweb-settings: allows to view and modify the settings for javaws and the browser plugin.  C:\\>itweb-settings"
}, {
  "objectID" : "2d39af1c-578e-412c-8ff2-5ead6e54e53a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "PolicyEditor",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#policyeditor",
  "content" : "PolicyEditor policyeditor: allows end-users to quickly and easily view or edit the contents of their applet policy.  C:\\>policyeditor"
}, {
  "objectID" : "891ec881-1364-4bf3-b313-ed91787204f4",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Usage Instructions",
  "section" : "How Iced-Tea-Web is Locating the Java Runtime",
  "url" : "https://docs.azul.com/core/icedteaweb/usage-instructions",
  "link" : "https://docs.azul.com/core/icedteaweb/usage-instructions#how-iced-tea-web-is-locating-the-java-runtime",
  "content" : "How Iced-Tea-Web is Locating the Java Runtime javaws.exe needs a valid Java Runtime, and it will search for this runtime in the following order, until it finds it: Check deployment.properties for the deployment.jre.dir property. Check the JAVA_HOME environmental variable. Check if there is an embedded Java Runtime with IcedTea-Web. Check Windows registry keys. Check if there is a Java Runtime in the PATH variable."
}, {
  "objectID" : "f74d75dd-5020-4373-a080-a0a1e7bf0e0e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "IcedTea-Web Configuration",
  "section" : "",
  "url" : "https://docs.azul.com/core/icedteaweb/configuration",
  "link" : "https://docs.azul.com/core/icedteaweb/configuration",
  "content" : "This is an overview of the files with location and usage related to IcedTea-Web. The default location of the files used in this table, are: {INSTALL_DIR}: C:\\Program Files\\Zulu\\zulu-8\\jre\\lib {USER_APPDATA}: C:\\Users\\User\\AppData\\Local\\Temp\\User {USER_CACHE}: C:\\Users\\User\\.cache\\icedtea-web {USER_CONFIG}: C:\\Users\\User\\.config\\icedtea-web {USER_SHARE}: C:\\Users\\User\\.local\\share {SUN_JAVA}: C:\\Users\\User\\.local\\share File or directory name Default location Description deployment.config {INSTALL_DIR}\\deployment.config Java-global deployment properties file. May be affected by deployment.jre.dir cacerts {INSTALL_DIR}\\security\\cacerts Contains various system java-wide stored certificates. Controlled by deployment.system.security.cacerts jssecacerts {INSTALL_DIR}\\security\\jssecacerts Contains various system java-wide stored certificates. Controlled by deployment.system.security.jssecacerts trusted.certs {INSTALL_DIR}\\security\\trusted.certs Contains various system java-wide stored certificates. Controlled by deployment.system.security.trusted.certs trusted.clientcerts {INSTALL_DIR}\\security\\trusted.clientcerts Contains various system java-wide stored certificates. Controlled by deployment.system.security.trusted.clientautcerts trusted.jssecerts {INSTALL_DIR}\\security\\trusted.jssecerts Contains various system java-wide stored certificates. Controlled by deployment.system.security.trusted.jssecerts locks {USER_APPDATA}\\netx\\locks Location of netx locks. Controlled by deployment.user.locksdir netx_running {USER_APPDATA}\\netx\\locks\\netx_running Location of netx main lock. Controlled by deployment.user.runningfile cache {USER_CACHE}\\cache Contains cached runtime entries. Controlled by deployment.user.cachedir recently_used {USER_CACHE}\\cache\\recently_used Additional information about items in cache. pcache {USER_CACHE}\\pcache Contains saved application data. Controlled by deployment.user.pcachedir tmp {USER_CACHE}\\tmp Contains temporary runtime files. Controlled by deployment.user.tmp .appletTrustSettings {USER_CONFIG}\\.appletTrustSettings File responsible for various actions on Applets and Apps based on their codebase based on users actions. deployment.properties {USER_CONFIG}\\deployment.properties Users main deployment properties file. To enable logging, add deployment.log=true to this file. icons {USER_CONFIG}\\icons Location where icons of javaws applications desktop/menu launchers icons are stored. log {USER_CONFIG}\\log Contains file-log files (if enabled), itw-cplugin-date_time.log for native part of plugin, itw-javantx-date_time.log for everything else. Controlled by deployment.user.logdir. java.policy {USER_CONFIG}\\security\\java.policy Contains granted permissions for selected unsigned apps. Controlled by deployment.user.security.policy trusted.cacerts {USER_CONFIG}\\security\\trusted.cacerts Contains various users stored certificates. Controlled by deployment.user.security.trusted.cacerts trusted.certs {USER_CONFIG}\\security\\trusted.certs Contains various users stored certificates. Controlled by deployment.user.security.trusted.certs trusted.clientcerts {USER_CONFIG}\\security\\trusted.clientcerts Contains various users stored certificates. Controlled by deployment.user.security.trusted.clientauthcerts trusted.jssecacerts {USER_CONFIG}\\security\\trusted.jssecacerts Contains various users stored certificates. Controlled by deployment.user.security.trusted.jssecacerts trusted.jssecerts {USER_CONFIG}\\security\\trusted.jssecerts Contains various users stored certificates. Controlled by deployment.user.security.trusted.jssecerts javaws {USER_SHARE}\\applications\\javaws Subdirectory in users menus space, for placing custom menu shortcuts. .appletTrustSettings {SUN_JAVA}\\.appletTrustSettings File responsible for various actions on Applets and Apps based on their codebase based on admins actions. deployment.config {SUN_JAVA}\\deployment.config Global deployment config file."
}, {
  "objectID" : "811507f4-4ce7-40a6-96d0-e6955f4adaf9",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "What is CRaC?",
  "section" : "",
  "url" : "https://docs.azul.com/core/crac/crac-introduction",
  "link" : "https://docs.azul.com/core/crac/crac-introduction",
  "content" : "Coordinated Restore at Checkpoint (CRaC) is a JDK project that allows you to start Java programs with a shorter time to first transaction, combined with less time and resources to achieve full code speed. CRaC effectively takes a snapshot of the Java process (checkpoint) when it is fully warmed up, then uses that snapshot to launch any number of JVMs from this captured state. Not all existing Java programs can run without modification as all resources - using the CRaC API - need to be explicitly closed before you can create a checkpoint, and these resources must be reinitialized after the restore. Popular frameworks like Spring, Micronaut, and Quarkus support CRaC checkpointing out of the box."
}, {
  "objectID" : "fcf3ad2d-9985-4ab8-8875-86bc66b1a0d9",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "What is CRaC?",
  "section" : "Why CRaC?",
  "url" : "https://docs.azul.com/core/crac/crac-introduction",
  "link" : "https://docs.azul.com/core/crac/crac-introduction#why-crac",
  "content" : "Why CRaC? When an application starts running, the JVM looks for methods that are hot spots (hence the name HotSpot for the implementation of the JVM that is now the OpenJDK JVM), and compiles them to get better performance compared to interpreting the bytecodes. This results in fast, optimized code, but has the downside of the JVM needing both time and compute resources to determine which methods to compile and then compile them. This is what we refer to as the warmup time of an application. The fact that this same work has to happen every time we run an application makes the JVM less attractive in certain situations like microservices and serverless computing. With CRaC, you can create a checkpoint with the state of the JVM and its application, and start (restore) as many instances from that checkpoint as required. This reduces the time to load data and initialize the required structures, both on JVM and on application side. In contrast to the more generic Checkpoint/Restore approach implemented in CRIU, CRaC is designed to achieve multiple restores in different environments from a single checkpoint. CRaC imposes certain restrictions on the state of the application and JVM to guarantee the consistency and safety of the checkpoint. The checkpoint cannot succeed if the program has an open file handle. If the file that is referenced by a handle, changes, the checkpoint state will diverge from the environment. An attempt to use the handle after restore when the file has changed, will lead to unpredictable results. For this reason, CRaC requires that there are no open file handles and sockets when you create a checkpoint. However, this does not mean that only simple applications are compatible with CRaC. Applications can prepare themselves for the checkpoint to satisfy the requirements, and re-initialize themselves after restore. CRaC provides new Java APIs to register callbacks (resources) with two methods: beforeCheckpoint() and afterRestore(). As these names imply, you can run arbitrary code on checkpoint and restore, and you can satisfy CRaC’s requirements for the application state. Azul’s ReadyNow is another technology, which is part of Azul Prime Builds of OpenJDK, to offer warmup time reduction. ReadyNow allows a running application to store all the state of the compiled methods, and even the compiled code itself, without changing the application. Startup Improvement Results As part of this project, Azul created a proof-of-concept build of JDK 17 to demonstrate the CRaC functionality. The results from these first tests were very promising. For instance, with a sample Spring Boot application and in a test environment, the time before processing the first operation took roughly four seconds. By using a checkpoint of the running, warmed up application, a restore was able to get to the first operation in 40ms. That’s two orders of magnitude faster! The chart is based on experiments on the following environment: Laptop with Intel i7-5500U, 16Gb RAM and SSD. Linux kernel 5.7.4-arch1-1. The data was collected in a container running an ubuntu:18.04 based image. Host operating system: archlinux. Presentation The CRaC system was fully explained by Gerrit Grunwald, Developer Advocate of Azul at many conferences. This is the recording of his presentation at J-Spring in 2022."
}, {
  "objectID" : "ceac158a-d022-4480-95f4-80137953bef6",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "What is CRaC?",
  "section" : "Startup Improvement Results",
  "url" : "https://docs.azul.com/core/crac/crac-introduction",
  "link" : "https://docs.azul.com/core/crac/crac-introduction#startup-improvement-results",
  "content" : "Startup Improvement Results As part of this project, Azul created a proof-of-concept build of JDK 17 to demonstrate the CRaC functionality. The results from these first tests were very promising. For instance, with a sample Spring Boot application and in a test environment, the time before processing the first operation took roughly four seconds. By using a checkpoint of the running, warmed up application, a restore was able to get to the first operation in 40ms. That’s two orders of magnitude faster! The chart is based on experiments on the following environment: Laptop with Intel i7-5500U, 16Gb RAM and SSD. Linux kernel 5.7.4-arch1-1. The data was collected in a container running an ubuntu:18.04 based image. Host operating system: archlinux."
}, {
  "objectID" : "3ef4ab7a-b564-48d5-8268-b25d3bbd481a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "What is CRaC?",
  "section" : "Presentation",
  "url" : "https://docs.azul.com/core/crac/crac-introduction",
  "link" : "https://docs.azul.com/core/crac/crac-introduction#presentation",
  "content" : "Presentation The CRaC system was fully explained by Gerrit Grunwald, Developer Advocate of Azul at many conferences. This is the recording of his presentation at J-Spring in 2022."
}, {
  "objectID" : "31bb10fb-8860-419e-90e4-9550c4f5f3b7",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Anatomy of CRaC Processes",
  "section" : "",
  "url" : "https://docs.azul.com/core/crac/anatomy",
  "link" : "https://docs.azul.com/core/crac/anatomy",
  "content" : "Note Consider the information on this page an insight into the current CRaC implementation. Some of these details can and will change over time."
}, {
  "objectID" : "6e182696-c539-4f93-acdc-e98102d8de21",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Anatomy of CRaC Processes",
  "section" : "Understanding How CRaC Influences the PID",
  "url" : "https://docs.azul.com/core/crac/anatomy",
  "link" : "https://docs.azul.com/core/crac/anatomy#understanding-how-crac-influences-the-pid",
  "content" : "Understanding How CRaC Influences the PID A traditional JVM process uses a single multi-threaded process. On Linux (and in other POSIX OSes) the process is identified by a numerical process identifier (PID). Java considered this an OS-specific implementation detail, therefore applications tried to obtain it e.g. by parsing ManagementFactory.getRuntimeMXBean().getName() or in more recent Java versions (>= 9) these could use ProcessHandle.current().pid(). Developers usually consider this a constant for the duration of the application. When a process terminates, it exits with an exit value between 0 and 255. By convention 0 signifies success (normal exit) and other values are used for different error states. Specifically, when the process is terminated by an unhandled signal it returns exit value 128+signal. Basic Checkpoint and Restore In the simplest form of checkpoint and restore (C/R), we have two processes: first the checkpointed one, and later on the restored process. When the C/R is performed using CRIU as a standalone binary it gets a bit more complex. CRIU, as a tool tailored for more complex use-cases than single process C/R, attempts to checkpoint not only its primary target (the process with all its threads), but the whole process group: the process with all its children and their children. When the checkpoint is initiated from the JVM process, CRIU would be a child process, too. That’s one reason why CRaC uses an intermediary process: criuengine. This process escapes the children hierarchy and then exec’s (*) CRIU. CRIU persists the state of the original JVM process and then terminates it, using KILL signal (9). That’s why a process that was correctly checkpointed returns exit code 128+9 = 137. (*) The term exec’s here refers to the exec in POSIX fork & exec pattern. It replaces the current program with a new program. When the JVM is restored, the process started with java -XX:CRaCRestoreFrom=… does not start the JVM. Instead it exec’s CRIU (through criuengine) which starts the restored process as its child. Since the process might have some internal dependency on its original PID, the restored child will have the same PID as the original checkpointed process. When CRIU is finished reconstructing the process, it exec’s into criuengine restorewait: the only task of this program is to wait until its only child (the restored JVM) exits and propagate its status. However, this means that now there are two processes and if a script that executed java -XX:CRaCRestoreFrom=… obtained this process’s PID value, it is not the PID of the restored process. While criuengine restorewait propagates all the signals it can, KILL and STOP signals cannot be handled (propagated) and therefore the restored JVM process would not be killed but only get orphaned. Creating a Checkpoint Visualization of the flow that creates a checkpoint from an application with PID 1234. Restoring a Checkpoint Visualization of the flow that restores a checkpoint to make it run again with PID 1234. Checkpointed Process Wrapper In some cases, such as when running the to-be-checkpointed JVM in a container, this might get even more complicated. In containers, unless wrapping the JVM process with a shell script, this would be running with the special PID value of 1. This would prohibit the 'escape' of criuengine checkpoint and the checkpoint would fail. Therefore, when the JVM is checkpointable and runs with PID 1 it turns into a dummy wrapper process and starts another process, the actual JVM. As a result, the container would again host two processes. In the future there might be other situations that would follow the checkpointed JVM termination with further actions, e.g. post-processing of the process image. For seamless experience in a shell, this post-execution would also require a wrapper that waits until all the work is done. If your scripts must use KILL or STOP signals these should send it to all processes within the group, e.g. using kill -9 -<pid>. Without CRIU While CRIU offers the most mature C/R implementation, the complexity of its task requires elevated capabilities. In the case of CRaC, at least the CAP_CHECKPOINT_RESTORE and CAP_SYS_PTRACE. This might not be suitable in all deployment environments, particularly in restricted containers, and therefore the CRaC project explores other implementations as well. These might work with a different hierarchy of processes. One reason for these elevated permissions is the ability to use arbitrary PIDs for new processes/threads. Java programs usually do not use its PID extensively and other C/R implementations might relax this requirement. Therefore, it is highly advisable to not rely on its constness."
}, {
  "objectID" : "5b65c556-afad-4766-9c32-53311126a225",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Anatomy of CRaC Processes",
  "section" : "Basic Checkpoint and Restore",
  "url" : "https://docs.azul.com/core/crac/anatomy",
  "link" : "https://docs.azul.com/core/crac/anatomy#basic-checkpoint-and-restore",
  "content" : "Basic Checkpoint and Restore In the simplest form of checkpoint and restore (C/R), we have two processes: first the checkpointed one, and later on the restored process. When the C/R is performed using CRIU as a standalone binary it gets a bit more complex. CRIU, as a tool tailored for more complex use-cases than single process C/R, attempts to checkpoint not only its primary target (the process with all its threads), but the whole process group: the process with all its children and their children. When the checkpoint is initiated from the JVM process, CRIU would be a child process, too. That’s one reason why CRaC uses an intermediary process: criuengine. This process escapes the children hierarchy and then exec’s (*) CRIU. CRIU persists the state of the original JVM process and then terminates it, using KILL signal (9). That’s why a process that was correctly checkpointed returns exit code 128+9 = 137. (*) The term exec’s here refers to the exec in POSIX fork & exec pattern. It replaces the current program with a new program. When the JVM is restored, the process started with java -XX:CRaCRestoreFrom=… does not start the JVM. Instead it exec’s CRIU (through criuengine) which starts the restored process as its child. Since the process might have some internal dependency on its original PID, the restored child will have the same PID as the original checkpointed process. When CRIU is finished reconstructing the process, it exec’s into criuengine restorewait: the only task of this program is to wait until its only child (the restored JVM) exits and propagate its status. However, this means that now there are two processes and if a script that executed java -XX:CRaCRestoreFrom=… obtained this process’s PID value, it is not the PID of the restored process. While criuengine restorewait propagates all the signals it can, KILL and STOP signals cannot be handled (propagated) and therefore the restored JVM process would not be killed but only get orphaned. Creating a Checkpoint Visualization of the flow that creates a checkpoint from an application with PID 1234. Restoring a Checkpoint Visualization of the flow that restores a checkpoint to make it run again with PID 1234."
}, {
  "objectID" : "069297ce-3085-48dd-98c9-9f0ee22ac450",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Anatomy of CRaC Processes",
  "section" : "Creating a Checkpoint",
  "url" : "https://docs.azul.com/core/crac/anatomy",
  "link" : "https://docs.azul.com/core/crac/anatomy#creating-a-checkpoint",
  "content" : "Creating a Checkpoint Visualization of the flow that creates a checkpoint from an application with PID 1234."
}, {
  "objectID" : "f6835219-7142-44a5-b7f0-f3f9c6c060b0",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Anatomy of CRaC Processes",
  "section" : "Restoring a Checkpoint",
  "url" : "https://docs.azul.com/core/crac/anatomy",
  "link" : "https://docs.azul.com/core/crac/anatomy#restoring-a-checkpoint",
  "content" : "Restoring a Checkpoint Visualization of the flow that restores a checkpoint to make it run again with PID 1234."
}, {
  "objectID" : "1546ed3d-e656-47d8-9ed5-cfd696e8fca7",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Anatomy of CRaC Processes",
  "section" : "Checkpointed Process Wrapper",
  "url" : "https://docs.azul.com/core/crac/anatomy",
  "link" : "https://docs.azul.com/core/crac/anatomy#checkpointed-process-wrapper",
  "content" : "Checkpointed Process Wrapper In some cases, such as when running the to-be-checkpointed JVM in a container, this might get even more complicated. In containers, unless wrapping the JVM process with a shell script, this would be running with the special PID value of 1. This would prohibit the 'escape' of criuengine checkpoint and the checkpoint would fail. Therefore, when the JVM is checkpointable and runs with PID 1 it turns into a dummy wrapper process and starts another process, the actual JVM. As a result, the container would again host two processes. In the future there might be other situations that would follow the checkpointed JVM termination with further actions, e.g. post-processing of the process image. For seamless experience in a shell, this post-execution would also require a wrapper that waits until all the work is done. If your scripts must use KILL or STOP signals these should send it to all processes within the group, e.g. using kill -9 -<pid>."
}, {
  "objectID" : "32c0e339-7cc8-4bce-b358-e2158e614399",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Anatomy of CRaC Processes",
  "section" : "Without CRIU",
  "url" : "https://docs.azul.com/core/crac/anatomy",
  "link" : "https://docs.azul.com/core/crac/anatomy#without-criu",
  "content" : "Without CRIU While CRIU offers the most mature C/R implementation, the complexity of its task requires elevated capabilities. In the case of CRaC, at least the CAP_CHECKPOINT_RESTORE and CAP_SYS_PTRACE. This might not be suitable in all deployment environments, particularly in restricted containers, and therefore the CRaC project explores other implementations as well. These might work with a different hierarchy of processes. One reason for these elevated permissions is the ability to use arbitrary PIDs for new processes/threads. Java programs usually do not use its PID extensively and other C/R implementations might relax this requirement. Therefore, it is highly advisable to not rely on its constness."
}, {
  "objectID" : "c3d06ca7-fdfb-48be-9c22-c693033501f5",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#generate-checkpoint",
  "content" : "Your application may be ready for CRaC out-of-the-box! The simplest way is trying to generate a checkpoint. When you meet a CheckpointException, (that describes the problematic state in the application), or if you want to have more control, check the \"Implementing the CRaC Resource\" section."
}, {
  "objectID" : "90388474-7ff0-4b4a-800c-9a4dafd0076e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Using CRaC in Your Application",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#using-crac-in-your-application",
  "content" : "Using CRaC in Your Application Adding the CRaC API The library provided by org.crac is designed to provide a smooth CRaC adoption. Add this library to build an application that uses the CRaC API, to be able to run it on Java runtimes with CRaC, or without any implementation. You can find the library in the Maven Repository. Maven  <dependency>\n  <groupId>org.crac</groupId>\n  <artifactId>crac</artifactId>\n  <version>${crac.version}</version>\n</dependency> Gradle  implementation 'org.crac:crac:1.3.0' Functionality During runtime, org.crac uses reflection to detect the CRaC implementation. When available, all requests to org.crac are passed to the implementation. Otherwise, requests are forwarded to a dummy implementation. The dummy implementation allows an application to run but not to use CRaC: Resources can be registered for notification. Checkpoint request fails with an exception. Implementing the CRaC Resource To use the API, you need to identify all classes in your code that are considered \"resources\": classes that must be notified when a checkpoint is about to be made and when a restore has happened. The API provides an eponymous interface, Resource, which must be implemented for the identified classes. There are only two methods, beforeCheckpoint() and afterRestore() which are used as callbacks by the JVM. The CRaC JavaDoc is available here. Example use case: If a class reads configuration from a file, the file must be closed in the beforeCheckpoint() method. In the afterRestore() method, the file can be opened again to check configuration updates. The same applies to network connections, and you can also use the methods to deal with a sudden change in the system clock, which might impact things like cache timeouts. All Resources in the application must be registered with the JVM, which can be achieved by obtaining a CRaC Context and using the register() method. Although you can create your own Context, the simplest way is to use the global Context obtained via the Core class’s static getGlobalContext() method. It’s important to register the Resources in the right order because this order is used to call the beforeCheckpoint methods. However, the afterRestore methods are called in the opposite order. This approach simplifies things if there is a particular sequence in which things need to be prepared for a checkpoint; when restoring, there is a predictable inverse sequence."
}, {
  "objectID" : "b97ebd55-18ad-48c1-8511-65f5f9546856",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Adding the CRaC API",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#adding-the-crac-api",
  "content" : "Adding the CRaC API The library provided by org.crac is designed to provide a smooth CRaC adoption. Add this library to build an application that uses the CRaC API, to be able to run it on Java runtimes with CRaC, or without any implementation. You can find the library in the Maven Repository. Maven  <dependency>\n  <groupId>org.crac</groupId>\n  <artifactId>crac</artifactId>\n  <version>${crac.version}</version>\n</dependency> Gradle  implementation 'org.crac:crac:1.3.0' Functionality During runtime, org.crac uses reflection to detect the CRaC implementation. When available, all requests to org.crac are passed to the implementation. Otherwise, requests are forwarded to a dummy implementation. The dummy implementation allows an application to run but not to use CRaC: Resources can be registered for notification. Checkpoint request fails with an exception."
}, {
  "objectID" : "ffc43c27-907f-48fb-bdb6-aa51cd945d5b",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Maven",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#maven",
  "content" : "Maven  <dependency>\n  <groupId>org.crac</groupId>\n  <artifactId>crac</artifactId>\n  <version>${crac.version}</version>\n</dependency>"
}, {
  "objectID" : "ff913726-6dc6-4af7-88c3-466ebef3fab7",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Gradle",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#gradle",
  "content" : "Gradle  implementation 'org.crac:crac:1.3.0'"
}, {
  "objectID" : "cb1217e4-81bb-4d3d-949e-ed59b094b2d4",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Functionality",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#functionality",
  "content" : "Functionality During runtime, org.crac uses reflection to detect the CRaC implementation. When available, all requests to org.crac are passed to the implementation. Otherwise, requests are forwarded to a dummy implementation. The dummy implementation allows an application to run but not to use CRaC: Resources can be registered for notification. Checkpoint request fails with an exception."
}, {
  "objectID" : "0bc3606b-3d95-4823-bd40-0b017b1727b8",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Implementing the CRaC Resource",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#implementing-crac-resource",
  "content" : "Implementing the CRaC Resource To use the API, you need to identify all classes in your code that are considered \"resources\": classes that must be notified when a checkpoint is about to be made and when a restore has happened. The API provides an eponymous interface, Resource, which must be implemented for the identified classes. There are only two methods, beforeCheckpoint() and afterRestore() which are used as callbacks by the JVM. The CRaC JavaDoc is available here. Example use case: If a class reads configuration from a file, the file must be closed in the beforeCheckpoint() method. In the afterRestore() method, the file can be opened again to check configuration updates. The same applies to network connections, and you can also use the methods to deal with a sudden change in the system clock, which might impact things like cache timeouts. All Resources in the application must be registered with the JVM, which can be achieved by obtaining a CRaC Context and using the register() method. Although you can create your own Context, the simplest way is to use the global Context obtained via the Core class’s static getGlobalContext() method. It’s important to register the Resources in the right order because this order is used to call the beforeCheckpoint methods. However, the afterRestore methods are called in the opposite order. This approach simplifies things if there is a particular sequence in which things need to be prepared for a checkpoint; when restoring, there is a predictable inverse sequence."
}, {
  "objectID" : "e817a967-3c52-48de-8df7-76967d033328",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Running an Application With CRaC",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#running-an-application-with-crac",
  "content" : "Running an Application With CRaC Currently, the CRaC functionality is only available on Linux/x64 and Linux/Arm64, in version 17 and 21 of Azul Zulu Builds of OpenJDK. This means, for now, you can run an application with CRaC on any system thanks to the crac.org dependency, but only on the specified OS systems the CRaC functionality in the JVM will work. Note Some VMs, like Parallels, cannot run foreign CPU instructions, and you need a build matching your CPU. Some other virtualization environments, like WSL, do not provide a complete feature set of Linux kernel, limiting the CRaC functionality in the current version. Running CRaC on a Linux System Selecting a Runtime Currently, CRaC is only available on Linux/x64 and Linux/Arm64, in version 17 and 21 of Azul Zulu Builds of OpenJDK, as of the release of April 2023. Only the bundles with -crac- in the name, have the integrated CRaC functionality. On the download section of the Azul website, you can use the \"Java Package\" > \"JDK CRaC\" filter. Note The JDK archive should be extracted with sudo.  $ sudo tar zxf <jdk>.tar.gz Generating a Checkpoint Start the JVM with an additional flag -XX:CRaCCheckpointTo so it’s prepared to create a checkpoint:  java -XX:CRaCCheckpointTo=$HOME/crac-image/ -jar my_app.jar Note This eventually generates a set of files in the given directory, which cumulative size will be roughly the size of the JVM resident memory. Then you can use two ways to trigger the checkpoint: From outside the JVM, using jcmd with JDK.checkpoint. Programmatically within your application, by adding a call to Core.checkpointRestore() in the flow of your program, where you want the checkpoint to be created. The method will return when the restore has been completed. Using a Checkpoint When a checkpoint is available, you can (re)start your application and restore from the image:  java -XX:CRaCRestoreFrom=$HOME/crac-files/ Running CRaC in a Virtualized Environment (Docker) Creating a Docker Image You need an application in a runnable JAR file. Create a Dockerfile, based on the following minimum file:  FROM ubuntu:20.04\n\nRUN apt-get update -y\n\nADD \"https://cdn.azul.com/zulu/bin/zulu17.44.17-ca-crac-jdk17.0.8-linux_x64.tar.gz\" /opt/\nRUN cd /opt/ && tar -xzf zulu17.44.17-ca-crac-jdk17.0.8-linux_x64.tar.gz && rm zulu17.44.17-ca-crac-jdk17.0.8-linux_x64.tar.gz\n\nENV JAVA_HOME /opt/zulu17.44.17-ca-crac-jdk17.0.8-linux_x64\nENV PATH $JAVA_HOME/bin:$PATH\n\nCOPY build/libs/my_app.jar /opt/app/my_app.jar Build the Docker image with:  docker build -t my_app_on_crac . Starting an Application in a Docker Container Run a Docker container with:  docker run -it --cap-add=CHECKPOINT_RESTORE --cap-add=SYS_PTRACE --rm --name my_app_on_crac \\\n    -v $PWD/crac-files:/opt/crac-files my_app_on_crac \\\n    java -XX:CRaCCheckpointTo=/opt/crac-files -jar /opt/app/my_app.jar Note In order to restore without additional capabilities (see below), you should make java to be PID 1 process. Leave the shell window open and the application running. Creating the Checkpoint Open another shell window. In this window run:  docker exec my_app_on_crac jcmd PID-OR-NAME JDK.checkpoint Note You can find PID or NAME to provide to jcmd by executing just jcmd in the container. If everything is ok, you see that in the first shell window the checkpoint was created and your application was closed. Creating a Docker Image with Checkpoint Create a Dockerfile with the checkpoint:  FROM my_app_on_crac\nCOPY crac-files /opt/crac-files Build the Docker image with  docker build -t my_app_on_crac_restore . Run the Docker Container From the Checkpoint Run:  docker run -it --rm --cap-add=SYS_RESOURCE my_app_on_crac_restore java \\\n    -XX:CRaCRestoreFrom=/opt/crac-files Your application now starts much faster from the saved checkpoint. Note A restore in an unprivileged container (without the SYS_RESOURCE capability) might succeed but we have identified some issues with stability related to the brk syscall; therefore it is strongly recommended to use this additional capability. NOTE: You can run the Docker container also on macOS or Windows, as long as the machine you are running it on has a x64 cpu architecture (Intel/AMD). Running CRaC on Windows or macOS You can test your CRaC application on Windows or macOS with one of the following approaches: Run your application in a virtualized Linux system, e.g. following the Docker approach described above. For instance, on macOS you can use Docker, Podman, Parallels, VirtualBox,… Use an Azul Zulu Build of OpenJDK with CRaC support for development purposes, available for Windows and macOS. These provide a simulated checkpoint/restore mechanism to be used for development and testing."
}, {
  "objectID" : "3efd1849-9217-4d15-8bce-abec1224ef0d",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Running CRaC on a Linux System",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#running-crac-on-a-linux-system",
  "content" : "Running CRaC on a Linux System Selecting a Runtime Currently, CRaC is only available on Linux/x64 and Linux/Arm64, in version 17 and 21 of Azul Zulu Builds of OpenJDK, as of the release of April 2023. Only the bundles with -crac- in the name, have the integrated CRaC functionality. On the download section of the Azul website, you can use the \"Java Package\" > \"JDK CRaC\" filter. Note The JDK archive should be extracted with sudo.  $ sudo tar zxf <jdk>.tar.gz Generating a Checkpoint Start the JVM with an additional flag -XX:CRaCCheckpointTo so it’s prepared to create a checkpoint:  java -XX:CRaCCheckpointTo=$HOME/crac-image/ -jar my_app.jar Note This eventually generates a set of files in the given directory, which cumulative size will be roughly the size of the JVM resident memory. Then you can use two ways to trigger the checkpoint: From outside the JVM, using jcmd with JDK.checkpoint. Programmatically within your application, by adding a call to Core.checkpointRestore() in the flow of your program, where you want the checkpoint to be created. The method will return when the restore has been completed. Using a Checkpoint When a checkpoint is available, you can (re)start your application and restore from the image:  java -XX:CRaCRestoreFrom=$HOME/crac-files/"
}, {
  "objectID" : "83534571-4d90-493a-9318-c7c14253d21e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Selecting a Runtime",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#selecting-a-runtime",
  "content" : "Selecting a Runtime Currently, CRaC is only available on Linux/x64 and Linux/Arm64, in version 17 and 21 of Azul Zulu Builds of OpenJDK, as of the release of April 2023. Only the bundles with -crac- in the name, have the integrated CRaC functionality. On the download section of the Azul website, you can use the \"Java Package\" > \"JDK CRaC\" filter. Note The JDK archive should be extracted with sudo.  $ sudo tar zxf <jdk>.tar.gz"
}, {
  "objectID" : "6242da97-20bf-461f-aeed-de5d63f778b7",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Generating a Checkpoint",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#generate-checkpoint",
  "content" : "Generating a Checkpoint Start the JVM with an additional flag -XX:CRaCCheckpointTo so it’s prepared to create a checkpoint:  java -XX:CRaCCheckpointTo=$HOME/crac-image/ -jar my_app.jar Note This eventually generates a set of files in the given directory, which cumulative size will be roughly the size of the JVM resident memory. Then you can use two ways to trigger the checkpoint: From outside the JVM, using jcmd with JDK.checkpoint. Programmatically within your application, by adding a call to Core.checkpointRestore() in the flow of your program, where you want the checkpoint to be created. The method will return when the restore has been completed."
}, {
  "objectID" : "596e2f97-752a-494d-b78b-b8b9b8458f68",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Using a Checkpoint",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#using-checkpoint",
  "content" : "Using a Checkpoint When a checkpoint is available, you can (re)start your application and restore from the image:  java -XX:CRaCRestoreFrom=$HOME/crac-files/"
}, {
  "objectID" : "e87c0aa3-a4a7-4038-92ec-6ad95aa7b444",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Running CRaC in a Virtualized Environment (Docker)",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#running-crac-in-a-virtualized-environment-docker",
  "content" : "Running CRaC in a Virtualized Environment (Docker) Creating a Docker Image You need an application in a runnable JAR file. Create a Dockerfile, based on the following minimum file:  FROM ubuntu:20.04\n\nRUN apt-get update -y\n\nADD \"https://cdn.azul.com/zulu/bin/zulu17.44.17-ca-crac-jdk17.0.8-linux_x64.tar.gz\" /opt/\nRUN cd /opt/ && tar -xzf zulu17.44.17-ca-crac-jdk17.0.8-linux_x64.tar.gz && rm zulu17.44.17-ca-crac-jdk17.0.8-linux_x64.tar.gz\n\nENV JAVA_HOME /opt/zulu17.44.17-ca-crac-jdk17.0.8-linux_x64\nENV PATH $JAVA_HOME/bin:$PATH\n\nCOPY build/libs/my_app.jar /opt/app/my_app.jar Build the Docker image with:  docker build -t my_app_on_crac . Starting an Application in a Docker Container Run a Docker container with:  docker run -it --cap-add=CHECKPOINT_RESTORE --cap-add=SYS_PTRACE --rm --name my_app_on_crac \\\n    -v $PWD/crac-files:/opt/crac-files my_app_on_crac \\\n    java -XX:CRaCCheckpointTo=/opt/crac-files -jar /opt/app/my_app.jar Note In order to restore without additional capabilities (see below), you should make java to be PID 1 process. Leave the shell window open and the application running. Creating the Checkpoint Open another shell window. In this window run:  docker exec my_app_on_crac jcmd PID-OR-NAME JDK.checkpoint Note You can find PID or NAME to provide to jcmd by executing just jcmd in the container. If everything is ok, you see that in the first shell window the checkpoint was created and your application was closed. Creating a Docker Image with Checkpoint Create a Dockerfile with the checkpoint:  FROM my_app_on_crac\nCOPY crac-files /opt/crac-files Build the Docker image with  docker build -t my_app_on_crac_restore . Run the Docker Container From the Checkpoint Run:  docker run -it --rm --cap-add=SYS_RESOURCE my_app_on_crac_restore java \\\n    -XX:CRaCRestoreFrom=/opt/crac-files Your application now starts much faster from the saved checkpoint. Note A restore in an unprivileged container (without the SYS_RESOURCE capability) might succeed but we have identified some issues with stability related to the brk syscall; therefore it is strongly recommended to use this additional capability. NOTE: You can run the Docker container also on macOS or Windows, as long as the machine you are running it on has a x64 cpu architecture (Intel/AMD)."
}, {
  "objectID" : "04ef54d7-fbde-4cb2-b18d-6f06cfa52d3a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Creating a Docker Image",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#creating-a-docker-image",
  "content" : "Creating a Docker Image You need an application in a runnable JAR file. Create a Dockerfile, based on the following minimum file:  FROM ubuntu:20.04\n\nRUN apt-get update -y\n\nADD \"https://cdn.azul.com/zulu/bin/zulu17.44.17-ca-crac-jdk17.0.8-linux_x64.tar.gz\" /opt/\nRUN cd /opt/ && tar -xzf zulu17.44.17-ca-crac-jdk17.0.8-linux_x64.tar.gz && rm zulu17.44.17-ca-crac-jdk17.0.8-linux_x64.tar.gz\n\nENV JAVA_HOME /opt/zulu17.44.17-ca-crac-jdk17.0.8-linux_x64\nENV PATH $JAVA_HOME/bin:$PATH\n\nCOPY build/libs/my_app.jar /opt/app/my_app.jar Build the Docker image with:  docker build -t my_app_on_crac ."
}, {
  "objectID" : "99df0322-7f10-47c0-b110-726bd7d10d4e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Starting an Application in a Docker Container",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#starting-an-application-in-a-docker-container",
  "content" : "Starting an Application in a Docker Container Run a Docker container with:  docker run -it --cap-add=CHECKPOINT_RESTORE --cap-add=SYS_PTRACE --rm --name my_app_on_crac \\\n    -v $PWD/crac-files:/opt/crac-files my_app_on_crac \\\n    java -XX:CRaCCheckpointTo=/opt/crac-files -jar /opt/app/my_app.jar Note In order to restore without additional capabilities (see below), you should make java to be PID 1 process. Leave the shell window open and the application running."
}, {
  "objectID" : "632a761b-9f1d-4261-a346-e21ec258ea02",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Creating the Checkpoint",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#creating-the-checkpoint",
  "content" : "Creating the Checkpoint Open another shell window. In this window run:  docker exec my_app_on_crac jcmd PID-OR-NAME JDK.checkpoint Note You can find PID or NAME to provide to jcmd by executing just jcmd in the container. If everything is ok, you see that in the first shell window the checkpoint was created and your application was closed."
}, {
  "objectID" : "cd4e13c1-d272-41ad-af9e-82a6771a46d6",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Creating a Docker Image with Checkpoint",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#creating-a-docker-image-with-checkpoint",
  "content" : "Creating a Docker Image with Checkpoint Create a Dockerfile with the checkpoint:  FROM my_app_on_crac\nCOPY crac-files /opt/crac-files Build the Docker image with  docker build -t my_app_on_crac_restore ."
}, {
  "objectID" : "b201cb2d-c47a-4141-bde5-6b25840eb8db",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Run the Docker Container From the Checkpoint",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#run-the-docker-container-from-the-checkpoint",
  "content" : "Run the Docker Container From the Checkpoint Run:  docker run -it --rm --cap-add=SYS_RESOURCE my_app_on_crac_restore java \\\n    -XX:CRaCRestoreFrom=/opt/crac-files Your application now starts much faster from the saved checkpoint. Note A restore in an unprivileged container (without the SYS_RESOURCE capability) might succeed but we have identified some issues with stability related to the brk syscall; therefore it is strongly recommended to use this additional capability. NOTE: You can run the Docker container also on macOS or Windows, as long as the machine you are running it on has a x64 cpu architecture (Intel/AMD)."
}, {
  "objectID" : "66566c64-9f9c-48f0-8f23-259baa96b25b",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Running CRaC on Windows or macOS",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#running-crac-on-windows-or-macos",
  "content" : "Running CRaC on Windows or macOS You can test your CRaC application on Windows or macOS with one of the following approaches: Run your application in a virtualized Linux system, e.g. following the Docker approach described above. For instance, on macOS you can use Docker, Podman, Parallels, VirtualBox,… Use an Azul Zulu Build of OpenJDK with CRaC support for development purposes, available for Windows and macOS. These provide a simulated checkpoint/restore mechanism to be used for development and testing."
}, {
  "objectID" : "824b4afe-4f1b-4ac3-9116-7d6cc4319374",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Usage Guidelines",
  "section" : "Example Code",
  "url" : "https://docs.azul.com/core/crac/crac-guidelines",
  "link" : "https://docs.azul.com/core/crac/crac-guidelines#example-code",
  "content" : "Example Code Within the CRaC project on GitHub, a fully documented \"Step-by-step CRaC support for a Jetty app\" is provided."
}, {
  "objectID" : "549d14a3-3ff1-4863-8020-3efeff350e5f",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Tips and Tricks for CRaC",
  "section" : "",
  "url" : "https://docs.azul.com/core/crac/crac-tips-tricks",
  "link" : "https://docs.azul.com/core/crac/crac-tips-tricks",
  "content" : "This guide assumes you’re familiar with the concepts and API of CRaC, and how a checkpoint can be created and used. Please check out the \"Usage Guidelines\" first. Applications and its components often have a simple lifecycle. The application boots, then it is actively used, and in the end it enters shutdown and finally ends up in a terminated state, unable to start back. If the same functionality is needed again, the component is re-created. This allows simpler reasoning and some performance optimizations by making fields final, or not protecting the access to an uninitialized component as the developer knows that it is not published yet. While usually most of the application can stay as-is, the lifecycle of some components may need to implement the CRaC methods to transition from active to a suspended state and back. In the suspended state, until the whole VM is terminated or before the component is restored, the rest of the application can still be running and can access the component - e.g. a pool of network connections. At that moment, the component is unusable. One solution is to block the thread and unblock it when the component is ready to be used again. The implementation of this synchronization depends mostly on the threading model of the application. In this guide, the synchronized component is referred as resource, even though it might not implement the Resource interface directly."
}, {
  "objectID" : "fb22a2e4-7d56-49a4-a455-42681045e1f3",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Tips and Tricks for CRaC",
  "section" : "Implementing Resource as Inner Class",
  "url" : "https://docs.azul.com/core/crac/crac-tips-tricks",
  "link" : "https://docs.azul.com/core/crac/crac-tips-tricks#implementing-resource-as-inner-class",
  "content" : "Implementing Resource as Inner Class In order to encapsulate the functionality, the Resource interface is sometimes not implemented directly by the component, but in an (anonymous) inner class. However, it is not sufficient to pass this resource to the Context.register() method. Contexts usually hold references to resources using weak references. As there is no unregister method on the Context, a strong reference prevents the component from being garbage-collected when the application releases it. Therefore, the inner class needs to be stored inside the component (in a field) to prevent garbage-collection:  public class Component {\n    private final Resource cracHandler;\n\n    public Component() {\n        /* other initialization */\n        cracHandler = new Resource() {\n            @Override\n            public void beforeCheckpoint(Context<? extends Resource> context) {\n                /* ... */\n            }\n\n            @Override\n            public void afterRestore(Context<? extends Resource> context) {\n                /* ... */\n            }\n        }\n        /* When using just .register(new Resource() { ... }) in here\n           it would be immediately garbage-collected. */\n        Core.getGlobalContext().register(cracHandler);\n    }\n}"
}, {
  "objectID" : "19230223-3181-4981-9afe-d983d113409e",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Tips and Tricks for CRaC",
  "section" : "Common CRaC Patterns",
  "url" : "https://docs.azul.com/core/crac/crac-tips-tricks",
  "link" : "https://docs.azul.com/core/crac/crac-tips-tricks#common-crac-patterns",
  "content" : "Common CRaC Patterns Unknown Number of Threads Arriving Randomly When you don’t have any guarantees about who is calling into the resource, any access can be blocked with java.util.concurrent.ReadWriteLock. Any existing access to an object is guarded by the Read lock, introducing no changes to the way the object is used. However, beforeCheckpoint() acquires the Write lock, and afterRestore() releases the Write lock. Therefore, the idea of the pattern is to block the checkpoint until all regular accesses to the object are finished.  public class ConnectionPool implements Resource {\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n    private final Lock readLock = lock.readLock();\n    private final Lock writeLock = lock.writeLock();\n\n    /* Constructor registers this Resource */\n    public Connection getConnection() {\n        readLock.lock();\n        try {\n            /* actual code fetching the connection */\n            /* In this example the access to the connection itself\n               is not protected and the application must be able\n               to handle a closed connection. */\n        } finally {\n            readLock.unlock();\n        }\n    }\n\n    @Override\n    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n        writeLock.lock();\n        /* close all connections */\n        /* Note: if this method throws an exception CRaC will try\n        to restore the resource by calling afterRestore() -\n        no need to unlock the lock here */\n    }\n\n    @Override\n    public void afterRestore(Context<? extends Resource> context) throws Exception {\n        try {\n            /* initialize connections if needed */\n        } finally {\n            writeLock.unlock();\n        }\n    }\n} This solution has the obvious drawback of adding contention on the hot path, the getConnection() method. Even though the readers won’t block each other, the implementation of read locking likely has to perform some atomic writes which aren’t cost-free. CRaC might eventually provide an optimized version for this read-write locking pattern that would move most of the cost to the write lock as this removes the need to optimize for checkpoint performance. One or Known Number of Periodically Arriving Threads When there is only a single thread, e.g. fetching a task from a queue, or a known number of parties that arrive to the component often enough, a more efficient solution can be used. The following example shows the use of a resource that logs data to a file, and assumes that the checkpoint notifications are invoked from another thread. This is the case when the checkpoint creation is triggered through jcmd <pid> JDK.checkpoint. java.util.concurrent.Phaser is used because it has a non-interruptible version of waiting.  public class Logger implements Resource {\n    private final int N = 1; // number of threads calling write()\n    private volatile Phaser phaser;\n\n    public void write(Chunk data) throws IOException {\n        checkForCheckpoint();\n        /* do the actual write */\n    }\n\n    public void checkForCheckpoint() throws IOException {\n        Phaser phaser = this.phaser;\n        if (phaser != null) {\n            if (phaser.arriveAndAwaitAdvance() < 0) {\n                throw new IllegalStateException(\"Shouldn't terminate here\");\n            }\n            /* now the resource is suspended */\n            if (phaser.arriveAndAwaitAdvance() < 0) {\n                throw new IOException(\"File could not be open after restore\");\n            }\n        }\n    }\n\n    @Override\n    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n        phaser = new Phaser(N + 1); // +1 for self\n        phaser.arriveAndAwaitAdvance();\n        /* close file being written */\n    }\n\n    @Override\n    public void afterRestore(Context<? extends Resource> context) throws Exception {\n        Phaser phaser = this.phaser;\n        this.phaser = null;\n        try {\n            /* reopen the file */\n            phaser.arriveAndAwaitAdvance();\n        } catch (Exception e) {\n            phaser.forceTermination();\n            throw e;\n        }\n    }\n} Only one volatile read is required for synchronization on each write() call, which is generally a cheap operation. However, if one of the expected threads is waiting for a long time, the checkpoint would be blocked. This can be mitigated by using shorter timeouts (e.g. if the thread is polling a queue) or even actively interrupting it from the beforeCheckpoint method. Event Loop Model In case there is a single thread doing request processing, it’s possible to synchronize its execution with the checkpoint. The idea of this pattern is to schedule the work that will quiescent the thread on the checkpoint, and block the checkpoint until the work is encountered. The body of the work should unblock the checkpoint and keep the processing thread in the quiescent state until the restore is complete. The following example shows a resource sending a heartbeat message.  public class HeartbeatManager implements Runnable, Resource {\n    public final ScheduledExecutorService eventloop; // single-threaded\n    public boolean suspended;\n\n    public HeartbeatManager(Executor eventloop) {\n        eventloop.scheduleAtFixedRate(this, 0, 1, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public void run() {\n        /* send heartbeat message */\n    }\n\n    @Override\n    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n        synchronized (this) {\n            HeartbeatManager self = this;\n            executor.execute(() -> {\n                synchronized (self) {\n                    self.suspended = true;\n                    self.notify();\n                    while (self.suspended) {\n                        self.wait();\n                    }\n                }\n            })\n            while (!suspended) {\n                wait();\n            }\n        }\n        /* shutdown */\n    }\n\n    @Override\n    public void afterRestore(Context<? extends Resource> context) throws Exception {\n        /* restore */\n        synchronized (this) {\n            suspended = false;\n            notify();\n        }\n    }\n} Beware that if the single-threaded executor is shared between several components this solution is not applicable in the current form as one resource would block and the others would not be able to get suspended. In this case, it makes sense to centralize the control into one resource per executor, but this is out of scope of this document. Also note one detail in the example above: if the application is stopped for a long time the task scheduled by the ScheduledExecutorService.scheduleAtFixedRate(…) tries to keep up after restore and perform all the missed invocations. Handling this behavior, must be a part of the beforeCheckpoint procedure, cancelling the task and rescheduling it again in afterRestore."
}, {
  "objectID" : "d751adbc-93bf-4c30-a6d4-6d5a91f222ca",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Tips and Tricks for CRaC",
  "section" : "Unknown Number of Threads Arriving Randomly",
  "url" : "https://docs.azul.com/core/crac/crac-tips-tricks",
  "link" : "https://docs.azul.com/core/crac/crac-tips-tricks#unknown-number-of-threads-arriving-randomly",
  "content" : "Unknown Number of Threads Arriving Randomly When you don’t have any guarantees about who is calling into the resource, any access can be blocked with java.util.concurrent.ReadWriteLock. Any existing access to an object is guarded by the Read lock, introducing no changes to the way the object is used. However, beforeCheckpoint() acquires the Write lock, and afterRestore() releases the Write lock. Therefore, the idea of the pattern is to block the checkpoint until all regular accesses to the object are finished.  public class ConnectionPool implements Resource {\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n    private final Lock readLock = lock.readLock();\n    private final Lock writeLock = lock.writeLock();\n\n    /* Constructor registers this Resource */\n    public Connection getConnection() {\n        readLock.lock();\n        try {\n            /* actual code fetching the connection */\n            /* In this example the access to the connection itself\n               is not protected and the application must be able\n               to handle a closed connection. */\n        } finally {\n            readLock.unlock();\n        }\n    }\n\n    @Override\n    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n        writeLock.lock();\n        /* close all connections */\n        /* Note: if this method throws an exception CRaC will try\n        to restore the resource by calling afterRestore() -\n        no need to unlock the lock here */\n    }\n\n    @Override\n    public void afterRestore(Context<? extends Resource> context) throws Exception {\n        try {\n            /* initialize connections if needed */\n        } finally {\n            writeLock.unlock();\n        }\n    }\n} This solution has the obvious drawback of adding contention on the hot path, the getConnection() method. Even though the readers won’t block each other, the implementation of read locking likely has to perform some atomic writes which aren’t cost-free. CRaC might eventually provide an optimized version for this read-write locking pattern that would move most of the cost to the write lock as this removes the need to optimize for checkpoint performance."
}, {
  "objectID" : "c4119330-8e7d-47fb-9890-cd883a543109",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Tips and Tricks for CRaC",
  "section" : "One or Known Number of Periodically Arriving Threads",
  "url" : "https://docs.azul.com/core/crac/crac-tips-tricks",
  "link" : "https://docs.azul.com/core/crac/crac-tips-tricks#one-or-known-number-of-periodically-arriving-threads",
  "content" : "One or Known Number of Periodically Arriving Threads When there is only a single thread, e.g. fetching a task from a queue, or a known number of parties that arrive to the component often enough, a more efficient solution can be used. The following example shows the use of a resource that logs data to a file, and assumes that the checkpoint notifications are invoked from another thread. This is the case when the checkpoint creation is triggered through jcmd <pid> JDK.checkpoint. java.util.concurrent.Phaser is used because it has a non-interruptible version of waiting.  public class Logger implements Resource {\n    private final int N = 1; // number of threads calling write()\n    private volatile Phaser phaser;\n\n    public void write(Chunk data) throws IOException {\n        checkForCheckpoint();\n        /* do the actual write */\n    }\n\n    public void checkForCheckpoint() throws IOException {\n        Phaser phaser = this.phaser;\n        if (phaser != null) {\n            if (phaser.arriveAndAwaitAdvance() < 0) {\n                throw new IllegalStateException(\"Shouldn't terminate here\");\n            }\n            /* now the resource is suspended */\n            if (phaser.arriveAndAwaitAdvance() < 0) {\n                throw new IOException(\"File could not be open after restore\");\n            }\n        }\n    }\n\n    @Override\n    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n        phaser = new Phaser(N + 1); // +1 for self\n        phaser.arriveAndAwaitAdvance();\n        /* close file being written */\n    }\n\n    @Override\n    public void afterRestore(Context<? extends Resource> context) throws Exception {\n        Phaser phaser = this.phaser;\n        this.phaser = null;\n        try {\n            /* reopen the file */\n            phaser.arriveAndAwaitAdvance();\n        } catch (Exception e) {\n            phaser.forceTermination();\n            throw e;\n        }\n    }\n} Only one volatile read is required for synchronization on each write() call, which is generally a cheap operation. However, if one of the expected threads is waiting for a long time, the checkpoint would be blocked. This can be mitigated by using shorter timeouts (e.g. if the thread is polling a queue) or even actively interrupting it from the beforeCheckpoint method."
}, {
  "objectID" : "1bc125c9-727e-4d0e-b3c5-1848d41c0534",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Tips and Tricks for CRaC",
  "section" : "Event Loop Model",
  "url" : "https://docs.azul.com/core/crac/crac-tips-tricks",
  "link" : "https://docs.azul.com/core/crac/crac-tips-tricks#event-loop-model",
  "content" : "Event Loop Model In case there is a single thread doing request processing, it’s possible to synchronize its execution with the checkpoint. The idea of this pattern is to schedule the work that will quiescent the thread on the checkpoint, and block the checkpoint until the work is encountered. The body of the work should unblock the checkpoint and keep the processing thread in the quiescent state until the restore is complete. The following example shows a resource sending a heartbeat message.  public class HeartbeatManager implements Runnable, Resource {\n    public final ScheduledExecutorService eventloop; // single-threaded\n    public boolean suspended;\n\n    public HeartbeatManager(Executor eventloop) {\n        eventloop.scheduleAtFixedRate(this, 0, 1, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public void run() {\n        /* send heartbeat message */\n    }\n\n    @Override\n    public void beforeCheckpoint(Context<? extends Resource> context) throws Exception {\n        synchronized (this) {\n            HeartbeatManager self = this;\n            executor.execute(() -> {\n                synchronized (self) {\n                    self.suspended = true;\n                    self.notify();\n                    while (self.suspended) {\n                        self.wait();\n                    }\n                }\n            })\n            while (!suspended) {\n                wait();\n            }\n        }\n        /* shutdown */\n    }\n\n    @Override\n    public void afterRestore(Context<? extends Resource> context) throws Exception {\n        /* restore */\n        synchronized (this) {\n            suspended = false;\n            notify();\n        }\n    }\n} Beware that if the single-threaded executor is shared between several components this solution is not applicable in the current form as one resource would block and the others would not be able to get suspended. In this case, it makes sense to centralize the control into one resource per executor, but this is out of scope of this document. Also note one detail in the example above: if the application is stopped for a long time the task scheduled by the ScheduledExecutorService.scheduleAtFixedRate(…) tries to keep up after restore and perform all the missed invocations. Handling this behavior, must be a part of the beforeCheckpoint procedure, cancelling the task and rescheduling it again in afterRestore."
}, {
  "objectID" : "8ec5667d-ae7b-49be-beae-8f4181e33b73",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Exceptions",
  "section" : "CheckpointOpenSocketException",
  "url" : "https://docs.azul.com/core/crac/crac-errors",
  "link" : "https://docs.azul.com/core/crac/crac-errors#checkpointopensocketexception",
  "content" : "CheckpointOpenSocketException The checkpoint can’t be created because there is a listening socket. The exception may be reported several times, for each socket independently. The exception message specifies socket local and remote address and port.  CheckpointOpenSocketException: tcp6 localAddr :: localPort 8080 remoteAddr :: remotePort 0"
}, {
  "objectID" : "7922750a-5f2d-427b-a416-c65ddb2a411a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Exceptions",
  "section" : "CheckpointOpenFileException",
  "url" : "https://docs.azul.com/core/crac/crac-errors",
  "link" : "https://docs.azul.com/core/crac/crac-errors#checkpointopenfileexception",
  "content" : "CheckpointOpenFileException The checkpoint can’t be created because there is an open file. The exception message specifies the path to the file.  CheckpointOpenFileException: /home/user/someFile.txt"
}, {
  "objectID" : "4e2f67a2-4a3c-4344-bf54-29dcdf7d4dc3",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Coordinated Restore at Checkpoint Exceptions",
  "section" : "CheckpointOpenResourceException",
  "url" : "https://docs.azul.com/core/crac/crac-errors",
  "link" : "https://docs.azul.com/core/crac/crac-errors#checkpointopenresourceexception",
  "content" : "CheckpointOpenResourceException There is some native resource open that is not socket nor file."
}, {
  "objectID" : "714c25fe-277d-450e-b42b-b523ee910daa",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Debugging Coordinated Restore at Checkpoint Failures",
  "section" : "",
  "url" : "https://docs.azul.com/core/crac/crac-debugging",
  "link" : "https://docs.azul.com/core/crac/crac-debugging",
  "content" : "This guide will help you identify common problems that can occur in the current version of CRaC, when the checkpoint operation does not work. Note CRaC is currently in an early stage and is being continuously improved. Some of the problems presented here, will be solved in the framework itself at a later point."
}, {
  "objectID" : "faabab87-de64-4d82-8ccb-43646a5d3550",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Debugging Coordinated Restore at Checkpoint Failures",
  "section" : "Failures in Native Checkpoint or Restore",
  "url" : "https://docs.azul.com/core/crac/crac-debugging",
  "link" : "https://docs.azul.com/core/crac/crac-debugging#failures-in-native-checkpoint-or-restore",
  "content" : "Failures in Native Checkpoint or Restore When the checkpoint operation fails in the native part, there is usually little information in the stack trace of the exception:  CR: Checkpoint ...\nJVM: invalid info for restore provided: queued code -1\nException in thread \"main\" jdk.crac.CheckpointException\n\tat java.base/jdk.crac.Core.checkpointRestore1(Core.java:159)\n\tat java.base/jdk.crac.Core.checkpointRestore(Core.java:264)\n\tat java.base/jdk.crac.Core.checkpointRestore(Core.java:249)\n\tat Main.main(Main.java:6) Currently, the creating and restore of checkpoints depends on the CRIU project, particularly on the CRaC fork. This requires extensive privileges (capabilities) and therefore usually runs as root granted through the SUID bit. Therefore, you first need to check whether this is true:  $ ls -la $JAVA_HOME/lib/criu\n-rwsr-xr-x 1 root root 6347736 Mar 24 16:33 /opt/openjdk-17-crac+5_linux-x64/lib/criu\n   ^         ^\n   |         Check that the file is owned by the root user\n   Check that the SUID bit is set If this is not the case, you need to update it with the following commands:  sudo chown root:root /path/to/criu\nsudo chmod u+s /path/to/criu This might not be sufficient if Java is running in a container; checkpoint requires running it with the --privileged flag (or --cap-add all). Restore can be executed without these privileges under root user. When you confirm that this is set correctly but the checkpoint still fails, you can get additional insight from the dump4.log file located in the image directory (-XX:CRaCCheckpointTo)."
}, {
  "objectID" : "cac49235-c1d6-4e7b-b609-a06778cfb0fd",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Debugging Coordinated Restore at Checkpoint Failures",
  "section" : "File Descriptors in Java Code",
  "url" : "https://docs.azul.com/core/crac/crac-debugging",
  "link" : "https://docs.azul.com/core/crac/crac-debugging#file-descriptors-in-java-code",
  "content" : "File Descriptors in Java Code Before the checkpoint can be created, the application has to isolate itself from the outer world: this means closing all file descriptors except the standard input, output and error, and few other (e.g. pointing to JDK or files on the classpath). If the application fails to do, the checkpoint fails with an exception like below:  Exception in thread \"main\" jdk.crac.CheckpointException\n\tat java.base/jdk.crac.Core.checkpointRestore1(Core.java:129)\n\tat java.base/jdk.crac.Core.checkpointRestore(Core.java:264)\n\tat java.base/jdk.crac.Core.checkpointRestore(Core.java:249)\n\tat ... (application code)\n\tSuppressed: jdk.crac.impl.CheckpointOpenFileException: FileDescriptor 4 left open: /foo/bar (regular) Use -Djdk.crac.collect-fd-stacktraces=true to find the source.\n\t\tat java.base/java.io.FileDescriptor.beforeCheckpoint(FileDescriptor.java:391)\n\t\tat java.base/java.io.FileDescriptor$Resource.beforeCheckpoint(FileDescriptor.java:84)\n\t\tat java.base/jdk.crac.impl.PriorityContext$SubContext.invokeBeforeCheckpoint(PriorityContext.java:107)\n\t\tat java.base/jdk.crac.impl.OrderedContext.runBeforeCheckpoint(OrderedContext.java:70)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.beforeCheckpoint(AbstractContextImpl.java:81)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.invokeBeforeCheckpoint(AbstractContextImpl.java:41)\n\t\tat java.base/jdk.crac.impl.PriorityContext.runBeforeCheckpoint(PriorityContext.java:70)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.beforeCheckpoint(AbstractContextImpl.java:81)\n\t\tat java.base/jdk.internal.crac.JDKContext.beforeCheckpoint(JDKContext.java:97)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.invokeBeforeCheckpoint(AbstractContextImpl.java:41)\n\t\tat java.base/jdk.crac.impl.OrderedContext.runBeforeCheckpoint(OrderedContext.java:70)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.beforeCheckpoint(AbstractContextImpl.java:81)\n\t\tat java.base/jdk.crac.Core.checkpointRestore1(Core.java:127)\n\t\t... 5 more The top level CheckpointException wraps all problems as its suppressed exceptions. Here we can see that having file /foo/bar open as FileDescriptor 4 prevents the checkpoint but unless we know what part of the application opens this file there is not anything actionable. Therefore, we will run this with -Djdk.crac.collect-fd-stacktraces=true as the exception message suggests:  Exception in thread \"main\" jdk.crac.CheckpointException\n\tat java.base/jdk.crac.Core.checkpointRestore1(Core.java:129)\n\tat java.base/jdk.crac.Core.checkpointRestore(Core.java:264)\n\tat java.base/jdk.crac.Core.checkpointRestore(Core.java:249)\n\tat ... (application code)\n\tSuppressed: jdk.crac.impl.CheckpointOpenFileException: FileDescriptor 4 left open: /etc/passwd (regular)\n\t\tat java.base/java.io.FileDescriptor.beforeCheckpoint(FileDescriptor.java:391)\n\t\tat java.base/java.io.FileDescriptor$Resource.beforeCheckpoint(FileDescriptor.java:84)\n\t\tat java.base/jdk.crac.impl.PriorityContext$SubContext.invokeBeforeCheckpoint(PriorityContext.java:107)\n\t\tat java.base/jdk.crac.impl.OrderedContext.runBeforeCheckpoint(OrderedContext.java:70)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.beforeCheckpoint(AbstractContextImpl.java:81)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.invokeBeforeCheckpoint(AbstractContextImpl.java:41)\n\t\tat java.base/jdk.crac.impl.PriorityContext.runBeforeCheckpoint(PriorityContext.java:70)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.beforeCheckpoint(AbstractContextImpl.java:81)\n\t\tat java.base/jdk.internal.crac.JDKContext.beforeCheckpoint(JDKContext.java:97)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.invokeBeforeCheckpoint(AbstractContextImpl.java:41)\n\t\tat java.base/jdk.crac.impl.OrderedContext.runBeforeCheckpoint(OrderedContext.java:70)\n\t\tat java.base/jdk.crac.impl.AbstractContextImpl.beforeCheckpoint(AbstractContextImpl.java:81)\n\t\tat java.base/jdk.crac.Core.checkpointRestore1(Core.java:127)\n\t\t... 5 more\n\tCaused by: java.lang.Exception: This file descriptor was created by main at epoch:1684328308663 here\n\t\tat java.base/java.io.FileDescriptor$Resource.<init>(FileDescriptor.java:75)\n\t\tat java.base/java.io.FileDescriptor.<init>(FileDescriptor.java:104)\n\t\tat java.base/java.io.FileInputStream.<init>(FileInputStream.java:154)\n\t\tat java.base/java.io.FileInputStream.<init>(FileInputStream.java:111)\n\t\tat java.base/java.io.FileReader.<init>(FileReader.java:60)\n\t\tat ... (application code calling new FileReader(\"/foo/bar\") )\n\t\t... 2 more The cause is recorded when the FileDescriptor is opened. The message shows the thread name (main) and epoch timestamp. Some FileDescriptors are open early during the VM initialization when it is not possible to format the timestamp to a human-readable format. This information can help you identify the component that does not close the FileDescriptor during checkpoint."
}, {
  "objectID" : "0aaf0edf-8ac1-46dc-ab82-9974a022043c",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Debugging Coordinated Restore at Checkpoint Failures",
  "section" : "File Descriptors in Native Code",
  "url" : "https://docs.azul.com/core/crac/crac-debugging",
  "link" : "https://docs.azul.com/core/crac/crac-debugging#file-descriptors-in-native-code",
  "content" : "File Descriptors in Native Code When the file descriptor is opened without assisting FileDescriptor instance, CRaC still discovers this before the checkpoint but won’t display any stack trace:  Exception in thread \"main\" jdk.crac.CheckpointException\n\tat java.base/jdk.crac.Core.checkpointRestore1(Core.java:159)\n\tat java.base/jdk.crac.Core.checkpointRestore(Core.java:264)\n\tat java.base/jdk.crac.Core.checkpointRestore(Core.java:249)\n\tat ... (application code)\n\tSuppressed: jdk.crac.impl.CheckpointOpenResourceException: FD fd=4 type=fifo path=pipe:[8953321]\n\t\tat java.base/jdk.crac.Core.translateJVMExceptions(Core.java:102)\n\t\tat java.base/jdk.crac.Core.checkpointRestore1(Core.java:163)\n\t\t... 5 more In this case, you need to find the source of the syscall returning the new file descriptor in native code. One tool that can help, is strace:  strace -f -o /tmp/strace.txt java ... This will follow forking process/thread (-f) and store the log in /tmp/strace.txt. With this approach, in the following example, you can find that FileDescriptors 4 and 5 were created through the pipe2 syscall:  1204483 pipe2([4, 5], 0)                = 0\n1204483 fcntl(4, F_GETFL)               = 0 (flags O_RDONLY)\n1204483 fcntl(4, F_SETFL, O_RDONLY|O_NONBLOCK) = 0\n1204483 fcntl(5, F_GETFL)               = 0x1 (flags O_WRONLY)\n1204483 fcntl(5, F_SETFL, O_WRONLY|O_NONBLOCK) = 0 Other common system calls that are opening file descriptors are e.g. openat, dup or dup2. By running strace once more, with filtering only one syscall (-e pipe2), and recording stacks (-k):  strace -f -o /tmp/strace.txt -e pipe2 -k java ...\n\n1204650 pipe2([4, 5], 0)                = 0\n > /usr/lib/x86_64-linux-gnu/libc.so.6(pipe+0xd) [0x11522d]\n > /path/to/my/jdk/lib/libnio.so() [0x84bf]\n > unexpected_backtracing_error [0x7f2f1140f6cb] This result shows that the pipe method was called from libnio.so. In this example, using a debug build of JDK which still has symbols, we can find the function with address 0x84bf:  objdump -d --start-address 0x84bf /path/to/my/jdk/lib/libnio.so | head\n/path/to/my/jdk/lib/libnio.so:     file format elf64-x86-64\nDisassembly of section .text:\n00000000000084bf <Java_sun_nio_ch_IOUtil_makePipe+0x1f>:\n    84bf:\t85 c0                \ttest   %eax,%eax\n    84c1:\t0f 88 c1 00 00 00    \tjs     8588 <Java_sun_nio_ch_IOUtil_makePipe+0xe8>\n    84c7:\t44 8b 65 d8          \tmov    -0x28(%rbp),%r12d Here we can track down the invocation to native method makePipe() in sun.nio.ch.IOUtil. You can debug your application putting a breakpoint on that method and find the rest of the Java call stack, or manually check all the usages."
}, {
  "objectID" : "d48c5cda-8b0a-4df6-8b98-5d3ddba52ebc",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Debugging Coordinated Restore at Checkpoint Failures",
  "section" : "Restore Conflict of PIDs",
  "url" : "https://docs.azul.com/core/crac/crac-debugging",
  "link" : "https://docs.azul.com/core/crac/crac-debugging#restore-conflict-of-pids",
  "content" : "Restore Conflict of PIDs Errors can also happen during restore. While on baremetal the deployment PIDs usually don’t clash, in containers starting from PID 1, this is more likely. Such an error looks like this:  Error (criu/cr-restore.c:1506): Can't fork for 9: File exists\nError (criu/cr-restore.c:2593): Restoring FAILED. The message is a bit misleading: the error is not related to files. In this example, CRIU tried to restore a process or thread with PID 9 but found that there is already an existing process/thread with this PID. If you check ps faux it’s possible that you won’t find that process - the restore itself spins up some processes that could clash and die due to unsuccessful restore. If the clash happens due to restoring a process, it might be sufficient to attempt the restore several times, until there is no conflict. The error above should not be confused with another one:  Error (criu/cr-restore.c:1506): Can't fork for 9: Read-only file system\nError (criu/cr-restore.c:2593): Restoring FAILED.\nError (criu/cr-restore.c:1823): Pid 20 do not match expected 9 This is rather a sign that CRIU has insufficient privileges to write into ns_last_pid and/or call clone3, a syscall forking the process with a specific PID. CRIU can work around the missing permissions if it can cycle up to the desired PID, but if it is lower than the current PID, it won’t cycle through the full range set in the operating system. One trick that can be used in containers is to ensure that before the checkpoint, PIDs are higher than anything needed for the restore, either writing /proc/sys/kernel/ns_last_pid or cycling dummy processes until ns_last_pid is higher than the required value (128 might be a good starting point). More info about how PIDs are handled in a CRaC checkpoint/restore flow, is described in the Anatomy of CRaC Processes."
}, {
  "objectID" : "7ce10647-06b2-43e5-aa42-4396cd943407",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Debugging Coordinated Restore at Checkpoint Failures",
  "section" : "CPU Features",
  "url" : "https://docs.azul.com/core/crac/crac-debugging",
  "link" : "https://docs.azul.com/core/crac/crac-debugging#cpu-features",
  "content" : "CPU Features When running checkpoint and restore on different computers, you may see an error message during restore:  You have to specify -XX:CPUFeatures=[...] together with -XX:CRaCCheckpointTo when making a checkpoint file; specified -XX:CRaCRestoreFrom file contains CPU features [...]; missing features of this CPU are [...] See more details about the CPU Features configuration."
}, {
  "objectID" : "8c5d6f5a-eb01-484a-befc-046846d9e4b3",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Debugging Coordinated Restore at Checkpoint Failures",
  "section" : "Failure During Restore After a System Update",
  "url" : "https://docs.azul.com/core/crac/crac-debugging",
  "link" : "https://docs.azul.com/core/crac/crac-debugging#failure-during-restore-after-a-system-update",
  "content" : "Failure During Restore After a System Update After an update of the operating system, a checkpoint created before the update, can fail to restore. This can be caused by various changes in the underlying system used to create a checkpoint. In such a case, a new checkpoint must be created with the latest version of the operating system."
}, {
  "objectID" : "e84b8839-c4c8-449c-a54b-e8d729785454",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Debugging Coordinated Restore at Checkpoint Failures",
  "section" : "Further Debugging of Restore",
  "url" : "https://docs.azul.com/core/crac/crac-debugging",
  "link" : "https://docs.azul.com/core/crac/crac-debugging#further-debugging-of-restore",
  "content" : "Further Debugging of Restore During restore CRIU writes its log into standard output with errors-only verbosity level (1). Debug-level (4) output can be enabled using this VM option to pass extra options to CRIU: -XX:CREngine=criuengine,--verbosity=4,--log-file=/path/to/log.txt."
}, {
  "objectID" : "c4d9b206-19b6-4a2a-ac10-623f81290856",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Debugging Coordinated Restore at Checkpoint Failures",
  "section" : "Workarounds",
  "url" : "https://docs.azul.com/core/crac/crac-debugging",
  "link" : "https://docs.azul.com/core/crac/crac-debugging#workarounds",
  "content" : "Workarounds Sometimes it might be difficult to alter the application to properly coordinate with the checkpoint (e.g. due to a code in a library you cannot modify). As a temporary workaround you can configure file descriptor policies."
}, {
  "objectID" : "03c4b72b-7eb1-419b-ab05-7b2c25c188c1",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "File Descriptor Policies",
  "section" : "",
  "url" : "https://docs.azul.com/core/crac/fd-policies",
  "link" : "https://docs.azul.com/core/crac/fd-policies",
  "content" : "Note File Descriptors are available since zulu17.46, zulu21.30 (October 2023). CRaC requires that the application closes all open files, network connections etc. On Linux these are represented as file descriptors. However, it might be difficult to alter the application to properly coordinate with the checkpoint, e.g. due to a code in a library you cannot modify. In those cases, CRaC offers a limited handling via configuration. Note The configuration described here is experimental and work-in-progress functionality, to get feedback from you as a user. Please contact Azul Support ([email protected]) when you discover problems or have ideas for further improvements. The configuration is set up by pointing the system property jdk.crac.resource-policies to a file that consists of several rules separated by three dashes (---). Lines starting with the hash sign (#) are ignored. Each rule consists of several key: value pairs. This is actually a subset of YAML format, so we suggest that you use the .yaml or .yml extension for convenient use in an editor. Note What is described here, only applies to file descriptors opened through the JDK API. Anything opened through native code, cannot be handled this way. See an example of this file:  type: file\npath: /path/to/my/file\naction: close\n---\n# Here is some comment\ntype: FILE\npath: **/*.log\naction: reopen Each rule has two mandatory properties: type and action, with case-insensitive values. Available types are: file: A file (or directory) on a local filesystem. pipe: An anonymous pipe - named pipes are handled using the type file. socket: Network (TCP, UDP, …) or unix socket. filedescriptor: Raw file descriptor that cannot be identified by any of the above. The order of rules in the file is important; for each file descriptor that is found open, the first matching rule will be applied, any subsequent rules are ignored."
}, {
  "objectID" : "0352b31a-cab8-4a10-8fbe-16cc94c9eec7",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "File Descriptor Policies",
  "section" : "Files",
  "url" : "https://docs.azul.com/core/crac/fd-policies",
  "link" : "https://docs.azul.com/core/crac/fd-policies#files",
  "content" : "Files As the first example shows, files can be selected using the path property. This supports 'glob' pattern matching. See java.nio.file.FileSystem.getPathMatcher() JavaDoc for detailed usage. These are the possible actions: error: The default action, just print error and fail the checkpoint. ignore: Leave handling of the open file to C/R engine (CRIU). This will likely validate and reopen the file on restore. close: Close the file. An attempt to use it after restore will fail with runtime exception. reopen: Close the file, and try to reopen it (on the same position) after restore. Unless the action is error, any file that is found open, will trigger a warning to be printed to the logging system. This can be suppressed with the warn: false property."
}, {
  "objectID" : "bbcf9c1f-3180-4d60-bfb6-f160d54c54b5",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "File Descriptor Policies",
  "section" : "Pipes",
  "url" : "https://docs.azul.com/core/crac/fd-policies",
  "link" : "https://docs.azul.com/core/crac/fd-policies#pipes",
  "content" : "Pipes Anonymous pipes don’t have any means to identify, therefore it makes sense to have at most one rule for these. Available actions are error, ignore and close with the same meaning as for files."
}, {
  "objectID" : "500975ab-0312-47ea-9f3c-dee45e3497dd",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "File Descriptor Policies",
  "section" : "Sockets",
  "url" : "https://docs.azul.com/core/crac/fd-policies",
  "link" : "https://docs.azul.com/core/crac/fd-policies#sockets",
  "content" : "Sockets The rule can be refined using one of these properties: family: ipv6 or inet6 for IPv6 sockets, ipv4 or inet4 for IPv4 sockets, ip or inet for any IPv4/IPv6, unix for Unix domain sockets. localAddress and remoteAddress: * could be used for any bound address. localPort and remotePort: Numeric port, * matches any port. localPath and remotePath: For Unix sockets, supports 'glob' pattern matching. Actions error, ignore and close apply as in the previous cases. It is possible to use the action reopen, too - this will close the socket before checkpoint, but the reopening part is not implemented, therefore will result in a runtime exception after restore. Eventually this will be implemented for listening sockets."
}, {
  "objectID" : "ca80cb0a-6f01-474e-9c3f-0a2137566f41",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "File Descriptor Policies",
  "section" : "Raw File Descriptors",
  "url" : "https://docs.azul.com/core/crac/fd-policies",
  "link" : "https://docs.azul.com/core/crac/fd-policies#raw-file-descriptors",
  "content" : "Raw File Descriptors In some cases you might find that a file descriptor was created without a matching higher-level object (e.g. FileOutputStream). Such descriptor can be identified either with its numeric value, using value: 123, or matching its native description: regex: .*something.* following the java.util.regex.Pattern.compile() syntax. For raw descriptors, only the error, ignore and close actions are available."
}, {
  "objectID" : "bf97b49d-a329-44c6-b1f3-dc14a7bff1a8",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features",
  "content" : "Note CPU Features are available since zulu17.46, zulu21.30 (October 2023). CPU features differ from host to host as newer CPUs offer support for newer instructions, and some optional features may be removed over time. The JVM (Java Virtual Machine) depends on CPU features (such as AVX512, SSE3, etc.) of each computer it is running on. The more CPU features JVM can use, the better performance it can provide. JVM normally uses all the CPU features it can find on the CPU where it has started. CRaC unfortunately cannot reconfigure an already running JVM to stop using some of the CPU features when being restored on a CPU which is missing those features."
}, {
  "objectID" : "401a3dd4-46ee-445c-a606-98c4266628b4",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "Generic Target",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#generic-target",
  "content" : "Generic Target You can specify the most generic CPU target by providing -XX:CPUFeatures=generic for checkpoint. The VM will use only features available on every x86-64 CPU. Note The generic target will prevent using even available CPU features, thus it brings performance impact. To avoid performance impact associated with generic, you can follow the advice printed by the VM and specify an exact feature set as detected on the target machine."
}, {
  "objectID" : "1934ff10-f3a3-48c9-bed8-aee9dc2165c7",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "Specifying CPU Features",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#specifying-cpu-features",
  "content" : "Specifying CPU Features You may create a snapshot (-XX:CRaCCheckpointTo=PATH) on a newer computer and restore it (-XX:CRaCRestoreFrom=PATH) on an older computer. In such case you may see, during restore, a variant of this error message:  $JAVA_HOME/bin/java -XX:CRaCRestoreFrom=cr\nYou have to specify -XX:CPUFeatures=0x21421801fcfbd7,0x3e6 together with -XX:CRaCCheckpointTo when making a checkpoint file; specified -XX:CRaCRestoreFrom file contains CPU features 0x4ff7fff9dfcfbf7,0x3e6; missing features of this CPU are 0x4de3de79c000020,0x0 = 3dnowpref, adx, avx512f, avx512dq, avx512cd, avx512bw, avx512vl, sha, avx512_vpopcntdq, avx512_vpclmulqdq, avx512_vaes, avx512_vnni, clflushopt, clwb, avx512_vbmi2, avx512_vbmi, rdpid, fsrm, gfni, avx512_bitalg, pku, ospke, avx512_ifma\nIf you are sure it will not crash you can override this check by -XX:+UnlockExperimentalVMOptions -XX:+IgnoreCPUFeatures .\n<JVM exits here> Just follow the advice from the complaining system running -XX:CRaCRestoreFrom=PATH when configuring the initial system creating the snapshot (-XX:CRaCCheckpointTo=PATH).  $JAVA_HOME/bin/java -XX:CRaCCheckpointTo=cr \\\n    -XX:CPUFeatures=0x21421801fcfbd7,0x3e6 \\\n    -jar target/spring-boot-0.0.1-SNAPSHOT.jar"
}, {
  "objectID" : "e888e710-3665-48f9-acd8-5552b62c4efd",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "Merging CPU Features",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#merging-cpu-features",
  "content" : "Merging CPU Features If you restore the CRaC image on computers with different CPU features, you may need to use logical and (&) of the suggested -XX:CPUFeatures option.  # Computer A used for an image restore:\nYou have to specify -XX:CPUFeatures=0x21421801fcfbd7,0x3e6 together with -XX:CRaCCheckpointTo when making a checkpoint file; [...]\n\n# Computer B used for an image restore:\nYou have to specify -XX:CPUFeatures=0x4b03c643c9869,0x173 together with -XX:CRaCCheckpointTo when making a checkpoint file; [...]\n\n# Compute common minimal set of features of computers A and B:\npython -c 'print(hex(0x21421801fcfbd7 & 0x4b03c643c9869)+\",\"+hex(0x3e6 & 0x173));'\n0x18003c9841,0x162\n\n# Computer used for the image snapshot:\n$JAVA_HOME/bin/java -XX:CRaCCheckpointTo=cr -XX:CPUFeatures=0x18003c9841,0x162 -jar target/spring-boot-0.0.1-SNAPSHOT.jar"
}, {
  "objectID" : "c9462106-68df-46c0-a549-aa94a76cc760",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "Command Line Options",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#command-line-options",
  "content" : "Command Line Options -XX:CPUFeatures Native -XX:CPUFeatures=native is the default. You may want to use it to override another -XX:CPUFeatures option specified earlier on your command line. Generic If the CRaC image is restored on computers with different CPU features, the most simple solution is to just run Java with:  $JAVA_HOME/bin/java -XX:CRaCCheckpointTo=cr \\\n    -XX:CPUFeatures=generic \\\n    -jar target/spring-boot-0.0.1-SNAPSHOT.jar Unfortunately, in this case, the run has suboptimal performance. Still, the difference may not be even measurable. To obtain an optimal performance, check Merging CPU Features for more info. Ignore If you have any problems with this CPU features handling code, you can disable it completely by using:  $JAVA_HOME/bin/java -XX:CRaCCheckpointTo=cr \\\n    -XX:CPUFeatures=ignore \\\n    -jar target/spring-boot-0.0.1-SNAPSHOT.jar Please provide feedback to the CRaC project in such a case. -XX:+ShowCPUFeatures You may use the option -XX:+ShowCPUFeatures to easily detect parameters for the -XX:CPUFeatures option on the computer intended to run the -XX:CRaCRestoreFrom=PATH option. Using --version as in this example, is not mandatory but otherwise the CPU features may scroll away.  $JAVA_HOME/bin/java -XX:+ShowCPUFeatures --version\nThis machine's CPU features are: -XX:CPUFeatures=0x4ff7fff9dfcfbf7,0x3e6\nCPU features being used are: -XX:CPUFeatures=0x4ff7fff9dfcfbf7,0x3e6\nopenjdk 22-internal 2024-03-19\nOpenJDK Runtime Environment (fastdebug build 22-internal-adhoc.azul.crac-git)\nOpenJDK 64-Bit Server VM (fastdebug build 22-internal-adhoc.azul.crac-git, mixed mode) -XX:+IgnoreCPUFeatures In some cases, you can see the following error:  $JAVA_HOME/bin/java -XX:CRaCRestoreFrom=cr\n\nYou have to specify -XX:CPUFeatures=0x21421801fcfbd7,0x3e6 together with -XX:CRaCCheckpointTo when making a checkpoint file; specified -XX:CRaCRestoreFrom file contains CPU features 0x4ff7fff9dfcfbf7,0x3e6; missing features of this CPU are 0x4de3de79c000020,0x0 = 3dnowpref, adx, avx512f, avx512dq, avx512cd, avx512bw, avx512vl, sha, avx512_vpopcntdq, avx512_vpclmulqdq, avx512_vaes, avx512_vnni, clflushopt, clwb, avx512_vbmi2, avx512_vbmi, rdpid, fsrm, gfni, avx512_bitalg, pku, ospke, avx512_ifma\n\nIf you are sure it will not crash you can override this check by -XX:+UnlockExperimentalVMOptions -XX:+IgnoreCPUFeatures .\n<JVM exits here> You may be sure the missing CPU feature is not really required for the run of JVM. You can enforce JVM to run even in such a case with -XX:+IgnoreCPUFeatures. Logically, JVM may still crash by segmentation fault (on UNIX) or other fatal error (on MS-Windows) later during its run, due to the missing CPU feature(s). You have been warned!  $JAVA_HOME/bin/java -XX:CRaCRestoreFrom=cr \\\n    -XX:+UnlockExperimentalVMOptions \\\n    -XX:+IgnoreCPUFeatures"
}, {
  "objectID" : "ffb39429-c6b6-401d-a8e5-9862bd7bf361",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "-XX:CPUFeatures",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#xxcpufeatures",
  "content" : "-XX:CPUFeatures Native -XX:CPUFeatures=native is the default. You may want to use it to override another -XX:CPUFeatures option specified earlier on your command line. Generic If the CRaC image is restored on computers with different CPU features, the most simple solution is to just run Java with:  $JAVA_HOME/bin/java -XX:CRaCCheckpointTo=cr \\\n    -XX:CPUFeatures=generic \\\n    -jar target/spring-boot-0.0.1-SNAPSHOT.jar Unfortunately, in this case, the run has suboptimal performance. Still, the difference may not be even measurable. To obtain an optimal performance, check Merging CPU Features for more info. Ignore If you have any problems with this CPU features handling code, you can disable it completely by using:  $JAVA_HOME/bin/java -XX:CRaCCheckpointTo=cr \\\n    -XX:CPUFeatures=ignore \\\n    -jar target/spring-boot-0.0.1-SNAPSHOT.jar Please provide feedback to the CRaC project in such a case."
}, {
  "objectID" : "acb88505-00a7-4d9f-a670-b7012ab5a977",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "Native",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#native",
  "content" : "Native -XX:CPUFeatures=native is the default. You may want to use it to override another -XX:CPUFeatures option specified earlier on your command line."
}, {
  "objectID" : "31a057b6-4967-4f0c-8896-75fd99d4faab",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "Generic",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#generic",
  "content" : "Generic If the CRaC image is restored on computers with different CPU features, the most simple solution is to just run Java with:  $JAVA_HOME/bin/java -XX:CRaCCheckpointTo=cr \\\n    -XX:CPUFeatures=generic \\\n    -jar target/spring-boot-0.0.1-SNAPSHOT.jar Unfortunately, in this case, the run has suboptimal performance. Still, the difference may not be even measurable. To obtain an optimal performance, check Merging CPU Features for more info."
}, {
  "objectID" : "334ee8f9-72e2-4a6f-9972-e3f8b2ea2a10",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "Ignore",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#ignore",
  "content" : "Ignore If you have any problems with this CPU features handling code, you can disable it completely by using:  $JAVA_HOME/bin/java -XX:CRaCCheckpointTo=cr \\\n    -XX:CPUFeatures=ignore \\\n    -jar target/spring-boot-0.0.1-SNAPSHOT.jar Please provide feedback to the CRaC project in such a case."
}, {
  "objectID" : "b4843fac-d2aa-4b95-8e5f-22253ceb0561",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "-XX:+ShowCPUFeatures",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#xxshowcpufeatures",
  "content" : "-XX:+ShowCPUFeatures You may use the option -XX:+ShowCPUFeatures to easily detect parameters for the -XX:CPUFeatures option on the computer intended to run the -XX:CRaCRestoreFrom=PATH option. Using --version as in this example, is not mandatory but otherwise the CPU features may scroll away.  $JAVA_HOME/bin/java -XX:+ShowCPUFeatures --version\nThis machine's CPU features are: -XX:CPUFeatures=0x4ff7fff9dfcfbf7,0x3e6\nCPU features being used are: -XX:CPUFeatures=0x4ff7fff9dfcfbf7,0x3e6\nopenjdk 22-internal 2024-03-19\nOpenJDK Runtime Environment (fastdebug build 22-internal-adhoc.azul.crac-git)\nOpenJDK 64-Bit Server VM (fastdebug build 22-internal-adhoc.azul.crac-git, mixed mode)"
}, {
  "objectID" : "758cd209-d8e7-47a7-8e36-69a8b8af2ebb",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "CPU Features",
  "section" : "-XX:+IgnoreCPUFeatures",
  "url" : "https://docs.azul.com/core/crac/cpu-features",
  "link" : "https://docs.azul.com/core/crac/cpu-features#xxignorecpufeatures",
  "content" : "-XX:+IgnoreCPUFeatures In some cases, you can see the following error:  $JAVA_HOME/bin/java -XX:CRaCRestoreFrom=cr\n\nYou have to specify -XX:CPUFeatures=0x21421801fcfbd7,0x3e6 together with -XX:CRaCCheckpointTo when making a checkpoint file; specified -XX:CRaCRestoreFrom file contains CPU features 0x4ff7fff9dfcfbf7,0x3e6; missing features of this CPU are 0x4de3de79c000020,0x0 = 3dnowpref, adx, avx512f, avx512dq, avx512cd, avx512bw, avx512vl, sha, avx512_vpopcntdq, avx512_vpclmulqdq, avx512_vaes, avx512_vnni, clflushopt, clwb, avx512_vbmi2, avx512_vbmi, rdpid, fsrm, gfni, avx512_bitalg, pku, ospke, avx512_ifma\n\nIf you are sure it will not crash you can override this check by -XX:+UnlockExperimentalVMOptions -XX:+IgnoreCPUFeatures .\n<JVM exits here> You may be sure the missing CPU feature is not really required for the run of JVM. You can enforce JVM to run even in such a case with -XX:+IgnoreCPUFeatures. Logically, JVM may still crash by segmentation fault (on UNIX) or other fatal error (on MS-Windows) later during its run, due to the missing CPU feature(s). You have been warned!  $JAVA_HOME/bin/java -XX:CRaCRestoreFrom=cr \\\n    -XX:+UnlockExperimentalVMOptions \\\n    -XX:+IgnoreCPUFeatures"
}, {
  "objectID" : "c6dfea6d-c6e9-4210-8883-55833f7ad97a",
  "groupId" : "core",
  "groupLabel" : "Azul Platform Core",
  "version" : "january-2024",
  "title" : "Legal Notice",
  "section" : "",
  "url" : "https://docs.azul.com/core/legal-notice",
  "link" : "https://docs.azul.com/core/legal-notice",
  "content" : "© 2005–2024, Azul Systems, Incorporated, 375 Moffett Park Drive, Suite 115, Sunnyvale, CA 94089. All rights reserved. Products and specifications discussed in this document may reflect future versions and are subject to change without notice. Azul Systems assumes no responsibility or liability for any errors or inaccuracies that may appear in the informational content contained in this guide. No part of this document may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, electronic, mechanical, recording, or otherwise, without the prior written permission of Azul Systems. Please note that the content in this document is protected under copyright law even if it is not distributed with software that includes an end user license agreement. Azul Systems, Azul Zulu, and the Azul logo are trademarks or registered trademarks of Azul Systems, Inc. Linux is a registered trademark of Linus Torvalds. Java is a registered trademark of Oracle Corporation. Microsoft and Windows are registered trademarks of Microsoft Corporation. Other marks are the property of their respective owners and are used here only for identification purposes."
}, {
  "objectID" : "73cf2c5e-baed-4dfa-8cc2-badc8a75bb40",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime",
  "section" : "",
  "url" : "https://docs.azul.com/prime/",
  "link" : "https://docs.azul.com/prime/",
  "content" : "Azul Platform Prime is a modern, TCK-compliant Java platform based on OpenJDK. Running your Java workloads on Azul Platform Prime delivers: Low, consistent response latency of your Java workloads Higher total throughput and carrying capacity, even under strict response latency SLAs Faster warm-up to your application’s steady-state performance and less deviations from steady-state performance over the life of your Java application Infrastructure savings from serving the same load with fewer Java instances Azul Platform Prime delivers these benefits through: Lower latency outliers thanks to the C4 pauseless garbage collector Higher throughput and code speed thanks to the Falcon JIT compiler Lower warmup time and less deoptimizations thanks to the ReadyNow warmup optimizer and Cloud Native Compiler"
}, {
  "objectID" : "811f415a-fa62-4cfe-937d-61d4c07d4e31",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime",
  "section" : "Getting Started",
  "url" : "https://docs.azul.com/prime/",
  "link" : "https://docs.azul.com/prime/#getting-started",
  "content" : "Getting Started Release Notes for Azul Platform Prime Installing Azul Platform Prime: Using APT (.deb packages): Debian, Ubuntu Using DNF/YUM (.rpm packages): Amazon Linux, Oracle, RHEL/CentOS, SLES 12 From a tar.gz Using Kubernetes Using Docker Setting Up your Development Environment"
}, {
  "objectID" : "475204e2-2d5e-4a8d-bd42-c9de343f1cb2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime",
  "section" : "Testing Azul Platform Prime",
  "url" : "https://docs.azul.com/prime/",
  "link" : "https://docs.azul.com/prime/#testing-azul-platform-prime",
  "content" : "Testing Azul Platform Prime Once you’ve installed Azul Platform Prime, you probably want to compare how it performs compared to you current installation of OpenJDK. What To Expect Best Practice: Comparative Evaluation of JDK Setups Analyzing Application Performance with the GC Log Analyzer"
}, {
  "objectID" : "811b910a-ace5-4d70-9744-454ed441b36b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime",
  "section" : "Tuning Azul Platform Prime",
  "url" : "https://docs.azul.com/prime/",
  "link" : "https://docs.azul.com/prime/#tuning-azul-platform-prime",
  "content" : "Tuning Azul Platform Prime Tuning Application Warmup with the Falcon JIT Compiler Apache Kafka on Azul Platform Prime Benchmarking vs OpenJDK Best Practices Apache Cassandra on Azul Platform Prime Benchmarking vs OpenJDK Apache Solr on Azul Platform Prime Benchmarking vs OpenJDK"
}, {
  "objectID" : "aff4ef54-0d99-4521-81bf-1a36f656546d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_24_01_0_0",
  "content" : "Note This page contains release notes for versions 20.02.1.0 and newer. Azul Zing Builds of OpenJDK (Zing) are available in two versions: Stream Builds: Fast-moving monthly releases (end of the month) that include all of the latest features and changes that are part of PSU releases. Free for development and evaluation. Use in production requires an active subscription. Current latest: 24.01.0.0 Stable Builds: Builds that incorporate only CPUs, PSUs, and Azul Platform Prime critical fixes and do not uptake new features and non-critical enhancements from Stream Builds. Stable Builds are our primary vehicle for delivering time-sensitive bug-fixes to customers and are only available to Azul customers. Current latest: 23.08.400.0 and 23.02.700.0 Type of builds: Stream Stable - Search:"
}, {
  "objectID" : "11b0f77e-b50c-4740-9f4a-d73cbe1be2cf",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes",
  "content" : "Type of builds: Stream Stable - Search:"
}, {
  "objectID" : "dc4eab25-7170-43e9-9091-a692d3c0fa4f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes",
  "content" : ""
}, {
  "objectID" : "0270f54e-ce0f-4df0-a796-373f04d464b2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes",
  "content" : "Stream"
}, {
  "objectID" : "8ce7a40c-a104-4d34-be7d-95dfc7e23a04",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes",
  "content" : "Stable"
}, {
  "objectID" : "627828df-ac6d-43c3-b7b0-c2c4889dc014",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Latest Stream Build",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#latest_stream_builds",
  "content" : "Latest Stream Build 24.01.0.0 Release Notes PDF Release date: January 31, 2024 This release is based on Azul Platform Prime 23.12.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_402-b3 11 11.0.22+7-LTS 17 17.0.10+7-LTS 21 21.0.2+13-MTS What’s New From Azul Platform Prime 24.01.0.0, the garbage collector’s (GC) CPU usage is logged by default. Previously, you had to use the option -XX+:PrintGCDetails. You can view these metrics now by default in GC Log Analyzer in the GC CPU Usage graph. GC CPU Usage is split into 3 metrics, \"marking CPU usage,\" \"relocation CPU usage,\" and \"fixup pass,\" which appear as \"New GC Mark,\" \"New GC Reloc,\" and \"New GC Fixup\" in the GC CPU Usage graph. Azul Platform Prime 24.01.0.0 includes a new lightweight, fully functional distribution of the Java Runtime Environment (JRE) for Java 8, 11, 17 and 21. The new Java JREs saves a significant amount of space by removing various debugging options and developer options. The Azul Platform Prime Builds of JRE still fully supports Optimizer Hub and Azul Vulnerability Detection (AVD). Azul Platform Prime 24.01.0.0 introduces a small but significant change to the behavior of -XX:ProfileStartupLimitInSeconds. Now, when you set this option to 0, it means 0 seconds. Previously, if you set this flag to 0, it would be interpreted as \"infinite\". You can still specify \"infinite\" by using any negative number, for example -1. The default behavior without setting this option remains the same, i.e. the default value has changed from 0 to -1. January 2024 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29440 VM fails to remove stale hsperfdata files after backport of JDK-8286030 ZVM-19215 Backport JDK-8215451: IsSameObject should not keep objects alive. ZVM-29526 [JCK-runtime-21] JCK test crashed api/javax_net/ssl/SSLSocket/Description.html with V [libjvm.so+0x6339b8] void GPGC_MarkAlgorithm::drain_stacks(GPGC_GCManagerOldStrong*)+0x638 ZVM-29388 aarch64 builds contain debug symbols - much larger than x64 ZVM-29384 Backport JDK-8153413: Exceptions::_throw always logs exceptions, penalizing performance ZVM-4337 [JVMTI] Zing does not provide inlining data on CompiledMethodLoad"
}, {
  "objectID" : "4f68192f-0eed-4204-8d45-e22ba5123b4c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "24.01.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_24_01_0_0",
  "content" : "24.01.0.0 Release Notes PDF Release date: January 31, 2024 This release is based on Azul Platform Prime 23.12.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_402-b3 11 11.0.22+7-LTS 17 17.0.10+7-LTS 21 21.0.2+13-MTS What’s New From Azul Platform Prime 24.01.0.0, the garbage collector’s (GC) CPU usage is logged by default. Previously, you had to use the option -XX+:PrintGCDetails. You can view these metrics now by default in GC Log Analyzer in the GC CPU Usage graph. GC CPU Usage is split into 3 metrics, \"marking CPU usage,\" \"relocation CPU usage,\" and \"fixup pass,\" which appear as \"New GC Mark,\" \"New GC Reloc,\" and \"New GC Fixup\" in the GC CPU Usage graph. Azul Platform Prime 24.01.0.0 includes a new lightweight, fully functional distribution of the Java Runtime Environment (JRE) for Java 8, 11, 17 and 21. The new Java JREs saves a significant amount of space by removing various debugging options and developer options. The Azul Platform Prime Builds of JRE still fully supports Optimizer Hub and Azul Vulnerability Detection (AVD). Azul Platform Prime 24.01.0.0 introduces a small but significant change to the behavior of -XX:ProfileStartupLimitInSeconds. Now, when you set this option to 0, it means 0 seconds. Previously, if you set this flag to 0, it would be interpreted as \"infinite\". You can still specify \"infinite\" by using any negative number, for example -1. The default behavior without setting this option remains the same, i.e. the default value has changed from 0 to -1. January 2024 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29440 VM fails to remove stale hsperfdata files after backport of JDK-8286030 ZVM-19215 Backport JDK-8215451: IsSameObject should not keep objects alive. ZVM-29526 [JCK-runtime-21] JCK test crashed api/javax_net/ssl/SSLSocket/Description.html with V [libjvm.so+0x6339b8] void GPGC_MarkAlgorithm::drain_stacks(GPGC_GCManagerOldStrong*)+0x638 ZVM-29388 aarch64 builds contain debug symbols - much larger than x64 ZVM-29384 Backport JDK-8153413: Exceptions::_throw always logs exceptions, penalizing performance ZVM-4337 [JVMTI] Zing does not provide inlining data on CompiledMethodLoad"
}, {
  "objectID" : "7a471d51-12dc-44b9-80c2-f231cb398918",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new",
  "content" : "What’s New From Azul Platform Prime 24.01.0.0, the garbage collector’s (GC) CPU usage is logged by default. Previously, you had to use the option -XX+:PrintGCDetails. You can view these metrics now by default in GC Log Analyzer in the GC CPU Usage graph. GC CPU Usage is split into 3 metrics, \"marking CPU usage,\" \"relocation CPU usage,\" and \"fixup pass,\" which appear as \"New GC Mark,\" \"New GC Reloc,\" and \"New GC Fixup\" in the GC CPU Usage graph. Azul Platform Prime 24.01.0.0 includes a new lightweight, fully functional distribution of the Java Runtime Environment (JRE) for Java 8, 11, 17 and 21. The new Java JREs saves a significant amount of space by removing various debugging options and developer options. The Azul Platform Prime Builds of JRE still fully supports Optimizer Hub and Azul Vulnerability Detection (AVD). Azul Platform Prime 24.01.0.0 introduces a small but significant change to the behavior of -XX:ProfileStartupLimitInSeconds. Now, when you set this option to 0, it means 0 seconds. Previously, if you set this flag to 0, it would be interpreted as \"infinite\". You can still specify \"infinite\" by using any negative number, for example -1. The default behavior without setting this option remains the same, i.e. the default value has changed from 0 to -1. January 2024 CPU and PSU release security fixes."
}, {
  "objectID" : "22bf4368-47f9-4167-b1a2-19e23f511180",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024"
}, {
  "objectID" : "a2f20cea-8bc4-4ef3-98c1-f5459f7425fc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#known-issues",
  "content" : "Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "34cccdb4-d5e1-4346-9112-216019492f15",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues",
  "content" : "Resolved Issues Issue ID Description ZVM-29440 VM fails to remove stale hsperfdata files after backport of JDK-8286030 ZVM-19215 Backport JDK-8215451: IsSameObject should not keep objects alive. ZVM-29526 [JCK-runtime-21] JCK test crashed api/javax_net/ssl/SSLSocket/Description.html with V [libjvm.so+0x6339b8] void GPGC_MarkAlgorithm::drain_stacks(GPGC_GCManagerOldStrong*)+0x638 ZVM-29388 aarch64 builds contain debug symbols - much larger than x64 ZVM-29384 Backport JDK-8153413: Exceptions::_throw always logs exceptions, penalizing performance ZVM-4337 [JVMTI] Zing does not provide inlining data on CompiledMethodLoad"
}, {
  "objectID" : "f36ffbc5-184d-40ad-9160-14d4a1049bd0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Latest Stable Builds",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#latest_stable_builds",
  "content" : "Latest Stable Builds 23.08.400.0 Release Notes PDF Release date: February 23, 2024 This PSU release is based on Azul Platform Prime 23.08.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_402-b1 11 11.0.22+7-LTS 17 17.0.10+7-LTS What’s New Azul Platform Prime 23.08.400.0 introduces a new option, -XX:FalconAbortCompileWithInstrPattern=<pattern>, which you can use to abort the compilation of methods whose assembly contains the specified pattern. This way you can \"exclude\" a bad compilation, while still getting its IR/obj dump, even if it’s not the first compilation of that method. Azul Platform Prime 23.08.400.0 includes an improvement to the TTSP profiler to include interpreter frame names and BCI. January 2024 PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29800 The 'libjvm.so' file is significantly larger in the aarch64 build compared to the x64 build ZVM-29388 aarch64 builds contain debug symbols - much larger than x64 ZVM-29384 Backport JDK-8153413: Exceptions::_throw always logs exceptions, penalizing performance ZVM-29078 Do not report ConnectedCompiler thread as compiler thread to GC log ZVM-27809 ZVM crashes with GCC 13 unwinder 23.02.700.0 Release Notes PDF Release date: January 16, 2024 This CPU release is based on Azul Platform Prime 23.02.600.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_401-b2 11 11.0.21.0.101+2-LTS 17 17.0.9.0.101+2-LTS What’s New January 2024 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27809 ZVM crashes with GCC 13 unwinder"
}, {
  "objectID" : "626bdae3-ee00-4ee5-bb35-309e9bd7aa29",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.08.400.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_08_400_0",
  "content" : "23.08.400.0 Release Notes PDF Release date: February 23, 2024 This PSU release is based on Azul Platform Prime 23.08.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_402-b1 11 11.0.22+7-LTS 17 17.0.10+7-LTS What’s New Azul Platform Prime 23.08.400.0 introduces a new option, -XX:FalconAbortCompileWithInstrPattern=<pattern>, which you can use to abort the compilation of methods whose assembly contains the specified pattern. This way you can \"exclude\" a bad compilation, while still getting its IR/obj dump, even if it’s not the first compilation of that method. Azul Platform Prime 23.08.400.0 includes an improvement to the TTSP profiler to include interpreter frame names and BCI. January 2024 PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29800 The 'libjvm.so' file is significantly larger in the aarch64 build compared to the x64 build ZVM-29388 aarch64 builds contain debug symbols - much larger than x64 ZVM-29384 Backport JDK-8153413: Exceptions::_throw always logs exceptions, penalizing performance ZVM-29078 Do not report ConnectedCompiler thread as compiler thread to GC log ZVM-27809 ZVM crashes with GCC 13 unwinder"
}, {
  "objectID" : "8e06c94e-d679-46d5-a966-a7037fc07295",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-2",
  "content" : "What’s New Azul Platform Prime 23.08.400.0 introduces a new option, -XX:FalconAbortCompileWithInstrPattern=<pattern>, which you can use to abort the compilation of methods whose assembly contains the specified pattern. This way you can \"exclude\" a bad compilation, while still getting its IR/obj dump, even if it’s not the first compilation of that method. Azul Platform Prime 23.08.400.0 includes an improvement to the TTSP profiler to include interpreter frame names and BCI. January 2024 PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024"
}, {
  "objectID" : "97a5046c-e676-4b8f-afd8-7f69771e4839",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-2",
  "content" : "Resolved Issues Issue ID Description ZVM-29800 The 'libjvm.so' file is significantly larger in the aarch64 build compared to the x64 build ZVM-29388 aarch64 builds contain debug symbols - much larger than x64 ZVM-29384 Backport JDK-8153413: Exceptions::_throw always logs exceptions, penalizing performance ZVM-29078 Do not report ConnectedCompiler thread as compiler thread to GC log ZVM-27809 ZVM crashes with GCC 13 unwinder"
}, {
  "objectID" : "fe09be15-959b-4f1f-9d2c-4ec26e300aff",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.700.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_700_0",
  "content" : "23.02.700.0 Release Notes PDF Release date: January 16, 2024 This CPU release is based on Azul Platform Prime 23.02.600.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_401-b2 11 11.0.21.0.101+2-LTS 17 17.0.9.0.101+2-LTS What’s New January 2024 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27809 ZVM crashes with GCC 13 unwinder"
}, {
  "objectID" : "907275a0-8547-446f-a300-620e1f4f29e7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-3",
  "content" : "What’s New January 2024 CPU release security fixes."
}, {
  "objectID" : "50d985a4-1f96-4ebe-9259-78ef42ac9422",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-3",
  "content" : "Resolved Issues Issue ID Description ZVM-27809 ZVM crashes with GCC 13 unwinder"
}, {
  "objectID" : "c1147cc6-ff8f-4273-b529-5b6d8c4a77d5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Previous Stream Builds",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#previous_stream_builds",
  "content" : "Previous Stream Builds 23.12.0.0 Release Notes PDF Release date: December 15, 2023 This release is based on Azul Platform Prime 23.10.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b3 11 11.0.21+8-LTS 17 17.0.9+8-LTS 21 21.0.1+11-MTS What’s New Azul platform Prime 23.12.0.0 includes several performance fixes including improvements to handling of arrays such as ArraysFill and ArrayCopy. More concise logging of the Compilation Ranking feature has been implemented in order to better asses the behavior and impact of this feature. This applies to Falcon compilations only. Newly collected data has been added to the pre-existing charts in GC Log Analyzer, Compiler Statistics > Compiler Queues and Compiler Statistic > Tier 2 Compiler Counts. Newly collected and viewable data includes the following: The total number of hot and warm methods which have made it to the compile queue, split from the total number of methods. The total number of hot and warm methods which have begun compilation, split from the total number of methods. The total number of methods which were not promoted to the compiler queue due to being identified as cold methods. These are methods which have reached the compile threshold, but not quickly enough to be considered warm or hot methods. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release. 23.10.0.0 Release Notes PDF Release date: November 2, 2023 This PSU release is based on Azul Platform Prime 23.09.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b3 11 11.0.21+8-LTS 17 17.0.9+8-LTS 21 21.0.1+11-MTS What’s New Zing 23.10.0.0 contains the General Availability (GA) release of Azul Prime Builds of OpenJDK 21. October 2023 CPU and PSU release security fixes, including CPU and PSU fixes for Azul Prime Builds of OpenJDK 21. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22067 CORBA CORBA Yes 5.3 Network Low None None Unchanged None Low None 8 Note 1 CVE-2023-22081 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 21, 17, 11, 8 Note 2 CVE-2023-30589 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None High None None CVE-2023-22091 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Compiler Multiple Yes 4.8 Network High None None Unchanged Low Low None None CVE-2023-22025 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability can only be exploited by supplying data to APIs in the specified Component, e.g., through a web service. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 3 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for October 2023 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28960 Potential regression in compilation behaviors and times from 23.02.400 to 23.08.01 ZVM-29000 Fix missing files for SelfDiagnosticRunLevel=2 ZVM-28926 jlink creates debuginfo libraries ZVM-28801 Prime jre17 fails to load management agent 23.09.0.0 Release Notes PDF Release date: September 29, 2023 This release is based on Azul Platform Prime 23.08.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New A new option, GPGCSafepointWaitForMutatorResume, has been introduced and is set to true by default. This flag tells the Garbage Collector to pause and wait for mutator threads to be woken up before resuming, after every GC safepoint. If -XX:-GPGCSafepointWaitForMutatorResume is set, the Garbage Collector resumes its work in parallel with mutator threads waking up. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28703 java.lang.UnsupportedOperationException Monitoring of Synchronizer Usage is not supported sun.management.ThreadImpl.findDeadlockedThreads(ThreadImpl.java:411) ZVM-28639 Debug files/libraries not being excluded from release artifacts ZVM-28588 weblogic crashed with \"assert0(false) failed: [false expected]\" 23.08.0.0 Release Notes PDF Release date: September 11, 2023 This release is based on Azul Platform Prime 23.07.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New Compilation ranks by priority, which allows the JVM to assign compilation ranks to methods, has been introduced to Azul Platform Prime 23.08.0.0. This allows the Falcon compiler to assign ranks, hot, warm, or cold, to methods in order to prioritize system resources to methods depending on their hotness. The value of compilation ranking is that compiler activity is optimized later in an application run, not only reducing system load and freeing up resources for the running application but also reducing application outliers. For more information on compilation ranks, see Analyzing and Tuning Warmup. For newly added options, see Command Line Options. As of Azul Platform Prime 23.08.0.0, ZVision and ZVRobot components have been deprecated and are no longer actively developed. While we still support these components, we encourage users to switch to Java Flight Recorder, as ZVision and ZVRobot are planned for End-of-Life with Azul Platform Prime 24.02.0.0. Support for the latest features in Optimizer Hub (formerly Cloud Native Compiler) 1.8.0. As Cloud Native Compiler expands its scope to offer more functionality than just offloading compilations, it is time to rebrand the offering to better reflect what it does. Starting with release 1.8, we are using the following naming: Optimizer Hub (was Cloud Native Compiler) - The name of the overall component that you install on your Kubernetes cluster. Cloud Native Compiler (was Compiler Service) - The feature that performs the compilation on Optimizer Hub. ReadyNow Orchestrator (was Profile Log Service) - The feature that records and serves ReadyNow profiles to JVMs. In Optimizer Hub 1.8, all major artifacts and command line switches use the updated branding. This includes, but is not limited to: Command-line JVM options to configure Cloud Native Compiler and ReadyNow Orchestrator. See Command Line Options. Helm repository locations, names, and parameter names: github.com/AzulSystems/opthub-helm-charts. REST API URLs. If you are using release 1.7 and earlier, all of the previous spellings of artifacts still work. Additionally, all of the pre-1.8 command-line arguments will continue to work for a period of one year from the release of 1.8. The command line option PreferContainerQuotaForVMInternalCPUCount has been set to true by default in order to make calculations of internal thread counts, as well as budgeting options, more clear in container environments. In container environments where both CPU shares and CPU quota are specified, such as with Kubernetes where these are commonly specified, the VM now uses quota to calculate compiler and GC thread counts. Prior to Azul Platform Prime 23.08, it was using half of quota for the calculation. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28301 Fix java_lang_String::hash_code ZVM-28262 Remove default RSS cap for ProfileLogIn ZVM-28242 JFR profiler does not collect stack traces ZVM-28144 Exhausting java heap during early VM initialization causes a hang ZVM-28121 JFR is not collecting jdk.ExecutionSample events on ARM ZVM-27536 Enable per-thread CPU utilisation data collection in SelfDiagnosticRunLevel=3 23.07.0.0 Release Notes PDF Release date: July 31, 2023 This PSU release is based on Azul Platform Prime 23.06.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b5 11 11.0.20+8-LTS 17 17.0.8+7-LTS What’s New ZVision and ZVRobot have been separated from the Azul Platform Prime package due to a known vulnerability in jQuery 1.4.3, which is used in building the ZVision and ZVRobot utilities. At this time, Azul is not aware of any vulnerability in ZVision itself. For this reason, ZVision is still available for download for Azul Platform Prime subscribers at https://ftp.azul.com/releases/Zing/ZVision/ZVTools.zip The command line option -XX:CompileCommand has been updated to use FalconCompileThreshold. This option is used in the following way: -XX:CompileCommand=\"option,<Class>::<method>,FalconCompileThreshold=<threshold value>\" July 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22041 Hotspot None No 5.1 Local High None None Unchanged High None None 17, 11 Note 1 CVE-2023-22036 Utility Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22049 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-25193 2D (Harfbuzz) Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22006 Networking Multiple Yes 3.1 Network High None Required Unchanged None Low None 17, 11 Note 1 CVE-2023-22043 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. JavaFX Multiple Yes 5.9 Network High None None Unchanged None High None None Note 1 CVE-2023-22044 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22045 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22051 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. GraalVM Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for July 2023 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27897 Hadoop fails with Prime when -XX:+UseAES is used ZVM-27098 Incompatibility with Apache Flink with RocksDB 23.06.0.0 Release Notes PDF Release date: June 30, 2023 This release is based on Azul Platform Prime 23.05.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b2 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New A new option, C2CompileThreshold, has been added. This option allows the C2 compile threshold to be specified for individual methods. This option was introduced because some methods that are rarely called are still important and need to undergo regular optimization. This is set using -XX:CompileCommand in the following way: -XX:CompileCommand=\"option,<Class>::<method>,C2CompileThreshold=<threshold>\" The maximum supported code cache size has been increased to 1758 MB when AllocCodeCacheInLower2G is disabled using -XX:-AllocCodeCacheInLower2G. It is no longer necessary to LD_PRELOAD the libnmt_hooks.so library in order to use extended Native Memory Tracking (NMT). The libnmt_hooks.so library is now linked by default. Using Java Flight Recorder, you can now see exact JIT name for each stacktrace frame in Azul Mission Control in the Method Profiling tab. This uses the option JFRDistinguishJITTypes, which is set to true by default, and shows either C1, C2, or Falcon for each stacktrace frame. With JFRDistinguishJITTypes set to false, it shows JIT compiled. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27634 Unify Prime’s \"java.vendor\" with Zulu ZVM-27514 High JFRCheckpoint pauses seen on Prime ZVM-27506 Turn on JFRDistinguishJITTypes flag by default ZVM-27424 Prime 11+ doesn’t throw IncompatibleClassChangeError in instanceKlass::method_at_itable ZVM-27785 Fix segmentation fault on StubRoutines::stringIndexOf ZVM-27675 Prohibit inlining for methods with invalid method ID ZVM-27624 Disable RSS workaround only once use of large pages are confirmed ZVM-27388 objSizes.jar application crashes with \"assert(m->is_abstract()) failed: should be public and abstract\" in fastdebug mode ZVM-27549 Avoid native method calls from VM.java class 23.05.0.0 Release Notes PDF Release date: May 31, 2023 This release is based on Azul Platform Prime 23.04.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b2 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New Some Falcon CPU Budgeting options have been renamed according to the following table: Changed from: Changed to: CompilerTier2BudgetingThreadsPercent CompilerTier2BudgetingCPUPercent CompilerTier2BudgetingWarmupThreadsPercent CompilerTier2BudgetingWarmupCPUPercent CompilerTier2BudgetMaxMs CompilerTier2BudgetWindowDurationMs For more information on Falcon CPU Budgeting options, see Command Line Options, CPU Budgeting Options The command line option UseTrueObjectsForUnsafe has been set to true by default. This option forces unsafe objects to be returned in their true object form instead of the equivalent java class object. For example, with UseTrueObjectsForUnsafe disabled, java.lang.Class can be returned instead of the true klassOop. Azul Platform Prime 23.05.0.0 includes several performance optimizations including many intrinsic functions implemented in the Falcon compiler. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release. 23.04.0.0 Release Notes PDF Release date: April 28, 2023 This PSU release is based on Azul Platform Prime 23.03.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b2 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New April 2023 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for April 2023 Cloud Native Compiler (CNC) 1.7 client support. The command line option, AllocCodeCacheInLower2G, is now supported on the aarch64 system architecture, which is set to true by default. This option allocates code cache and related data structures at virtual address within 2 GB. To allow allocation to higher memory addresses, use -XX:-AllocCodeCacheinLower2G. A new command line option, GPGCCommitInitialHeapLazily, has been introduced, which is set to false by default. When enabled, this option prevents the whole of the initial heap size, InitialHeapSize or -Xms, from being committed from the OS upfront. With this option enabled, use the option GPGCLazyInitialHeapCommitPercent to specify how much of Xms shall be committed from the OS upfront, at startup. The default value for GPGCLazyInitialHeapCommitPercent is 50. The remainder gets committed based on regular elastic heap heuristics. The command line option InitialHeapSize is now incorporated in Azul Platform Prime in order to keep compatibility with OpenJDK. InitialHeapSize can be used instead of -Xms<size> on the command line. Note The command line argument MaxHeapSize can also be used instead of -Xmx<size> Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25950 Backport JDK-7059899 Stack overflows in Java code cause 64-bit JVMs to exit due to SIGSEGV 23.03.0.0 Release Notes PDF Release date: March 31, 2023 This release is based on Azul Platform Prime 23.02.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS 19 19.0.2+7-MTS What’s New Included in this release are the final set of JDK versions 13, 15 and 19. The next release will no longer contain these versions. Starting from 23.04.0.0, stream releases will include only JDK 8, 11, and 17. Starting from 23.02.100.0, stable releases will only include JDK 8, 11, and 17 CPU/PSU builds. Oracle Linux (Centos 7.9) ARM is supported from Azul Platform Prime version 22.03.0.0. The Command Line Option GPGCUseAllocationPacing has been disabled by default. The Command Line Option CNCForceLocalCompiler has been deprecated and replaced with the new option CNCEnableRemoteCompiler. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-26650 Transform head of _freeThreads to a tagged reference to avoid ABA problems ZVM-26648 Missing tag update in HeapRefBufferList::grab() ZVM-26387 [Alpine] Failed to bundle core from alpine container ZVM-26245 jlink on Prime converts library symlinks to files and increase the total size by 87MB 23.02.0.0 Release Notes PDF Release date: March 1, 2023 This release is based on Azul Platform Prime 23.01.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS 19 19.0.2+7-MTS Note Version 1 of the GC Log Analyzer has reached its end-of-life and has been replaced with Version 2 of the GC Log Analyzer. GC Log Analyzer 2 is included in Zing packages and can be found at <installdir>/etc/GCLogAnalyzer2.jar. The latest version of GC Log Analyzer 2 is also available for download at https://docs.azul.com/prime/GC-Log-Analyzer. What’s New Zing 23.02.0.0 contains the General Availability (GA) release of Azul Prime Builds of OpenJDK 19 for x86_64 systems. Cloud Native Compiler (CNC) 1.6.1 client support. NativeMemoryTracking has been extended with further Falcon tracking support. To enable \"extended tracking,\" set LD_PRELOAD=$JAVA_HOME/etc/zing/lib/libnmt_hooks.so in addition to regular NMT flags which are described in Native Memory Tracking Options and in the Oracle documentation. Zing 23.02.0.0 introduces new CPU budgeting features for the Falcon Tier 2 compiler. CPU Budgeting tells the Tier 2 compiler when to run and how many CPU threads to use, pre and post warmup. With these new features, it is possible to specify allocated threads as a percent, meaning the compiler and the running application can share resources, resulting in less pauses and more stability for the running application. Previously, only whole numbers of threads could be allocated. To enable these new features, use the argument -XX:+EnableTier2CompilerBudgeting. New Falcon CPU Budgeting features are listed in Command Line Options, CPU Budgeting Options A new command line option, AllocCodeCacheInLower2G has been introduced and is set to true by default. This option allocates code cache and related data structures at virtual address within 2 GB. To allow allocation to higher memory addresses, use -XX:-AllocCodeCacheinLower2G. This option is only available for x86_64 systems. Lower GC pauses with JVMTI - JVMTI tag map clearing has been moved outside of safepoint pause by default. This is set by the command line argument ConcurrentJVMTITagMapClearing and is set to true by default. Falcon improvement - Register allocation enhancement that improves code generation for derived pointers around GC safepoints. This allows derived pointers to rematerialize immediately before their use instead of after every safepoint. This is beneficial when a pointer is live across many statepoints but has few uses. Allocation publication barrier optimizations for Aarch64 in Falcon. Testing has yielded up to an 8.5% performance improvement from this optimization. The output format for -Xlog:safepoint has been changed to match OpenJDK for JDK13 and above. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-26265 Add jcmd, jmap, jps, jstack tools to jdk8 jre tar.gz ZVM-25703 backport JDK-8297028 (UseContainerCpuShares ) missing for Prime Java 8 Jan 2023 (Oracle 8u361 equivalent) ZVM-26144 attaching agent generates error: Skipping cleaning of inline cache ZVM-25902 ProfilePersistCodeProfilesOnUncommonTraps may introduce a significant overhead ZVM-25844 Tune FalconContextReset to lower value - Resolution: Reset frequency is chosen using an ergonomics heuristic. There is no need to tune the default value. ZVM-25437 jdk/test/hotspot/jtreg/serviceability/jvmti/RedefineClasses/RedefinePreviousVersions.java failed with \"java.lang.RuntimeException: 'Class unloading: has_previous_versions = false' missing from stdout/stderr\" ZVM-22464 JTreg crashed with JvmtiEnvBase::get_stack_trace ZVM-26017 -Xlog:safepoint output format differs between Zing 17 and OpenJDK 17 23.01.0.0 Release Notes PDF Release date: January 31, 2023 This PSU release is based on Azul Platform Prime 22.12.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b3 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS Note Version 1 of the GC Log Analyzer has reached its end-of-life and has been replaced with Version 2 of the GC Log Analyzer. GC Log Analyzer 2 is included in Zing packages and can be found at <installdir>/etc/GCLogAnalyzer2.jar. The latest version of GC Log Analyzer 2 is also available for download at https://docs.azul.com/prime/GC-Log-Analyzer. What’s New January 2023 CPU and PSU release security fixes. Cloud Native Compiler (CNC) 1.6 client support. You can now read and write ReadyNow profile logs to Cloud Native Compiler. This simplifies getting ReadyNow profile logs in and out of containers and other environments without persistent storage. Compile stashing has been disabled by default, even when using ReadyNow. Existing ReadyNow users that want to maintain the same compile stashing behavior as in earlier releases should ensure the -XX:+FalconUseCompileStashing flag is set. Users who wish to use compile stashing with the new Profile Log Service must ensure both +FalconUseCompileStashing and +CNCEnableRemoteCompiler flags are set. FalconContextReset is now set using ergonomics heuristic based on the number of Falcon compiler threads, unless specified explicitly. Falcon compiler threads reset the internal caches after every FalconContextReset number of compilations. This is a tradeoff between compilation speed and memory consumption. The more often the caches are reset, the less memory is consumed but more time is spent rebuilding the caches. Currently, the value of FalconContextReset is chosen as FalconContextResetFactor=<number of Falcon threads> nested between FalconContextResetLowerLimit and FalconContextResetUpperLimit. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21830 Serialization Multiple Yes 5.3 Network Low None None Unchanged None Low None 8 CVE-2023-21835 JSSE DTLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 CVE-2023-21843 Sound Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 CVE-2022-43548 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 8.1 Network High None None Unchanged High High High None For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2023 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25620 Disable compile stashing by default when ReadyNow on ZVM-25974 CNC links OpenSSL 1.1.1c, creating conflict with 3rd party library ZVM-24802 Memory Improvement - Make Falcon compiler context cleanup predictable disregarding the instance type 22.12.0.0 Release Notes PDF Release date: December 19, 2022 This release is based on Azul Platform Prime 22.10.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_352-b2 11 11.0.17+8 13 13.0.13+5 15 15.0.9+5 17 17.0.5+8 Note Version 1 of the GC Log Analyzer has reached its end-of-life and has been replaced with Version 2 of the GC Log Analyzer. GC Log Analyzer 2 is included in Zing packages and can be found at <installdir>/etc/GCLogAnalyzer2.jar. The latest version of GC Log Analyzer 2 is also available for download at https://docs.azul.com/prime/GC-Log-Analyzer. What’s New Zing 22.12.0.0, through various changed and updates, has been able to achieve 10% lower GC CPU usage on Cassandra. Zing 22.12.0.0 lowers the amount of GC pauses with hidden classes. Falcon has been improved for Jackson as well as other optimizations to the Falcon JIT compiler. New JMX MXBean metrics replace old metric name below java.lang.GarbageCollector to increase accuracy for GC monitoring added with JDK-8265136: Previously, metric \"GPGC New/Old\" was providing a sum of GC pauses and concurrent GC duration. This metric is replaced by the following: GPGC New/Old Cycles: duration time in ms of the concurrent GC which runs in parallel to application threads and is not stopping the application. GPGC New/Old Pauses: GC pause time in ms. On Java 11 and 17, the new metrics are enabled by default and the old removed. If you need to switch back to the old metric, add -XX:+GPGCReportLegacyGarbageCollectorMXBean. On Java 8, only the old metric is active by default. To switch to the new metric add -XX:-GPGCReportLegacyGarbageCollectorMXBean. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release. 22.10.0.0 Release Notes PDF Release date: October 31, 2022 This CPU/PSU release is based on Azul Platform Prime 22.09.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u352-b08 11 11.0.17+8 13 13.0.13+5 15 15.0.9+5 17 17.0.5+8 What’s New October 2022 CPU and PSU release security fixes Compatibility with Cloud Native Compiler (CNC) version 1.5 Support for the GA release of Azul Vulnerability Detection (AVD). Changes for containers regarding thread pool size calculation and number of available CPUs. With the October 2022 release of Java 11 and 17, the default calculation of available CPU cores will change, following JDK-8281181. Previously, the number of available CPU cores was in some situations calculated based on the lower bound defined in the environment. With the change in this release, the lower bound won’t be used anymore and the calculation will only be based on the upper limit of the environment. If in container-based systems no upper limit is defined, the total number of CPUs on the host machine is read as upper limit. A situation where a change will occur is, for example, a Kubernetes container where neither CPU requests nor CPU Limits are set, as previously the JVM would select only 1 CPU core as available in this situation while after the chance, it will select all available CPU cores of the environment which can lead to higher resource usage as thread pools of various open source frameworks are using this calculation for sizing. To verify if your systems are effect, check especially those where no upper limit is defined. In case you need to switch back to the previous calculation, add -XX:+UseContainerCpuShares to the Java command line. Other terms used in the context of CPU definitions are for lower bound \"CPU Requests\" or \"cgroups cpu.shares\", and for upper limit \"CPU Limits\" or \"cgroups cpu.cfs_quota_us\". When both quota and shares are specified for a cgroup and UseContainerCpuShares is true, the number of GC and compiler threads are derived based on a total processor count calculated as (quota+shares)/2. When UseContainerCpuShares is false the number is derived based on a total processor count calculated as (quota/2). To check the current setting, for example, to compare previous and current Java versions in your environment, use the following example to display the actual number of CPUs as seen by application code and run it inside your container environment: File AvailableCPUs.java:  public class AvailableCPUs {\n    public static void main(String[] args) {\n        System.out.println(\"CPUs: \"\n            + Runtime.getRuntime().availableProcessors());\n    }\n} To run it:  java -showversion AvailableCPUs.java Known Issues There are no new issues to report in this release. Resolved Issues ZVM-25268 - As a part of the PSU update, UseContainerCpuShares has been set to false (off) by default. ZVM-22642 - The GC log now reports data from remote compilations which can be viewed in GC Log Analyzer. 22.09.0.0 Release Notes PDF Release date: September 30, 2022 This release is based on Azul Platform Prime 22.08.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New Internal bug fixes. Improved accuracy of RSS metric reported in GC log (C heap usage). With this improvement, the reported memory usage in GC log will give more accurate results. The Allocation Pacing feature is turned on by default in non-ZST mode. This will help reduce peak allocation delays while introducing smaller delays into allocation paths as heap usage approaches the total Java heap committed. To turn off the feature use -XX:-GPGCUseAllocationPacing. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release. 22.08.0.0 Release Notes PDF Release date: August 30, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New Internal bug fixes. ZVM-24576 - New feature, Allocation Pacing, to help protect against long allocation delays. When enabled, the virtual machine adds smooth delays to allocations as the heap usage approaches the maximum. This new feature helps prevent long allocation delays caused by memory exhaustion and helps the garbage collector keep up. To enable the feature, use -XX:+GPGCUseAllocationPacing, available in non-ZST mode only. ZVM-24277 - Implemented StringUTF16.compress Resolved Issues Issue ID Description ZVM-24429 Using Xlog:safepoint could cause long pauses under I/O contention ZVM-24614 PrintCodeCacheMap could cause application crash at exit time. ZVM-24455 LockOpt::eliminateNestedLock could sometimes add an invalid/stale value to the deopt bundle which could potentially lead to crashes. Known Issues There are no new issues to report in this release. 22.07.1.0 Release Notes PDF Release date: August 9, 2022 This release is based on Azul Platform Prime 22.07.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16 13 13.0.12 15 15.0.8 17 17.0.4 What’s New Internal bug fixes. Resolved Issues Issue ID Description JDK-8290832 It was no longer possible to change user.dir in JDK8 due to changes in the previous release of OpenJDK, causing compatibility issues. Those changes have been rolled back so that user.dir may be changed. Known Issues There are no new issues to report in this release. 22.07.0.0 Release Notes PDF Release date: July 29, 2022 This PSU release is based on Azul Platform Prime 22.06.0.0 and 22.02.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u342 11 11.0.16 13 13.0.12 15 15.0.8 17 17.0.4 What’s New July 2022 PSU release fixes. ZVM-24301 - New command line option UseContainerCpuShares, default true, to consider CPU shares when computing available processors inside a cgroup. This option was backported from OpenJDK 17 and it is important to note that while OpenJDK has a default value of false, the default value in Azul Platform Prime is true. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-34169 JAXP (Xalan-J) Multiple Yes 7.5 Network Low None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21541 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21540 Hotspot Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8 Note 1 CVE-2022-21549 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 17 Note 1 CVE-2022-25647 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image (Gson) None No 6.2 Local Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and relies on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues Issue ID Description ZVM-16112 Applications using munlockall() require -XX:-UseThreadStateNativeWrapperProtocol on the command line to avoid crash or inconsistency if the rare situation occurs that the application gets swapped out after the munlockall() invocation. 22.06.0.0 Release Notes PDF Release date: June 30, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15+10 13 13.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-14341 NMT detailed mode allows user to track internal VM memory usage to the granularity of a single callsite. This feature is also very useful in case the user needs to find a memory leak. ZVM-24010 Optimized layout of GC internal data structure, improving native memory consumption by the garbage collector (GC). ZVM-23142 Improved virtual memory regions initialization to handle rare situations when there are existing mappings in preferred ranges. In such cases, the JVM previously failed to start with the error \"Unable to setup virtual memory region for …\". ZVM-24118 Fixed crashes caused by constantPoolOopDesc::tag_at(int) ZVM-23983 async-profiler v2.7+ cpu profiling is now working with Prime. Known Issues Issue ID Description - Aarch64 support is limited to Graviton 2 and 3. Graviton 1 is not yet supported. ZVM-20142 Async profiler activemq crashed with 'assert(false) failed: Should never reach here' ZVM-17531 Wildfly app-server hangs when Async Java Profiler is attached. ZVM-16393 Async profiler does not show object type in \"-e alloc\" mode on Zulu Prime 22.05.0.0 Release Notes PDF Release date: May 31, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15+10 13 13.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools. Known Issues There are no new issues to report in this release. 22.04.1.0 Release Notes PDF Release date: May 24, 2022 This release is based on Azul Platform Prime 22.04.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15+10 13 13.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Arm64 is now supported by Zing. Find the latest builds for Arm64 here: Azul Platform Prime Quick Start Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 22.04.0.0 Release Notes PDF Release date: May 6, 2022 This CPU and PSU release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15+10 13 13.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New April 2022 CPU and PSU security fixes. Enable elimination of safepoint pauses for finding deadlocks operations by first attempting to complete them using a checkpoint using the option -XX:[+/ -]OptimizeFindDeadlocksWithCheckpoint. If a deadlock is detected in the checkpoint, it is then confirmed using a safepoint pause. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2018-25032 ZIP Multiple Yes 7.5 Network Low None None Unchanged None None High 17, 15, 13, 11, 8, 7, 6 CVE-2022-21449 Libraries Multiple Yes 7.5 Network Low None None Unchanged None High None 18, 17, 15 Note 1 CVE-2022-21476 Libraries Multiple Yes 7.5 Network Low None None Unchanged High None None 18, 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21426 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21434 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21496 JNDI Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21443 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-0778 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools. ZVM-23002 Added support for cgroups v2. ZVM-23091 Deadlock detection was being performed using safepoint pauses in prior releases. Starting 22.04 Prime attempts to detect deadlock using checkpoints which do not cause a global pause. If the checkpoint operation indicates the possibility of a deadlock, Prime will resort to a safepoint to confirm the same. Known Issues There are no new issues to report in this release. 22.03.0.0 Release Notes PDF Release date: March 31, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools. Known Issues There are no new issues to report in this release. 22.02.0.0 Release Notes PDF Release date: February 28, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Miscellaneous bug fixes and performance improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 22.01.2.0 Release Notes PDF Release date: February 14, 2022 This PSU release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Missing fixes from the January 22 PSU release of OpenJDK. January 2022 PSU release security fixes. Various performance improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 22.01.1.0 Release Notes PDF Release date: February 7, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Small critical bug fixes over Azul Platform Prime 22.01.0.0. January 2022 PSU release security fixes. Various performance improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 22.01.0.0 Release Notes PDF Release date: January 31, 2022 This PSU release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New January 2022 PSU release security fixes. Various performance improvements. Resolved Issues Issue ID Description ZVM-21048 When -XX:+UseLargePages is used and the number of static huge pages reserved by nr_hugepages is insufficient for the total heap, Prime failed to start. Now it matches OpenJDK behavior and continues as expected. ZVM-22049 OldGC is not triggered often enough during idle time when NewGCs are occurring. ZVM-22063 Map OpenJDK command line option UseCountedLoopSafepoints onto KeepSafepointsInCountedLoops. ZVM-19635 Avoid lock in ByteArrayInputStream.read if it is used as an input of ObjectInputStream. ZVM-20678 Improved performance of string collation and iteration. Known Issues There are no new issues to report in this release. 21.12.0.0 Release Notes PDF Release date: December 20, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13+8 13 13.0.9+3 15 15.0.5+3 17 17.0.1+12 What’s New Photon OS is now supported. Improved performance of string collation and character iteration. You can enable the use of the custom implementation of RuleBasedCollator using the option -XX:+UseModifiedRuleBasedCollator. This option is false by default. Docker images for Prime are now available. Resolved Issues Issue ID Description ZVM-21048 When -XX:+UseLargePages is used and the number of static huge pages reserved by nr_hugepages is insufficient for the total heap, Prime failed to start. Now it matches OpenJDK behavior and continues as expected. ZVM-22049 OldGC is not triggered often enough during idle time when NewGCs are occurring. ZVM-22063 Map OpenJDK command line option UseCountedLoopSafepoints onto KeepSafepointsInCountedLoops. ZVM-19635 Avoid lock in ByteArrayInputStream.read if it is used as an input of ObjectInputStream. ZVM-20678 Improved performance of string collation and iteration. Known Issues There are no new issues to report in this release. 21.10.1.0 Release Notes PDF Release date: December 14, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13 13 13.0.9 15 15.0.5 What’s New Azul Platform Prime 21.10.1.0 contains the same features as 21.10.0.0. Resolved Issues Issue ID Description ZVM-21884 Failure during startup when the kernel does not have support for Transparent Huge Pages (THP) feature, or does not support making madvise(2) calls with MADV_NOHUGEPAGE. ZVM-22052 Cassandra fails when ulimit -l unlimited is set to allow more mlock than the Linux default. This issue affected only Prime version 21.10.0.0. Known Issues There are no new issues to report in this release. 21.10.0.0 Release Notes PDF Release date: October 29, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13 13 13.0.9 15 15.0.5 What’s New Includes all October 2021 CVE fixes. Azul Platform Prime 21.10.0.0 contains the October 2021 CPU release of OpenJDK. Azul Platform Prime 21.10.0.0 brings the associated JDK 7, JDK 8, JDK 11, JDK 13, and JDK 15 versions to October 2021 CPU security update levels. The peak heap occupancy target, used by heuristics to decide when to trigger a garbage collection, is now managed dynamically by default. The dynamic changes can be disabled by setting GPGCTargetPeakHeapOccupancyPercent to a desired value. Increased parallelism between collectors for the new generation and old generation. Helps reduce the peak duration for a new generation collection and reduce allocation delays during peak load. The number of concurrent GC threads is now changed dynamically when -Xms is set to the same value as -Xmx, or when Azul Zing System Tools (ZST) is installed. At JVM start a low number of concurrent GC threads is employed. If later during application uptime the GC Time Percent metric increases beyond a threshold, more GC threads are added to reduce the number of GC cycles. The limit for the total number of GC threads is 3/4 of the process' available CPU threads. As of this Prime version, the number of threads will never shrink later. To disable the dynamic handling, use the following on the command line: -XX:-UseDynamicNumberOfGCThreads If one of the following flags is set on the command line, the dynamic handling will also be disabled: -XX:GPGCThreads=N -XX:GenPauselessNewThreads=N -XX:GenPauselessOldThreads=N General performance improvements. More intrinsics from Java 17. Resolved Issues Issue ID Description ZVM-xxxx High CPU utilization by HeapCommit thread in some specific scenarios. This only applies when -Xms isn’t set or set to less than -Xmx. ZVM-xxxx Fixes crash on JVM start on Ubuntu 21.10 (Impish) and CentOS 9 Stream (beta). Known Issues There are no new issues to report in this release. 21.09.1.0 Release Notes PDF Release date: October 14, 2021 This release is based on Azul Platform Prime 21.09.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New Initial support for Cloud Native Compiler. Cloud Native Compiler provides a server-side optimization solution that offloads JIT compilation to dedicated hardware, providing more processing power to JIT compilation while freeing your client JVMs from the load of doing JIT compilation. General performance improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.09.0.0 Release Notes PDF Release date: September 29, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New General performance improvements. GC log line has been expanded to include additional information for heap elasticity. Introduces a new JFR event named \"Deoptimization\" which arises when previously compiled code gets discarded. The event is useful in troubleshooting performance issues including low throughput and high CPU utilization. Resolved Issues Issue ID Description ZVM-21015 High pause time during OldGC due to unloading of a long chain of subclasses. ZVM-19788 Installation packages are now signed. ZVM-20927 Abort the VM if GC safepoint operation time exceeds a configurable threshold. See the new GC options: DieOnSafepointOperationTimeout and SafepointOperationTimeoutDelayMS ZVM-17584 Introduces a new JFR event named \"Deoptimization\" which arises when previously compiled code gets discarded. The event is useful in troubleshooting performance issues including low throughput and high CPU utilization. Installation Changes A new directory is created during installation: /etc/connected-compiler. Known Issues There are no new issues to report in this release. 21.08.0.0 Release Notes PDF Release date: August 31, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New Improved performance with large Java heaps on Intel Ice Lake systems with 5-level page tables. Introduces support for Intel’s Ice Lake 5-level paging. Support for dynamically varying garbage collector thread counts with the GPGCDynamicGCThreadCountPolicy option. See command line options for more details. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.07.0.0 Release Notes PDF Release date: July 30, 2021 This CPU and PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New Incorporates all of the changes from the July 2021 CPU release and most of the changes from the July 2021 PSU release. Various performance improvements including improved locking, stack-walking behavior for performance. Loop unrolling improvements. Java heap elasticity is turned on by default when not using the Prime System Tools (ZST). This means that -Xms is now recognized along with -Xmx. The default values also match OpenJDK. For latency sensitive applications it is advised to set -Xms equal to -Xmx to preserve the old behaviour. See Recommended Heap Size for more details. Installation Directory Changes The following file was added to the installation directory: crs-agent.jar. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.06.0.0 Release Notes PDF Release date: June 30, 2021 This release is based on Azul Platform Prime 21.04.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New Additional improvements of the Heap Elasticity feature introduced in 21.05.0.0. Improved memory allocation handling in Heap Elasticity mode to avoid exceeding the container/cgroups memory limit. Fixed many issues with Async Profiling. Various performance improvements with Falcon compiler: Fixed extra spills causing performance penalties by supporting live gc values on registers for calls which can throw exceptions Improved performance of applications that frequently use Unsafe.allocateInstance. Implemented nested locks elimination optimization for multiple nested locks on a given object under the condition that the nested lock state is not inspected. Resolved Issues Issue ID Description ZVM-19710 Profiling with cpu/wall events yeilds unusable results ZVM-20081 Startup failure when specifying Xms larger than 25% of RAM, when -XX:+GPGCNoZSTHeapElasticity is specified and Xmx is not specified. ZVM-19972 JVM memory metrics like Runtime.getRuntime.totalMemory() and Runtime.getRuntime.maxMemory() and related like java.lang.management.MemoryMXBean now include JVM-internal memory usage and will show a few MBytes larger numbers now. Calculations and methods around free memory calculation are not affected and will return the same results as before. That means for example Runtime.getRuntime.freeMemory() or difference calculation between attributes like \"used\" and \"total\" memory will also result in the same as in previous releases. See Recommended Heap Size for details. Known Issues There are no new issues to report in this release. 21.05.1.0 Release Notes PDF Release date: July 12, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New A fix for bug ZVM-20496 which turns opt-boxing-rewrite-loads off by default to avoid miscompiles in certain code patterns. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.05.0.0 Release Notes PDF Release date: May 31, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New Non-ZST Heap Elasticity introduced. See Recommended Heap Size for details. When heap elasticity is enabled, the Garbage Collector tries to minimize the memory footprint, keeping it between the user- defined range of -Xms and -Xmx. At the same time, the CPU usage of the Garbage Collector is monitored and the memory minimizing goal relaxed in case the CPU usage increases too much. Heap Elasticity is not available when Azul Zing System Tools (ZST) is installed. Azul Platform Prime 21.05.0.0 makes the OpenJDK C1 OSR the default OSR for the Falcon compiler. The C1 OSR takes much less time and CPU resources to fully optimize your code to steady-state performance. Stream Builds (previously known as Feature Releases) are now free for use in development and evaluation. As such, the builds no longer check for an evaluation license. Latency improvement for applications with frequent Unsafe.get() and put() calls. Fixed heap dump compatibility issue that prevented opening Zing head dumps in IntelliJIdea. Enabled jcmd ManagementAgent command option support. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.04.0.0 Release Notes PDF Release date: April 30, 2021 This CPU and PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New April 2021 CPU and PSU fixes. Quicker acquisition of transparent huge pages on Ubuntu, Amazon Linux or similar Linux systems with kernel 4.19.7 or newer in non-ZST mode. This can help get peak performance earlier as well as enable faster java process restart when THP is configured. Default value of Xmx in cgroups is now the minimum of 25% of cgroup memory limit and 32 GB. Prior to 21.04.0.0, it was 25% of cgroup memory limit. Reduced code cache usage for applications with high number of classes or interfaces and a large number of associated methods. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-2161 Libraries Multiple Yes 5.9 Network High None None Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-2163 Libraries Multiple Yes 5.3 Network High None Required Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-23841 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-3450 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 7.4 Network High None None Unchanged High High None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. It can also be exploited by supplying untrusted data to APIs in the specified Component. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.03.0.0 Release Notes PDF Release date: March 31, 2021 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 15 15.0.2+7 What’s New Enhanced Compatibility With Data Management Platforms ZVM 21.03.0.0 improves compatibility between the MXBean memory pool names and names expected by in- memory data management systems (e.g., Pivotal GemFire 8.2). JFR Event Streaming allows to asynchronously subscribe to select JFR events and avoid the overhead associated with creating a recording in JDK 15. Various performance improvements, like enhancements to tracking of garbage-collection roots, compiler optimizations for aggressive lock coarsening, and an experimental ReadyNow mode that enables the pre-initialization of a greater number of bootstrap classes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.02.0.0 Release Notes PDF Release date: February 26, 2021 This release is based on Azul Platform Prime 21.01.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 15 15.0.2+7 What’s New Introduces medium-term support (MTS) for Java Standard Edition 15. See Azul Product Support Lifecycle for more information. Additional non-security changes associated with the January 2021 Patch Set Updates (PSU) OpenJDK 7u292, OpenJDK 8u282, OpenJDK 11.0.10, OpenJDK 13.0.6 and OpenJDK 15.0.2 release contents. Load value barriers for reference equality checks are optimized within loops. Zing also optimizes more such checks aggressively by considering both operands of the equality check. Improved object locking with better monitor inflation behavior. The functionality of UseCodeCacheFlushing is offered under UseIncrementalCodeCacheFlushing in Zing 21.02.0.0. However, Zing has emergency code cache flushing turned on by default, see UseEmergencyCodeCacheFlushing in Using Zing Command-Line Options for details. Early-access support for ReadyNow Image, an experimental warm-up optimizer based on ReadyNow and Linux Checkpoint/Restore In Userspace (CRIU). Zing 21.02.0.0 installation contains ReadyNow Image files in the /etc/rni/ directory: ` `criu libnet.so.1 libnl-3.so.200 libprotobuf-c.so.1 restore-script wait-script Zing 21.02.0.0 includes optional experimental support for interaction with connected runtime services through an emerging protocol in Zing 13. Note that for Zing 8 and Zing 11 this support was introduced in Zing 21.01.0.0. Zing 21.02.0.0 installation contains the following files related to the services: jmods/azul.crs.jfr.access.jmod legal/azul.crs.jfr.access/ADDITIONAL_LICENSE_INFO legal/azul.crs.jfr.access/ASSEMBLY_EXCEPTION legal/azul.crs.jfr.access/CLASSPATH_EXCEPTION_NOTE legal/azul.crs.jfr.access/LICENSE lib/crs-agent.jar Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.01.0.0 Release Notes PDF Release date: January 29, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 What’s New C2 Improvement The default JIT compiler on Zing JDK 8 and JDK 7 is changed from SeaOfNodesC2 to KestrelC2 when Zing C2 mode is enabled with -XX:+UseC2. For Zing JDK 11, this improvement was made in Zing 20.04.0.0. KestrelC2 is a C2 implementation introduced to Zing in 2020. It is based on a lightweight use of the LLVM backend and typically produces faster code than UseSeaOfNodesC2 while keeping compilation effort at similar levels. UseKestrelC2 generally exhibits a significantly lower compilation-time CPU consumption compared to Falcon. See Using Zing Command-Line Options for -XX:[+/-]UseKestrelC2 and -XX:[+/-]UseSeaOfNodesC2 command-line options and details. The default JIT compiler in Zing is the high-performance Falcon introduced in 2017. New Experimental Features Zing 21.01.0.0 includes optional experimental support for interaction with connected runtime services through an emerging protocol in Zing 11 and Zing 8. These experimental capabilities are enabled by the -XX:+UseCRS command-line option and turned off by default. Being an experimental Zing option, it must be unlocked by preceding -XX:+UnlockExperimentalVMOptions. Performance Improvement Zing 21.01.0.0 introduces an improved escape analysis for arrays in the Falcon compiler. The improvement includes an optimization for array reallocation pattern (e.g., java.util.Arrays.copyOf) to avoid redundant copying. Notably, this optimization improves the performance of string concatenation using the StringBuilder class by the elimination of excessive reallocations of the underlying StringBuilder buffer. Support for EdDSA Signature Algorithm Zing 21.01.0.0 introduces the OpenEdDSA provider which can be used for cryptographic signatures using the Edwards-Curve Digital Signature Algorithm (EdDSA) in Zing 8 with no application or code changes. See JEP 339: Edwards-Curve Digital Signature Algorithm (EdDSA) for details. The OpenEdDSA public API is provided in the org.openeddsa.java.security.interfaces and org.openeddsa.java.security.spec packages. To enable the OpenEdDSA provider, do either of the following: configure the Java Runtime Environment for the OpenEdDSA provider by adding the entry below to the $JAVA_HOME/jre/lib/security/java.security file  security.provider.10=org.openeddsa.security.OpenEdDSA add the OpenEdDSA provider directly to your code  // Add OpenEdDSA provider\njava.security.Security.addProvider(new org.openeddsa.security.OpenEdDSA()); Resolved Issues Issue ID Description ZVM-18362 A compiler crash due to incorrect transformation of Compare And Swap on an unescaped object. ZVM-18233 21.01.0.0 20.08.201.0 Known Issues There are no new issues to report in this release. 20.12.0.0 Release Notes PDF Release date: December 18, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u285 8 8u275 11 11.0.9.1+1 13 13.0.5.1+1 What’s New Zing 20.12.0.0 incorporates additional non-security changes associated with the October Patch Set Updates (PSU) 2020 OpenJDK 7u285, OpenJDK 8u275, OpenJDK 11.0.9.1, and OpenJDK 13.0.5.1 release contents. Zing 20.12.0.0 introduces an enhanced induction variable analysis and range checks removal mechanism. Particularly, improved range check elimination capabilities for decrementing loops of the following type:  for (int i = array.length - 1; i >= 0; i--) {\narray[i] = ...\n} Resolved Issues Issue ID Description ZVM-18035 Backport of JDK-8202837 and JDK-8214513 to Zing 8. ZVM-17938 Setting InitalHeapSize and MaxHeapSize the same fails in non-ZST mode. This affects applications such as ElasticSearch which insists that Initial Heap Size be equal to Maximum Heap Size. ZVM-17430 JarFile constructor exception in JDK 11.0.8. ZVM-17346 System data collected for GC logging could cause oom-killer invocation and kernel panic when java is launched under the root user. ZVM-16051 Provide FalconTrustInterfaceTypesForArrayStore to move interface type conformance check from the VM to the application. This can improve throughput variability for some applications. -XX:+UnlockExperimentalVMOptions is required to use -XX:+FalconTrustInterfaceTypesForArrayStore. Known Issues There are no new issues to report in this release. 20.10.0.0 Release Notes PDF Release date: October 30, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New Zing 20.10.0.0 brings the associated JDK 7, JDK 8, JDK 11 and JDK 13 versions to October 2020 Critical Patch Update (CPU) security update levels and incorporates changes related to OpenJDK 7u281, OpenJDK 8u271, OpenJDK 11.0.8.0.101, and OpenJDK 13.0.4.0.101 release contents. Zing 20.10.0.0 includes loop form fixes to increase performance of loops by simplified triggering of enabled vectorization methods. The optimization is enabled by default. Zing 20.10.0.0 contains an improved allocation mechanism which has a positive impact on Zing’s performance. The optimization is enabled by default. Zing 20.10.0.0 introduces method counters across JVM runs, which enables ReadyNow to build a profile over multiple short runs when the number of orders is low. Resolved Issues Issue ID Description ZVM-17662 Fix confusing error message when calling Zing MXBeans APIs without specifying -XX:+UseZingMXBeans. ZVM-17168 Checkpoint timeout crash while running async-profiler along with Zing. ZVM-16971 Compiler crash with signature polymorphic invokedynamic calls. Known Issues There are no new issues to report in this release. 20.09.1.0 Release Notes PDF Release date: October 19, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 13 13.0.4+8 What’s New Resolved Issues Issue ID Description ZVM-17453 Final field optimizations can miscompile in code compiled with Javac11 and above. Known Issues There are no new issues to report in this release. 20.09.0.0 Release Notes PDF Release date: September 30, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 13 13.0.4+8 What’s New Zing 20.09.0.0 introduces Medium Term Support for Java SE 13. See Azul Product Support Lifecycle for more information. Zing 20.09.0.0 includes accelerated copying of large array chunks. The optimization is enabled by default. See UseArrayCopyChunkingIntrinsics in Using Zing Command-Line Options for details. Zing 20.09.0.0 provides a performance improvement for org.apache.logging.log4j.util.StackLocator.getCallerClass(), which maximizes logging performance when using log4j versions 2.13.1 - 2.13.3 on Zing 8 and log4j versions 2.9.0 - 2.13.3 on Zing 11+. The improvement is disabled by default. See UseLog4jGetCallerClassIntrinsic in Using Zing Command-Line Options for details. Zing 20.09.0.0 introduces unified Garbage Collection (GC) logging that utilizes unified JVM logging framework (JEP 271: Unified GC Logging). See Unified GC Logging Recommendations to learn more. Resolved Issues Issue ID Description ZVM-16945 Core bundler: pid extraction can select more than one line. ZVM-16239 Racy initialization logic in GraphBuilder::initialize(): under rare circumstances another thread can observe the _is_initialized flag set before the static fields _can_trap and _is_async are actually initialized. Known Issues There are no new issues to report in this release. 20.08.0.0 Release Notes PDF Release date: August 31, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u262 11 11.0.8+10 What’s New Zing 20.08.0.0 incorporates additional non-security changes associated with the July Patch Set Updates (PSU) 2020 OpenJDK 7u272, OpenJDK 8u265, and OpenJDK 11.0.8 release contents. NONEwithDSAinP1363Format is included in signature algorithms enabled in Zing 20.08.0.0 by default. NONEwithDSAinP1363Format is scheduled for removal in the following release of the Zing Virtual Machine. Since the algorithm is not supported in other JDK 8 virtual machines, it is recommended to migrate to Digital Signature Algorithms with ASN.1 encoded signature bytes. Zing 20.08.0.0 introduces multiple optimizations that significantly increase performance on a set of Java Stream API scenarios. Zing 20.08.0.0 introduces a new version string format that includes a matching OpenJDK release number. Version 1 of the GC Log Analyser has reached its end-of-life and is removed from Zing 20.08.0.0. Version 2 of the GC Log Analyzer is available for download at https://cdn.azul.com/gcla/GCLogAnalyzer2.jar. Resolved Issues Issue ID Description ZVM-16504 Crash in guarantee(_deopt_list_len < sizeof(_deopt_list)/sizeof(_deopt_list[0])) failed: make deopt_list bigger. Known Issues There are no new issues to report in this release. 20.07.0.0 Release Notes PDF Release date: This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u262 11 11.0.8+10 What’s New Zing 20.07.0.0 brings the associated JDK 7, JDK 8, and JDK 11 versions to July 2020 Critical Patch Update (CPU) security update levels and incorporates changes related to OpenJDK 7u271, OpenJDK 8u261, and OpenJDK 11.0.7.0.101 release contents. The lock-less Java Native Interface (JNI) protocol is enabled by default in Zing 20.07.0.0. See Using Zing Command-Line Options for the UseThreadStateNativeWrapperProtocol option and details. Zing 20.07.0.0 introduces optimization in object allocation (internal new_stub() function) for improved performance in TLAB allocation intensive applications. The optimization is enabled by default. Starting with Zing 20.07.0.0, Zing 8 supports TLS 1.3 by default and follows the application programming interface (API) changes introduced by Maintenance Release 3 to the Java SE 8 specification. Resolved Issues Issue ID Description ZVM-15833 Add additional logging of padding sizes. Known Issues Issue ID Description 20.06.0.0 Release Notes PDF Release date: This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New The release of Zing 20.06.0.0 includes ReadyNow improvements for faster warmup and smaller footprint. Zing 20.06.0.0 introduces a JNI exception checking optimization. See Using Zing Command-Line Options for the UseFastJNIExceptionCheck option and details. Zing 20.06.0.0 provides full elasticity support for code cache. See Using Zing Command-Line Options for the InitialCodeCacheSize, ReservedCodeCacheSize, and CodeCacheOopTableSize options and details. Zing 20.06.0.0 includes a further improvement of JDK 11 java.lang.StackWalker which is frequently used by log4j2 and other logging implementations. See also https://openjdk.java.net/jeps/259 and java.lang.StackStreamFactory$AbstractStackWalker. Zing 20.06.0.0 introduces new diagnostic Java Flight Recorder (JFR) events to simplify error handling. The lock-less Java Native Interface (JNI) protocol is disabled by default. See Using Zing Command-Line Options for the UseThreadStateNativeWrapperProtocol option and details. Resolved Issues Issue ID Description ZVM-15687 Make -XX:+TraceImplicitNullChecks manageable. ZVM-12535 JVM flags, ParGCCardsPerStrideChunk and UseCompressedClassPointers, give error. Known Issues Issue ID Description 20.05.0.0 Release Notes PDF Release date: May 29, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New In Zing 20.05.0.0, the Java Flight Recorder Tick Profiler becomes enabled by default. In Zing 20.05.0.0, Java monitors are moved from CodeCache to a new dedicated MonitorCache storage. The release of Zing 20.05.0.0 includes optimizations targeted at accelerating compilation and warmup. Zing 20.05.0.0 introduces better JDK 11 java.lang.StackWalker which is frequently used by log4j2 and other logging implementations. See also https://openjdk.java.net/jeps/259 and java.lang.StackStreamFactory$AbstractStackWalker. Zing 20.05.0.0 provides a reduction of application exit times in the non-ZST mode when a process uses mlockall(). Zing 20.05.0.0 improves the mitigation strategy used by the Falcon compiler to minimize performance impacts due to Intel's microcode updates in response to Jump Conditional Code (JCC) Erratum SKX102. Previous versions inserted nop instructions for padding; the new version can optionally increase the size of existing instructions in some cases. As before, the mitigation is enabled only on affected processors, and no user action is needed. Zing 20.05.0.0 introduces a testing grace period mode, under which the Zing can run for up to 60 minutes (3600 seconds) without requiring a valid license. The testing grace period can be enabled by setting the ZING_TESTING_GRACE_PERIOD_SEC environment variable to a number of grace period seconds (up to 3600), or by using the -XX:ZVMTestingGracePeriodSec=N flag with a similar value. Resolved Issues Issue ID Description ZVM-15452 Crash with problematic frame vframe::next()+0x9e ZVM-15426 Crash in guarantee(false) failed: derived_oop_slots.contains(dst)!! ZVM-15024 Crash in guarantee(FMP.getNumFunctions() == 1) failed: exactly one function expected!. Known Issues Issue ID Description 20.04.0.0 Release Notes PDF Release date: April 30, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New The release of Zing 20.04.0.0 contains April 2020 critical patch update (CPU) security and critical bug fixes and brings the associated JDK 7, JDK 8, and JDK 11 versions to April 2020 CPU security update levels. Zing 20.04.0.0 incorporates additional non-security changes associated with the April PSU 2020 OpenJDK 8u252 and OpenJDK 11.0.7 release contents. Starting with Zing 20.04.0.0, the -XX:+UseC2 option can use one of two separate implementations of C2 JIT compilation: a traditional UseSeaOfNodesC2 mode and a new UseKestrelC2 mode. The new mode is selected with +UseKestrelC2 which is on by default for Zing 11 and off by default for Zing 8 and Zing 7. This mode enables a C2 implementation introduced to Zing in 2020. It is based on a lightweight use of the LLVM backend and typically produces faster code than UseSeaOfNodesC2 while keeping compilation effort at similar levels. UseKestrelC2 generally exhibits a significantly lower compilation-time CPU consumption compared to Falcon. The old mode is selected with +UseSeaOfNodesC2 which is off by default in Zing 11 and on by default for Zing 8 and Zing 7. See Using Zing Command-Line Options for UseKestrelC2 and UseSeaOfNodesC2 command-line options and details. Zing 20.04.0.0 introduces a compilation time improvement. The release of Zing 20.04.0.0 introduces an increased maximum Java heap size from 1 TB to 2.5 TB in the default non-ZST mode. The maximum Java heap size for the Zing Virtual Machine with ZST is 20 TB. In Zing 20.04.0.0, a new Java Flight Recorder functionality allows you to collect profiling data about applications that use JNI invocations. The release of Zing 20.04.0.0 includes optimizations targeted at reducing JNI transition costs. The cost of a native call from Java was reduced, and the implementation of the accessor functions used to retrieve fields of Java objects from native code was also improved. Most applications will not be affected, but applications with many native transitions (such as a socket or file IO) may see the marked improvement. See Using Zing Command-Line Options for UseFastJNIAccessors, UseMembar, and UseThreadStateNativeWrapperProtocol command-line options and details. Zing 20.04.0.0 excludes debug symbols embedded in libjvm.so, which reduces the filesystem footprint of a Zing installation by 280 MB. Contact [email protected] if you need to install debug symbols for Zing. Resolved Issues Issue ID Description ZVM-15020 Illegal memcpy generated through the optimizer. ZVM-14815 getPercentJavaHeapOccupiedAfterCollection() returns 0. ZVM-10128 Runtime.getRuntime().availableProcessors() returns an incorrect value when affinity is set. Known Issues Issue ID Description ZVM-14636 Heap dumps and JVMTI object tagging are not supported with UseEpsilonGC. 20.03.1.0 Release Notes PDF Release date: This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u252 8 8u242 11 11.0.6+10 What’s New Resolved Issues Issue ID Description Known Issues Issue ID Description 20.03.0.0 Release Notes PDF Release date: This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u252 8 8u242 11 11.0.6+10 What’s New The release of Zing 20.03.0.0 introduces the elimination of redundant boxing conversions and the optimized copying of HashSets. Resolved Issues Issue ID Description Known Issues Issue ID Description 20.02.1.0 Release Notes PDF Release date: April 8, 2020 This release is based on Azul Platform Prime 20.02.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u252 8 8u242 11 11.0.6+10 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 20.02.0.0 Release Notes PDF Release date: February 28, 2020 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u252 8 8u242 11 11.0.6+10 What’s New January 2020 PSU Release. This version incorporates additional non-security changes associated with the PSU 2020 OpenJDK 8u242 and OpenJDK 11.0.6 release contents. Deprecation of FalconUseLegacyInliner The FalconUseLegacyInliner command-line option is deprecated in Zing 8 and 11 with no replacemen. Resolved Issues Issue ID Description ZVM-14463 Occasionally seen segmentation faults during startup of the servers, which causes the server to fail to start. ZVM-12506 In Java 11 testing, a rare ZVM 18.12.0.0 crash was observed when returning from the invocation of a MethodHandle routine. Known Issues There are no new issues to report in this release. 20.01.0.0 Release Notes PDF Release date: January 30, 2020 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u251 8 8u241 11 11.0.5.0.101+11 What’s New January 2020 CPU Release. InZVM20.01.0.0, -XX:+FalconCompensateForIntelMCUForErratumSKX102 is an off-by-default option and introduces a nop padding based mitigation for performance regressions seen on some systems following Intel’s microcode updates in response to errata SKX102. This option is expected to become the default in a future Zing release. If enabled, nop padding will be used to align affected branches on systems with the microcode update applied. For testing purposes, the flag -XX:+ForceFalconCompensateForIntelMCUForErratumSKX102 is also provided. This can be used to force the generation of nop padded code on unaffected systems for performance validation. Resolved Issues Issue ID Description ZVM-7678 Backport of JDK-8162795 to fix JNI weak handle native memory leak which can occur in some use cases since ZVM 19.02.102.0. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "a1b810c6-aea2-4f3c-acf7-ad46b171a8b5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.12.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_12_0_0",
  "content" : "23.12.0.0 Release Notes PDF Release date: December 15, 2023 This release is based on Azul Platform Prime 23.10.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b3 11 11.0.21+8-LTS 17 17.0.9+8-LTS 21 21.0.1+11-MTS What’s New Azul platform Prime 23.12.0.0 includes several performance fixes including improvements to handling of arrays such as ArraysFill and ArrayCopy. More concise logging of the Compilation Ranking feature has been implemented in order to better asses the behavior and impact of this feature. This applies to Falcon compilations only. Newly collected data has been added to the pre-existing charts in GC Log Analyzer, Compiler Statistics > Compiler Queues and Compiler Statistic > Tier 2 Compiler Counts. Newly collected and viewable data includes the following: The total number of hot and warm methods which have made it to the compile queue, split from the total number of methods. The total number of hot and warm methods which have begun compilation, split from the total number of methods. The total number of methods which were not promoted to the compiler queue due to being identified as cold methods. These are methods which have reached the compile threshold, but not quickly enough to be considered warm or hot methods. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release."
}, {
  "objectID" : "336b5aff-ef09-4c0b-a864-c1a4ccdfec8c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-4",
  "content" : "What’s New Azul platform Prime 23.12.0.0 includes several performance fixes including improvements to handling of arrays such as ArraysFill and ArrayCopy. More concise logging of the Compilation Ranking feature has been implemented in order to better asses the behavior and impact of this feature. This applies to Falcon compilations only. Newly collected data has been added to the pre-existing charts in GC Log Analyzer, Compiler Statistics > Compiler Queues and Compiler Statistic > Tier 2 Compiler Counts. Newly collected and viewable data includes the following: The total number of hot and warm methods which have made it to the compile queue, split from the total number of methods. The total number of hot and warm methods which have begun compilation, split from the total number of methods. The total number of methods which were not promoted to the compiler queue due to being identified as cold methods. These are methods which have reached the compile threshold, but not quickly enough to be considered warm or hot methods."
}, {
  "objectID" : "79fd5ce1-260a-43f3-82f8-b13203eed3d3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-4",
  "content" : "Resolved Issues There are no resolved issues to report in this release."
}, {
  "objectID" : "c2914cac-9c3b-47a8-a551-d4d56e2099da",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.10.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_10_0_0",
  "content" : "23.10.0.0 Release Notes PDF Release date: November 2, 2023 This PSU release is based on Azul Platform Prime 23.09.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b3 11 11.0.21+8-LTS 17 17.0.9+8-LTS 21 21.0.1+11-MTS What’s New Zing 23.10.0.0 contains the General Availability (GA) release of Azul Prime Builds of OpenJDK 21. October 2023 CPU and PSU release security fixes, including CPU and PSU fixes for Azul Prime Builds of OpenJDK 21. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22067 CORBA CORBA Yes 5.3 Network Low None None Unchanged None Low None 8 Note 1 CVE-2023-22081 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 21, 17, 11, 8 Note 2 CVE-2023-30589 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None High None None CVE-2023-22091 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Compiler Multiple Yes 4.8 Network High None None Unchanged Low Low None None CVE-2023-22025 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability can only be exploited by supplying data to APIs in the specified Component, e.g., through a web service. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 3 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for October 2023 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28960 Potential regression in compilation behaviors and times from 23.02.400 to 23.08.01 ZVM-29000 Fix missing files for SelfDiagnosticRunLevel=2 ZVM-28926 jlink creates debuginfo libraries ZVM-28801 Prime jre17 fails to load management agent"
}, {
  "objectID" : "582bc407-8af1-4cd6-9905-784875a95c7c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-5",
  "content" : "What’s New Zing 23.10.0.0 contains the General Availability (GA) release of Azul Prime Builds of OpenJDK 21. October 2023 CPU and PSU release security fixes, including CPU and PSU fixes for Azul Prime Builds of OpenJDK 21."
}, {
  "objectID" : "d34a2c16-5492-4009-a9f8-2bb2d64fd8d0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-4",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22067 CORBA CORBA Yes 5.3 Network Low None None Unchanged None Low None 8 Note 1 CVE-2023-22081 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 21, 17, 11, 8 Note 2 CVE-2023-30589 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None High None None CVE-2023-22091 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Compiler Multiple Yes 4.8 Network High None None Unchanged Low Low None None CVE-2023-22025 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability can only be exploited by supplying data to APIs in the specified Component, e.g., through a web service. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 3 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for October 2023"
}, {
  "objectID" : "edfc0c78-a33d-49b6-9e37-c136d8dd40b4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-5",
  "content" : "Resolved Issues Issue ID Description ZVM-28960 Potential regression in compilation behaviors and times from 23.02.400 to 23.08.01 ZVM-29000 Fix missing files for SelfDiagnosticRunLevel=2 ZVM-28926 jlink creates debuginfo libraries ZVM-28801 Prime jre17 fails to load management agent"
}, {
  "objectID" : "5f7ac9d5-342b-4aab-bf1e-ef7cfbaf4731",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.09.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_09_0_0",
  "content" : "23.09.0.0 Release Notes PDF Release date: September 29, 2023 This release is based on Azul Platform Prime 23.08.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New A new option, GPGCSafepointWaitForMutatorResume, has been introduced and is set to true by default. This flag tells the Garbage Collector to pause and wait for mutator threads to be woken up before resuming, after every GC safepoint. If -XX:-GPGCSafepointWaitForMutatorResume is set, the Garbage Collector resumes its work in parallel with mutator threads waking up. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28703 java.lang.UnsupportedOperationException Monitoring of Synchronizer Usage is not supported sun.management.ThreadImpl.findDeadlockedThreads(ThreadImpl.java:411) ZVM-28639 Debug files/libraries not being excluded from release artifacts ZVM-28588 weblogic crashed with \"assert0(false) failed: [false expected]\""
}, {
  "objectID" : "21379f43-174a-4cf7-88f0-4a63b4552605",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-6",
  "content" : "What’s New A new option, GPGCSafepointWaitForMutatorResume, has been introduced and is set to true by default. This flag tells the Garbage Collector to pause and wait for mutator threads to be woken up before resuming, after every GC safepoint. If -XX:-GPGCSafepointWaitForMutatorResume is set, the Garbage Collector resumes its work in parallel with mutator threads waking up."
}, {
  "objectID" : "62744c77-04db-45c4-ab2b-305c922c9e06",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-6",
  "content" : "Resolved Issues Issue ID Description ZVM-28703 java.lang.UnsupportedOperationException Monitoring of Synchronizer Usage is not supported sun.management.ThreadImpl.findDeadlockedThreads(ThreadImpl.java:411) ZVM-28639 Debug files/libraries not being excluded from release artifacts ZVM-28588 weblogic crashed with \"assert0(false) failed: [false expected]\""
}, {
  "objectID" : "9c208f68-f255-4182-9134-79ecdccb6559",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.08.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_08_0_0",
  "content" : "23.08.0.0 Release Notes PDF Release date: September 11, 2023 This release is based on Azul Platform Prime 23.07.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New Compilation ranks by priority, which allows the JVM to assign compilation ranks to methods, has been introduced to Azul Platform Prime 23.08.0.0. This allows the Falcon compiler to assign ranks, hot, warm, or cold, to methods in order to prioritize system resources to methods depending on their hotness. The value of compilation ranking is that compiler activity is optimized later in an application run, not only reducing system load and freeing up resources for the running application but also reducing application outliers. For more information on compilation ranks, see Analyzing and Tuning Warmup. For newly added options, see Command Line Options. As of Azul Platform Prime 23.08.0.0, ZVision and ZVRobot components have been deprecated and are no longer actively developed. While we still support these components, we encourage users to switch to Java Flight Recorder, as ZVision and ZVRobot are planned for End-of-Life with Azul Platform Prime 24.02.0.0. Support for the latest features in Optimizer Hub (formerly Cloud Native Compiler) 1.8.0. As Cloud Native Compiler expands its scope to offer more functionality than just offloading compilations, it is time to rebrand the offering to better reflect what it does. Starting with release 1.8, we are using the following naming: Optimizer Hub (was Cloud Native Compiler) - The name of the overall component that you install on your Kubernetes cluster. Cloud Native Compiler (was Compiler Service) - The feature that performs the compilation on Optimizer Hub. ReadyNow Orchestrator (was Profile Log Service) - The feature that records and serves ReadyNow profiles to JVMs. In Optimizer Hub 1.8, all major artifacts and command line switches use the updated branding. This includes, but is not limited to: Command-line JVM options to configure Cloud Native Compiler and ReadyNow Orchestrator. See Command Line Options. Helm repository locations, names, and parameter names: github.com/AzulSystems/opthub-helm-charts. REST API URLs. If you are using release 1.7 and earlier, all of the previous spellings of artifacts still work. Additionally, all of the pre-1.8 command-line arguments will continue to work for a period of one year from the release of 1.8. The command line option PreferContainerQuotaForVMInternalCPUCount has been set to true by default in order to make calculations of internal thread counts, as well as budgeting options, more clear in container environments. In container environments where both CPU shares and CPU quota are specified, such as with Kubernetes where these are commonly specified, the VM now uses quota to calculate compiler and GC thread counts. Prior to Azul Platform Prime 23.08, it was using half of quota for the calculation. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28301 Fix java_lang_String::hash_code ZVM-28262 Remove default RSS cap for ProfileLogIn ZVM-28242 JFR profiler does not collect stack traces ZVM-28144 Exhausting java heap during early VM initialization causes a hang ZVM-28121 JFR is not collecting jdk.ExecutionSample events on ARM ZVM-27536 Enable per-thread CPU utilisation data collection in SelfDiagnosticRunLevel=3"
}, {
  "objectID" : "697e72d8-887d-473c-8fbc-651f3cc5c825",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-7",
  "content" : "What’s New Compilation ranks by priority, which allows the JVM to assign compilation ranks to methods, has been introduced to Azul Platform Prime 23.08.0.0. This allows the Falcon compiler to assign ranks, hot, warm, or cold, to methods in order to prioritize system resources to methods depending on their hotness. The value of compilation ranking is that compiler activity is optimized later in an application run, not only reducing system load and freeing up resources for the running application but also reducing application outliers. For more information on compilation ranks, see Analyzing and Tuning Warmup. For newly added options, see Command Line Options. As of Azul Platform Prime 23.08.0.0, ZVision and ZVRobot components have been deprecated and are no longer actively developed. While we still support these components, we encourage users to switch to Java Flight Recorder, as ZVision and ZVRobot are planned for End-of-Life with Azul Platform Prime 24.02.0.0. Support for the latest features in Optimizer Hub (formerly Cloud Native Compiler) 1.8.0. As Cloud Native Compiler expands its scope to offer more functionality than just offloading compilations, it is time to rebrand the offering to better reflect what it does. Starting with release 1.8, we are using the following naming: Optimizer Hub (was Cloud Native Compiler) - The name of the overall component that you install on your Kubernetes cluster. Cloud Native Compiler (was Compiler Service) - The feature that performs the compilation on Optimizer Hub. ReadyNow Orchestrator (was Profile Log Service) - The feature that records and serves ReadyNow profiles to JVMs. In Optimizer Hub 1.8, all major artifacts and command line switches use the updated branding. This includes, but is not limited to: Command-line JVM options to configure Cloud Native Compiler and ReadyNow Orchestrator. See Command Line Options. Helm repository locations, names, and parameter names: github.com/AzulSystems/opthub-helm-charts. REST API URLs. If you are using release 1.7 and earlier, all of the previous spellings of artifacts still work. Additionally, all of the pre-1.8 command-line arguments will continue to work for a period of one year from the release of 1.8. The command line option PreferContainerQuotaForVMInternalCPUCount has been set to true by default in order to make calculations of internal thread counts, as well as budgeting options, more clear in container environments. In container environments where both CPU shares and CPU quota are specified, such as with Kubernetes where these are commonly specified, the VM now uses quota to calculate compiler and GC thread counts. Prior to Azul Platform Prime 23.08, it was using half of quota for the calculation."
}, {
  "objectID" : "5cf6d1fd-f328-49b7-befc-684dd8b70c93",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-7",
  "content" : "Resolved Issues Issue ID Description ZVM-28301 Fix java_lang_String::hash_code ZVM-28262 Remove default RSS cap for ProfileLogIn ZVM-28242 JFR profiler does not collect stack traces ZVM-28144 Exhausting java heap during early VM initialization causes a hang ZVM-28121 JFR is not collecting jdk.ExecutionSample events on ARM ZVM-27536 Enable per-thread CPU utilisation data collection in SelfDiagnosticRunLevel=3"
}, {
  "objectID" : "84b644ae-7c0f-4360-99b5-76d1537379a3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.07.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_07_0_0",
  "content" : "23.07.0.0 Release Notes PDF Release date: July 31, 2023 This PSU release is based on Azul Platform Prime 23.06.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b5 11 11.0.20+8-LTS 17 17.0.8+7-LTS What’s New ZVision and ZVRobot have been separated from the Azul Platform Prime package due to a known vulnerability in jQuery 1.4.3, which is used in building the ZVision and ZVRobot utilities. At this time, Azul is not aware of any vulnerability in ZVision itself. For this reason, ZVision is still available for download for Azul Platform Prime subscribers at https://ftp.azul.com/releases/Zing/ZVision/ZVTools.zip The command line option -XX:CompileCommand has been updated to use FalconCompileThreshold. This option is used in the following way: -XX:CompileCommand=\"option,<Class>::<method>,FalconCompileThreshold=<threshold value>\" July 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22041 Hotspot None No 5.1 Local High None None Unchanged High None None 17, 11 Note 1 CVE-2023-22036 Utility Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22049 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-25193 2D (Harfbuzz) Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22006 Networking Multiple Yes 3.1 Network High None Required Unchanged None Low None 17, 11 Note 1 CVE-2023-22043 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. JavaFX Multiple Yes 5.9 Network High None None Unchanged None High None None Note 1 CVE-2023-22044 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22045 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22051 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. GraalVM Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for July 2023 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27897 Hadoop fails with Prime when -XX:+UseAES is used ZVM-27098 Incompatibility with Apache Flink with RocksDB"
}, {
  "objectID" : "dfe27b81-41a1-4213-873f-f05265c7b849",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-8",
  "content" : "What’s New ZVision and ZVRobot have been separated from the Azul Platform Prime package due to a known vulnerability in jQuery 1.4.3, which is used in building the ZVision and ZVRobot utilities. At this time, Azul is not aware of any vulnerability in ZVision itself. For this reason, ZVision is still available for download for Azul Platform Prime subscribers at https://ftp.azul.com/releases/Zing/ZVision/ZVTools.zip The command line option -XX:CompileCommand has been updated to use FalconCompileThreshold. This option is used in the following way: -XX:CompileCommand=\"option,<Class>::<method>,FalconCompileThreshold=<threshold value>\" July 2023 CPU release security fixes."
}, {
  "objectID" : "610d78bd-6e23-4923-aa0b-ecb86a06dc9c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-5",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22041 Hotspot None No 5.1 Local High None None Unchanged High None None 17, 11 Note 1 CVE-2023-22036 Utility Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22049 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-25193 2D (Harfbuzz) Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22006 Networking Multiple Yes 3.1 Network High None Required Unchanged None Low None 17, 11 Note 1 CVE-2023-22043 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. JavaFX Multiple Yes 5.9 Network High None None Unchanged None High None None Note 1 CVE-2023-22044 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22045 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22051 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. GraalVM Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for July 2023"
}, {
  "objectID" : "eaa668c9-17ea-42f9-a407-3ac017332c28",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-8",
  "content" : "Resolved Issues Issue ID Description ZVM-27897 Hadoop fails with Prime when -XX:+UseAES is used ZVM-27098 Incompatibility with Apache Flink with RocksDB"
}, {
  "objectID" : "1cd9d3d8-3944-4871-b440-0c2d1c633b96",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.06.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_06_0_0",
  "content" : "23.06.0.0 Release Notes PDF Release date: June 30, 2023 This release is based on Azul Platform Prime 23.05.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b2 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New A new option, C2CompileThreshold, has been added. This option allows the C2 compile threshold to be specified for individual methods. This option was introduced because some methods that are rarely called are still important and need to undergo regular optimization. This is set using -XX:CompileCommand in the following way: -XX:CompileCommand=\"option,<Class>::<method>,C2CompileThreshold=<threshold>\" The maximum supported code cache size has been increased to 1758 MB when AllocCodeCacheInLower2G is disabled using -XX:-AllocCodeCacheInLower2G. It is no longer necessary to LD_PRELOAD the libnmt_hooks.so library in order to use extended Native Memory Tracking (NMT). The libnmt_hooks.so library is now linked by default. Using Java Flight Recorder, you can now see exact JIT name for each stacktrace frame in Azul Mission Control in the Method Profiling tab. This uses the option JFRDistinguishJITTypes, which is set to true by default, and shows either C1, C2, or Falcon for each stacktrace frame. With JFRDistinguishJITTypes set to false, it shows JIT compiled. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27634 Unify Prime’s \"java.vendor\" with Zulu ZVM-27514 High JFRCheckpoint pauses seen on Prime ZVM-27506 Turn on JFRDistinguishJITTypes flag by default ZVM-27424 Prime 11+ doesn’t throw IncompatibleClassChangeError in instanceKlass::method_at_itable ZVM-27785 Fix segmentation fault on StubRoutines::stringIndexOf ZVM-27675 Prohibit inlining for methods with invalid method ID ZVM-27624 Disable RSS workaround only once use of large pages are confirmed ZVM-27388 objSizes.jar application crashes with \"assert(m->is_abstract()) failed: should be public and abstract\" in fastdebug mode ZVM-27549 Avoid native method calls from VM.java class"
}, {
  "objectID" : "6e5ec275-91a3-43ab-b473-fd352ee4789d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-9",
  "content" : "What’s New A new option, C2CompileThreshold, has been added. This option allows the C2 compile threshold to be specified for individual methods. This option was introduced because some methods that are rarely called are still important and need to undergo regular optimization. This is set using -XX:CompileCommand in the following way: -XX:CompileCommand=\"option,<Class>::<method>,C2CompileThreshold=<threshold>\" The maximum supported code cache size has been increased to 1758 MB when AllocCodeCacheInLower2G is disabled using -XX:-AllocCodeCacheInLower2G. It is no longer necessary to LD_PRELOAD the libnmt_hooks.so library in order to use extended Native Memory Tracking (NMT). The libnmt_hooks.so library is now linked by default. Using Java Flight Recorder, you can now see exact JIT name for each stacktrace frame in Azul Mission Control in the Method Profiling tab. This uses the option JFRDistinguishJITTypes, which is set to true by default, and shows either C1, C2, or Falcon for each stacktrace frame. With JFRDistinguishJITTypes set to false, it shows JIT compiled."
}, {
  "objectID" : "13935035-1d06-4461-87cf-3bf3a5e559b0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-9",
  "content" : "Resolved Issues Issue ID Description ZVM-27634 Unify Prime’s \"java.vendor\" with Zulu ZVM-27514 High JFRCheckpoint pauses seen on Prime ZVM-27506 Turn on JFRDistinguishJITTypes flag by default ZVM-27424 Prime 11+ doesn’t throw IncompatibleClassChangeError in instanceKlass::method_at_itable ZVM-27785 Fix segmentation fault on StubRoutines::stringIndexOf ZVM-27675 Prohibit inlining for methods with invalid method ID ZVM-27624 Disable RSS workaround only once use of large pages are confirmed ZVM-27388 objSizes.jar application crashes with \"assert(m->is_abstract()) failed: should be public and abstract\" in fastdebug mode ZVM-27549 Avoid native method calls from VM.java class"
}, {
  "objectID" : "4d74972c-11a5-447d-be7c-cb5106970ac1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.05.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_05_0_0",
  "content" : "23.05.0.0 Release Notes PDF Release date: May 31, 2023 This release is based on Azul Platform Prime 23.04.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b2 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New Some Falcon CPU Budgeting options have been renamed according to the following table: Changed from: Changed to: CompilerTier2BudgetingThreadsPercent CompilerTier2BudgetingCPUPercent CompilerTier2BudgetingWarmupThreadsPercent CompilerTier2BudgetingWarmupCPUPercent CompilerTier2BudgetMaxMs CompilerTier2BudgetWindowDurationMs For more information on Falcon CPU Budgeting options, see Command Line Options, CPU Budgeting Options The command line option UseTrueObjectsForUnsafe has been set to true by default. This option forces unsafe objects to be returned in their true object form instead of the equivalent java class object. For example, with UseTrueObjectsForUnsafe disabled, java.lang.Class can be returned instead of the true klassOop. Azul Platform Prime 23.05.0.0 includes several performance optimizations including many intrinsic functions implemented in the Falcon compiler. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release."
}, {
  "objectID" : "803ae5d1-fba7-4fdf-91cc-35bb5e59d5c9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-10",
  "content" : "What’s New Some Falcon CPU Budgeting options have been renamed according to the following table: Changed from: Changed to: CompilerTier2BudgetingThreadsPercent CompilerTier2BudgetingCPUPercent CompilerTier2BudgetingWarmupThreadsPercent CompilerTier2BudgetingWarmupCPUPercent CompilerTier2BudgetMaxMs CompilerTier2BudgetWindowDurationMs For more information on Falcon CPU Budgeting options, see Command Line Options, CPU Budgeting Options The command line option UseTrueObjectsForUnsafe has been set to true by default. This option forces unsafe objects to be returned in their true object form instead of the equivalent java class object. For example, with UseTrueObjectsForUnsafe disabled, java.lang.Class can be returned instead of the true klassOop. Azul Platform Prime 23.05.0.0 includes several performance optimizations including many intrinsic functions implemented in the Falcon compiler."
}, {
  "objectID" : "d96395b8-4ce9-415c-867e-5f352da32a38",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.04.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_04_0_0",
  "content" : "23.04.0.0 Release Notes PDF Release date: April 28, 2023 This PSU release is based on Azul Platform Prime 23.03.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b2 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New April 2023 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for April 2023 Cloud Native Compiler (CNC) 1.7 client support. The command line option, AllocCodeCacheInLower2G, is now supported on the aarch64 system architecture, which is set to true by default. This option allocates code cache and related data structures at virtual address within 2 GB. To allow allocation to higher memory addresses, use -XX:-AllocCodeCacheinLower2G. A new command line option, GPGCCommitInitialHeapLazily, has been introduced, which is set to false by default. When enabled, this option prevents the whole of the initial heap size, InitialHeapSize or -Xms, from being committed from the OS upfront. With this option enabled, use the option GPGCLazyInitialHeapCommitPercent to specify how much of Xms shall be committed from the OS upfront, at startup. The default value for GPGCLazyInitialHeapCommitPercent is 50. The remainder gets committed based on regular elastic heap heuristics. The command line option InitialHeapSize is now incorporated in Azul Platform Prime in order to keep compatibility with OpenJDK. InitialHeapSize can be used instead of -Xms<size> on the command line. Note The command line argument MaxHeapSize can also be used instead of -Xmx<size> Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25950 Backport JDK-7059899 Stack overflows in Java code cause 64-bit JVMs to exit due to SIGSEGV"
}, {
  "objectID" : "fe6ff560-b396-4e93-b16d-0d08d725bf80",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-11",
  "content" : "What’s New April 2023 CPU and PSU release security fixes."
}, {
  "objectID" : "4f1651e3-5bfc-45e2-9881-b1f599eb27e0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-6",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for April 2023 Cloud Native Compiler (CNC) 1.7 client support. The command line option, AllocCodeCacheInLower2G, is now supported on the aarch64 system architecture, which is set to true by default. This option allocates code cache and related data structures at virtual address within 2 GB. To allow allocation to higher memory addresses, use -XX:-AllocCodeCacheinLower2G. A new command line option, GPGCCommitInitialHeapLazily, has been introduced, which is set to false by default. When enabled, this option prevents the whole of the initial heap size, InitialHeapSize or -Xms, from being committed from the OS upfront. With this option enabled, use the option GPGCLazyInitialHeapCommitPercent to specify how much of Xms shall be committed from the OS upfront, at startup. The default value for GPGCLazyInitialHeapCommitPercent is 50. The remainder gets committed based on regular elastic heap heuristics. The command line option InitialHeapSize is now incorporated in Azul Platform Prime in order to keep compatibility with OpenJDK. InitialHeapSize can be used instead of -Xms<size> on the command line. Note The command line argument MaxHeapSize can also be used instead of -Xmx<size>"
}, {
  "objectID" : "ab044b2f-fbe6-4e8e-b3e1-4ea90f5db077",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-11",
  "content" : "Resolved Issues Issue ID Description ZVM-25950 Backport JDK-7059899 Stack overflows in Java code cause 64-bit JVMs to exit due to SIGSEGV"
}, {
  "objectID" : "6cfd5d7f-72bd-4e9b-bbec-6e24d5cf9aa5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.03.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_03_0_0",
  "content" : "23.03.0.0 Release Notes PDF Release date: March 31, 2023 This release is based on Azul Platform Prime 23.02.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS 19 19.0.2+7-MTS What’s New Included in this release are the final set of JDK versions 13, 15 and 19. The next release will no longer contain these versions. Starting from 23.04.0.0, stream releases will include only JDK 8, 11, and 17. Starting from 23.02.100.0, stable releases will only include JDK 8, 11, and 17 CPU/PSU builds. Oracle Linux (Centos 7.9) ARM is supported from Azul Platform Prime version 22.03.0.0. The Command Line Option GPGCUseAllocationPacing has been disabled by default. The Command Line Option CNCForceLocalCompiler has been deprecated and replaced with the new option CNCEnableRemoteCompiler. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-26650 Transform head of _freeThreads to a tagged reference to avoid ABA problems ZVM-26648 Missing tag update in HeapRefBufferList::grab() ZVM-26387 [Alpine] Failed to bundle core from alpine container ZVM-26245 jlink on Prime converts library symlinks to files and increase the total size by 87MB"
}, {
  "objectID" : "cada8431-4847-4ae3-bf97-45e8d0ede8fc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-12",
  "content" : "What’s New Included in this release are the final set of JDK versions 13, 15 and 19. The next release will no longer contain these versions. Starting from 23.04.0.0, stream releases will include only JDK 8, 11, and 17. Starting from 23.02.100.0, stable releases will only include JDK 8, 11, and 17 CPU/PSU builds. Oracle Linux (Centos 7.9) ARM is supported from Azul Platform Prime version 22.03.0.0. The Command Line Option GPGCUseAllocationPacing has been disabled by default. The Command Line Option CNCForceLocalCompiler has been deprecated and replaced with the new option CNCEnableRemoteCompiler."
}, {
  "objectID" : "c81817d6-5984-4553-8a80-cd85fac7b285",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-12",
  "content" : "Resolved Issues Issue ID Description ZVM-26650 Transform head of _freeThreads to a tagged reference to avoid ABA problems ZVM-26648 Missing tag update in HeapRefBufferList::grab() ZVM-26387 [Alpine] Failed to bundle core from alpine container ZVM-26245 jlink on Prime converts library symlinks to files and increase the total size by 87MB"
}, {
  "objectID" : "c451d716-701d-454e-8637-df34dc369f73",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_02_0_0",
  "content" : "23.02.0.0 Release Notes PDF Release date: March 1, 2023 This release is based on Azul Platform Prime 23.01.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS 19 19.0.2+7-MTS Note Version 1 of the GC Log Analyzer has reached its end-of-life and has been replaced with Version 2 of the GC Log Analyzer. GC Log Analyzer 2 is included in Zing packages and can be found at <installdir>/etc/GCLogAnalyzer2.jar. The latest version of GC Log Analyzer 2 is also available for download at https://docs.azul.com/prime/GC-Log-Analyzer. What’s New Zing 23.02.0.0 contains the General Availability (GA) release of Azul Prime Builds of OpenJDK 19 for x86_64 systems. Cloud Native Compiler (CNC) 1.6.1 client support. NativeMemoryTracking has been extended with further Falcon tracking support. To enable \"extended tracking,\" set LD_PRELOAD=$JAVA_HOME/etc/zing/lib/libnmt_hooks.so in addition to regular NMT flags which are described in Native Memory Tracking Options and in the Oracle documentation. Zing 23.02.0.0 introduces new CPU budgeting features for the Falcon Tier 2 compiler. CPU Budgeting tells the Tier 2 compiler when to run and how many CPU threads to use, pre and post warmup. With these new features, it is possible to specify allocated threads as a percent, meaning the compiler and the running application can share resources, resulting in less pauses and more stability for the running application. Previously, only whole numbers of threads could be allocated. To enable these new features, use the argument -XX:+EnableTier2CompilerBudgeting. New Falcon CPU Budgeting features are listed in Command Line Options, CPU Budgeting Options A new command line option, AllocCodeCacheInLower2G has been introduced and is set to true by default. This option allocates code cache and related data structures at virtual address within 2 GB. To allow allocation to higher memory addresses, use -XX:-AllocCodeCacheinLower2G. This option is only available for x86_64 systems. Lower GC pauses with JVMTI - JVMTI tag map clearing has been moved outside of safepoint pause by default. This is set by the command line argument ConcurrentJVMTITagMapClearing and is set to true by default. Falcon improvement - Register allocation enhancement that improves code generation for derived pointers around GC safepoints. This allows derived pointers to rematerialize immediately before their use instead of after every safepoint. This is beneficial when a pointer is live across many statepoints but has few uses. Allocation publication barrier optimizations for Aarch64 in Falcon. Testing has yielded up to an 8.5% performance improvement from this optimization. The output format for -Xlog:safepoint has been changed to match OpenJDK for JDK13 and above. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-26265 Add jcmd, jmap, jps, jstack tools to jdk8 jre tar.gz ZVM-25703 backport JDK-8297028 (UseContainerCpuShares ) missing for Prime Java 8 Jan 2023 (Oracle 8u361 equivalent) ZVM-26144 attaching agent generates error: Skipping cleaning of inline cache ZVM-25902 ProfilePersistCodeProfilesOnUncommonTraps may introduce a significant overhead ZVM-25844 Tune FalconContextReset to lower value - Resolution: Reset frequency is chosen using an ergonomics heuristic. There is no need to tune the default value. ZVM-25437 jdk/test/hotspot/jtreg/serviceability/jvmti/RedefineClasses/RedefinePreviousVersions.java failed with \"java.lang.RuntimeException: 'Class unloading: has_previous_versions = false' missing from stdout/stderr\" ZVM-22464 JTreg crashed with JvmtiEnvBase::get_stack_trace ZVM-26017 -Xlog:safepoint output format differs between Zing 17 and OpenJDK 17"
}, {
  "objectID" : "3f148419-ebe9-41cf-bcf0-5ab3c39de93b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-13",
  "content" : "What’s New Zing 23.02.0.0 contains the General Availability (GA) release of Azul Prime Builds of OpenJDK 19 for x86_64 systems. Cloud Native Compiler (CNC) 1.6.1 client support. NativeMemoryTracking has been extended with further Falcon tracking support. To enable \"extended tracking,\" set LD_PRELOAD=$JAVA_HOME/etc/zing/lib/libnmt_hooks.so in addition to regular NMT flags which are described in Native Memory Tracking Options and in the Oracle documentation. Zing 23.02.0.0 introduces new CPU budgeting features for the Falcon Tier 2 compiler. CPU Budgeting tells the Tier 2 compiler when to run and how many CPU threads to use, pre and post warmup. With these new features, it is possible to specify allocated threads as a percent, meaning the compiler and the running application can share resources, resulting in less pauses and more stability for the running application. Previously, only whole numbers of threads could be allocated. To enable these new features, use the argument -XX:+EnableTier2CompilerBudgeting. New Falcon CPU Budgeting features are listed in Command Line Options, CPU Budgeting Options A new command line option, AllocCodeCacheInLower2G has been introduced and is set to true by default. This option allocates code cache and related data structures at virtual address within 2 GB. To allow allocation to higher memory addresses, use -XX:-AllocCodeCacheinLower2G. This option is only available for x86_64 systems. Lower GC pauses with JVMTI - JVMTI tag map clearing has been moved outside of safepoint pause by default. This is set by the command line argument ConcurrentJVMTITagMapClearing and is set to true by default. Falcon improvement - Register allocation enhancement that improves code generation for derived pointers around GC safepoints. This allows derived pointers to rematerialize immediately before their use instead of after every safepoint. This is beneficial when a pointer is live across many statepoints but has few uses. Allocation publication barrier optimizations for Aarch64 in Falcon. Testing has yielded up to an 8.5% performance improvement from this optimization. The output format for -Xlog:safepoint has been changed to match OpenJDK for JDK13 and above."
}, {
  "objectID" : "0fbb2d90-34bd-46d6-b899-c38782e329b5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-13",
  "content" : "Resolved Issues Issue ID Description ZVM-26265 Add jcmd, jmap, jps, jstack tools to jdk8 jre tar.gz ZVM-25703 backport JDK-8297028 (UseContainerCpuShares ) missing for Prime Java 8 Jan 2023 (Oracle 8u361 equivalent) ZVM-26144 attaching agent generates error: Skipping cleaning of inline cache ZVM-25902 ProfilePersistCodeProfilesOnUncommonTraps may introduce a significant overhead ZVM-25844 Tune FalconContextReset to lower value - Resolution: Reset frequency is chosen using an ergonomics heuristic. There is no need to tune the default value. ZVM-25437 jdk/test/hotspot/jtreg/serviceability/jvmti/RedefineClasses/RedefinePreviousVersions.java failed with \"java.lang.RuntimeException: 'Class unloading: has_previous_versions = false' missing from stdout/stderr\" ZVM-22464 JTreg crashed with JvmtiEnvBase::get_stack_trace ZVM-26017 -Xlog:safepoint output format differs between Zing 17 and OpenJDK 17"
}, {
  "objectID" : "def588e1-4291-4b79-8fba-6257e52f71a6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.01.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_23_01_0_0",
  "content" : "23.01.0.0 Release Notes PDF Release date: January 31, 2023 This PSU release is based on Azul Platform Prime 22.12.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b3 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS Note Version 1 of the GC Log Analyzer has reached its end-of-life and has been replaced with Version 2 of the GC Log Analyzer. GC Log Analyzer 2 is included in Zing packages and can be found at <installdir>/etc/GCLogAnalyzer2.jar. The latest version of GC Log Analyzer 2 is also available for download at https://docs.azul.com/prime/GC-Log-Analyzer. What’s New January 2023 CPU and PSU release security fixes. Cloud Native Compiler (CNC) 1.6 client support. You can now read and write ReadyNow profile logs to Cloud Native Compiler. This simplifies getting ReadyNow profile logs in and out of containers and other environments without persistent storage. Compile stashing has been disabled by default, even when using ReadyNow. Existing ReadyNow users that want to maintain the same compile stashing behavior as in earlier releases should ensure the -XX:+FalconUseCompileStashing flag is set. Users who wish to use compile stashing with the new Profile Log Service must ensure both +FalconUseCompileStashing and +CNCEnableRemoteCompiler flags are set. FalconContextReset is now set using ergonomics heuristic based on the number of Falcon compiler threads, unless specified explicitly. Falcon compiler threads reset the internal caches after every FalconContextReset number of compilations. This is a tradeoff between compilation speed and memory consumption. The more often the caches are reset, the less memory is consumed but more time is spent rebuilding the caches. Currently, the value of FalconContextReset is chosen as FalconContextResetFactor=<number of Falcon threads> nested between FalconContextResetLowerLimit and FalconContextResetUpperLimit. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21830 Serialization Multiple Yes 5.3 Network Low None None Unchanged None Low None 8 CVE-2023-21835 JSSE DTLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 CVE-2023-21843 Sound Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 CVE-2022-43548 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 8.1 Network High None None Unchanged High High High None For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2023 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25620 Disable compile stashing by default when ReadyNow on ZVM-25974 CNC links OpenSSL 1.1.1c, creating conflict with 3rd party library ZVM-24802 Memory Improvement - Make Falcon compiler context cleanup predictable disregarding the instance type"
}, {
  "objectID" : "ccd86e9d-1148-4c83-ba71-705280b9644d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-14",
  "content" : "What’s New January 2023 CPU and PSU release security fixes. Cloud Native Compiler (CNC) 1.6 client support. You can now read and write ReadyNow profile logs to Cloud Native Compiler. This simplifies getting ReadyNow profile logs in and out of containers and other environments without persistent storage. Compile stashing has been disabled by default, even when using ReadyNow. Existing ReadyNow users that want to maintain the same compile stashing behavior as in earlier releases should ensure the -XX:+FalconUseCompileStashing flag is set. Users who wish to use compile stashing with the new Profile Log Service must ensure both +FalconUseCompileStashing and +CNCEnableRemoteCompiler flags are set. FalconContextReset is now set using ergonomics heuristic based on the number of Falcon compiler threads, unless specified explicitly. Falcon compiler threads reset the internal caches after every FalconContextReset number of compilations. This is a tradeoff between compilation speed and memory consumption. The more often the caches are reset, the less memory is consumed but more time is spent rebuilding the caches. Currently, the value of FalconContextReset is chosen as FalconContextResetFactor=<number of Falcon threads> nested between FalconContextResetLowerLimit and FalconContextResetUpperLimit."
}, {
  "objectID" : "347fdf05-b0ea-47da-8144-d2426cf5b3c6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-7",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21830 Serialization Multiple Yes 5.3 Network Low None None Unchanged None Low None 8 CVE-2023-21835 JSSE DTLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 CVE-2023-21843 Sound Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 CVE-2022-43548 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 8.1 Network High None None Unchanged High High High None For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2023"
}, {
  "objectID" : "43976ef1-8f15-4bb1-8a8d-e6835fe1c70f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-14",
  "content" : "Resolved Issues Issue ID Description ZVM-25620 Disable compile stashing by default when ReadyNow on ZVM-25974 CNC links OpenSSL 1.1.1c, creating conflict with 3rd party library ZVM-24802 Memory Improvement - Make Falcon compiler context cleanup predictable disregarding the instance type"
}, {
  "objectID" : "0a13870f-6da2-4d1c-a3e5-ceee575e45eb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.12.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_12_0_0",
  "content" : "22.12.0.0 Release Notes PDF Release date: December 19, 2022 This release is based on Azul Platform Prime 22.10.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_352-b2 11 11.0.17+8 13 13.0.13+5 15 15.0.9+5 17 17.0.5+8 Note Version 1 of the GC Log Analyzer has reached its end-of-life and has been replaced with Version 2 of the GC Log Analyzer. GC Log Analyzer 2 is included in Zing packages and can be found at <installdir>/etc/GCLogAnalyzer2.jar. The latest version of GC Log Analyzer 2 is also available for download at https://docs.azul.com/prime/GC-Log-Analyzer. What’s New Zing 22.12.0.0, through various changed and updates, has been able to achieve 10% lower GC CPU usage on Cassandra. Zing 22.12.0.0 lowers the amount of GC pauses with hidden classes. Falcon has been improved for Jackson as well as other optimizations to the Falcon JIT compiler. New JMX MXBean metrics replace old metric name below java.lang.GarbageCollector to increase accuracy for GC monitoring added with JDK-8265136: Previously, metric \"GPGC New/Old\" was providing a sum of GC pauses and concurrent GC duration. This metric is replaced by the following: GPGC New/Old Cycles: duration time in ms of the concurrent GC which runs in parallel to application threads and is not stopping the application. GPGC New/Old Pauses: GC pause time in ms. On Java 11 and 17, the new metrics are enabled by default and the old removed. If you need to switch back to the old metric, add -XX:+GPGCReportLegacyGarbageCollectorMXBean. On Java 8, only the old metric is active by default. To switch to the new metric add -XX:-GPGCReportLegacyGarbageCollectorMXBean. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release."
}, {
  "objectID" : "6d038e8c-9425-4004-a982-8b6b1719fb8a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-15",
  "content" : "What’s New Zing 22.12.0.0, through various changed and updates, has been able to achieve 10% lower GC CPU usage on Cassandra. Zing 22.12.0.0 lowers the amount of GC pauses with hidden classes. Falcon has been improved for Jackson as well as other optimizations to the Falcon JIT compiler. New JMX MXBean metrics replace old metric name below java.lang.GarbageCollector to increase accuracy for GC monitoring added with JDK-8265136: Previously, metric \"GPGC New/Old\" was providing a sum of GC pauses and concurrent GC duration. This metric is replaced by the following: GPGC New/Old Cycles: duration time in ms of the concurrent GC which runs in parallel to application threads and is not stopping the application. GPGC New/Old Pauses: GC pause time in ms. On Java 11 and 17, the new metrics are enabled by default and the old removed. If you need to switch back to the old metric, add -XX:+GPGCReportLegacyGarbageCollectorMXBean. On Java 8, only the old metric is active by default. To switch to the new metric add -XX:-GPGCReportLegacyGarbageCollectorMXBean."
}, {
  "objectID" : "582a083b-13b5-420c-9b27-b0ba58b91f1a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.10.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_10_0_0",
  "content" : "22.10.0.0 Release Notes PDF Release date: October 31, 2022 This CPU/PSU release is based on Azul Platform Prime 22.09.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u352-b08 11 11.0.17+8 13 13.0.13+5 15 15.0.9+5 17 17.0.5+8 What’s New October 2022 CPU and PSU release security fixes Compatibility with Cloud Native Compiler (CNC) version 1.5 Support for the GA release of Azul Vulnerability Detection (AVD). Changes for containers regarding thread pool size calculation and number of available CPUs. With the October 2022 release of Java 11 and 17, the default calculation of available CPU cores will change, following JDK-8281181. Previously, the number of available CPU cores was in some situations calculated based on the lower bound defined in the environment. With the change in this release, the lower bound won’t be used anymore and the calculation will only be based on the upper limit of the environment. If in container-based systems no upper limit is defined, the total number of CPUs on the host machine is read as upper limit. A situation where a change will occur is, for example, a Kubernetes container where neither CPU requests nor CPU Limits are set, as previously the JVM would select only 1 CPU core as available in this situation while after the chance, it will select all available CPU cores of the environment which can lead to higher resource usage as thread pools of various open source frameworks are using this calculation for sizing. To verify if your systems are effect, check especially those where no upper limit is defined. In case you need to switch back to the previous calculation, add -XX:+UseContainerCpuShares to the Java command line. Other terms used in the context of CPU definitions are for lower bound \"CPU Requests\" or \"cgroups cpu.shares\", and for upper limit \"CPU Limits\" or \"cgroups cpu.cfs_quota_us\". When both quota and shares are specified for a cgroup and UseContainerCpuShares is true, the number of GC and compiler threads are derived based on a total processor count calculated as (quota+shares)/2. When UseContainerCpuShares is false the number is derived based on a total processor count calculated as (quota/2). To check the current setting, for example, to compare previous and current Java versions in your environment, use the following example to display the actual number of CPUs as seen by application code and run it inside your container environment: File AvailableCPUs.java:  public class AvailableCPUs {\n    public static void main(String[] args) {\n        System.out.println(\"CPUs: \"\n            + Runtime.getRuntime().availableProcessors());\n    }\n} To run it:  java -showversion AvailableCPUs.java Known Issues There are no new issues to report in this release. Resolved Issues ZVM-25268 - As a part of the PSU update, UseContainerCpuShares has been set to false (off) by default. ZVM-22642 - The GC log now reports data from remote compilations which can be viewed in GC Log Analyzer."
}, {
  "objectID" : "7f2d126b-0f6a-445f-a2ac-66f68afb5a37",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-16",
  "content" : "What’s New October 2022 CPU and PSU release security fixes Compatibility with Cloud Native Compiler (CNC) version 1.5 Support for the GA release of Azul Vulnerability Detection (AVD). Changes for containers regarding thread pool size calculation and number of available CPUs. With the October 2022 release of Java 11 and 17, the default calculation of available CPU cores will change, following JDK-8281181. Previously, the number of available CPU cores was in some situations calculated based on the lower bound defined in the environment. With the change in this release, the lower bound won’t be used anymore and the calculation will only be based on the upper limit of the environment. If in container-based systems no upper limit is defined, the total number of CPUs on the host machine is read as upper limit. A situation where a change will occur is, for example, a Kubernetes container where neither CPU requests nor CPU Limits are set, as previously the JVM would select only 1 CPU core as available in this situation while after the chance, it will select all available CPU cores of the environment which can lead to higher resource usage as thread pools of various open source frameworks are using this calculation for sizing. To verify if your systems are effect, check especially those where no upper limit is defined. In case you need to switch back to the previous calculation, add -XX:+UseContainerCpuShares to the Java command line. Other terms used in the context of CPU definitions are for lower bound \"CPU Requests\" or \"cgroups cpu.shares\", and for upper limit \"CPU Limits\" or \"cgroups cpu.cfs_quota_us\". When both quota and shares are specified for a cgroup and UseContainerCpuShares is true, the number of GC and compiler threads are derived based on a total processor count calculated as (quota+shares)/2. When UseContainerCpuShares is false the number is derived based on a total processor count calculated as (quota/2). To check the current setting, for example, to compare previous and current Java versions in your environment, use the following example to display the actual number of CPUs as seen by application code and run it inside your container environment: File AvailableCPUs.java:  public class AvailableCPUs {\n    public static void main(String[] args) {\n        System.out.println(\"CPUs: \"\n            + Runtime.getRuntime().availableProcessors());\n    }\n} To run it:  java -showversion AvailableCPUs.java"
}, {
  "objectID" : "8d0035fd-2858-448a-bd8b-e99a4f1814da",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-16",
  "content" : "Resolved Issues ZVM-25268 - As a part of the PSU update, UseContainerCpuShares has been set to false (off) by default. ZVM-22642 - The GC log now reports data from remote compilations which can be viewed in GC Log Analyzer."
}, {
  "objectID" : "9e031f86-6c7c-49ee-bb48-e48c8ff5b7a0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.09.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_09_0_0",
  "content" : "22.09.0.0 Release Notes PDF Release date: September 30, 2022 This release is based on Azul Platform Prime 22.08.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New Internal bug fixes. Improved accuracy of RSS metric reported in GC log (C heap usage). With this improvement, the reported memory usage in GC log will give more accurate results. The Allocation Pacing feature is turned on by default in non-ZST mode. This will help reduce peak allocation delays while introducing smaller delays into allocation paths as heap usage approaches the total Java heap committed. To turn off the feature use -XX:-GPGCUseAllocationPacing. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "b1404a39-8dee-405f-a8a2-22c93a613f24",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-17",
  "content" : "What’s New Internal bug fixes. Improved accuracy of RSS metric reported in GC log (C heap usage). With this improvement, the reported memory usage in GC log will give more accurate results. The Allocation Pacing feature is turned on by default in non-ZST mode. This will help reduce peak allocation delays while introducing smaller delays into allocation paths as heap usage approaches the total Java heap committed. To turn off the feature use -XX:-GPGCUseAllocationPacing."
}, {
  "objectID" : "30c8e012-3256-4b7d-91da-39a3a8611d05",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-17",
  "content" : "Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "4b2ebb67-365f-4701-8392-9be11cf6da25",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.08.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_08_0_0",
  "content" : "22.08.0.0 Release Notes PDF Release date: August 30, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New Internal bug fixes. ZVM-24576 - New feature, Allocation Pacing, to help protect against long allocation delays. When enabled, the virtual machine adds smooth delays to allocations as the heap usage approaches the maximum. This new feature helps prevent long allocation delays caused by memory exhaustion and helps the garbage collector keep up. To enable the feature, use -XX:+GPGCUseAllocationPacing, available in non-ZST mode only. ZVM-24277 - Implemented StringUTF16.compress Resolved Issues Issue ID Description ZVM-24429 Using Xlog:safepoint could cause long pauses under I/O contention ZVM-24614 PrintCodeCacheMap could cause application crash at exit time. ZVM-24455 LockOpt::eliminateNestedLock could sometimes add an invalid/stale value to the deopt bundle which could potentially lead to crashes. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "a15203ed-df51-4bfd-83de-fc645b2b2c8a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-18",
  "content" : "What’s New Internal bug fixes. ZVM-24576 - New feature, Allocation Pacing, to help protect against long allocation delays. When enabled, the virtual machine adds smooth delays to allocations as the heap usage approaches the maximum. This new feature helps prevent long allocation delays caused by memory exhaustion and helps the garbage collector keep up. To enable the feature, use -XX:+GPGCUseAllocationPacing, available in non-ZST mode only. ZVM-24277 - Implemented StringUTF16.compress"
}, {
  "objectID" : "e4d52865-44ea-46ac-8513-d18dcc8c1f53",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-18",
  "content" : "Resolved Issues Issue ID Description ZVM-24429 Using Xlog:safepoint could cause long pauses under I/O contention ZVM-24614 PrintCodeCacheMap could cause application crash at exit time. ZVM-24455 LockOpt::eliminateNestedLock could sometimes add an invalid/stale value to the deopt bundle which could potentially lead to crashes."
}, {
  "objectID" : "ccbd2ff8-7cb6-4c92-a241-45e617501d85",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.07.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_07_1_0",
  "content" : "22.07.1.0 Release Notes PDF Release date: August 9, 2022 This release is based on Azul Platform Prime 22.07.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16 13 13.0.12 15 15.0.8 17 17.0.4 What’s New Internal bug fixes. Resolved Issues Issue ID Description JDK-8290832 It was no longer possible to change user.dir in JDK8 due to changes in the previous release of OpenJDK, causing compatibility issues. Those changes have been rolled back so that user.dir may be changed. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "fd968515-596c-4972-bf62-cf02cc3577b8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-19",
  "content" : "What’s New Internal bug fixes."
}, {
  "objectID" : "e83a7e53-aa1c-4074-8b2d-68c3b426356f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-19",
  "content" : "Resolved Issues Issue ID Description JDK-8290832 It was no longer possible to change user.dir in JDK8 due to changes in the previous release of OpenJDK, causing compatibility issues. Those changes have been rolled back so that user.dir may be changed."
}, {
  "objectID" : "f0811ea5-a156-44d0-b846-82785fc355e8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.07.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_07_0_0",
  "content" : "22.07.0.0 Release Notes PDF Release date: July 29, 2022 This PSU release is based on Azul Platform Prime 22.06.0.0 and 22.02.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u342 11 11.0.16 13 13.0.12 15 15.0.8 17 17.0.4 What’s New July 2022 PSU release fixes. ZVM-24301 - New command line option UseContainerCpuShares, default true, to consider CPU shares when computing available processors inside a cgroup. This option was backported from OpenJDK 17 and it is important to note that while OpenJDK has a default value of false, the default value in Azul Platform Prime is true. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-34169 JAXP (Xalan-J) Multiple Yes 7.5 Network Low None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21541 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21540 Hotspot Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8 Note 1 CVE-2022-21549 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 17 Note 1 CVE-2022-25647 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image (Gson) None No 6.2 Local Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and relies on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues Issue ID Description ZVM-16112 Applications using munlockall() require -XX:-UseThreadStateNativeWrapperProtocol on the command line to avoid crash or inconsistency if the rare situation occurs that the application gets swapped out after the munlockall() invocation."
}, {
  "objectID" : "e4535128-6828-4822-b1e0-6c8dbe02b1f2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-20",
  "content" : "What’s New July 2022 PSU release fixes. ZVM-24301 - New command line option UseContainerCpuShares, default true, to consider CPU shares when computing available processors inside a cgroup. This option was backported from OpenJDK 17 and it is important to note that while OpenJDK has a default value of false, the default value in Azul Platform Prime is true."
}, {
  "objectID" : "9c659735-5aa7-4dc0-a555-1312311f41f2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-8",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-34169 JAXP (Xalan-J) Multiple Yes 7.5 Network Low None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21541 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21540 Hotspot Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8 Note 1 CVE-2022-21549 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 17 Note 1 CVE-2022-25647 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image (Gson) None No 6.2 Local Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and relies on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs."
}, {
  "objectID" : "e1592e16-8c5c-4d0d-9ac3-d292df053958",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#known-issues-20",
  "content" : "Known Issues Issue ID Description ZVM-16112 Applications using munlockall() require -XX:-UseThreadStateNativeWrapperProtocol on the command line to avoid crash or inconsistency if the rare situation occurs that the application gets swapped out after the munlockall() invocation."
}, {
  "objectID" : "a180e32a-6071-4749-84a4-8cb936096fb9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.06.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_06_0_0",
  "content" : "22.06.0.0 Release Notes PDF Release date: June 30, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15+10 13 13.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-14341 NMT detailed mode allows user to track internal VM memory usage to the granularity of a single callsite. This feature is also very useful in case the user needs to find a memory leak. ZVM-24010 Optimized layout of GC internal data structure, improving native memory consumption by the garbage collector (GC). ZVM-23142 Improved virtual memory regions initialization to handle rare situations when there are existing mappings in preferred ranges. In such cases, the JVM previously failed to start with the error \"Unable to setup virtual memory region for …\". ZVM-24118 Fixed crashes caused by constantPoolOopDesc::tag_at(int) ZVM-23983 async-profiler v2.7+ cpu profiling is now working with Prime. Known Issues Issue ID Description - Aarch64 support is limited to Graviton 2 and 3. Graviton 1 is not yet supported. ZVM-20142 Async profiler activemq crashed with 'assert(false) failed: Should never reach here' ZVM-17531 Wildfly app-server hangs when Async Java Profiler is attached. ZVM-16393 Async profiler does not show object type in \"-e alloc\" mode on Zulu Prime"
}, {
  "objectID" : "1a0a5185-687f-4bc8-91a4-1a003e57e515",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-21",
  "content" : "Resolved Issues Issue ID Description ZVM-14341 NMT detailed mode allows user to track internal VM memory usage to the granularity of a single callsite. This feature is also very useful in case the user needs to find a memory leak. ZVM-24010 Optimized layout of GC internal data structure, improving native memory consumption by the garbage collector (GC). ZVM-23142 Improved virtual memory regions initialization to handle rare situations when there are existing mappings in preferred ranges. In such cases, the JVM previously failed to start with the error \"Unable to setup virtual memory region for …\". ZVM-24118 Fixed crashes caused by constantPoolOopDesc::tag_at(int) ZVM-23983 async-profiler v2.7+ cpu profiling is now working with Prime."
}, {
  "objectID" : "4853b83b-6c99-4bf8-9a53-f5c7bba75dd0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#known-issues-21",
  "content" : "Known Issues Issue ID Description - Aarch64 support is limited to Graviton 2 and 3. Graviton 1 is not yet supported. ZVM-20142 Async profiler activemq crashed with 'assert(false) failed: Should never reach here' ZVM-17531 Wildfly app-server hangs when Async Java Profiler is attached. ZVM-16393 Async profiler does not show object type in \"-e alloc\" mode on Zulu Prime"
}, {
  "objectID" : "d7040d9f-8809-4b0f-8318-a330fac95f2d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.05.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_05_0_0",
  "content" : "22.05.0.0 Release Notes PDF Release date: May 31, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15+10 13 13.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "5ba98657-0033-4240-b544-55c56c0b4ed0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-22",
  "content" : "Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools."
}, {
  "objectID" : "8777d3b6-99e6-4f2c-a86a-f5ca25437c67",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.04.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_04_1_0",
  "content" : "22.04.1.0 Release Notes PDF Release date: May 24, 2022 This release is based on Azul Platform Prime 22.04.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15+10 13 13.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Arm64 is now supported by Zing. Find the latest builds for Arm64 here: Azul Platform Prime Quick Start Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "b90748bf-9c2e-46ef-bfea-b7da0494e061",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-23",
  "content" : "What’s New Internal bug fixes. Arm64 is now supported by Zing. Find the latest builds for Arm64 here: Azul Platform Prime Quick Start"
}, {
  "objectID" : "1c961fb6-609a-4a43-8c99-4a10bf7c6b47",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.04.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_04_0_0",
  "content" : "22.04.0.0 Release Notes PDF Release date: May 6, 2022 This CPU and PSU release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15+10 13 13.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New April 2022 CPU and PSU security fixes. Enable elimination of safepoint pauses for finding deadlocks operations by first attempting to complete them using a checkpoint using the option -XX:[+/ -]OptimizeFindDeadlocksWithCheckpoint. If a deadlock is detected in the checkpoint, it is then confirmed using a safepoint pause. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2018-25032 ZIP Multiple Yes 7.5 Network Low None None Unchanged None None High 17, 15, 13, 11, 8, 7, 6 CVE-2022-21449 Libraries Multiple Yes 7.5 Network Low None None Unchanged None High None 18, 17, 15 Note 1 CVE-2022-21476 Libraries Multiple Yes 7.5 Network Low None None Unchanged High None None 18, 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21426 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21434 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21496 JNDI Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21443 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-0778 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools. ZVM-23002 Added support for cgroups v2. ZVM-23091 Deadlock detection was being performed using safepoint pauses in prior releases. Starting 22.04 Prime attempts to detect deadlock using checkpoints which do not cause a global pause. If the checkpoint operation indicates the possibility of a deadlock, Prime will resort to a safepoint to confirm the same. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "383a8540-d1a0-4bd1-9f53-77a1c8d03c9a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-24",
  "content" : "What’s New April 2022 CPU and PSU security fixes. Enable elimination of safepoint pauses for finding deadlocks operations by first attempting to complete them using a checkpoint using the option -XX:[+/ -]OptimizeFindDeadlocksWithCheckpoint. If a deadlock is detected in the checkpoint, it is then confirmed using a safepoint pause."
}, {
  "objectID" : "a07c4bae-efd1-4af0-b291-41d8f1b3eec0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-9",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2018-25032 ZIP Multiple Yes 7.5 Network Low None None Unchanged None None High 17, 15, 13, 11, 8, 7, 6 CVE-2022-21449 Libraries Multiple Yes 7.5 Network Low None None Unchanged None High None 18, 17, 15 Note 1 CVE-2022-21476 Libraries Multiple Yes 7.5 Network Low None None Unchanged High None None 18, 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21426 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21434 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21496 JNDI Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21443 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-0778 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs."
}, {
  "objectID" : "2094a172-3f44-4c11-a699-a9e98658d660",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-24",
  "content" : "Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools. ZVM-23002 Added support for cgroups v2. ZVM-23091 Deadlock detection was being performed using safepoint pauses in prior releases. Starting 22.04 Prime attempts to detect deadlock using checkpoints which do not cause a global pause. If the checkpoint operation indicates the possibility of a deadlock, Prime will resort to a safepoint to confirm the same."
}, {
  "objectID" : "86567c74-c280-41de-958e-57412249f35d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.03.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_03_0_0",
  "content" : "22.03.0.0 Release Notes PDF Release date: March 31, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "e48fc105-675b-4f85-b32e-cb247b14208a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_02_0_0",
  "content" : "22.02.0.0 Release Notes PDF Release date: February 28, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Miscellaneous bug fixes and performance improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "adfcabd4-9078-4571-80a2-ef5bb00d06e6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-26",
  "content" : "What’s New Miscellaneous bug fixes and performance improvements."
}, {
  "objectID" : "c78c03e7-5eec-4685-ac23-98aaefe87940",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.01.2.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_01_2_0",
  "content" : "22.01.2.0 Release Notes PDF Release date: February 14, 2022 This PSU release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Missing fixes from the January 22 PSU release of OpenJDK. January 2022 PSU release security fixes. Various performance improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "57ec5804-fe61-4fd8-ae4c-6c9c9d0ee52a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-27",
  "content" : "What’s New Missing fixes from the January 22 PSU release of OpenJDK. January 2022 PSU release security fixes. Various performance improvements."
}, {
  "objectID" : "751b4fea-5f7b-4e06-bc02-a6571644eae0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.01.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_01_1_0",
  "content" : "22.01.1.0 Release Notes PDF Release date: February 7, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Small critical bug fixes over Azul Platform Prime 22.01.0.0. January 2022 PSU release security fixes. Various performance improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "ff96a8ee-526d-4924-badb-3f5f211fec6a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-28",
  "content" : "What’s New Small critical bug fixes over Azul Platform Prime 22.01.0.0. January 2022 PSU release security fixes. Various performance improvements."
}, {
  "objectID" : "fb9b7a1e-1b76-4d7c-b4d5-d66b75943274",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.01.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_22_01_0_0",
  "content" : "22.01.0.0 Release Notes PDF Release date: January 31, 2022 This PSU release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New January 2022 PSU release security fixes. Various performance improvements. Resolved Issues Issue ID Description ZVM-21048 When -XX:+UseLargePages is used and the number of static huge pages reserved by nr_hugepages is insufficient for the total heap, Prime failed to start. Now it matches OpenJDK behavior and continues as expected. ZVM-22049 OldGC is not triggered often enough during idle time when NewGCs are occurring. ZVM-22063 Map OpenJDK command line option UseCountedLoopSafepoints onto KeepSafepointsInCountedLoops. ZVM-19635 Avoid lock in ByteArrayInputStream.read if it is used as an input of ObjectInputStream. ZVM-20678 Improved performance of string collation and iteration. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "f3737f89-be80-4a39-a175-a49f06e0bf7a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-29",
  "content" : "What’s New January 2022 PSU release security fixes. Various performance improvements."
}, {
  "objectID" : "550b6160-8e12-4866-86cf-9d7146080c56",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-29",
  "content" : "Resolved Issues Issue ID Description ZVM-21048 When -XX:+UseLargePages is used and the number of static huge pages reserved by nr_hugepages is insufficient for the total heap, Prime failed to start. Now it matches OpenJDK behavior and continues as expected. ZVM-22049 OldGC is not triggered often enough during idle time when NewGCs are occurring. ZVM-22063 Map OpenJDK command line option UseCountedLoopSafepoints onto KeepSafepointsInCountedLoops. ZVM-19635 Avoid lock in ByteArrayInputStream.read if it is used as an input of ObjectInputStream. ZVM-20678 Improved performance of string collation and iteration."
}, {
  "objectID" : "8fcbad0c-0179-46dc-9943-91317ab394b2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.12.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_12_0_0",
  "content" : "21.12.0.0 Release Notes PDF Release date: December 20, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13+8 13 13.0.9+3 15 15.0.5+3 17 17.0.1+12 What’s New Photon OS is now supported. Improved performance of string collation and character iteration. You can enable the use of the custom implementation of RuleBasedCollator using the option -XX:+UseModifiedRuleBasedCollator. This option is false by default. Docker images for Prime are now available. Resolved Issues Issue ID Description ZVM-21048 When -XX:+UseLargePages is used and the number of static huge pages reserved by nr_hugepages is insufficient for the total heap, Prime failed to start. Now it matches OpenJDK behavior and continues as expected. ZVM-22049 OldGC is not triggered often enough during idle time when NewGCs are occurring. ZVM-22063 Map OpenJDK command line option UseCountedLoopSafepoints onto KeepSafepointsInCountedLoops. ZVM-19635 Avoid lock in ByteArrayInputStream.read if it is used as an input of ObjectInputStream. ZVM-20678 Improved performance of string collation and iteration. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "1858840e-5bfe-453f-935b-409e619aaae7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-30",
  "content" : "What’s New Photon OS is now supported. Improved performance of string collation and character iteration. You can enable the use of the custom implementation of RuleBasedCollator using the option -XX:+UseModifiedRuleBasedCollator. This option is false by default. Docker images for Prime are now available."
}, {
  "objectID" : "74494e0c-622e-467c-8d76-4f22f752795d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.10.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_10_1_0",
  "content" : "21.10.1.0 Release Notes PDF Release date: December 14, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13 13 13.0.9 15 15.0.5 What’s New Azul Platform Prime 21.10.1.0 contains the same features as 21.10.0.0. Resolved Issues Issue ID Description ZVM-21884 Failure during startup when the kernel does not have support for Transparent Huge Pages (THP) feature, or does not support making madvise(2) calls with MADV_NOHUGEPAGE. ZVM-22052 Cassandra fails when ulimit -l unlimited is set to allow more mlock than the Linux default. This issue affected only Prime version 21.10.0.0. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "0d8ff283-c503-461e-96bf-0aec0394e6a2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-31",
  "content" : "What’s New Azul Platform Prime 21.10.1.0 contains the same features as 21.10.0.0."
}, {
  "objectID" : "b607344d-8a6e-41b6-a19a-80fb2b9b229e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-31",
  "content" : "Resolved Issues Issue ID Description ZVM-21884 Failure during startup when the kernel does not have support for Transparent Huge Pages (THP) feature, or does not support making madvise(2) calls with MADV_NOHUGEPAGE. ZVM-22052 Cassandra fails when ulimit -l unlimited is set to allow more mlock than the Linux default. This issue affected only Prime version 21.10.0.0."
}, {
  "objectID" : "c2209066-d6d2-49d4-8e4d-fdc0c29465e6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.10.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_10_0_0",
  "content" : "21.10.0.0 Release Notes PDF Release date: October 29, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13 13 13.0.9 15 15.0.5 What’s New Includes all October 2021 CVE fixes. Azul Platform Prime 21.10.0.0 contains the October 2021 CPU release of OpenJDK. Azul Platform Prime 21.10.0.0 brings the associated JDK 7, JDK 8, JDK 11, JDK 13, and JDK 15 versions to October 2021 CPU security update levels. The peak heap occupancy target, used by heuristics to decide when to trigger a garbage collection, is now managed dynamically by default. The dynamic changes can be disabled by setting GPGCTargetPeakHeapOccupancyPercent to a desired value. Increased parallelism between collectors for the new generation and old generation. Helps reduce the peak duration for a new generation collection and reduce allocation delays during peak load. The number of concurrent GC threads is now changed dynamically when -Xms is set to the same value as -Xmx, or when Azul Zing System Tools (ZST) is installed. At JVM start a low number of concurrent GC threads is employed. If later during application uptime the GC Time Percent metric increases beyond a threshold, more GC threads are added to reduce the number of GC cycles. The limit for the total number of GC threads is 3/4 of the process' available CPU threads. As of this Prime version, the number of threads will never shrink later. To disable the dynamic handling, use the following on the command line: -XX:-UseDynamicNumberOfGCThreads If one of the following flags is set on the command line, the dynamic handling will also be disabled: -XX:GPGCThreads=N -XX:GenPauselessNewThreads=N -XX:GenPauselessOldThreads=N General performance improvements. More intrinsics from Java 17. Resolved Issues Issue ID Description ZVM-xxxx High CPU utilization by HeapCommit thread in some specific scenarios. This only applies when -Xms isn’t set or set to less than -Xmx. ZVM-xxxx Fixes crash on JVM start on Ubuntu 21.10 (Impish) and CentOS 9 Stream (beta). Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "a3495192-8334-4617-b30a-48d0ab990eda",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-32",
  "content" : "What’s New Includes all October 2021 CVE fixes. Azul Platform Prime 21.10.0.0 contains the October 2021 CPU release of OpenJDK. Azul Platform Prime 21.10.0.0 brings the associated JDK 7, JDK 8, JDK 11, JDK 13, and JDK 15 versions to October 2021 CPU security update levels. The peak heap occupancy target, used by heuristics to decide when to trigger a garbage collection, is now managed dynamically by default. The dynamic changes can be disabled by setting GPGCTargetPeakHeapOccupancyPercent to a desired value. Increased parallelism between collectors for the new generation and old generation. Helps reduce the peak duration for a new generation collection and reduce allocation delays during peak load. The number of concurrent GC threads is now changed dynamically when -Xms is set to the same value as -Xmx, or when Azul Zing System Tools (ZST) is installed. At JVM start a low number of concurrent GC threads is employed. If later during application uptime the GC Time Percent metric increases beyond a threshold, more GC threads are added to reduce the number of GC cycles. The limit for the total number of GC threads is 3/4 of the process' available CPU threads. As of this Prime version, the number of threads will never shrink later. To disable the dynamic handling, use the following on the command line: -XX:-UseDynamicNumberOfGCThreads If one of the following flags is set on the command line, the dynamic handling will also be disabled: -XX:GPGCThreads=N -XX:GenPauselessNewThreads=N -XX:GenPauselessOldThreads=N General performance improvements. More intrinsics from Java 17."
}, {
  "objectID" : "aa3eea5c-3e9a-425e-bcab-9b21febfb49c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-32",
  "content" : "Resolved Issues Issue ID Description ZVM-xxxx High CPU utilization by HeapCommit thread in some specific scenarios. This only applies when -Xms isn’t set or set to less than -Xmx. ZVM-xxxx Fixes crash on JVM start on Ubuntu 21.10 (Impish) and CentOS 9 Stream (beta)."
}, {
  "objectID" : "175fae8f-e8ca-4085-becc-f8f341766faf",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.09.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_09_1_0",
  "content" : "21.09.1.0 Release Notes PDF Release date: October 14, 2021 This release is based on Azul Platform Prime 21.09.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New Initial support for Cloud Native Compiler. Cloud Native Compiler provides a server-side optimization solution that offloads JIT compilation to dedicated hardware, providing more processing power to JIT compilation while freeing your client JVMs from the load of doing JIT compilation. General performance improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "e96ff15d-ed17-4ca8-9b16-9a6fc9a6190c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-33",
  "content" : "What’s New Initial support for Cloud Native Compiler. Cloud Native Compiler provides a server-side optimization solution that offloads JIT compilation to dedicated hardware, providing more processing power to JIT compilation while freeing your client JVMs from the load of doing JIT compilation. General performance improvements."
}, {
  "objectID" : "c9d2bdde-d0e8-4788-8cc5-4e746845dd7d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.09.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_09_0_0",
  "content" : "21.09.0.0 Release Notes PDF Release date: September 29, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New General performance improvements. GC log line has been expanded to include additional information for heap elasticity. Introduces a new JFR event named \"Deoptimization\" which arises when previously compiled code gets discarded. The event is useful in troubleshooting performance issues including low throughput and high CPU utilization. Resolved Issues Issue ID Description ZVM-21015 High pause time during OldGC due to unloading of a long chain of subclasses. ZVM-19788 Installation packages are now signed. ZVM-20927 Abort the VM if GC safepoint operation time exceeds a configurable threshold. See the new GC options: DieOnSafepointOperationTimeout and SafepointOperationTimeoutDelayMS ZVM-17584 Introduces a new JFR event named \"Deoptimization\" which arises when previously compiled code gets discarded. The event is useful in troubleshooting performance issues including low throughput and high CPU utilization. Installation Changes A new directory is created during installation: /etc/connected-compiler. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "e4e289dd-9be9-4c92-bce4-fa4a36e0c986",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-34",
  "content" : "What’s New General performance improvements. GC log line has been expanded to include additional information for heap elasticity. Introduces a new JFR event named \"Deoptimization\" which arises when previously compiled code gets discarded. The event is useful in troubleshooting performance issues including low throughput and high CPU utilization."
}, {
  "objectID" : "01a873f9-778f-4a4e-b9ac-6f0fbec59f70",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-34",
  "content" : "Resolved Issues Issue ID Description ZVM-21015 High pause time during OldGC due to unloading of a long chain of subclasses. ZVM-19788 Installation packages are now signed. ZVM-20927 Abort the VM if GC safepoint operation time exceeds a configurable threshold. See the new GC options: DieOnSafepointOperationTimeout and SafepointOperationTimeoutDelayMS ZVM-17584 Introduces a new JFR event named \"Deoptimization\" which arises when previously compiled code gets discarded. The event is useful in troubleshooting performance issues including low throughput and high CPU utilization."
}, {
  "objectID" : "6753311c-56b4-4840-a71f-2bdbf3dcef5a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Installation Changes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#installation-changes",
  "content" : "Installation Changes A new directory is created during installation: /etc/connected-compiler."
}, {
  "objectID" : "2a468973-030e-4516-91e7-2498a3e5bf68",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_08_0_0",
  "content" : "21.08.0.0 Release Notes PDF Release date: August 31, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New Improved performance with large Java heaps on Intel Ice Lake systems with 5-level page tables. Introduces support for Intel’s Ice Lake 5-level paging. Support for dynamically varying garbage collector thread counts with the GPGCDynamicGCThreadCountPolicy option. See command line options for more details. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "264cdf1a-402b-4cd1-b592-27c3e1a1f861",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-35",
  "content" : "What’s New Improved performance with large Java heaps on Intel Ice Lake systems with 5-level page tables. Introduces support for Intel’s Ice Lake 5-level paging. Support for dynamically varying garbage collector thread counts with the GPGCDynamicGCThreadCountPolicy option. See command line options for more details."
}, {
  "objectID" : "12afcdb8-181e-42de-9ad4-3946620de931",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.07.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_07_0_0",
  "content" : "21.07.0.0 Release Notes PDF Release date: July 30, 2021 This CPU and PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New Incorporates all of the changes from the July 2021 CPU release and most of the changes from the July 2021 PSU release. Various performance improvements including improved locking, stack-walking behavior for performance. Loop unrolling improvements. Java heap elasticity is turned on by default when not using the Prime System Tools (ZST). This means that -Xms is now recognized along with -Xmx. The default values also match OpenJDK. For latency sensitive applications it is advised to set -Xms equal to -Xmx to preserve the old behaviour. See Recommended Heap Size for more details. Installation Directory Changes The following file was added to the installation directory: crs-agent.jar. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "1babea17-d009-432a-a01b-0c868f4efe16",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-36",
  "content" : "What’s New Incorporates all of the changes from the July 2021 CPU release and most of the changes from the July 2021 PSU release. Various performance improvements including improved locking, stack-walking behavior for performance. Loop unrolling improvements. Java heap elasticity is turned on by default when not using the Prime System Tools (ZST). This means that -Xms is now recognized along with -Xmx. The default values also match OpenJDK. For latency sensitive applications it is advised to set -Xms equal to -Xmx to preserve the old behaviour. See Recommended Heap Size for more details."
}, {
  "objectID" : "8c18b001-23a3-414c-8daf-a7648ba00149",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Installation Directory Changes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#installation-directory-changes",
  "content" : "Installation Directory Changes The following file was added to the installation directory: crs-agent.jar."
}, {
  "objectID" : "f7824550-bc62-43a2-9890-973f46e0da47",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.06.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_06_0_0",
  "content" : "21.06.0.0 Release Notes PDF Release date: June 30, 2021 This release is based on Azul Platform Prime 21.04.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New Additional improvements of the Heap Elasticity feature introduced in 21.05.0.0. Improved memory allocation handling in Heap Elasticity mode to avoid exceeding the container/cgroups memory limit. Fixed many issues with Async Profiling. Various performance improvements with Falcon compiler: Fixed extra spills causing performance penalties by supporting live gc values on registers for calls which can throw exceptions Improved performance of applications that frequently use Unsafe.allocateInstance. Implemented nested locks elimination optimization for multiple nested locks on a given object under the condition that the nested lock state is not inspected. Resolved Issues Issue ID Description ZVM-19710 Profiling with cpu/wall events yeilds unusable results ZVM-20081 Startup failure when specifying Xms larger than 25% of RAM, when -XX:+GPGCNoZSTHeapElasticity is specified and Xmx is not specified. ZVM-19972 JVM memory metrics like Runtime.getRuntime.totalMemory() and Runtime.getRuntime.maxMemory() and related like java.lang.management.MemoryMXBean now include JVM-internal memory usage and will show a few MBytes larger numbers now. Calculations and methods around free memory calculation are not affected and will return the same results as before. That means for example Runtime.getRuntime.freeMemory() or difference calculation between attributes like \"used\" and \"total\" memory will also result in the same as in previous releases. See Recommended Heap Size for details. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "030ae368-29fc-4dcc-bfc4-8ac6fa5303cc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-37",
  "content" : "What’s New Additional improvements of the Heap Elasticity feature introduced in 21.05.0.0. Improved memory allocation handling in Heap Elasticity mode to avoid exceeding the container/cgroups memory limit. Fixed many issues with Async Profiling. Various performance improvements with Falcon compiler: Fixed extra spills causing performance penalties by supporting live gc values on registers for calls which can throw exceptions Improved performance of applications that frequently use Unsafe.allocateInstance. Implemented nested locks elimination optimization for multiple nested locks on a given object under the condition that the nested lock state is not inspected."
}, {
  "objectID" : "7ebd7d4c-1027-4c7a-822a-3e0da16ff95e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-37",
  "content" : "Resolved Issues Issue ID Description ZVM-19710 Profiling with cpu/wall events yeilds unusable results ZVM-20081 Startup failure when specifying Xms larger than 25% of RAM, when -XX:+GPGCNoZSTHeapElasticity is specified and Xmx is not specified. ZVM-19972 JVM memory metrics like Runtime.getRuntime.totalMemory() and Runtime.getRuntime.maxMemory() and related like java.lang.management.MemoryMXBean now include JVM-internal memory usage and will show a few MBytes larger numbers now. Calculations and methods around free memory calculation are not affected and will return the same results as before. That means for example Runtime.getRuntime.freeMemory() or difference calculation between attributes like \"used\" and \"total\" memory will also result in the same as in previous releases. See Recommended Heap Size for details."
}, {
  "objectID" : "bf93b31a-b5fa-4737-890e-01ceddd7f792",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.05.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_05_1_0",
  "content" : "21.05.1.0 Release Notes PDF Release date: July 12, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New A fix for bug ZVM-20496 which turns opt-boxing-rewrite-loads off by default to avoid miscompiles in certain code patterns. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "7a55e812-be4b-4b78-b7cd-376f1e873133",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-38",
  "content" : "What’s New A fix for bug ZVM-20496 which turns opt-boxing-rewrite-loads off by default to avoid miscompiles in certain code patterns."
}, {
  "objectID" : "8c3edb23-6697-44ac-bd91-3874d16adec0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.05.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_05_0_0",
  "content" : "21.05.0.0 Release Notes PDF Release date: May 31, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New Non-ZST Heap Elasticity introduced. See Recommended Heap Size for details. When heap elasticity is enabled, the Garbage Collector tries to minimize the memory footprint, keeping it between the user- defined range of -Xms and -Xmx. At the same time, the CPU usage of the Garbage Collector is monitored and the memory minimizing goal relaxed in case the CPU usage increases too much. Heap Elasticity is not available when Azul Zing System Tools (ZST) is installed. Azul Platform Prime 21.05.0.0 makes the OpenJDK C1 OSR the default OSR for the Falcon compiler. The C1 OSR takes much less time and CPU resources to fully optimize your code to steady-state performance. Stream Builds (previously known as Feature Releases) are now free for use in development and evaluation. As such, the builds no longer check for an evaluation license. Latency improvement for applications with frequent Unsafe.get() and put() calls. Fixed heap dump compatibility issue that prevented opening Zing head dumps in IntelliJIdea. Enabled jcmd ManagementAgent command option support. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "5455be55-ae42-4740-a1fd-c64da651bcde",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-39",
  "content" : "What’s New Non-ZST Heap Elasticity introduced. See Recommended Heap Size for details. When heap elasticity is enabled, the Garbage Collector tries to minimize the memory footprint, keeping it between the user- defined range of -Xms and -Xmx. At the same time, the CPU usage of the Garbage Collector is monitored and the memory minimizing goal relaxed in case the CPU usage increases too much. Heap Elasticity is not available when Azul Zing System Tools (ZST) is installed. Azul Platform Prime 21.05.0.0 makes the OpenJDK C1 OSR the default OSR for the Falcon compiler. The C1 OSR takes much less time and CPU resources to fully optimize your code to steady-state performance. Stream Builds (previously known as Feature Releases) are now free for use in development and evaluation. As such, the builds no longer check for an evaluation license. Latency improvement for applications with frequent Unsafe.get() and put() calls. Fixed heap dump compatibility issue that prevented opening Zing head dumps in IntelliJIdea. Enabled jcmd ManagementAgent command option support."
}, {
  "objectID" : "e5f795dd-78a4-46e6-8b4b-6f5d38204547",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.04.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_04_0_0",
  "content" : "21.04.0.0 Release Notes PDF Release date: April 30, 2021 This CPU and PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New April 2021 CPU and PSU fixes. Quicker acquisition of transparent huge pages on Ubuntu, Amazon Linux or similar Linux systems with kernel 4.19.7 or newer in non-ZST mode. This can help get peak performance earlier as well as enable faster java process restart when THP is configured. Default value of Xmx in cgroups is now the minimum of 25% of cgroup memory limit and 32 GB. Prior to 21.04.0.0, it was 25% of cgroup memory limit. Reduced code cache usage for applications with high number of classes or interfaces and a large number of associated methods. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-2161 Libraries Multiple Yes 5.9 Network High None None Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-2163 Libraries Multiple Yes 5.3 Network High None Required Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-23841 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-3450 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 7.4 Network High None None Unchanged High High None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. It can also be exploited by supplying untrusted data to APIs in the specified Component. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "59dd496e-65e6-4e1a-becc-cbf068c5f2fa",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-40",
  "content" : "What’s New April 2021 CPU and PSU fixes. Quicker acquisition of transparent huge pages on Ubuntu, Amazon Linux or similar Linux systems with kernel 4.19.7 or newer in non-ZST mode. This can help get peak performance earlier as well as enable faster java process restart when THP is configured. Default value of Xmx in cgroups is now the minimum of 25% of cgroup memory limit and 32 GB. Prior to 21.04.0.0, it was 25% of cgroup memory limit. Reduced code cache usage for applications with high number of classes or interfaces and a large number of associated methods."
}, {
  "objectID" : "fa355a39-6829-4e83-a53d-7678fc53fbca",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-10",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-2161 Libraries Multiple Yes 5.9 Network High None None Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-2163 Libraries Multiple Yes 5.3 Network High None Required Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-23841 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-3450 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 7.4 Network High None None Unchanged High High None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. It can also be exploited by supplying untrusted data to APIs in the specified Component. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security."
}, {
  "objectID" : "4866fe7d-3589-4ac2-9b6e-107e83810903",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.03.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_03_0_0",
  "content" : "21.03.0.0 Release Notes PDF Release date: March 31, 2021 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 15 15.0.2+7 What’s New Enhanced Compatibility With Data Management Platforms ZVM 21.03.0.0 improves compatibility between the MXBean memory pool names and names expected by in- memory data management systems (e.g., Pivotal GemFire 8.2). JFR Event Streaming allows to asynchronously subscribe to select JFR events and avoid the overhead associated with creating a recording in JDK 15. Various performance improvements, like enhancements to tracking of garbage-collection roots, compiler optimizations for aggressive lock coarsening, and an experimental ReadyNow mode that enables the pre-initialization of a greater number of bootstrap classes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "553b5cc4-d74b-4b95-bc22-7f86f14197b5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-41",
  "content" : "What’s New Enhanced Compatibility With Data Management Platforms ZVM 21.03.0.0 improves compatibility between the MXBean memory pool names and names expected by in- memory data management systems (e.g., Pivotal GemFire 8.2). JFR Event Streaming allows to asynchronously subscribe to select JFR events and avoid the overhead associated with creating a recording in JDK 15. Various performance improvements, like enhancements to tracking of garbage-collection roots, compiler optimizations for aggressive lock coarsening, and an experimental ReadyNow mode that enables the pre-initialization of a greater number of bootstrap classes."
}, {
  "objectID" : "46df6c5a-9bb7-4549-9e7f-934eace85713",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_02_0_0",
  "content" : "21.02.0.0 Release Notes PDF Release date: February 26, 2021 This release is based on Azul Platform Prime 21.01.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 15 15.0.2+7 What’s New Introduces medium-term support (MTS) for Java Standard Edition 15. See Azul Product Support Lifecycle for more information. Additional non-security changes associated with the January 2021 Patch Set Updates (PSU) OpenJDK 7u292, OpenJDK 8u282, OpenJDK 11.0.10, OpenJDK 13.0.6 and OpenJDK 15.0.2 release contents. Load value barriers for reference equality checks are optimized within loops. Zing also optimizes more such checks aggressively by considering both operands of the equality check. Improved object locking with better monitor inflation behavior. The functionality of UseCodeCacheFlushing is offered under UseIncrementalCodeCacheFlushing in Zing 21.02.0.0. However, Zing has emergency code cache flushing turned on by default, see UseEmergencyCodeCacheFlushing in Using Zing Command-Line Options for details. Early-access support for ReadyNow Image, an experimental warm-up optimizer based on ReadyNow and Linux Checkpoint/Restore In Userspace (CRIU). Zing 21.02.0.0 installation contains ReadyNow Image files in the /etc/rni/ directory: ` `criu libnet.so.1 libnl-3.so.200 libprotobuf-c.so.1 restore-script wait-script Zing 21.02.0.0 includes optional experimental support for interaction with connected runtime services through an emerging protocol in Zing 13. Note that for Zing 8 and Zing 11 this support was introduced in Zing 21.01.0.0. Zing 21.02.0.0 installation contains the following files related to the services: jmods/azul.crs.jfr.access.jmod legal/azul.crs.jfr.access/ADDITIONAL_LICENSE_INFO legal/azul.crs.jfr.access/ASSEMBLY_EXCEPTION legal/azul.crs.jfr.access/CLASSPATH_EXCEPTION_NOTE legal/azul.crs.jfr.access/LICENSE lib/crs-agent.jar Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "4fd7ba8e-f3a4-4af7-bdf2-096fabf93a03",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-42",
  "content" : "What’s New Introduces medium-term support (MTS) for Java Standard Edition 15. See Azul Product Support Lifecycle for more information. Additional non-security changes associated with the January 2021 Patch Set Updates (PSU) OpenJDK 7u292, OpenJDK 8u282, OpenJDK 11.0.10, OpenJDK 13.0.6 and OpenJDK 15.0.2 release contents. Load value barriers for reference equality checks are optimized within loops. Zing also optimizes more such checks aggressively by considering both operands of the equality check. Improved object locking with better monitor inflation behavior. The functionality of UseCodeCacheFlushing is offered under UseIncrementalCodeCacheFlushing in Zing 21.02.0.0. However, Zing has emergency code cache flushing turned on by default, see UseEmergencyCodeCacheFlushing in Using Zing Command-Line Options for details. Early-access support for ReadyNow Image, an experimental warm-up optimizer based on ReadyNow and Linux Checkpoint/Restore In Userspace (CRIU). Zing 21.02.0.0 installation contains ReadyNow Image files in the /etc/rni/ directory: ` `criu libnet.so.1 libnl-3.so.200 libprotobuf-c.so.1 restore-script wait-script Zing 21.02.0.0 includes optional experimental support for interaction with connected runtime services through an emerging protocol in Zing 13. Note that for Zing 8 and Zing 11 this support was introduced in Zing 21.01.0.0. Zing 21.02.0.0 installation contains the following files related to the services: jmods/azul.crs.jfr.access.jmod legal/azul.crs.jfr.access/ADDITIONAL_LICENSE_INFO legal/azul.crs.jfr.access/ASSEMBLY_EXCEPTION legal/azul.crs.jfr.access/CLASSPATH_EXCEPTION_NOTE legal/azul.crs.jfr.access/LICENSE lib/crs-agent.jar"
}, {
  "objectID" : "bca22cb2-5ac2-41fa-b103-bc6cfc834a80",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.01.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_01_0_0",
  "content" : "21.01.0.0 Release Notes PDF Release date: January 29, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 What’s New C2 Improvement The default JIT compiler on Zing JDK 8 and JDK 7 is changed from SeaOfNodesC2 to KestrelC2 when Zing C2 mode is enabled with -XX:+UseC2. For Zing JDK 11, this improvement was made in Zing 20.04.0.0. KestrelC2 is a C2 implementation introduced to Zing in 2020. It is based on a lightweight use of the LLVM backend and typically produces faster code than UseSeaOfNodesC2 while keeping compilation effort at similar levels. UseKestrelC2 generally exhibits a significantly lower compilation-time CPU consumption compared to Falcon. See Using Zing Command-Line Options for -XX:[+/-]UseKestrelC2 and -XX:[+/-]UseSeaOfNodesC2 command-line options and details. The default JIT compiler in Zing is the high-performance Falcon introduced in 2017. New Experimental Features Zing 21.01.0.0 includes optional experimental support for interaction with connected runtime services through an emerging protocol in Zing 11 and Zing 8. These experimental capabilities are enabled by the -XX:+UseCRS command-line option and turned off by default. Being an experimental Zing option, it must be unlocked by preceding -XX:+UnlockExperimentalVMOptions. Performance Improvement Zing 21.01.0.0 introduces an improved escape analysis for arrays in the Falcon compiler. The improvement includes an optimization for array reallocation pattern (e.g., java.util.Arrays.copyOf) to avoid redundant copying. Notably, this optimization improves the performance of string concatenation using the StringBuilder class by the elimination of excessive reallocations of the underlying StringBuilder buffer. Support for EdDSA Signature Algorithm Zing 21.01.0.0 introduces the OpenEdDSA provider which can be used for cryptographic signatures using the Edwards-Curve Digital Signature Algorithm (EdDSA) in Zing 8 with no application or code changes. See JEP 339: Edwards-Curve Digital Signature Algorithm (EdDSA) for details. The OpenEdDSA public API is provided in the org.openeddsa.java.security.interfaces and org.openeddsa.java.security.spec packages. To enable the OpenEdDSA provider, do either of the following: configure the Java Runtime Environment for the OpenEdDSA provider by adding the entry below to the $JAVA_HOME/jre/lib/security/java.security file  security.provider.10=org.openeddsa.security.OpenEdDSA add the OpenEdDSA provider directly to your code  // Add OpenEdDSA provider\njava.security.Security.addProvider(new org.openeddsa.security.OpenEdDSA()); Resolved Issues Issue ID Description ZVM-18362 A compiler crash due to incorrect transformation of Compare And Swap on an unescaped object. ZVM-18233 21.01.0.0 20.08.201.0 Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "a6614a88-7145-45c3-97cb-280dbee0b021",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-43",
  "content" : "What’s New C2 Improvement The default JIT compiler on Zing JDK 8 and JDK 7 is changed from SeaOfNodesC2 to KestrelC2 when Zing C2 mode is enabled with -XX:+UseC2. For Zing JDK 11, this improvement was made in Zing 20.04.0.0. KestrelC2 is a C2 implementation introduced to Zing in 2020. It is based on a lightweight use of the LLVM backend and typically produces faster code than UseSeaOfNodesC2 while keeping compilation effort at similar levels. UseKestrelC2 generally exhibits a significantly lower compilation-time CPU consumption compared to Falcon. See Using Zing Command-Line Options for -XX:[+/-]UseKestrelC2 and -XX:[+/-]UseSeaOfNodesC2 command-line options and details. The default JIT compiler in Zing is the high-performance Falcon introduced in 2017. New Experimental Features Zing 21.01.0.0 includes optional experimental support for interaction with connected runtime services through an emerging protocol in Zing 11 and Zing 8. These experimental capabilities are enabled by the -XX:+UseCRS command-line option and turned off by default. Being an experimental Zing option, it must be unlocked by preceding -XX:+UnlockExperimentalVMOptions. Performance Improvement Zing 21.01.0.0 introduces an improved escape analysis for arrays in the Falcon compiler. The improvement includes an optimization for array reallocation pattern (e.g., java.util.Arrays.copyOf) to avoid redundant copying. Notably, this optimization improves the performance of string concatenation using the StringBuilder class by the elimination of excessive reallocations of the underlying StringBuilder buffer. Support for EdDSA Signature Algorithm Zing 21.01.0.0 introduces the OpenEdDSA provider which can be used for cryptographic signatures using the Edwards-Curve Digital Signature Algorithm (EdDSA) in Zing 8 with no application or code changes. See JEP 339: Edwards-Curve Digital Signature Algorithm (EdDSA) for details. The OpenEdDSA public API is provided in the org.openeddsa.java.security.interfaces and org.openeddsa.java.security.spec packages. To enable the OpenEdDSA provider, do either of the following: configure the Java Runtime Environment for the OpenEdDSA provider by adding the entry below to the $JAVA_HOME/jre/lib/security/java.security file  security.provider.10=org.openeddsa.security.OpenEdDSA add the OpenEdDSA provider directly to your code  // Add OpenEdDSA provider\njava.security.Security.addProvider(new org.openeddsa.security.OpenEdDSA());"
}, {
  "objectID" : "722b9116-cff7-4e2a-ba5c-cc93fdb3a45f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-43",
  "content" : "Resolved Issues Issue ID Description ZVM-18362 A compiler crash due to incorrect transformation of Compare And Swap on an unescaped object. ZVM-18233 21.01.0.0 20.08.201.0"
}, {
  "objectID" : "7b5cb06e-ae30-4583-b342-24a30c719ee3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.12.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_12_0_0",
  "content" : "20.12.0.0 Release Notes PDF Release date: December 18, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u285 8 8u275 11 11.0.9.1+1 13 13.0.5.1+1 What’s New Zing 20.12.0.0 incorporates additional non-security changes associated with the October Patch Set Updates (PSU) 2020 OpenJDK 7u285, OpenJDK 8u275, OpenJDK 11.0.9.1, and OpenJDK 13.0.5.1 release contents. Zing 20.12.0.0 introduces an enhanced induction variable analysis and range checks removal mechanism. Particularly, improved range check elimination capabilities for decrementing loops of the following type:  for (int i = array.length - 1; i >= 0; i--) {\narray[i] = ...\n} Resolved Issues Issue ID Description ZVM-18035 Backport of JDK-8202837 and JDK-8214513 to Zing 8. ZVM-17938 Setting InitalHeapSize and MaxHeapSize the same fails in non-ZST mode. This affects applications such as ElasticSearch which insists that Initial Heap Size be equal to Maximum Heap Size. ZVM-17430 JarFile constructor exception in JDK 11.0.8. ZVM-17346 System data collected for GC logging could cause oom-killer invocation and kernel panic when java is launched under the root user. ZVM-16051 Provide FalconTrustInterfaceTypesForArrayStore to move interface type conformance check from the VM to the application. This can improve throughput variability for some applications. -XX:+UnlockExperimentalVMOptions is required to use -XX:+FalconTrustInterfaceTypesForArrayStore. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "82d85f6f-3861-47e9-8649-0f828363385b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-44",
  "content" : "What’s New Zing 20.12.0.0 incorporates additional non-security changes associated with the October Patch Set Updates (PSU) 2020 OpenJDK 7u285, OpenJDK 8u275, OpenJDK 11.0.9.1, and OpenJDK 13.0.5.1 release contents. Zing 20.12.0.0 introduces an enhanced induction variable analysis and range checks removal mechanism. Particularly, improved range check elimination capabilities for decrementing loops of the following type:  for (int i = array.length - 1; i >= 0; i--) {\narray[i] = ...\n}"
}, {
  "objectID" : "c95dac2f-cdff-4b59-9d33-a665c41743b1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-44",
  "content" : "Resolved Issues Issue ID Description ZVM-18035 Backport of JDK-8202837 and JDK-8214513 to Zing 8. ZVM-17938 Setting InitalHeapSize and MaxHeapSize the same fails in non-ZST mode. This affects applications such as ElasticSearch which insists that Initial Heap Size be equal to Maximum Heap Size. ZVM-17430 JarFile constructor exception in JDK 11.0.8. ZVM-17346 System data collected for GC logging could cause oom-killer invocation and kernel panic when java is launched under the root user. ZVM-16051 Provide FalconTrustInterfaceTypesForArrayStore to move interface type conformance check from the VM to the application. This can improve throughput variability for some applications. -XX:+UnlockExperimentalVMOptions is required to use -XX:+FalconTrustInterfaceTypesForArrayStore."
}, {
  "objectID" : "6827ed31-2661-462b-8a2b-cb4359a77007",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.10.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_10_0_0",
  "content" : "20.10.0.0 Release Notes PDF Release date: October 30, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New Zing 20.10.0.0 brings the associated JDK 7, JDK 8, JDK 11 and JDK 13 versions to October 2020 Critical Patch Update (CPU) security update levels and incorporates changes related to OpenJDK 7u281, OpenJDK 8u271, OpenJDK 11.0.8.0.101, and OpenJDK 13.0.4.0.101 release contents. Zing 20.10.0.0 includes loop form fixes to increase performance of loops by simplified triggering of enabled vectorization methods. The optimization is enabled by default. Zing 20.10.0.0 contains an improved allocation mechanism which has a positive impact on Zing’s performance. The optimization is enabled by default. Zing 20.10.0.0 introduces method counters across JVM runs, which enables ReadyNow to build a profile over multiple short runs when the number of orders is low. Resolved Issues Issue ID Description ZVM-17662 Fix confusing error message when calling Zing MXBeans APIs without specifying -XX:+UseZingMXBeans. ZVM-17168 Checkpoint timeout crash while running async-profiler along with Zing. ZVM-16971 Compiler crash with signature polymorphic invokedynamic calls. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "09db5a23-3741-44f2-8cd9-1727b07603bb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-45",
  "content" : "What’s New Zing 20.10.0.0 brings the associated JDK 7, JDK 8, JDK 11 and JDK 13 versions to October 2020 Critical Patch Update (CPU) security update levels and incorporates changes related to OpenJDK 7u281, OpenJDK 8u271, OpenJDK 11.0.8.0.101, and OpenJDK 13.0.4.0.101 release contents. Zing 20.10.0.0 includes loop form fixes to increase performance of loops by simplified triggering of enabled vectorization methods. The optimization is enabled by default. Zing 20.10.0.0 contains an improved allocation mechanism which has a positive impact on Zing’s performance. The optimization is enabled by default. Zing 20.10.0.0 introduces method counters across JVM runs, which enables ReadyNow to build a profile over multiple short runs when the number of orders is low."
}, {
  "objectID" : "3043e0a3-9de5-44c3-b27f-71b5d8747987",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-45",
  "content" : "Resolved Issues Issue ID Description ZVM-17662 Fix confusing error message when calling Zing MXBeans APIs without specifying -XX:+UseZingMXBeans. ZVM-17168 Checkpoint timeout crash while running async-profiler along with Zing. ZVM-16971 Compiler crash with signature polymorphic invokedynamic calls."
}, {
  "objectID" : "5d97582e-2889-4082-ad5c-8b846635799c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.09.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_09_1_0",
  "content" : "20.09.1.0 Release Notes PDF Release date: October 19, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 13 13.0.4+8 What’s New Resolved Issues Issue ID Description ZVM-17453 Final field optimizations can miscompile in code compiled with Javac11 and above. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "ed5dd120-79ea-438a-a8c0-36d8b307ce02",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-46",
  "content" : "What’s New"
}, {
  "objectID" : "ca58493a-8e70-4e59-a10d-95984107f907",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-46",
  "content" : "Resolved Issues Issue ID Description ZVM-17453 Final field optimizations can miscompile in code compiled with Javac11 and above."
}, {
  "objectID" : "44beb8a7-adb9-47eb-a289-250e348e72ab",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.09.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_09_0_0",
  "content" : "20.09.0.0 Release Notes PDF Release date: September 30, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 13 13.0.4+8 What’s New Zing 20.09.0.0 introduces Medium Term Support for Java SE 13. See Azul Product Support Lifecycle for more information. Zing 20.09.0.0 includes accelerated copying of large array chunks. The optimization is enabled by default. See UseArrayCopyChunkingIntrinsics in Using Zing Command-Line Options for details. Zing 20.09.0.0 provides a performance improvement for org.apache.logging.log4j.util.StackLocator.getCallerClass(), which maximizes logging performance when using log4j versions 2.13.1 - 2.13.3 on Zing 8 and log4j versions 2.9.0 - 2.13.3 on Zing 11+. The improvement is disabled by default. See UseLog4jGetCallerClassIntrinsic in Using Zing Command-Line Options for details. Zing 20.09.0.0 introduces unified Garbage Collection (GC) logging that utilizes unified JVM logging framework (JEP 271: Unified GC Logging). See Unified GC Logging Recommendations to learn more. Resolved Issues Issue ID Description ZVM-16945 Core bundler: pid extraction can select more than one line. ZVM-16239 Racy initialization logic in GraphBuilder::initialize(): under rare circumstances another thread can observe the _is_initialized flag set before the static fields _can_trap and _is_async are actually initialized. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "3053bfe1-ad74-437d-820d-edde0bb8a5da",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-47",
  "content" : "What’s New Zing 20.09.0.0 introduces Medium Term Support for Java SE 13. See Azul Product Support Lifecycle for more information. Zing 20.09.0.0 includes accelerated copying of large array chunks. The optimization is enabled by default. See UseArrayCopyChunkingIntrinsics in Using Zing Command-Line Options for details. Zing 20.09.0.0 provides a performance improvement for org.apache.logging.log4j.util.StackLocator.getCallerClass(), which maximizes logging performance when using log4j versions 2.13.1 - 2.13.3 on Zing 8 and log4j versions 2.9.0 - 2.13.3 on Zing 11+. The improvement is disabled by default. See UseLog4jGetCallerClassIntrinsic in Using Zing Command-Line Options for details. Zing 20.09.0.0 introduces unified Garbage Collection (GC) logging that utilizes unified JVM logging framework (JEP 271: Unified GC Logging). See Unified GC Logging Recommendations to learn more."
}, {
  "objectID" : "cab80515-6137-4568-b54f-083a3bee94cb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-47",
  "content" : "Resolved Issues Issue ID Description ZVM-16945 Core bundler: pid extraction can select more than one line. ZVM-16239 Racy initialization logic in GraphBuilder::initialize(): under rare circumstances another thread can observe the _is_initialized flag set before the static fields _can_trap and _is_async are actually initialized."
}, {
  "objectID" : "e3d78ea4-4d5d-4ed4-a123-eda257e53041",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_08_0_0",
  "content" : "20.08.0.0 Release Notes PDF Release date: August 31, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u262 11 11.0.8+10 What’s New Zing 20.08.0.0 incorporates additional non-security changes associated with the July Patch Set Updates (PSU) 2020 OpenJDK 7u272, OpenJDK 8u265, and OpenJDK 11.0.8 release contents. NONEwithDSAinP1363Format is included in signature algorithms enabled in Zing 20.08.0.0 by default. NONEwithDSAinP1363Format is scheduled for removal in the following release of the Zing Virtual Machine. Since the algorithm is not supported in other JDK 8 virtual machines, it is recommended to migrate to Digital Signature Algorithms with ASN.1 encoded signature bytes. Zing 20.08.0.0 introduces multiple optimizations that significantly increase performance on a set of Java Stream API scenarios. Zing 20.08.0.0 introduces a new version string format that includes a matching OpenJDK release number. Version 1 of the GC Log Analyser has reached its end-of-life and is removed from Zing 20.08.0.0. Version 2 of the GC Log Analyzer is available for download at https://cdn.azul.com/gcla/GCLogAnalyzer2.jar. Resolved Issues Issue ID Description ZVM-16504 Crash in guarantee(_deopt_list_len < sizeof(_deopt_list)/sizeof(_deopt_list[0])) failed: make deopt_list bigger. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "72416bfa-24c0-4414-adc7-6f27ffea0d67",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-48",
  "content" : "What’s New Zing 20.08.0.0 incorporates additional non-security changes associated with the July Patch Set Updates (PSU) 2020 OpenJDK 7u272, OpenJDK 8u265, and OpenJDK 11.0.8 release contents. NONEwithDSAinP1363Format is included in signature algorithms enabled in Zing 20.08.0.0 by default. NONEwithDSAinP1363Format is scheduled for removal in the following release of the Zing Virtual Machine. Since the algorithm is not supported in other JDK 8 virtual machines, it is recommended to migrate to Digital Signature Algorithms with ASN.1 encoded signature bytes. Zing 20.08.0.0 introduces multiple optimizations that significantly increase performance on a set of Java Stream API scenarios. Zing 20.08.0.0 introduces a new version string format that includes a matching OpenJDK release number. Version 1 of the GC Log Analyser has reached its end-of-life and is removed from Zing 20.08.0.0. Version 2 of the GC Log Analyzer is available for download at https://cdn.azul.com/gcla/GCLogAnalyzer2.jar."
}, {
  "objectID" : "111f9ce6-1e1c-4eb2-a604-cc188aa23273",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-48",
  "content" : "Resolved Issues Issue ID Description ZVM-16504 Crash in guarantee(_deopt_list_len < sizeof(_deopt_list)/sizeof(_deopt_list[0])) failed: make deopt_list bigger."
}, {
  "objectID" : "36f72f0b-f03c-4b84-9a6b-89c1144d5a4a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.07.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_07_0_0",
  "content" : "20.07.0.0 Release Notes PDF Release date: This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u262 11 11.0.8+10 What’s New Zing 20.07.0.0 brings the associated JDK 7, JDK 8, and JDK 11 versions to July 2020 Critical Patch Update (CPU) security update levels and incorporates changes related to OpenJDK 7u271, OpenJDK 8u261, and OpenJDK 11.0.7.0.101 release contents. The lock-less Java Native Interface (JNI) protocol is enabled by default in Zing 20.07.0.0. See Using Zing Command-Line Options for the UseThreadStateNativeWrapperProtocol option and details. Zing 20.07.0.0 introduces optimization in object allocation (internal new_stub() function) for improved performance in TLAB allocation intensive applications. The optimization is enabled by default. Starting with Zing 20.07.0.0, Zing 8 supports TLS 1.3 by default and follows the application programming interface (API) changes introduced by Maintenance Release 3 to the Java SE 8 specification. Resolved Issues Issue ID Description ZVM-15833 Add additional logging of padding sizes. Known Issues Issue ID Description"
}, {
  "objectID" : "52dec034-fbad-4c00-839a-56b50977c2ee",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-49",
  "content" : "What’s New Zing 20.07.0.0 brings the associated JDK 7, JDK 8, and JDK 11 versions to July 2020 Critical Patch Update (CPU) security update levels and incorporates changes related to OpenJDK 7u271, OpenJDK 8u261, and OpenJDK 11.0.7.0.101 release contents. The lock-less Java Native Interface (JNI) protocol is enabled by default in Zing 20.07.0.0. See Using Zing Command-Line Options for the UseThreadStateNativeWrapperProtocol option and details. Zing 20.07.0.0 introduces optimization in object allocation (internal new_stub() function) for improved performance in TLAB allocation intensive applications. The optimization is enabled by default. Starting with Zing 20.07.0.0, Zing 8 supports TLS 1.3 by default and follows the application programming interface (API) changes introduced by Maintenance Release 3 to the Java SE 8 specification."
}, {
  "objectID" : "f7439f9a-758f-4610-b313-0d2e9058cec2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-49",
  "content" : "Resolved Issues Issue ID Description ZVM-15833 Add additional logging of padding sizes."
}, {
  "objectID" : "600fed75-38f7-4f94-8f81-4f02936e8c15",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#known-issues-49",
  "content" : "Known Issues Issue ID Description"
}, {
  "objectID" : "3e8ee1fb-ea2b-42c5-9be0-955939ffc3f7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.06.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_06_0_0",
  "content" : "20.06.0.0 Release Notes PDF Release date: This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New The release of Zing 20.06.0.0 includes ReadyNow improvements for faster warmup and smaller footprint. Zing 20.06.0.0 introduces a JNI exception checking optimization. See Using Zing Command-Line Options for the UseFastJNIExceptionCheck option and details. Zing 20.06.0.0 provides full elasticity support for code cache. See Using Zing Command-Line Options for the InitialCodeCacheSize, ReservedCodeCacheSize, and CodeCacheOopTableSize options and details. Zing 20.06.0.0 includes a further improvement of JDK 11 java.lang.StackWalker which is frequently used by log4j2 and other logging implementations. See also https://openjdk.java.net/jeps/259 and java.lang.StackStreamFactory$AbstractStackWalker. Zing 20.06.0.0 introduces new diagnostic Java Flight Recorder (JFR) events to simplify error handling. The lock-less Java Native Interface (JNI) protocol is disabled by default. See Using Zing Command-Line Options for the UseThreadStateNativeWrapperProtocol option and details. Resolved Issues Issue ID Description ZVM-15687 Make -XX:+TraceImplicitNullChecks manageable. ZVM-12535 JVM flags, ParGCCardsPerStrideChunk and UseCompressedClassPointers, give error. Known Issues Issue ID Description"
}, {
  "objectID" : "f92eef09-0583-41de-a54d-743ffa52aa7c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-50",
  "content" : "What’s New The release of Zing 20.06.0.0 includes ReadyNow improvements for faster warmup and smaller footprint. Zing 20.06.0.0 introduces a JNI exception checking optimization. See Using Zing Command-Line Options for the UseFastJNIExceptionCheck option and details. Zing 20.06.0.0 provides full elasticity support for code cache. See Using Zing Command-Line Options for the InitialCodeCacheSize, ReservedCodeCacheSize, and CodeCacheOopTableSize options and details. Zing 20.06.0.0 includes a further improvement of JDK 11 java.lang.StackWalker which is frequently used by log4j2 and other logging implementations. See also https://openjdk.java.net/jeps/259 and java.lang.StackStreamFactory$AbstractStackWalker. Zing 20.06.0.0 introduces new diagnostic Java Flight Recorder (JFR) events to simplify error handling. The lock-less Java Native Interface (JNI) protocol is disabled by default. See Using Zing Command-Line Options for the UseThreadStateNativeWrapperProtocol option and details."
}, {
  "objectID" : "c1354492-d18e-4688-9d5c-1c25f8f3e0f7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-50",
  "content" : "Resolved Issues Issue ID Description ZVM-15687 Make -XX:+TraceImplicitNullChecks manageable. ZVM-12535 JVM flags, ParGCCardsPerStrideChunk and UseCompressedClassPointers, give error."
}, {
  "objectID" : "73d68b15-dfa3-41c6-8ac3-a92456d9ad1c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.05.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_05_0_0",
  "content" : "20.05.0.0 Release Notes PDF Release date: May 29, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New In Zing 20.05.0.0, the Java Flight Recorder Tick Profiler becomes enabled by default. In Zing 20.05.0.0, Java monitors are moved from CodeCache to a new dedicated MonitorCache storage. The release of Zing 20.05.0.0 includes optimizations targeted at accelerating compilation and warmup. Zing 20.05.0.0 introduces better JDK 11 java.lang.StackWalker which is frequently used by log4j2 and other logging implementations. See also https://openjdk.java.net/jeps/259 and java.lang.StackStreamFactory$AbstractStackWalker. Zing 20.05.0.0 provides a reduction of application exit times in the non-ZST mode when a process uses mlockall(). Zing 20.05.0.0 improves the mitigation strategy used by the Falcon compiler to minimize performance impacts due to Intel's microcode updates in response to Jump Conditional Code (JCC) Erratum SKX102. Previous versions inserted nop instructions for padding; the new version can optionally increase the size of existing instructions in some cases. As before, the mitigation is enabled only on affected processors, and no user action is needed. Zing 20.05.0.0 introduces a testing grace period mode, under which the Zing can run for up to 60 minutes (3600 seconds) without requiring a valid license. The testing grace period can be enabled by setting the ZING_TESTING_GRACE_PERIOD_SEC environment variable to a number of grace period seconds (up to 3600), or by using the -XX:ZVMTestingGracePeriodSec=N flag with a similar value. Resolved Issues Issue ID Description ZVM-15452 Crash with problematic frame vframe::next()+0x9e ZVM-15426 Crash in guarantee(false) failed: derived_oop_slots.contains(dst)!! ZVM-15024 Crash in guarantee(FMP.getNumFunctions() == 1) failed: exactly one function expected!. Known Issues Issue ID Description"
}, {
  "objectID" : "e8c03575-9cc6-44c3-b85e-0a99ad559dc4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-51",
  "content" : "What’s New In Zing 20.05.0.0, the Java Flight Recorder Tick Profiler becomes enabled by default. In Zing 20.05.0.0, Java monitors are moved from CodeCache to a new dedicated MonitorCache storage. The release of Zing 20.05.0.0 includes optimizations targeted at accelerating compilation and warmup. Zing 20.05.0.0 introduces better JDK 11 java.lang.StackWalker which is frequently used by log4j2 and other logging implementations. See also https://openjdk.java.net/jeps/259 and java.lang.StackStreamFactory$AbstractStackWalker. Zing 20.05.0.0 provides a reduction of application exit times in the non-ZST mode when a process uses mlockall(). Zing 20.05.0.0 improves the mitigation strategy used by the Falcon compiler to minimize performance impacts due to Intel's microcode updates in response to Jump Conditional Code (JCC) Erratum SKX102. Previous versions inserted nop instructions for padding; the new version can optionally increase the size of existing instructions in some cases. As before, the mitigation is enabled only on affected processors, and no user action is needed. Zing 20.05.0.0 introduces a testing grace period mode, under which the Zing can run for up to 60 minutes (3600 seconds) without requiring a valid license. The testing grace period can be enabled by setting the ZING_TESTING_GRACE_PERIOD_SEC environment variable to a number of grace period seconds (up to 3600), or by using the -XX:ZVMTestingGracePeriodSec=N flag with a similar value."
}, {
  "objectID" : "09c75b98-2f42-48d3-9821-76c2291d182e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-51",
  "content" : "Resolved Issues Issue ID Description ZVM-15452 Crash with problematic frame vframe::next()+0x9e ZVM-15426 Crash in guarantee(false) failed: derived_oop_slots.contains(dst)!! ZVM-15024 Crash in guarantee(FMP.getNumFunctions() == 1) failed: exactly one function expected!."
}, {
  "objectID" : "f2c51d99-7759-4b0d-b24a-2987392cc79e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.04.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_04_0_0",
  "content" : "20.04.0.0 Release Notes PDF Release date: April 30, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New The release of Zing 20.04.0.0 contains April 2020 critical patch update (CPU) security and critical bug fixes and brings the associated JDK 7, JDK 8, and JDK 11 versions to April 2020 CPU security update levels. Zing 20.04.0.0 incorporates additional non-security changes associated with the April PSU 2020 OpenJDK 8u252 and OpenJDK 11.0.7 release contents. Starting with Zing 20.04.0.0, the -XX:+UseC2 option can use one of two separate implementations of C2 JIT compilation: a traditional UseSeaOfNodesC2 mode and a new UseKestrelC2 mode. The new mode is selected with +UseKestrelC2 which is on by default for Zing 11 and off by default for Zing 8 and Zing 7. This mode enables a C2 implementation introduced to Zing in 2020. It is based on a lightweight use of the LLVM backend and typically produces faster code than UseSeaOfNodesC2 while keeping compilation effort at similar levels. UseKestrelC2 generally exhibits a significantly lower compilation-time CPU consumption compared to Falcon. The old mode is selected with +UseSeaOfNodesC2 which is off by default in Zing 11 and on by default for Zing 8 and Zing 7. See Using Zing Command-Line Options for UseKestrelC2 and UseSeaOfNodesC2 command-line options and details. Zing 20.04.0.0 introduces a compilation time improvement. The release of Zing 20.04.0.0 introduces an increased maximum Java heap size from 1 TB to 2.5 TB in the default non-ZST mode. The maximum Java heap size for the Zing Virtual Machine with ZST is 20 TB. In Zing 20.04.0.0, a new Java Flight Recorder functionality allows you to collect profiling data about applications that use JNI invocations. The release of Zing 20.04.0.0 includes optimizations targeted at reducing JNI transition costs. The cost of a native call from Java was reduced, and the implementation of the accessor functions used to retrieve fields of Java objects from native code was also improved. Most applications will not be affected, but applications with many native transitions (such as a socket or file IO) may see the marked improvement. See Using Zing Command-Line Options for UseFastJNIAccessors, UseMembar, and UseThreadStateNativeWrapperProtocol command-line options and details. Zing 20.04.0.0 excludes debug symbols embedded in libjvm.so, which reduces the filesystem footprint of a Zing installation by 280 MB. Contact [email protected] if you need to install debug symbols for Zing. Resolved Issues Issue ID Description ZVM-15020 Illegal memcpy generated through the optimizer. ZVM-14815 getPercentJavaHeapOccupiedAfterCollection() returns 0. ZVM-10128 Runtime.getRuntime().availableProcessors() returns an incorrect value when affinity is set. Known Issues Issue ID Description ZVM-14636 Heap dumps and JVMTI object tagging are not supported with UseEpsilonGC."
}, {
  "objectID" : "80bf0a04-803d-4a58-a078-e3d974bb924f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-52",
  "content" : "What’s New The release of Zing 20.04.0.0 contains April 2020 critical patch update (CPU) security and critical bug fixes and brings the associated JDK 7, JDK 8, and JDK 11 versions to April 2020 CPU security update levels. Zing 20.04.0.0 incorporates additional non-security changes associated with the April PSU 2020 OpenJDK 8u252 and OpenJDK 11.0.7 release contents. Starting with Zing 20.04.0.0, the -XX:+UseC2 option can use one of two separate implementations of C2 JIT compilation: a traditional UseSeaOfNodesC2 mode and a new UseKestrelC2 mode. The new mode is selected with +UseKestrelC2 which is on by default for Zing 11 and off by default for Zing 8 and Zing 7. This mode enables a C2 implementation introduced to Zing in 2020. It is based on a lightweight use of the LLVM backend and typically produces faster code than UseSeaOfNodesC2 while keeping compilation effort at similar levels. UseKestrelC2 generally exhibits a significantly lower compilation-time CPU consumption compared to Falcon. The old mode is selected with +UseSeaOfNodesC2 which is off by default in Zing 11 and on by default for Zing 8 and Zing 7. See Using Zing Command-Line Options for UseKestrelC2 and UseSeaOfNodesC2 command-line options and details. Zing 20.04.0.0 introduces a compilation time improvement. The release of Zing 20.04.0.0 introduces an increased maximum Java heap size from 1 TB to 2.5 TB in the default non-ZST mode. The maximum Java heap size for the Zing Virtual Machine with ZST is 20 TB. In Zing 20.04.0.0, a new Java Flight Recorder functionality allows you to collect profiling data about applications that use JNI invocations. The release of Zing 20.04.0.0 includes optimizations targeted at reducing JNI transition costs. The cost of a native call from Java was reduced, and the implementation of the accessor functions used to retrieve fields of Java objects from native code was also improved. Most applications will not be affected, but applications with many native transitions (such as a socket or file IO) may see the marked improvement. See Using Zing Command-Line Options for UseFastJNIAccessors, UseMembar, and UseThreadStateNativeWrapperProtocol command-line options and details. Zing 20.04.0.0 excludes debug symbols embedded in libjvm.so, which reduces the filesystem footprint of a Zing installation by 280 MB. Contact [email protected] if you need to install debug symbols for Zing."
}, {
  "objectID" : "2a316238-ba35-4ad7-9387-6c88a35a193a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-52",
  "content" : "Resolved Issues Issue ID Description ZVM-15020 Illegal memcpy generated through the optimizer. ZVM-14815 getPercentJavaHeapOccupiedAfterCollection() returns 0. ZVM-10128 Runtime.getRuntime().availableProcessors() returns an incorrect value when affinity is set."
}, {
  "objectID" : "dcfbe9ef-67c7-4c02-bf67-684fa048bcf1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#known-issues-52",
  "content" : "Known Issues Issue ID Description ZVM-14636 Heap dumps and JVMTI object tagging are not supported with UseEpsilonGC."
}, {
  "objectID" : "3fb2adb0-e9a0-4b0d-9577-cb527643d393",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.03.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_03_1_0",
  "content" : "20.03.1.0 Release Notes PDF Release date: This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u252 8 8u242 11 11.0.6+10 What’s New Resolved Issues Issue ID Description Known Issues Issue ID Description"
}, {
  "objectID" : "cdac49a3-53cf-4e0b-8c75-e9bfd704a625",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-53",
  "content" : "Resolved Issues Issue ID Description"
}, {
  "objectID" : "b3f384ab-9abc-42ec-bc91-0899eab14f3d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.03.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_03_0_0",
  "content" : "20.03.0.0 Release Notes PDF Release date: This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u252 8 8u242 11 11.0.6+10 What’s New The release of Zing 20.03.0.0 introduces the elimination of redundant boxing conversions and the optimized copying of HashSets. Resolved Issues Issue ID Description Known Issues Issue ID Description"
}, {
  "objectID" : "f87b7431-caad-40f1-815d-dc2a3ef5d109",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-54",
  "content" : "What’s New The release of Zing 20.03.0.0 introduces the elimination of redundant boxing conversions and the optimized copying of HashSets."
}, {
  "objectID" : "988e04cb-a4c0-437c-ad14-942261cc361d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_02_1_0",
  "content" : "20.02.1.0 Release Notes PDF Release date: April 8, 2020 This release is based on Azul Platform Prime 20.02.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u252 8 8u242 11 11.0.6+10 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "1989aec7-4353-4ef8-ab4a-645bb0696376",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-55",
  "content" : "What’s New Internal bug fixes and stability improvements."
}, {
  "objectID" : "73fac74c-2f10-400a-a75b-8b16eb323981",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_02_0_0",
  "content" : "20.02.0.0 Release Notes PDF Release date: February 28, 2020 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u252 8 8u242 11 11.0.6+10 What’s New January 2020 PSU Release. This version incorporates additional non-security changes associated with the PSU 2020 OpenJDK 8u242 and OpenJDK 11.0.6 release contents. Deprecation of FalconUseLegacyInliner The FalconUseLegacyInliner command-line option is deprecated in Zing 8 and 11 with no replacemen. Resolved Issues Issue ID Description ZVM-14463 Occasionally seen segmentation faults during startup of the servers, which causes the server to fail to start. ZVM-12506 In Java 11 testing, a rare ZVM 18.12.0.0 crash was observed when returning from the invocation of a MethodHandle routine. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "db029489-075e-4392-a18d-bced67d67edb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-56",
  "content" : "What’s New January 2020 PSU Release. This version incorporates additional non-security changes associated with the PSU 2020 OpenJDK 8u242 and OpenJDK 11.0.6 release contents. Deprecation of FalconUseLegacyInliner The FalconUseLegacyInliner command-line option is deprecated in Zing 8 and 11 with no replacemen."
}, {
  "objectID" : "8423756b-241b-4524-a9af-335c114e5759",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-56",
  "content" : "Resolved Issues Issue ID Description ZVM-14463 Occasionally seen segmentation faults during startup of the servers, which causes the server to fail to start. ZVM-12506 In Java 11 testing, a rare ZVM 18.12.0.0 crash was observed when returning from the invocation of a MethodHandle routine."
}, {
  "objectID" : "d1827cfd-ce59-4c93-96c5-83148b091910",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.01.0.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_20_01_0_0",
  "content" : "20.01.0.0 Release Notes PDF Release date: January 30, 2020 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u251 8 8u241 11 11.0.5.0.101+11 What’s New January 2020 CPU Release. InZVM20.01.0.0, -XX:+FalconCompensateForIntelMCUForErratumSKX102 is an off-by-default option and introduces a nop padding based mitigation for performance regressions seen on some systems following Intel’s microcode updates in response to errata SKX102. This option is expected to become the default in a future Zing release. If enabled, nop padding will be used to align affected branches on systems with the microcode update applied. For testing purposes, the flag -XX:+ForceFalconCompensateForIntelMCUForErratumSKX102 is also provided. This can be used to force the generation of nop padded code on unaffected systems for performance validation. Resolved Issues Issue ID Description ZVM-7678 Backport of JDK-8162795 to fix JNI weak handle native memory leak which can occur in some use cases since ZVM 19.02.102.0. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "05756fd8-70cf-4f3b-982c-e01bfa9cddec",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-57",
  "content" : "What’s New January 2020 CPU Release. InZVM20.01.0.0, -XX:+FalconCompensateForIntelMCUForErratumSKX102 is an off-by-default option and introduces a nop padding based mitigation for performance regressions seen on some systems following Intel’s microcode updates in response to errata SKX102. This option is expected to become the default in a future Zing release. If enabled, nop padding will be used to align affected branches on systems with the microcode update applied. For testing purposes, the flag -XX:+ForceFalconCompensateForIntelMCUForErratumSKX102 is also provided. This can be used to force the generation of nop padded code on unaffected systems for performance validation."
}, {
  "objectID" : "2a493b31-d26e-4dd6-a699-7c23feb06ffc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-57",
  "content" : "Resolved Issues Issue ID Description ZVM-7678 Backport of JDK-8162795 to fix JNI weak handle native memory leak which can occur in some use cases since ZVM 19.02.102.0."
}, {
  "objectID" : "02f67e8e-4964-489e-bd97-509dd8575e98",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Previous Stable Builds",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#previous_stable_builds",
  "content" : "Previous Stable Builds 23.08.301.0 Release Notes PDF Release date: February 23, 2024 This PSU release is based on Azul Platform Prime 23.08.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_401-b2 11 11.0.21.0.101+2-LTS 17 17.0.9.0.101+2-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-30014 Backport ZVM-29800 to a 23.08.300 build for aarch64 ZVM-29800 The 'libjvm.so' file is significantly larger in the aarch64 build compared to the x64 build 23.08.300.0 Release Notes PDF Release date: January 16, 2024 This CPU release is based on Azul Platform Prime 23.08.201.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_401-b2 11 11.0.21.0.101+2-LTS 17 17.0.9.0.101+2-LTS What’s New January 2024 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release. 23.08.201.0 Release Notes PDF Release date: January 10, 2024 This release is based on Azul Platform Prime 23.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b1 11 11.0.21+8-LTS 17 17.0.9+8-LTS What’s New Compilation ranking has been disabled in 23.08.x.x stable releases starting from 23.08.201 since, in some cases, the feature can cause some performance issues. You can turn on the feature manually, if needed, with:  -XX:TopTierHotCompileThresholdTriggerMillis=60000\n-XX:TopTierWarmCompileThresholdTriggerMillis=600000\n-XX:TopTierWarmCompileCpuPercent=25 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29440 VM fails to remove stale hsperfdata files after backport of JDK-8286030 ZVM-19215 Backport JDK-8215451: IsSameObject should not keep objects alive. ZVM-29388 aarch64 builds contain debug symbols - much larger than x64 ZVM-29314 [Java17+] Improve handling of constantPool entry in klass_at_if_loaded() ZVM-29280 Record final IR in our crash handler ZVM-29160 [Falcon] Incorrect exception handling in case of unloaded klass handler 23.08.200.0 Release Notes PDF Release date: November 20, 2023 This PSU release is based on Azul Platform Prime 23.08.101.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b1 11 11.0.21+8-LTS 17 17.0.9+8-LTS What’s New October 2023 PSU release security fixes. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release. 23.08.101.0 Release Notes PDF Release date: November 2, 2023 This release is based on Azul Platform Prime 23.08.100.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b01 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New Internal bug fixes. The starting point of the time period specified by the option CompilerWarmupPeriodSeconds has been updated. Previously, this time period began at the execution of the Main method. But, since pre-Main can have unexpectedly long initializations, the ending point of this time period could become unpredictable. The starting point of this time period has been changed to JVM startup in order to include pre-Main, giving much better predictability of when this time period ends. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28960 Potential regression in compilation behaviors and times from 23.02.400 to 23.08.01 ZVM-29000 Fix missing files for SelfDiagnosticRunLevel=2 ZVM-28818 Fix check super class access ZVM-28801 Prime jre17 fails to load management agent ZVM-28288 Liveness probe failure during high load resulting in SIGTRAP sent to VM 23.08.100.0 Release Notes PDF Release date: October 17, 2023 This CPU release is based on Azul Platform Prime 23.08.1.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b01 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New October 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22067 CORBA CORBA Yes 5.3 Network Low None None Unchanged None Low None 8 Note 1 CVE-2023-22081 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 21, 17, 11, 8 Note 2 CVE-2023-30589 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None High None None CVE-2023-22091 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Compiler Multiple Yes 4.8 Network High None None Unchanged Low Low None None CVE-2023-22025 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability can only be exploited by supplying data to APIs in the specified Component, e.g., through a web service. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 3 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for October 2023 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release. 23.08.1.0 Release Notes PDF Release date: September 26, 2023 This release is based on Azul Platform Prime 23.08.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28703 java.lang.UnsupportedOperationException Monitoring of Synchronizer Usage is not supported sun.management.ThreadImpl.findDeadlockedThreads(ThreadImpl.java:411) ZVM-28639 Debug files/libraries not being excluded from release artifacts ZVM-28588 weblogic crashed with \"assert0(false) failed: [false expected]\" 23.02.600.0 Release date: November 20, 2023 This PSU release is based on Azul Platform Prime 23.02.501.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b1 11 11.0.21+8-LTS 17 17.0.9+8-LTS What’s New October 2023 PSU release security fixes. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release. 23.02.550.0 Release Notes PDF Release date: March 5, 2024 This release is based on Azul Platform Prime 23.02.501.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b1 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New Internal bug fixes Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29694 Chronicle-Queue crashed due to \"Error: Safepoint sync time longer than 200000 ms detected when executing Deoptimize.\" ZVM-29858 Fuzzer test crash - V [libjvm.so+0x7df40e] java_lang_Class::set_module(oopDesc*, oopDesc*)+0xe 23.02.501.0 Release Notes PDF Release date: January 8, 2024 This release is based on Azul Platform Prime 23.02.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b01 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New A new diagnostic command line option has been introduced, -XX:FalconAbortCompileWithInstrPattern=<pattern>, which can be used to apply abortfalcon compile command only if assembly of the compiled method contains the specified pattern. The specified pattern uses regexp syntax. An improvement to the Time to Safepoint (TTSP) profiler has been made to include interpreter frame names and BCI during error reporting in the hs_err file. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29440 VM fails to remove stale hsperfdata files after backport of JDK-8286030 ZVM-19215 Backport JDK-8215451: IsSameObject should not keep objects alive. ZVM-29384 Backport JDK-8153413: Exceptions::_throw always logs exceptions, penalizing performance ZVM-29314 [Java17+] Improve handling of constantPool entry in klass_at_if_loaded() ZVM-29280 Record final IR in our crash handler ZVM-29160 [Falcon] Incorrect exception handling in case of unloaded klass handler 23.02.500.0 Release Notes PDF Release date: October 17, 2023 This CPU release is based on Azul Platform Prime 23.02.400.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b01 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New October 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22067 CORBA CORBA Yes 5.3 Network Low None None Unchanged None Low None 8 Note 1 CVE-2023-22081 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 21, 17, 11, 8 Note 2 CVE-2023-30589 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None High None None CVE-2023-22091 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Compiler Multiple Yes 4.8 Network High None None Unchanged Low Low None None CVE-2023-22025 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability can only be exploited by supplying data to APIs in the specified Component, e.g., through a web service. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 3 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for October 2023 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release. 23.02.401.0 Release Notes PDF Release date: October 12, 2023 This release is based on Azul Platform Prime 23.02.302.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New The starting point of the time period specified by the option CompilerWarmupPeriodSeconds has been updated. Previously, this time period began at the execution of the Main method. But, since pre-Main can have unexpectedly long initializations, the ending point of this time period could become unpredictable. The starting point of this time period has been changed to JVM startup in order to include pre-Main, giving much better predictability of when this time period ends. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27506 Turn on JFRDistinguishJITTypes flag by default ZVM-28818 Fix check super class access ZVM-28801 Prime jre17 fails to load management agent ZVM-28588 weblogic crashed with \"assert0(false) failed: [false expected]\" ZVM-28144 Exhausting java heap during early VM initialization causes a hang ZVM-28534 Prevent Falcon optimization of exception-throwing in case PrintStacktraceOnException is specified 23.02.400.0 Release Notes PDF Release date: August 28, 2023 This PSU release is based on Azul Platform Prime 23.02.302.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New ZVision and ZVRobot have been separated from the Azul Platform Prime package due to a known vulnerability in jQuery 1.4.3, which is used in building the ZVision and ZVRobot utilities. At this time, Azul is not aware of any vulnerability in ZVision itself. For this reason, ZVision is still available for download for Azul Platform Prime subscribers at https://ftp.azul.com/releases/Zing/ZVision/ZVTools.zip It is no longer necessary to LD_PRELOAD the libnmt_hooks.so library in order to use extended Native Memory Tracking (NMT). The libnmt_hooks.so library is now linked by default. July 2023 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22041 Hotspot None No 5.1 Local High None None Unchanged High None None 17, 11 Note 1 CVE-2023-22036 Utility Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22049 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-25193 2D (Harfbuzz) Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22006 Networking Multiple Yes 3.1 Network High None Required Unchanged None Low None 17, 11 Note 1 CVE-2023-22043 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. JavaFX Multiple Yes 5.9 Network High None None Unchanged None High None None Note 1 CVE-2023-22044 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22045 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22051 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. GraalVM Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for July 2023 Azul Platform Prime 23.02.400.0 contains Zing Critical Fixes (ZCF). Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28301 Fix java_lang_String::hash_code ZVM-28295 Avoid implicit type conversion when calling the Address constructor with Register parameter ZVM-28242 [AArch64] JFR profiler does not collect stack traces ZVM-27897 Hadoop fails with Prime when -XX:+UseAES is used ZVM-27796 SEGV due to module loading early during JVM init ZVM-25950 Backport JDK-7059899 Stack overflows in Java code cause 64-bit JVMs to exit due to SIGSEGV 23.02.301.0 Release Notes PDF Release date: July 25, 2023 This release is based on Azul Platform Prime 23.02.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_381-b2 11 11.0.19.0.101+2-LTS 17 17.0.7.0.101+2-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27958 JVM crashes when wrong -XX:CNCHost passed 23.02.301.0 Release Notes PDF Release date: July 25, 2023 This release is based on Azul Platform Prime 23.02.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_381-b2 11 11.0.19.0.101+2-LTS 17 17.0.7.0.101+2-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27958 JVM crashes when wrong -XX:CNCHost passed 23.02.300.0 Release Notes PDF Release date: July 18, 2023 This CPU release is based on Azul Platform Prime 23.02.202.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_381-b2 11 11.0.19.0.101+2-LTS 17 17.0.7.0.101+2-LTS What’s New July 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22041 Hotspot None No 5.1 Local High None None Unchanged High None None 17, 11 Note 1 CVE-2023-22036 Utility Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22049 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-25193 2D (Harfbuzz) Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22006 Networking Multiple Yes 3.1 Network High None Required Unchanged None Low None 17, 11 Note 1 CVE-2023-22043 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. JavaFX Multiple Yes 5.9 Network High None None Unchanged None High None None Note 1 CVE-2023-22044 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22045 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22051 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. GraalVM Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for July 2023 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release. 23.02.202.0 Release Notes PDF Release date: July 3, 2023 This release is based on Azul Platform Prime 23.02.201.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b1 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27785 Fix segmentation fault on StubRoutines::stringIndexOf ZVM-27549 Avoid native method calls from VM.java class ZVM-27098 Incompatibility with Apache Flink with RocksDB 23.02.202.0 Release Notes PDF Release date: July 3, 2023 This release is based on Azul Platform Prime 23.02.201.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b1 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27785 Fix segmentation fault on StubRoutines::stringIndexOf ZVM-27549 Avoid native method calls from VM.java class ZVM-27098 Incompatibility with Apache Flink with RocksDB 23.02.200.0 Release Notes PDF Release date: May 16, 2023 This PSU release is based on Azul Platform Prime 23.02.101.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b1 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New April 2023 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for April 2023 Some Falcon CPU Budgeting options have been renamed according to the following table: Changed from: Changed to: CompilerTier2BudgetingThreadsPercent CompilerTier2BudgetingCPUPercent CompilerTier2BudgetingWarmupThreadsPercent CompilerTier2BudgetingWarmupCPUPercent CompilerTier2BudgetMaxMs CompilerTier2BudgetWindowDurationMs For more information on Falcon CPU Budgeting options, see Command Line Options, CPU Budgeting Options The command line option UseTrueObjectsForUnsafe has been set to true by default. This option forces unsafe objects to be returned in their true object form instead of the equivalent java class object. For example, with UseTrueObjectsForUnsafe disabled, java.lang.Class can be returned instead of the true klassOop. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release. 23.02.101.0 Release Notes PDF Release date: May 3, 2023 This release is based on Azul Platform Prime 23.02.100.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_371-b1 11 11.0.18.0.101+3-LTS 17 17.0.6.0.101+2-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27109 Method data not applied due to double set of the flag ZVM-26651 ExtraWarmupThreads setup crashes with guarantee(_num_cx_threads - 1 == tid) failed: Thread count is inconsistent 23.02.100.0 Release Notes PDF Release date: April 18, 2023 This CPU release is based on Azul Platform Prime 23.02.2.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_371-b1 11 11.0.18.0.101+3-LTS 17 17.0.6.0.101+2-LTS What’s New JDK versions 13, 15 and 19 have reached end of life and are no longer included in Azul Platform Prime builds of OpenJDK. April 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for April 2023 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release. 23.02.2.0 Release Notes PDF Release date: April 10, 2023 This release is based on Azul Platform Prime 23.02.1.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS 19 19.0.2+7-MTS What’s New Azul Platform Prime 23.02.2.0 contains Zing Critical Fixes (ZCF). Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-26650 Fix corruption of entries in a lock-free list of thread stacks that may be seen with workloads/applications that have a high turnover of threads. ZVM-26781 Unsafe.getObject() use through Method.invoke() difference in behavior in Prime ZVM-26648 Missing tag update in HeapRefBufferList::grab() 23.02.1.0 Release Notes PDF Release date: March 27, 2023 This release is based on Azul Platform Prime 23.02.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS 19 19.0.2+7-MTS What’s New Stable release of Azul Platform Prime Builds of OpenJDK, versions 13, 15 and 19, are reaching end of life. Starting from 23.02.100.0, stable releases will only include JDK 8, 11 and 17. Starting from 23.04.0.0, stream releases will include only JDK 8, 11 and 17. The Command Line Option GPGCUseAllocationPacing has been disabled by default. The Command Line Option CNCForceLocalCompiler has been deprecated and replaced with the new option CNCEnableRemoteCompiler. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-26387 [Alpine] Failed to bundle core from alpine container ZVM-26245 jlink on Prime converts library symlinks to files and increase the total size by 87MB 22.08.400.0 Release Notes PDF Release date: February 21, 2023 This PSU release is based on Azul Platform Prime 22.08.301.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS Note Version 1 of the GC Log Analyzer has reached its end-of-life and has been replaced with Version 2 of the GC Log Analyzer. GC Log Analyzer 2 is included in Zing packages and can be found at <installdir>/etc/GCLogAnalyzer2.jar. The latest version of GC Log Analyzer 2 is also available for download at https://docs.azul.com/prime/GC-Log-Analyzer. What’s New January 2023 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21830 Serialization Multiple Yes 5.3 Network Low None None Unchanged None Low None 8 CVE-2023-21835 JSSE DTLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 CVE-2023-21843 Sound Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 CVE-2022-43548 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 8.1 Network High None None Unchanged High High High None For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2023 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25437 RedefinePreviousVersions.java failed with \"java.lang.RuntimeException: 'Class unloading: has_previous_versions = false' missing from stdout/stderr\" 22.08.301.0 Release Notes PDF Release date: February 2, 2023 This release is based on Azul Platform Prime 22.08.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_361-b1 11 11.0.17.0.101+3-LTS 13 13.0.13.0.101+2-MTS 15 15.0.9.0.101+2-MTS 17 17.0.5.0.101+4-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25974 CNC links OpenSSL 1.1.1c, creating conflict with 3rd party library 22.08.300.0 Release Notes PDF Release date: January 17, 2023 This CPU release is based on Azul Platform Prime 22.08.201.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_361-b2 11 11.0.17.0.101+3-LTS 13 13.0.13.0.101+2-MTS 15 15.0.9.0.101+2-MTS 17 17.0.5.0.101+4-LTS What’s New January 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21830 Serialization Multiple Yes 5.3 Network Low None None Unchanged None Low None 8 CVE-2023-21835 JSSE DTLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 CVE-2023-21843 Sound Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 CVE-2022-43548 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 8.1 Network High None None Unchanged High High High None For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2023 Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 22.08.201.0 Release Notes PDF Release date: January 9, 2023 This release is based on Azul Platform Prime 22.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_352-b01 11 11.0.17+8 13 13.0.13+5 15 15.0.9+5 17 17.0.5+8 What’s New Internal bug fixes. Backport issue ZULU-39745 - Support custom security providers in Azul Zing builds of JDK17. The Java launcher can be updated to easily configure and enable custom security providers: Add a new java launcher option: --custom-providers=<custom_provider_name>(,<custom_provider_name>) Zing JDK will read custom provider configuration from the file located in the $JAVA_HOME/conf/<custom_provider_name>.properties Example of the configuration file:  # Add name custom provider jar\n--module-path=<custom_provider_jar>\n# The following properties are required to access JDK internal classes from the custom provider\n--add-exports=java.base/<package>=<custom_provider_module_name>\n--add-opens=java.base/<package>=<custom_provider_module_name>\n# The following option allows to access classes from non-modular 3rd party libraries\n--add-reads=<custom_provider_module_name>=ALL-UNNAMED\n# The following option reads custom security properties\n-Djava.security.properties=<security_property_file> Zing JDK will read <custom_provider_jar> and <security_property_file> from the $JAVA_HOME/conf/<custom_provider_name> directory. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25602 Fix JTReg11 startup failure post October 2022 PSU update. 22.08.200.0 Release Notes PDF Release date: November 15, 2022 This release is based on Azul Platform Prime 22.08.101.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u352 11 11.0.17 13 13.0.13 15 15.0.9 17 17.0.5 What’s New Internal bug fixes. October 2022 PSU release security fixes Important information regarding Java in containers (Docker, Kubernetes, and related) about automatic thread pool size calculation and number of CPUs available to the application: While in the general October 2022 release of Java 11 and 17, the default calculation of available CPU cores has changed in container environments following JDK-8281181, this change wasn’t made in the Azul Platform Prime stable release 22.08.200.0 to allow seamless transition from previous stable versions. That means, Azul Platform Prime 22.08 differs in this aspect from current OpenJDK. In practical use, this difference will only affect those situations where a new migration from OpenJDK to Prime 22.08 is started. If you notice your application performance being affected during such a transition from OpenJDK to Prime 22.08 add -XX:-UseContainerCpuShares to the Java command line to switch Azul Platform Prime to the same new calculation method as OpenJDK. To check your environment in general about this change, independent of whether it is running on OpenJDK or Azul Platform Prime, run the following command inside your container to display the actual result of the available CPU number calculation: Save the following code to file AvailableCPUs.java:  public class AvailableCPUs {\n    public static void main(String[] args) {\n        System.out.println(\"CPUs: \"\n            + Runtime.getRuntime().availableProcessors());\n    }\n} Run it:  java -showversion AvailableCPUs.java Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25457 Backport issue JDK-8208172 which allows for NULL messages in class resolution errors. 22.08.101.0 Release Notes PDF Release date: October 27, 2022 This release is based on Azul Platform Prime 22.08.100.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u352b01 11 11.0.16.1.101+3 13 13.0.12.0.101+2 15 15.0.8.0.101+2 17 17.0.4.1.101+2 What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release. 22.08.100.0 Release Notes PDF Release date: October 18, 2022 This CPU release is based on Azul Platform Prime 22.08.1.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u351b01 11 11.0.16.1.101+3 13 13.0.12.0.101+2 15 15.0.8.0.101+2 17 17.0.4.1.101+2 What’s New October 2022 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21618 JGSS Kerberos Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 2 CVE-2022-21626 Security HTTPS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8 Note 2 CVE-2022-21628 Lightweight HTTP Server HTTP Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21619 Security Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-21624 JNDI Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-39399 Networking HTTP Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-32215 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 9.1 Network Low None None Unchanged High High None None CVE-2022-21634 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: LLVM Interpreter Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2022-21597 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: JavaScript HTTP Yes 5.3 Network Low None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 22.08.1.0 Release Notes PDF Release date: September 30, 2022 This release is based on Azul Platform Prime 22.08.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New Internal bug fixes. Improved accuracy of RSS metric reported in GC log (C heap usage). With this improvement, the reported memory usage in GC log will give more accurate results. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 22.02.501.0 Release Notes PDF Release date: November 7, 2022 This release is based on Azul Platform Prime 22.02.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u351b01 11 11.0.16.1.101+3 13 13.0.12.0.101+2 17 15.0.8.0.101+2 17 17.0.4.1.101+2 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 22.02.500.0 Release Notes PDF Release date: October 18, 2022 This CPU release is based on Azul Platform Prime 22.02.401.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u351b01 11 11.0.16.1.101+3 13 13.0.12.0.101+2 17 15.0.8.0.101+2 17 17.0.4.1.101+2 What’s New October 2022 CPU release security fixes CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21618 JGSS Kerberos Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 2 CVE-2022-21626 Security HTTPS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8 Note 2 CVE-2022-21628 Lightweight HTTP Server HTTP Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21619 Security Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-21624 JNDI Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-39399 Networking HTTP Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-32215 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 9.1 Network Low None None Unchanged High High None None CVE-2022-21634 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: LLVM Interpreter Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2022-21597 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: JavaScript HTTP Yes 5.3 Network Low None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 22.02.401.0 Release Notes PDF Release date: September 30, 2022 This release is based on Azul Platform Prime 22.02.400.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 22.02.401.0 Release Notes PDF Release date: September 30, 2022 This release is based on Azul Platform Prime 22.02.400.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 22.02.400.0 Release Notes PDF Release date: August 17, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New July 2022 PSU release security fixes. Resolved Issues Issue ID Description ZVM-24486 Ported issue JDK-8290832 - It was no longer possible to change user.dir in JDK8 due to changes in the previous release of OpenJDK, causing compatibility issues. Those changes have been rolled back so that user.dir may be changed. ZVM-24429 Using Xlog:safepoint was causing long pauses under I/O contention. The fix reduces gc.log file size for the standard log setting -Xlog:gc:gc,safepoint:gc.log ZVM-23590 Fixed corruption of Falcon-compiled code in code cache. ZVM-24455 LockOpt::eliminateNestedLock could sometimes add an invalid/stale value to the deopt bundle which could potentially lead to crashes. Known Issues There are no new issues to report in this release. 22.02.300.0 Release Notes PDF Release date: July 19, 2022 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 8 8u341 11 11.0.15.0.101+3 13 13.0.11.0.101+2 15 15.0.7.0.101+2 17 17.0.3.0.101+2 What’s New July 2022 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-34169 JAXP (Xalan-J) Multiple Yes 7.5 Network Low None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21541 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21540 Hotspot Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8 Note 1 CVE-2022-21549 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 17 Note 1 CVE-2022-25647 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image (Gson) None No 6.2 Local Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and relies on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release. 22.02.202.0 Release Notes PDF Release date: July 12, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15.+10 13 3.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. ZVM-24010 - Optimized layout of GC internal data structure, improving native memory consumption by the garbage collector(GC). ZVM-22820 - Put size limit on heap ref buffers during card mark scanning. Resolved Issues Issue ID Description ZVM-24118 Fixed crashes caused by constantPoolOopDesc::tag_at(int) ZVM-23983 async-profiler v2.7+ cpu profiling is now working with Prime. Known Issues There are no new issues to report in this release. 22.02.201.0 Release Notes PDF Release date: June 13, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15.+10 13 3.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-23618 Missing date and timestamp on multiple GC log lines when PrintGCDateStamps is specified. ZVM-23575 High GC time percentage when thread CPU usage information is not correctly read from /proc. Known Issues There are no new issues to report in this release. 22.02.200.0 Release Notes PDF Release date: May 4, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15.+10 13 3.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 22.02.100.0 Release Notes PDF Release date: April 19, 2022 This CPU release is based on Azul Platform Prime 22.02.3.0 and corresponds the following OpenJDK versions: Major Version OpenJDK Version 7 7u341 8 8u331 11 11.0.14.1.101+3 13 13.0.10.0.101+2 15 15.0.6.0.101+2 17 17.0.2.0.101+2 What’s New April 2022 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2018-25032 ZIP Multiple Yes 7.5 Network Low None None Unchanged None None High 17, 15, 13, 11, 8, 7, 6 CVE-2022-21449 Libraries Multiple Yes 7.5 Network Low None None Unchanged None High None 18, 17, 15 Note 1 CVE-2022-21476 Libraries Multiple Yes 7.5 Network Low None None Unchanged High None None 18, 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21426 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21434 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21496 JNDI Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21443 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-0778 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 22.02.3.0 Release Notes PDF Release date: April 12, 2022 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-10114 When -XX:ActiveProcessorCount=N is added to the command line, the number of compiler threads is now adjusted accordingly. Known Issues There are no new issues to report in this release. 22.02.2.0 Release Notes PDF Release date: April 4, 2022 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-23089 Two additional openjdk 8 symlinks, /usr/lib/jvm/jre and /usr/alternatives/jre have been added to Azul Platform Prime Known Issues There are no new issues to report in this release. 22.02.1.0 Release Notes PDF Release date: March 28, 2022 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools. Known Issues There are no new issues to report in this release. 21.08.502.0 Release Notes PDF Release date: July 4, 2022 This release is based on Azul Platform Prime 21.08.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u341 8 8u331 11 11.0.14.1.101+3 13 13.0.10.0.101+2 15 15.0.6.0.101+2 What’s New Internal bug fixes. ZVM-24010 - Optimized layout of GC internal data structure, improving native memory consumption by the garbage collector (GC). Resolved Issues Issue ID Description ZVM-21414 Made loop unrolling optimization more robust. Known Issues There are no new issues to report in this release. 21.08.501.0 Release Notes PDF Release date: July 4, 2022 This release is based on Azul Platform Prime 21.08.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u341 8 8u331 11 11.0.14.1.101+3 13 13.0.10.0.101+2 15 15.0.6.0.101+2 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-23590 Fix corruption of Falcon-compiled code in compressed::DebugMap::clean_inline_caches_concurrent (and its stw counterpart). Note This patch affects only Falcon-compiled code. Known Issues There are no new issues to report in this release. 21.08.500.0 Release Notes PDF Release date: April 19, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u341 8 8u331 11 11.0.14.1.101+3 13 13.0.10.0.101+2 15 15.0.6.0.101+2 What’s New Internal bug fixes. April 2022 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2018-25032 ZIP Multiple Yes 7.5 Network Low None None Unchanged None None High 17, 15, 13, 11, 8, 7, 6 CVE-2022-21449 Libraries Multiple Yes 7.5 Network Low None None Unchanged None High None 18, 17, 15 Note 1 CVE-2022-21476 Libraries Multiple Yes 7.5 Network Low None None Unchanged High None None 18, 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21426 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21434 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21496 JNDI Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21443 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-0778 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.08.402.0 Release Notes PDF Release date: April 5, 2022 This release is based on Azul Platform Prime 21.08.400.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+1 13 13.0.10+5 15 15.0.6+5 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-23164 Constant pool indexes related to the EnclosingMethod class file attribute were not handled correctly at JVMTI redefinition operation. This could in rare cases result in a crash on an attempt to use certain java.lang.Class helpers such as 'getSimpleName' or 'getEnclosingMethod' against the redefined class due to the invalid access to the constant pool using stale indexes. ZVM-23089 Two additional openjdk 8 symlinks, /usr/lib/jvm/jre and /usr/alternatives/jre have been added to Azul Platform Prime. Known Issues There are no new issues to report in this release. 21.08.401.0 Release Notes PDF Release date: March 7, 2022 This release is based on Azul Platform Prime 21.08.400.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+1 13 13.0.10+5 15 15.0.6+5 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-22555 Crash in codegen exposed by -XX:-FalconSpeculateNoThrowCalls using compilation recorded by RN. Known Issues There are no new issues to report in this release. 21.08.400.0 Release Notes PDF Release date: February 18, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+1 13 13.0.10+5 15 15.0.6+5 What’s New Remaining fixes from the January 2022 PSU release. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.08.301.0 Release Notes PDF Release date: January 18, 2022 This release is based on Azul Platform Prime 21.08.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u331 8 8u321 11 11.0.13.0.101+2 13 13.0.9.0.101+1 15 15.0.5.0.101+2 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.08.300.0 Release Notes PDF Release date: January 18, 2022 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u331 8 8u321 11 11.0.13.0.101+2 13 13.0.9.0.101+1 15 15.0.5.0.101+2 What’s New Common Vulnerabilities and Exposure (CVE) fixes for January 2022 OpenJDK. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21277 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 Note 1 CVE-2022-21282 JAXP Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21283 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21291 Hotspot Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-21293 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21294 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21296 JAXP Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21299 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21305 Hotspot Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21340 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21341 Serialization Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21349 2D Multiple Yes 5.3 Network Low None None Unchanged None None Low 8, 7 Note 1 CVE-2022-21360 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21365 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21366 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 Note 1 CVE-2022-21248 Serialization Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-22959 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTP Yes 6.5 Network Low None None Unchanged Low Low None None CVE-2022-21271 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low None Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments, typically in clients running sandboxed Java applications, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.08.202.0 Release Notes PDF Release date: January 4, 2022 This release is based on Azul Platform Prime 21.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13+8 13 13.0.9+3 15 15.0.5+3 What’s New General stability improvements. Resolved Issues Issue ID Description ZVM-21048 When -XX:+UseLargePages is used and the number of static huge pages reserved by nr_hugepages is insufficient for the total heap, Prime failed to start. Now it matches OpenJDK behavior and continues as expected. ZVM-22049 OldGC is not triggered often enough during idle time when NewGCs are occurring. Known Issues There are no new issues to report in this release. 21.08.201.0 Release Notes PDF Release date: December 27, 2021 This release is based on Azul Platform Prime 21.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13+8 13 13.0.9+3 15 15.0.5+3 What’s New General stability improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.08.200.0 Release Notes PDF Release date: November 15, 2021 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13+8 13 13.0.9+3 15 15.0.5+3 What’s New October 2021 PSU fixes New JIT flag for setting the compiler thread count as a percentage of the core count. See Command Line Options for more about the CIMaxCompilerThreadsPercent flag. General stability improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.08.100.0 Release Notes PDF Release date: October 19, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u321 8 8u311 11 11.0.12.0.101+2 13 13.0.8.0.101+1 15 15.0.4.101+1 What’s New October 2021 Critical Vulnerability and Exposures (CVE) fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-3517 JavaFX (libxml) Multiple Yes 8.6 Network Low None None Unchanged Low Low High 17, 15, 13, 11, 8 Note 1 CVE-2021-35567 Libraries Kerberos No 6.8 Network Low Low Required Changed High None None 17, 15, 13, 11, 8 Note 2 CVE-2021-35550 JSSE TLS Yes 5.9 Network High None None Unchanged High None None 11, 8, 7, 6 Note 2 CVE-2021-3522 JavaFX (GStreamer) None No 5.5 Local Low None Required Unchanged None None High 17, 15, 13, 11, 8 Note 1 CVE-2021-35556 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-35559 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35561 Utility Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35564 Keytool Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35565 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 3 CVE-2021-35578 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8 Note 3 CVE-2021-35586 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35603 JSSE TLS Yes 3.7 Network High None None Unchanged Low None None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35588 Hotspot Multiple Yes 3.1 Network High None Required Unchanged None None Low 8, 7, 6 Note 2 CVE-2021-27290 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-35560 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Deployment Multiple Yes 7.5 Network High None Required Unchanged High High High None Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.08.1.0 Release Notes PDF Release date: October 5, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New There are no new features. Resolved Issues Issue ID Description High CPU utilization exists in HeapCommit thread in some specific scenarios. High pause time during OldGC due to unloading of a long chain of subclasses. Abort the VM if GC safepoint operation time exceeds a configurable threshold. Installation packages are now signed. Known Issues There are no new issues to report in this release. 21.02.500.0 Release Notes PDF Release date: October 19, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u321 8 8u311 11 11.0.12.0.101+2 13 13.0.8.0.101+1 15 15.0.4.101+1 What’s New October 2021 PSU fixes and stability improvements. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-3517 JavaFX (libxml) Multiple Yes 8.6 Network Low None None Unchanged Low Low High 17, 15, 13, 11, 8 Note 1 CVE-2021-35567 Libraries Kerberos No 6.8 Network Low Low Required Changed High None None 17, 15, 13, 11, 8 Note 2 CVE-2021-35550 JSSE TLS Yes 5.9 Network High None None Unchanged High None None 11, 8, 7, 6 Note 2 CVE-2021-3522 JavaFX (GStreamer) None No 5.5 Local Low None Required Unchanged None None High 17, 15, 13, 11, 8 Note 1 CVE-2021-35556 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-35559 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35561 Utility Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35564 Keytool Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35565 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 3 CVE-2021-35578 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8 Note 3 CVE-2021-35586 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35603 JSSE TLS Yes 3.7 Network High None None Unchanged Low None None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35588 Hotspot Multiple Yes 3.1 Network High None Required Unchanged None None Low 8, 7, 6 Note 2 CVE-2021-27290 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-35560 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Deployment Multiple Yes 7.5 Network High None Required Unchanged High High High None Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.02.401.0 Release Notes PDF Release date: September 24, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New July 2021 PSU fixes and stability improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.02.400.0 Release Notes PDF Release date: August 18, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New July 2021 PSU Release. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.02.300.0 Release Notes PDF Release date: July 20, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u311 8 8u301 11 11.0.11.0.101+2 13 13.0.7.0.101+1 15 15.0.3.0.101+1 What’s New July 2021 CPU Release. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.02.201.0 Release Notes PDF Release date: July 5, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.02.200.0 Release Notes PDF Release date: May 21, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.02.100.0 Release Notes PDF Release date: April 20, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u301 8 8u291 11 11.0.10.0.101+1 13 13.0.6.0.101+2 15 15.0.2.0.101+2 What’s New April 2021 CPU Release. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.02.2.0 Release Notes PDF Release date: April 9, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 15 15.0.2+7 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release. 21.02.1.0 Release Notes PDF Release date: March 17, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 15 15.0.2+7 What’s New Improved compatibility between the MXBean memory pool names and names expected by in-memory data management systems (e.g., Pivotal GemFire 8.2). See GPGCReportJavaHeapPoolMXBean, GPGCHeapJavaPoolMXBeanName, GPGCNewGenPoolMXBeanName, GPGCOldGenPoolMXBeanName, GPGCPermGenPoolMXBeanName in Using Zing Command-Line Options for details. New Java Flight Recorder feature that allows to asynchronously subscribe to select JFR events and avoid overhead associated with creating a recording in Zing JDK 15. See JEP 349: JFR Event Streaming for details. Experimental ReadyNow mode that enables the pre-initialization of a greater number of bootstrap classes. Resolved Issues Issue ID Description ZVM-19089 Provide -XX:+OverrideVMProperties to enable setting the java.home system property by -modifiedJavaHome=<java-home>. ZVM-19058 Possible segmentation fault during materialization of a lazy object with a symbolic state. Known Issues There are no new issues to report in this release. 20.08.501.0 Release Notes PDF Release date: May 21, 2021 This release is based on Azul Platform Prime 20.08.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u301 8 8u291 11 11.0.10.0.101+1 What’s New Internal bug fixes and stability improvements. Resolved Issues Issue ID Description ZVM-19857 Setting the JVM options GenPauselessNewThreads or GenPauselessOldThreads via means other than the command-line induces a JVM crash at start-up. Environment flags such as _JAVA_OPTIONS and JAVA_TOOL_OPTIONS are examples of such affected alternatives. Can impact upgrades from 19.07 or prior releases to this release. Known Issues There are no new issues to report in this release. 20.08.500.0 Release Notes PDF Release date: April 20, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u301 8 8u291 11 11.0.10.0.101+1 What’s New April 2021 CPU update. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-2161 Libraries Multiple Yes 5.9 Network High None None Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-2163 Libraries Multiple Yes 5.3 Network High None Required Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-23841 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-3450 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 7.4 Network High None None Unchanged High High None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. It can also be exploited by supplying untrusted data to APIs in the specified Component. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.08.400.0 Release Notes PDF Release date: February 22, 2021 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 What’s New January 2021 PSU updates. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.08.300.0 Release Notes PDF Release date: January 19, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u291 8 8u281 11 11.0.9.1.101+5 What’s New January 2021 CPU security update. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14803 Libraries Multiple Yes 5.3 Network Low None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.08.202.0 Release Notes PDF Release date: January 8, 2021 This release is based on Azul Platform Prime 20.08.201.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u285 8 8u275 11 11.0.9.1+1 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.08.201.0 Release Notes PDF Release date: December 20, 2020 This release is based on Azul Platform Prime 20.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u285 8 8u275 11 11.0.9.1+1 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.08.200.0 Release Notes PDF Release date: November 20, 2020 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u285 8 8u275 11 11.0.9.1+1 What’s New October 2020 PSU updates. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.08.101.0 Release Notes PDF Release date: November 3, 2020 This release is based on Azul Platform Prime 20.08.100.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New Internal bug fixes and stability improvements. Resolved Issues Issue ID Description ZVM-17168 Checkpoint timeout crash while running async-profiler along with Zing. Known Issues There are no new issues to report in this release. 20.08.100.0 Release Notes PDF Release date: October 20, 2020 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New October 2020 Critical Patch Update (CPU) security update. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14803 Libraries Multiple Yes 5.3 Network Low None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 1 CVE-2020-14792 Hotspot Multiple Yes 4.2 Network High None Required Unchanged Low Low None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14779 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14781 JNDI Multiple Yes 3.7 Network High None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14782 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14797 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14796 Libraries Multiple Yes 3.1 Network High None Required Unchanged Low None None 15, 13, 11, 8, 7 Note 1 CVE-2020-14798 Libraries Multiple Yes 3.1 Network High None Required Unchanged None Low None 15, 13, 11, 8, 7 Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.08.2.0 Release Notes PDF Release date: October 8, 2020 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 What’s New SHA1withDSAinP1363Format, NONEwithDSAinP1363Format, SHA224withDSAinP1363Format, and SHA256withDSAinP1363Format are removed from signature algorithms enabled by default in Zing 20.08.1.0. The algorithms are not supported in other JDK 8 virtual machines. Resolved Issues Issue ID Description ZVM-16971 Compiler crash with signature polymorphic invokedynamic calls. Known Issues There are no new issues to report in this release. 20.08.1.0 Release Notes PDF Release date: September 14, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u262 11 11.0.8+10 What’s New Internal bug fixes. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.501.0 Release Notes PDF Release date: December 1, 2020 This release is based on Azul Platform Prime 20.02.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.500.0 Release Notes PDF Release date: October 20, 2020 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New October 2020 Critical Patch Update (CPU). CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14803 Libraries Multiple Yes 5.3 Network Low None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 1 CVE-2020-14792 Hotspot Multiple Yes 4.2 Network High None Required Unchanged Low Low None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14779 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14781 JNDI Multiple Yes 3.7 Network High None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14782 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14797 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14796 Libraries Multiple Yes 3.1 Network High None Required Unchanged Low None None 15, 13, 11, 8, 7 Note 1 CVE-2020-14798 Libraries Multiple Yes 3.1 Network High None Required Unchanged None Low None 15, 13, 11, 8, 7 Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.402.0 Release Notes PDF Release date: October 5, 2020 This release is based on Azul Platform Prime 20.02.401.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.401.0 Release Notes PDF Release date: September 21, 2020 This release is based on Azul Platform Prime 20.02.400.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 What’s New Cryptographic Algorithms Removal SHA1withDSAinP1363Format, NONEwithDSAinP1363Format, SHA224withDSAinP1363Format, and SHA256withDSAinP1363Format are removed from signature algorithms enabled by default in ZVM 20.08.1.0. The algorithms are not supported in other JDK 8 virtual machines. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.400.0 Release Notes PDF Release date: August 14, 2020 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 What’s New July PSU 2020. Transport Layer Security Protocol Version 1.3 in Zing 8 Zing 8 supports TLS 1.3 by default and follows the application programming interface (API) changes introduced by Maintenance Release 3 to the Java SE 8 specification. See Using Version 1.3 of Transport Layer Security (TLS) Protocol for more information. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.300.0 Release Notes PDF Release date: July 14, 2020 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u271 8 8u262 11 11.0.7.0.101+5 What’s New July 2020 CPU security updates. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14583 Libraries Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8, 7, 6 Note 1 CVE-2020-14664 JavaFX Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8 Note 1 CVE-2020-14593 2D Multiple Yes 7.4 Network Low None Required Changed None High None 14, 13, 11, 8, 7, 6 Note 1 CVE-2020-14562 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 14, 13, 11 Note 1 CVE-2020-14621 JAXP Multiple Yes 5.3 Network Low None None Unchanged None Low None 14, 13, 11, 8, 7, 6 Note 2 CVE-2020-14556 Libraries Multiple Yes 4.8 Network High None None Unchanged Low Low None 14, 13, 11, 8 Note 3 CVE-2020-14577 JSSE TLS Yes 3.7 Network High None None Unchanged Low None None 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-14578 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 8, 7, 6 Note 3 CVE-2020-14579 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 8, 7, 6 Note 3 CVE-2020-14581 2D Multiple Yes 3.7 Network High None None Unchanged Low None None 14, 13, 11 Note 3 CVE-2020-14573 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. 3 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.201.0 Release Notes PDF Release date: June 8, 2020 This release is based on Azul Platform Prime 20.02.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.200.0 Release Notes PDF Release date: May 13, 2020 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New April PSU 2020. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.101.0 Release Notes PDF Release date: April 28, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u261 8 8u251 11 11.0.6.0.101+11 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release. 20.02.100.0 Release Notes PDF Release date: April 14, 2020 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u261 8 8u251 11 11.0.6.0.101+11 What’s New April 2020 CPU security update. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-2803 Libraries Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8, 7 Note 1 CVE-2020-2805 Libraries Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8, 7 Note 1 CVE-2019-18197 JavaFX(libxslt) Multiple Yes 8.1 Network High None None Unchanged High High High 13, 11, 8 Note 1 CVE-2020-2816 JSSE HTTPS Yes 7.5 Network Low None None Unchanged None High None 14, 13, 11, 8 Note 2 CVE-2020-2781 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2830 Concurrency Multiple Yes 5.3 Network Low None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2767 JSSE HTTPS Yes 4.8 Network High None None Unchanged Low Low None 14, 13, 11, 8 Note 3 CVE-2020-2800 Lightweight HTTP Server Multiple Yes 4.8 Network High None None Unchanged Low Low None 14, 13, 11, 8, 7, 6 Note 2 CVE-2020-2754 Scripting Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8 Note 3 CVE-2020-2755 Scripting Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8 Note 3 CVE-2020-2756 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2757 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2773 Security Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2778 JSSE HTTPS Yes 3.7 Network High None None Unchanged Low None None 14, 13, 11, 8 Note 3 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. 3 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. Resolved Issues Ther..."
}, {
  "objectID" : "4a401811-cada-415a-baf1-2fd6a11638f7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.08.301.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_08_301_0",
  "content" : "23.08.301.0 Release Notes PDF Release date: February 23, 2024 This PSU release is based on Azul Platform Prime 23.08.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_401-b2 11 11.0.21.0.101+2-LTS 17 17.0.9.0.101+2-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-30014 Backport ZVM-29800 to a 23.08.300 build for aarch64 ZVM-29800 The 'libjvm.so' file is significantly larger in the aarch64 build compared to the x64 build"
}, {
  "objectID" : "f892ceb1-c8f9-4cb3-b3d4-c1117a29080c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-58",
  "content" : "Resolved Issues Issue ID Description ZVM-30014 Backport ZVM-29800 to a 23.08.300 build for aarch64 ZVM-29800 The 'libjvm.so' file is significantly larger in the aarch64 build compared to the x64 build"
}, {
  "objectID" : "4103cdaa-2544-49c4-84af-c9294f4c91ac",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.08.300.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_08_300_0",
  "content" : "23.08.300.0 Release Notes PDF Release date: January 16, 2024 This CPU release is based on Azul Platform Prime 23.08.201.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_401-b2 11 11.0.21.0.101+2-LTS 17 17.0.9.0.101+2-LTS What’s New January 2024 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "d4e255f9-5423-406c-ae83-a6ed36780f06",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-59",
  "content" : "What’s New January 2024 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2024"
}, {
  "objectID" : "18f545cd-1e0d-4df0-a3ba-8204b4049333",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.08.201.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_08_201_0",
  "content" : "23.08.201.0 Release Notes PDF Release date: January 10, 2024 This release is based on Azul Platform Prime 23.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b1 11 11.0.21+8-LTS 17 17.0.9+8-LTS What’s New Compilation ranking has been disabled in 23.08.x.x stable releases starting from 23.08.201 since, in some cases, the feature can cause some performance issues. You can turn on the feature manually, if needed, with:  -XX:TopTierHotCompileThresholdTriggerMillis=60000\n-XX:TopTierWarmCompileThresholdTriggerMillis=600000\n-XX:TopTierWarmCompileCpuPercent=25 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29440 VM fails to remove stale hsperfdata files after backport of JDK-8286030 ZVM-19215 Backport JDK-8215451: IsSameObject should not keep objects alive. ZVM-29388 aarch64 builds contain debug symbols - much larger than x64 ZVM-29314 [Java17+] Improve handling of constantPool entry in klass_at_if_loaded() ZVM-29280 Record final IR in our crash handler ZVM-29160 [Falcon] Incorrect exception handling in case of unloaded klass handler"
}, {
  "objectID" : "80ca271d-7952-444c-818f-3ba87e954c00",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-60",
  "content" : "What’s New Compilation ranking has been disabled in 23.08.x.x stable releases starting from 23.08.201 since, in some cases, the feature can cause some performance issues. You can turn on the feature manually, if needed, with:  -XX:TopTierHotCompileThresholdTriggerMillis=60000\n-XX:TopTierWarmCompileThresholdTriggerMillis=600000\n-XX:TopTierWarmCompileCpuPercent=25"
}, {
  "objectID" : "2d5b7e98-62fa-4c10-8984-31629443105b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-60",
  "content" : "Resolved Issues Issue ID Description ZVM-29440 VM fails to remove stale hsperfdata files after backport of JDK-8286030 ZVM-19215 Backport JDK-8215451: IsSameObject should not keep objects alive. ZVM-29388 aarch64 builds contain debug symbols - much larger than x64 ZVM-29314 [Java17+] Improve handling of constantPool entry in klass_at_if_loaded() ZVM-29280 Record final IR in our crash handler ZVM-29160 [Falcon] Incorrect exception handling in case of unloaded klass handler"
}, {
  "objectID" : "84d7416d-66d0-44f0-92d6-4567239e3c7f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.08.200.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_08_200_0",
  "content" : "23.08.200.0 Release Notes PDF Release date: November 20, 2023 This PSU release is based on Azul Platform Prime 23.08.101.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b1 11 11.0.21+8-LTS 17 17.0.9+8-LTS What’s New October 2023 PSU release security fixes. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "42f8f426-9b4a-40e4-92ed-9abdc37f8865",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-61",
  "content" : "What’s New October 2023 PSU release security fixes."
}, {
  "objectID" : "e319393f-32c1-403a-9622-1ac02f14cec7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.08.101.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_08_101_0",
  "content" : "23.08.101.0 Release Notes PDF Release date: November 2, 2023 This release is based on Azul Platform Prime 23.08.100.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b01 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New Internal bug fixes. The starting point of the time period specified by the option CompilerWarmupPeriodSeconds has been updated. Previously, this time period began at the execution of the Main method. But, since pre-Main can have unexpectedly long initializations, the ending point of this time period could become unpredictable. The starting point of this time period has been changed to JVM startup in order to include pre-Main, giving much better predictability of when this time period ends. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28960 Potential regression in compilation behaviors and times from 23.02.400 to 23.08.01 ZVM-29000 Fix missing files for SelfDiagnosticRunLevel=2 ZVM-28818 Fix check super class access ZVM-28801 Prime jre17 fails to load management agent ZVM-28288 Liveness probe failure during high load resulting in SIGTRAP sent to VM"
}, {
  "objectID" : "fea14211-ad8b-4baf-a7ea-ba310312b158",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-62",
  "content" : "What’s New Internal bug fixes. The starting point of the time period specified by the option CompilerWarmupPeriodSeconds has been updated. Previously, this time period began at the execution of the Main method. But, since pre-Main can have unexpectedly long initializations, the ending point of this time period could become unpredictable. The starting point of this time period has been changed to JVM startup in order to include pre-Main, giving much better predictability of when this time period ends."
}, {
  "objectID" : "718c0a9c-3997-4926-9546-aa113aaebfc8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-62",
  "content" : "Resolved Issues Issue ID Description ZVM-28960 Potential regression in compilation behaviors and times from 23.02.400 to 23.08.01 ZVM-29000 Fix missing files for SelfDiagnosticRunLevel=2 ZVM-28818 Fix check super class access ZVM-28801 Prime jre17 fails to load management agent ZVM-28288 Liveness probe failure during high load resulting in SIGTRAP sent to VM"
}, {
  "objectID" : "1fcf5141-7bcb-48f3-b8ed-d91fd917c1ab",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.08.100.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_08_100_0",
  "content" : "23.08.100.0 Release Notes PDF Release date: October 17, 2023 This CPU release is based on Azul Platform Prime 23.08.1.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b01 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New October 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22067 CORBA CORBA Yes 5.3 Network Low None None Unchanged None Low None 8 Note 1 CVE-2023-22081 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 21, 17, 11, 8 Note 2 CVE-2023-30589 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None High None None CVE-2023-22091 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Compiler Multiple Yes 4.8 Network High None None Unchanged Low Low None None CVE-2023-22025 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability can only be exploited by supplying data to APIs in the specified Component, e.g., through a web service. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 3 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for October 2023 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "85bb8497-940d-4cb5-b051-52525d6aaa0e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-63",
  "content" : "What’s New October 2023 CPU release security fixes."
}, {
  "objectID" : "718c6903-c8df-4e0c-9f84-94a9b8b7484d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.08.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_08_1_0",
  "content" : "23.08.1.0 Release Notes PDF Release date: September 26, 2023 This release is based on Azul Platform Prime 23.08.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28703 java.lang.UnsupportedOperationException Monitoring of Synchronizer Usage is not supported sun.management.ThreadImpl.findDeadlockedThreads(ThreadImpl.java:411) ZVM-28639 Debug files/libraries not being excluded from release artifacts ZVM-28588 weblogic crashed with \"assert0(false) failed: [false expected]\""
}, {
  "objectID" : "7e4d8b27-f1dc-4582-9416-c9868e44d446",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.600.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_600_0",
  "content" : "23.02.600.0 Release date: November 20, 2023 This PSU release is based on Azul Platform Prime 23.02.501.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_392-b1 11 11.0.21+8-LTS 17 17.0.9+8-LTS What’s New October 2023 PSU release security fixes. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "bab1a8ea-7ecc-4cb0-b2fc-dce2df782517",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.550.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_550_0",
  "content" : "23.02.550.0 Release Notes PDF Release date: March 5, 2024 This release is based on Azul Platform Prime 23.02.501.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b1 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New Internal bug fixes Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29694 Chronicle-Queue crashed due to \"Error: Safepoint sync time longer than 200000 ms detected when executing Deoptimize.\" ZVM-29858 Fuzzer test crash - V [libjvm.so+0x7df40e] java_lang_Class::set_module(oopDesc*, oopDesc*)+0xe"
}, {
  "objectID" : "094345db-f43c-475d-bbb4-d48a34cc1770",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-66",
  "content" : "What’s New Internal bug fixes"
}, {
  "objectID" : "fb0ba506-2b30-4343-b96e-1b601f84447f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-66",
  "content" : "Resolved Issues Issue ID Description ZVM-29694 Chronicle-Queue crashed due to \"Error: Safepoint sync time longer than 200000 ms detected when executing Deoptimize.\" ZVM-29858 Fuzzer test crash - V [libjvm.so+0x7df40e] java_lang_Class::set_module(oopDesc*, oopDesc*)+0xe"
}, {
  "objectID" : "19d3c54a-8715-4260-9fe1-505b0c82f08b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.501.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_501_0",
  "content" : "23.02.501.0 Release Notes PDF Release date: January 8, 2024 This release is based on Azul Platform Prime 23.02.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b01 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New A new diagnostic command line option has been introduced, -XX:FalconAbortCompileWithInstrPattern=<pattern>, which can be used to apply abortfalcon compile command only if assembly of the compiled method contains the specified pattern. The specified pattern uses regexp syntax. An improvement to the Time to Safepoint (TTSP) profiler has been made to include interpreter frame names and BCI during error reporting in the hs_err file. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-29440 VM fails to remove stale hsperfdata files after backport of JDK-8286030 ZVM-19215 Backport JDK-8215451: IsSameObject should not keep objects alive. ZVM-29384 Backport JDK-8153413: Exceptions::_throw always logs exceptions, penalizing performance ZVM-29314 [Java17+] Improve handling of constantPool entry in klass_at_if_loaded() ZVM-29280 Record final IR in our crash handler ZVM-29160 [Falcon] Incorrect exception handling in case of unloaded klass handler"
}, {
  "objectID" : "7cd75751-68d0-432f-b2b9-1509dbacf452",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-67",
  "content" : "What’s New A new diagnostic command line option has been introduced, -XX:FalconAbortCompileWithInstrPattern=<pattern>, which can be used to apply abortfalcon compile command only if assembly of the compiled method contains the specified pattern. The specified pattern uses regexp syntax. An improvement to the Time to Safepoint (TTSP) profiler has been made to include interpreter frame names and BCI during error reporting in the hs_err file."
}, {
  "objectID" : "c4d79eca-b88e-4aa0-b6fc-f481363efd48",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-67",
  "content" : "Resolved Issues Issue ID Description ZVM-29440 VM fails to remove stale hsperfdata files after backport of JDK-8286030 ZVM-19215 Backport JDK-8215451: IsSameObject should not keep objects alive. ZVM-29384 Backport JDK-8153413: Exceptions::_throw always logs exceptions, penalizing performance ZVM-29314 [Java17+] Improve handling of constantPool entry in klass_at_if_loaded() ZVM-29280 Record final IR in our crash handler ZVM-29160 [Falcon] Incorrect exception handling in case of unloaded klass handler"
}, {
  "objectID" : "1972d2a8-1417-4bb1-b380-196e7357e209",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.500.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_500_0",
  "content" : "23.02.500.0 Release Notes PDF Release date: October 17, 2023 This CPU release is based on Azul Platform Prime 23.02.400.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_391-b01 11 11.0.20.1.101+1-LTS 17 17.0.8.1.101+1-LTS What’s New October 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22067 CORBA CORBA Yes 5.3 Network Low None None Unchanged None Low None 8 Note 1 CVE-2023-22081 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 21, 17, 11, 8 Note 2 CVE-2023-30589 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None High None None CVE-2023-22091 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Compiler Multiple Yes 4.8 Network High None None Unchanged Low Low None None CVE-2023-22025 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability can only be exploited by supplying data to APIs in the specified Component, e.g., through a web service. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 3 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for October 2023 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "9630083d-6255-43a8-bafd-aa361d46f3fb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.401.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_401_0",
  "content" : "23.02.401.0 Release Notes PDF Release date: October 12, 2023 This release is based on Azul Platform Prime 23.02.302.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New The starting point of the time period specified by the option CompilerWarmupPeriodSeconds has been updated. Previously, this time period began at the execution of the Main method. But, since pre-Main can have unexpectedly long initializations, the ending point of this time period could become unpredictable. The starting point of this time period has been changed to JVM startup in order to include pre-Main, giving much better predictability of when this time period ends. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27506 Turn on JFRDistinguishJITTypes flag by default ZVM-28818 Fix check super class access ZVM-28801 Prime jre17 fails to load management agent ZVM-28588 weblogic crashed with \"assert0(false) failed: [false expected]\" ZVM-28144 Exhausting java heap during early VM initialization causes a hang ZVM-28534 Prevent Falcon optimization of exception-throwing in case PrintStacktraceOnException is specified"
}, {
  "objectID" : "90d66c72-d002-4499-a703-8e0a2f4c61fe",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-69",
  "content" : "What’s New The starting point of the time period specified by the option CompilerWarmupPeriodSeconds has been updated. Previously, this time period began at the execution of the Main method. But, since pre-Main can have unexpectedly long initializations, the ending point of this time period could become unpredictable. The starting point of this time period has been changed to JVM startup in order to include pre-Main, giving much better predictability of when this time period ends."
}, {
  "objectID" : "a922087d-17cb-4551-9644-e84123b7f80c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-69",
  "content" : "Resolved Issues Issue ID Description ZVM-27506 Turn on JFRDistinguishJITTypes flag by default ZVM-28818 Fix check super class access ZVM-28801 Prime jre17 fails to load management agent ZVM-28588 weblogic crashed with \"assert0(false) failed: [false expected]\" ZVM-28144 Exhausting java heap during early VM initialization causes a hang ZVM-28534 Prevent Falcon optimization of exception-throwing in case PrintStacktraceOnException is specified"
}, {
  "objectID" : "61a4f6b5-2bf3-408d-b1e2-ddc043c6bfc5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.400.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_400_0",
  "content" : "23.02.400.0 Release Notes PDF Release date: August 28, 2023 This PSU release is based on Azul Platform Prime 23.02.302.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_382-b2 11 11.0.20.1+1-LTS 17 17.0.8.1+1-LTS What’s New ZVision and ZVRobot have been separated from the Azul Platform Prime package due to a known vulnerability in jQuery 1.4.3, which is used in building the ZVision and ZVRobot utilities. At this time, Azul is not aware of any vulnerability in ZVision itself. For this reason, ZVision is still available for download for Azul Platform Prime subscribers at https://ftp.azul.com/releases/Zing/ZVision/ZVTools.zip It is no longer necessary to LD_PRELOAD the libnmt_hooks.so library in order to use extended Native Memory Tracking (NMT). The libnmt_hooks.so library is now linked by default. July 2023 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22041 Hotspot None No 5.1 Local High None None Unchanged High None None 17, 11 Note 1 CVE-2023-22036 Utility Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22049 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-25193 2D (Harfbuzz) Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22006 Networking Multiple Yes 3.1 Network High None Required Unchanged None Low None 17, 11 Note 1 CVE-2023-22043 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. JavaFX Multiple Yes 5.9 Network High None None Unchanged None High None None Note 1 CVE-2023-22044 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22045 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22051 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. GraalVM Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for July 2023 Azul Platform Prime 23.02.400.0 contains Zing Critical Fixes (ZCF). Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-28301 Fix java_lang_String::hash_code ZVM-28295 Avoid implicit type conversion when calling the Address constructor with Register parameter ZVM-28242 [AArch64] JFR profiler does not collect stack traces ZVM-27897 Hadoop fails with Prime when -XX:+UseAES is used ZVM-27796 SEGV due to module loading early during JVM init ZVM-25950 Backport JDK-7059899 Stack overflows in Java code cause 64-bit JVMs to exit due to SIGSEGV"
}, {
  "objectID" : "af9bc5bc-f775-4195-b627-457e013720f1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-70",
  "content" : "What’s New ZVision and ZVRobot have been separated from the Azul Platform Prime package due to a known vulnerability in jQuery 1.4.3, which is used in building the ZVision and ZVRobot utilities. At this time, Azul is not aware of any vulnerability in ZVision itself. For this reason, ZVision is still available for download for Azul Platform Prime subscribers at https://ftp.azul.com/releases/Zing/ZVision/ZVTools.zip It is no longer necessary to LD_PRELOAD the libnmt_hooks.so library in order to use extended Native Memory Tracking (NMT). The libnmt_hooks.so library is now linked by default. July 2023 CPU and PSU release security fixes."
}, {
  "objectID" : "1b630a8c-4ec3-4408-94ef-147b0e68157a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-14",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22041 Hotspot None No 5.1 Local High None None Unchanged High None None 17, 11 Note 1 CVE-2023-22036 Utility Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22049 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-25193 2D (Harfbuzz) Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22006 Networking Multiple Yes 3.1 Network High None Required Unchanged None Low None 17, 11 Note 1 CVE-2023-22043 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. JavaFX Multiple Yes 5.9 Network High None None Unchanged None High None None Note 1 CVE-2023-22044 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22045 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22051 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. GraalVM Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for July 2023 Azul Platform Prime 23.02.400.0 contains Zing Critical Fixes (ZCF)."
}, {
  "objectID" : "5014b8a0-8d79-480e-a3d5-9b651b008b83",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-70",
  "content" : "Resolved Issues Issue ID Description ZVM-28301 Fix java_lang_String::hash_code ZVM-28295 Avoid implicit type conversion when calling the Address constructor with Register parameter ZVM-28242 [AArch64] JFR profiler does not collect stack traces ZVM-27897 Hadoop fails with Prime when -XX:+UseAES is used ZVM-27796 SEGV due to module loading early during JVM init ZVM-25950 Backport JDK-7059899 Stack overflows in Java code cause 64-bit JVMs to exit due to SIGSEGV"
}, {
  "objectID" : "5e1b23ac-72b6-48ee-b1b9-e8f01d5f8ac5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.301.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_302_0",
  "content" : "23.02.301.0 Release Notes PDF Release date: July 25, 2023 This release is based on Azul Platform Prime 23.02.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_381-b2 11 11.0.19.0.101+2-LTS 17 17.0.7.0.101+2-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27958 JVM crashes when wrong -XX:CNCHost passed"
}, {
  "objectID" : "37559f78-df49-4a9a-9013-8280261ab6ef",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-71",
  "content" : "Resolved Issues Issue ID Description ZVM-27958 JVM crashes when wrong -XX:CNCHost passed"
}, {
  "objectID" : "cbae15f9-a8b6-4ed4-ad0b-a53b07b52dc6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.300.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_300_0",
  "content" : "23.02.300.0 Release Notes PDF Release date: July 18, 2023 This CPU release is based on Azul Platform Prime 23.02.202.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_381-b2 11 11.0.19.0.101+2-LTS 17 17.0.7.0.101+2-LTS What’s New July 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22041 Hotspot None No 5.1 Local High None None Unchanged High None None 17, 11 Note 1 CVE-2023-22036 Utility Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22049 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-25193 2D (Harfbuzz) Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22006 Networking Multiple Yes 3.1 Network High None Required Unchanged None Low None 17, 11 Note 1 CVE-2023-22043 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. JavaFX Multiple Yes 5.9 Network High None None Unchanged None High None None Note 1 CVE-2023-22044 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22045 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22051 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. GraalVM Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for July 2023 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release."
}, {
  "objectID" : "6566f037-e8bf-49d8-af5d-52565195d9d2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-73",
  "content" : "What’s New July 2023 CPU release security fixes."
}, {
  "objectID" : "a71260d0-f663-41ae-b8d7-8b1f84cf786b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.202.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_202_0",
  "content" : "23.02.202.0 Release Notes PDF Release date: July 3, 2023 This release is based on Azul Platform Prime 23.02.201.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b1 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27785 Fix segmentation fault on StubRoutines::stringIndexOf ZVM-27549 Avoid native method calls from VM.java class ZVM-27098 Incompatibility with Apache Flink with RocksDB"
}, {
  "objectID" : "94840320-2a70-46a8-b4d6-7a6b57f8be5c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-74",
  "content" : "Resolved Issues Issue ID Description ZVM-27785 Fix segmentation fault on StubRoutines::stringIndexOf ZVM-27549 Avoid native method calls from VM.java class ZVM-27098 Incompatibility with Apache Flink with RocksDB"
}, {
  "objectID" : "1a98029b-ad4b-41b5-ad3f-4c0414b7f059",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.200.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_200_0",
  "content" : "23.02.200.0 Release Notes PDF Release date: May 16, 2023 This PSU release is based on Azul Platform Prime 23.02.101.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_372-b1 11 11.0.19+7-LTS 17 17.0.7+7-LTS What’s New April 2023 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for April 2023 Some Falcon CPU Budgeting options have been renamed according to the following table: Changed from: Changed to: CompilerTier2BudgetingThreadsPercent CompilerTier2BudgetingCPUPercent CompilerTier2BudgetingWarmupThreadsPercent CompilerTier2BudgetingWarmupCPUPercent CompilerTier2BudgetMaxMs CompilerTier2BudgetWindowDurationMs For more information on Falcon CPU Budgeting options, see Command Line Options, CPU Budgeting Options The command line option UseTrueObjectsForUnsafe has been set to true by default. This option forces unsafe objects to be returned in their true object form instead of the equivalent java class object. For example, with UseTrueObjectsForUnsafe disabled, java.lang.Class can be returned instead of the true klassOop. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "109c701d-05dd-4e59-b716-fd8f93d626d4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-16",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for April 2023 Some Falcon CPU Budgeting options have been renamed according to the following table: Changed from: Changed to: CompilerTier2BudgetingThreadsPercent CompilerTier2BudgetingCPUPercent CompilerTier2BudgetingWarmupThreadsPercent CompilerTier2BudgetingWarmupCPUPercent CompilerTier2BudgetMaxMs CompilerTier2BudgetWindowDurationMs For more information on Falcon CPU Budgeting options, see Command Line Options, CPU Budgeting Options The command line option UseTrueObjectsForUnsafe has been set to true by default. This option forces unsafe objects to be returned in their true object form instead of the equivalent java class object. For example, with UseTrueObjectsForUnsafe disabled, java.lang.Class can be returned instead of the true klassOop."
}, {
  "objectID" : "385df750-c500-42dc-9a47-60651d43cc08",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.101.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_101_0",
  "content" : "23.02.101.0 Release Notes PDF Release date: May 3, 2023 This release is based on Azul Platform Prime 23.02.100.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_371-b1 11 11.0.18.0.101+3-LTS 17 17.0.6.0.101+2-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-27109 Method data not applied due to double set of the flag ZVM-26651 ExtraWarmupThreads setup crashes with guarantee(_num_cx_threads - 1 == tid) failed: Thread count is inconsistent"
}, {
  "objectID" : "b1ad8d61-8b47-4d2b-957f-289d02296985",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-77",
  "content" : "Resolved Issues Issue ID Description ZVM-27109 Method data not applied due to double set of the flag ZVM-26651 ExtraWarmupThreads setup crashes with guarantee(_num_cx_threads - 1 == tid) failed: Thread count is inconsistent"
}, {
  "objectID" : "be871fc4-79f7-4d02-84d6-1e60bb468f95",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.100.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_100_0",
  "content" : "23.02.100.0 Release Notes PDF Release date: April 18, 2023 This CPU release is based on Azul Platform Prime 23.02.2.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_371-b1 11 11.0.18.0.101+3-LTS 17 17.0.6.0.101+2-LTS What’s New JDK versions 13, 15 and 19 have reached end of life and are no longer included in Azul Platform Prime builds of OpenJDK. April 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for April 2023 Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "6cb428d0-a6a8-4c8a-872e-f9f9c207348c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-78",
  "content" : "What’s New JDK versions 13, 15 and 19 have reached end of life and are no longer included in Azul Platform Prime builds of OpenJDK. April 2023 CPU release security fixes."
}, {
  "objectID" : "86480ce3-7f06-49d6-a456-ff379cbe2880",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-17",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for April 2023"
}, {
  "objectID" : "14adb252-e9a8-4430-9880-d252503d75cc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.2.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_2_0",
  "content" : "23.02.2.0 Release Notes PDF Release date: April 10, 2023 This release is based on Azul Platform Prime 23.02.1.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS 19 19.0.2+7-MTS What’s New Azul Platform Prime 23.02.2.0 contains Zing Critical Fixes (ZCF). Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-26650 Fix corruption of entries in a lock-free list of thread stacks that may be seen with workloads/applications that have a high turnover of threads. ZVM-26781 Unsafe.getObject() use through Method.invoke() difference in behavior in Prime ZVM-26648 Missing tag update in HeapRefBufferList::grab()"
}, {
  "objectID" : "5266c5b9-767f-4538-a861-f2cd527c6463",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-79",
  "content" : "What’s New Azul Platform Prime 23.02.2.0 contains Zing Critical Fixes (ZCF)."
}, {
  "objectID" : "c1d8ab25-2bdf-45af-8340-fd9df4dc2144",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-79",
  "content" : "Resolved Issues Issue ID Description ZVM-26650 Fix corruption of entries in a lock-free list of thread stacks that may be seen with workloads/applications that have a high turnover of threads. ZVM-26781 Unsafe.getObject() use through Method.invoke() difference in behavior in Prime ZVM-26648 Missing tag update in HeapRefBufferList::grab()"
}, {
  "objectID" : "7bb278a1-6661-4bcc-a57c-2a7c0a82621e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "23.02.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_23_02_1_0",
  "content" : "23.02.1.0 Release Notes PDF Release date: March 27, 2023 This release is based on Azul Platform Prime 23.02.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS 19 19.0.2+7-MTS What’s New Stable release of Azul Platform Prime Builds of OpenJDK, versions 13, 15 and 19, are reaching end of life. Starting from 23.02.100.0, stable releases will only include JDK 8, 11 and 17. Starting from 23.04.0.0, stream releases will include only JDK 8, 11 and 17. The Command Line Option GPGCUseAllocationPacing has been disabled by default. The Command Line Option CNCForceLocalCompiler has been deprecated and replaced with the new option CNCEnableRemoteCompiler. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-26387 [Alpine] Failed to bundle core from alpine container ZVM-26245 jlink on Prime converts library symlinks to files and increase the total size by 87MB"
}, {
  "objectID" : "ae274dcd-9c30-46d0-9fd1-a1b34d7a2363",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-80",
  "content" : "What’s New Stable release of Azul Platform Prime Builds of OpenJDK, versions 13, 15 and 19, are reaching end of life. Starting from 23.02.100.0, stable releases will only include JDK 8, 11 and 17. Starting from 23.04.0.0, stream releases will include only JDK 8, 11 and 17. The Command Line Option GPGCUseAllocationPacing has been disabled by default. The Command Line Option CNCForceLocalCompiler has been deprecated and replaced with the new option CNCEnableRemoteCompiler."
}, {
  "objectID" : "ac2cf44e-f397-4a17-8752-47953bed2bbc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-80",
  "content" : "Resolved Issues Issue ID Description ZVM-26387 [Alpine] Failed to bundle core from alpine container ZVM-26245 jlink on Prime converts library symlinks to files and increase the total size by 87MB"
}, {
  "objectID" : "4aefa0f6-0bd2-460e-82ed-56c522a78ce1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.08.400.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_08_400_0",
  "content" : "22.08.400.0 Release Notes PDF Release date: February 21, 2023 This PSU release is based on Azul Platform Prime 22.08.301.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_362-b2 11 11.0.18+10-LTS 13 13.0.14+5-MTS 15 15.0.10+5-MTS 17 17.0.6+10-LTS Note Version 1 of the GC Log Analyzer has reached its end-of-life and has been replaced with Version 2 of the GC Log Analyzer. GC Log Analyzer 2 is included in Zing packages and can be found at <installdir>/etc/GCLogAnalyzer2.jar. The latest version of GC Log Analyzer 2 is also available for download at https://docs.azul.com/prime/GC-Log-Analyzer. What’s New January 2023 CPU and PSU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21830 Serialization Multiple Yes 5.3 Network Low None None Unchanged None Low None 8 CVE-2023-21835 JSSE DTLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 CVE-2023-21843 Sound Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 CVE-2022-43548 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 8.1 Network High None None Unchanged High High High None For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2023 Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25437 RedefinePreviousVersions.java failed with \"java.lang.RuntimeException: 'Class unloading: has_previous_versions = false' missing from stdout/stderr\""
}, {
  "objectID" : "9f48cfdf-6e3c-4a98-984c-540dda962764",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-81",
  "content" : "What’s New January 2023 CPU and PSU release security fixes."
}, {
  "objectID" : "f511c03d-3e56-4960-ba6a-ef9fa103f243",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-81",
  "content" : "Resolved Issues Issue ID Description ZVM-25437 RedefinePreviousVersions.java failed with \"java.lang.RuntimeException: 'Class unloading: has_previous_versions = false' missing from stdout/stderr\""
}, {
  "objectID" : "0b03c96c-9e2c-46b4-b2e6-1333cc406688",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.08.301.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_08_301_0",
  "content" : "22.08.301.0 Release Notes PDF Release date: February 2, 2023 This release is based on Azul Platform Prime 22.08.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_361-b1 11 11.0.17.0.101+3-LTS 13 13.0.13.0.101+2-MTS 15 15.0.9.0.101+2-MTS 17 17.0.5.0.101+4-LTS What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25974 CNC links OpenSSL 1.1.1c, creating conflict with 3rd party library"
}, {
  "objectID" : "8153cf33-3196-4c78-b5ea-f0d2b03a2070",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-82",
  "content" : "Resolved Issues Issue ID Description ZVM-25974 CNC links OpenSSL 1.1.1c, creating conflict with 3rd party library"
}, {
  "objectID" : "37c61585-644d-452c-9089-ae2f507e526b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.08.300.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_08_300_0",
  "content" : "22.08.300.0 Release Notes PDF Release date: January 17, 2023 This CPU release is based on Azul Platform Prime 22.08.201.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_361-b2 11 11.0.17.0.101+3-LTS 13 13.0.13.0.101+2-MTS 15 15.0.9.0.101+2-MTS 17 17.0.5.0.101+4-LTS What’s New January 2023 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21830 Serialization Multiple Yes 5.3 Network Low None None Unchanged None Low None 8 CVE-2023-21835 JSSE DTLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 CVE-2023-21843 Sound Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 CVE-2022-43548 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 8.1 Network High None None Unchanged High High High None For more information about CVE and non-CVE security fixes in this release, refer to Common Vulnerabilities and Exposures Fixes for January 2023 Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "61020bb0-b280-486b-b5b0-250fba27fb64",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-83",
  "content" : "What’s New January 2023 CPU release security fixes."
}, {
  "objectID" : "5c41f3a6-54f0-48df-bc8f-e33e993983f6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.08.201.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_08_201_0",
  "content" : "22.08.201.0 Release Notes PDF Release date: January 9, 2023 This release is based on Azul Platform Prime 22.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 1.8.0_352-b01 11 11.0.17+8 13 13.0.13+5 15 15.0.9+5 17 17.0.5+8 What’s New Internal bug fixes. Backport issue ZULU-39745 - Support custom security providers in Azul Zing builds of JDK17. The Java launcher can be updated to easily configure and enable custom security providers: Add a new java launcher option: --custom-providers=<custom_provider_name>(,<custom_provider_name>) Zing JDK will read custom provider configuration from the file located in the $JAVA_HOME/conf/<custom_provider_name>.properties Example of the configuration file:  # Add name custom provider jar\n--module-path=<custom_provider_jar>\n# The following properties are required to access JDK internal classes from the custom provider\n--add-exports=java.base/<package>=<custom_provider_module_name>\n--add-opens=java.base/<package>=<custom_provider_module_name>\n# The following option allows to access classes from non-modular 3rd party libraries\n--add-reads=<custom_provider_module_name>=ALL-UNNAMED\n# The following option reads custom security properties\n-Djava.security.properties=<security_property_file> Zing JDK will read <custom_provider_jar> and <security_property_file> from the $JAVA_HOME/conf/<custom_provider_name> directory. Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25602 Fix JTReg11 startup failure post October 2022 PSU update."
}, {
  "objectID" : "4b917aaa-b2ef-4bce-8646-c15bdd499209",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-84",
  "content" : "What’s New Internal bug fixes. Backport issue ZULU-39745 - Support custom security providers in Azul Zing builds of JDK17. The Java launcher can be updated to easily configure and enable custom security providers: Add a new java launcher option: --custom-providers=<custom_provider_name>(,<custom_provider_name>) Zing JDK will read custom provider configuration from the file located in the $JAVA_HOME/conf/<custom_provider_name>.properties Example of the configuration file:  # Add name custom provider jar\n--module-path=<custom_provider_jar>\n# The following properties are required to access JDK internal classes from the custom provider\n--add-exports=java.base/<package>=<custom_provider_module_name>\n--add-opens=java.base/<package>=<custom_provider_module_name>\n# The following option allows to access classes from non-modular 3rd party libraries\n--add-reads=<custom_provider_module_name>=ALL-UNNAMED\n# The following option reads custom security properties\n-Djava.security.properties=<security_property_file> Zing JDK will read <custom_provider_jar> and <security_property_file> from the $JAVA_HOME/conf/<custom_provider_name> directory."
}, {
  "objectID" : "6a2dd8df-4fd4-4861-a326-e1440aed3d12",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-84",
  "content" : "Resolved Issues Issue ID Description ZVM-25602 Fix JTReg11 startup failure post October 2022 PSU update."
}, {
  "objectID" : "0e2a98df-988c-4778-a8a2-c951a5675c31",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.08.200.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_08_200_0",
  "content" : "22.08.200.0 Release Notes PDF Release date: November 15, 2022 This release is based on Azul Platform Prime 22.08.101.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u352 11 11.0.17 13 13.0.13 15 15.0.9 17 17.0.5 What’s New Internal bug fixes. October 2022 PSU release security fixes Important information regarding Java in containers (Docker, Kubernetes, and related) about automatic thread pool size calculation and number of CPUs available to the application: While in the general October 2022 release of Java 11 and 17, the default calculation of available CPU cores has changed in container environments following JDK-8281181, this change wasn’t made in the Azul Platform Prime stable release 22.08.200.0 to allow seamless transition from previous stable versions. That means, Azul Platform Prime 22.08 differs in this aspect from current OpenJDK. In practical use, this difference will only affect those situations where a new migration from OpenJDK to Prime 22.08 is started. If you notice your application performance being affected during such a transition from OpenJDK to Prime 22.08 add -XX:-UseContainerCpuShares to the Java command line to switch Azul Platform Prime to the same new calculation method as OpenJDK. To check your environment in general about this change, independent of whether it is running on OpenJDK or Azul Platform Prime, run the following command inside your container to display the actual result of the available CPU number calculation: Save the following code to file AvailableCPUs.java:  public class AvailableCPUs {\n    public static void main(String[] args) {\n        System.out.println(\"CPUs: \"\n            + Runtime.getRuntime().availableProcessors());\n    }\n} Run it:  java -showversion AvailableCPUs.java Known Issues There are no new issues to report in this release. Resolved Issues Issue ID Description ZVM-25457 Backport issue JDK-8208172 which allows for NULL messages in class resolution errors."
}, {
  "objectID" : "994d8b07-32f4-4cae-9cfd-2890efb642d5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-85",
  "content" : "What’s New Internal bug fixes. October 2022 PSU release security fixes Important information regarding Java in containers (Docker, Kubernetes, and related) about automatic thread pool size calculation and number of CPUs available to the application: While in the general October 2022 release of Java 11 and 17, the default calculation of available CPU cores has changed in container environments following JDK-8281181, this change wasn’t made in the Azul Platform Prime stable release 22.08.200.0 to allow seamless transition from previous stable versions. That means, Azul Platform Prime 22.08 differs in this aspect from current OpenJDK. In practical use, this difference will only affect those situations where a new migration from OpenJDK to Prime 22.08 is started. If you notice your application performance being affected during such a transition from OpenJDK to Prime 22.08 add -XX:-UseContainerCpuShares to the Java command line to switch Azul Platform Prime to the same new calculation method as OpenJDK. To check your environment in general about this change, independent of whether it is running on OpenJDK or Azul Platform Prime, run the following command inside your container to display the actual result of the available CPU number calculation: Save the following code to file AvailableCPUs.java:  public class AvailableCPUs {\n    public static void main(String[] args) {\n        System.out.println(\"CPUs: \"\n            + Runtime.getRuntime().availableProcessors());\n    }\n} Run it:  java -showversion AvailableCPUs.java"
}, {
  "objectID" : "523da8ef-1c54-4678-a227-dbfbddc94eec",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-85",
  "content" : "Resolved Issues Issue ID Description ZVM-25457 Backport issue JDK-8208172 which allows for NULL messages in class resolution errors."
}, {
  "objectID" : "2464d2df-d94d-4793-8017-502938ace327",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.08.101.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_08_101_0",
  "content" : "22.08.101.0 Release Notes PDF Release date: October 27, 2022 This release is based on Azul Platform Prime 22.08.100.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u352b01 11 11.0.16.1.101+3 13 13.0.12.0.101+2 15 15.0.8.0.101+2 17 17.0.4.1.101+2 What’s New Internal bug fixes. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues associated with this release."
}, {
  "objectID" : "9644f7a9-d32f-4742-97c0-a8e517bd63aa",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.08.100.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_08_100_0",
  "content" : "22.08.100.0 Release Notes PDF Release date: October 18, 2022 This CPU release is based on Azul Platform Prime 22.08.1.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u351b01 11 11.0.16.1.101+3 13 13.0.12.0.101+2 15 15.0.8.0.101+2 17 17.0.4.1.101+2 What’s New October 2022 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21618 JGSS Kerberos Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 2 CVE-2022-21626 Security HTTPS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8 Note 2 CVE-2022-21628 Lightweight HTTP Server HTTP Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21619 Security Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-21624 JNDI Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-39399 Networking HTTP Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-32215 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 9.1 Network Low None None Unchanged High High None None CVE-2022-21634 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: LLVM Interpreter Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2022-21597 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: JavaScript HTTP Yes 5.3 Network Low None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "fd5b3424-9289-4544-a4f2-283b85b2e694",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-87",
  "content" : "What’s New October 2022 CPU release security fixes."
}, {
  "objectID" : "42bb11da-fad9-41c4-8aa0-b53144136a93",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-20",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21618 JGSS Kerberos Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 2 CVE-2022-21626 Security HTTPS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8 Note 2 CVE-2022-21628 Lightweight HTTP Server HTTP Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21619 Security Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-21624 JNDI Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-39399 Networking HTTP Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-32215 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 9.1 Network Low None None Unchanged High High None None CVE-2022-21634 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: LLVM Interpreter Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2022-21597 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: JavaScript HTTP Yes 5.3 Network Low None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs."
}, {
  "objectID" : "73d4b660-663e-44d2-9e12-229a3eb91f8d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.08.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_08_1_0",
  "content" : "22.08.1.0 Release Notes PDF Release date: September 30, 2022 This release is based on Azul Platform Prime 22.08.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New Internal bug fixes. Improved accuracy of RSS metric reported in GC log (C heap usage). With this improvement, the reported memory usage in GC log will give more accurate results. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "1dd8a89c-4278-49ce-9667-923d5293aec2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-88",
  "content" : "What’s New Internal bug fixes. Improved accuracy of RSS metric reported in GC log (C heap usage). With this improvement, the reported memory usage in GC log will give more accurate results."
}, {
  "objectID" : "19ac980e-c3cc-442e-b95a-522817753cd6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.501.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_501_0",
  "content" : "22.02.501.0 Release Notes PDF Release date: November 7, 2022 This release is based on Azul Platform Prime 22.02.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u351b01 11 11.0.16.1.101+3 13 13.0.12.0.101+2 17 15.0.8.0.101+2 17 17.0.4.1.101+2 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "69a70f15-8249-425c-add2-5913d47597fa",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.500.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_500_0",
  "content" : "22.02.500.0 Release Notes PDF Release date: October 18, 2022 This CPU release is based on Azul Platform Prime 22.02.401.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u351b01 11 11.0.16.1.101+3 13 13.0.12.0.101+2 17 15.0.8.0.101+2 17 17.0.4.1.101+2 What’s New October 2022 CPU release security fixes CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21618 JGSS Kerberos Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 2 CVE-2022-21626 Security HTTPS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8 Note 2 CVE-2022-21628 Lightweight HTTP Server HTTP Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21619 Security Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-21624 JNDI Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-39399 Networking HTTP Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-32215 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 9.1 Network Low None None Unchanged High High None None CVE-2022-21634 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: LLVM Interpreter Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2022-21597 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: JavaScript HTTP Yes 5.3 Network Low None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "a19dfa76-02fd-4933-a358-cf03be490cfe",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-90",
  "content" : "What’s New October 2022 CPU release security fixes"
}, {
  "objectID" : "92e409ac-6da9-4afa-a1b5-d675f6c889fb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.401.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_402_0",
  "content" : "22.02.401.0 Release Notes PDF Release date: September 30, 2022 This release is based on Azul Platform Prime 22.02.400.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "e9220257-cfbc-45f3-b4fa-3185394e56a9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.400.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_400_0",
  "content" : "22.02.400.0 Release Notes PDF Release date: August 17, 2022 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 8u345 11 11.0.16.1+1 13 13.0.12+4 15 15.0.8+4 17 17.0.4.1+1 What’s New July 2022 PSU release security fixes. Resolved Issues Issue ID Description ZVM-24486 Ported issue JDK-8290832 - It was no longer possible to change user.dir in JDK8 due to changes in the previous release of OpenJDK, causing compatibility issues. Those changes have been rolled back so that user.dir may be changed. ZVM-24429 Using Xlog:safepoint was causing long pauses under I/O contention. The fix reduces gc.log file size for the standard log setting -Xlog:gc:gc,safepoint:gc.log ZVM-23590 Fixed corruption of Falcon-compiled code in code cache. ZVM-24455 LockOpt::eliminateNestedLock could sometimes add an invalid/stale value to the deopt bundle which could potentially lead to crashes. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "b57dc257-e0a0-4010-b5fa-a54b7543e650",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-93",
  "content" : "What’s New July 2022 PSU release security fixes."
}, {
  "objectID" : "0e66433e-058e-4923-b0a4-5bd4ff66d6cc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-93",
  "content" : "Resolved Issues Issue ID Description ZVM-24486 Ported issue JDK-8290832 - It was no longer possible to change user.dir in JDK8 due to changes in the previous release of OpenJDK, causing compatibility issues. Those changes have been rolled back so that user.dir may be changed. ZVM-24429 Using Xlog:safepoint was causing long pauses under I/O contention. The fix reduces gc.log file size for the standard log setting -Xlog:gc:gc,safepoint:gc.log ZVM-23590 Fixed corruption of Falcon-compiled code in code cache. ZVM-24455 LockOpt::eliminateNestedLock could sometimes add an invalid/stale value to the deopt bundle which could potentially lead to crashes."
}, {
  "objectID" : "907e5381-c553-4a58-ba8d-9153bf3012f7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.300.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_300_0",
  "content" : "22.02.300.0 Release Notes PDF Release date: July 19, 2022 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 8 8u341 11 11.0.15.0.101+3 13 13.0.11.0.101+2 15 15.0.7.0.101+2 17 17.0.3.0.101+2 What’s New July 2022 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-34169 JAXP (Xalan-J) Multiple Yes 7.5 Network Low None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21541 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21540 Hotspot Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8 Note 1 CVE-2022-21549 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 17 Note 1 CVE-2022-25647 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image (Gson) None No 6.2 Local Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and relies on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Known Issues There are no new issues to report in this release. Resolved Issues There are no resolved issues to report in this release."
}, {
  "objectID" : "eb34afee-4c82-4e27-8bbb-831b142f2b40",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-94",
  "content" : "What’s New July 2022 CPU release security fixes."
}, {
  "objectID" : "e8f343b2-5750-4eb5-b39f-2cd9b18c5c8d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.202.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_202_0",
  "content" : "22.02.202.0 Release Notes PDF Release date: July 12, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15.+10 13 3.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. ZVM-24010 - Optimized layout of GC internal data structure, improving native memory consumption by the garbage collector(GC). ZVM-22820 - Put size limit on heap ref buffers during card mark scanning. Resolved Issues Issue ID Description ZVM-24118 Fixed crashes caused by constantPoolOopDesc::tag_at(int) ZVM-23983 async-profiler v2.7+ cpu profiling is now working with Prime. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "bc32fd2b-70f5-4cb6-a33e-b573413d1af0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-95",
  "content" : "What’s New Internal bug fixes. ZVM-24010 - Optimized layout of GC internal data structure, improving native memory consumption by the garbage collector(GC). ZVM-22820 - Put size limit on heap ref buffers during card mark scanning."
}, {
  "objectID" : "6e1d0433-b48c-4de5-aec6-76197863617c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-95",
  "content" : "Resolved Issues Issue ID Description ZVM-24118 Fixed crashes caused by constantPoolOopDesc::tag_at(int) ZVM-23983 async-profiler v2.7+ cpu profiling is now working with Prime."
}, {
  "objectID" : "01873cdc-f9d8-489f-bc72-cb97baf8c347",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.201.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_201_0",
  "content" : "22.02.201.0 Release Notes PDF Release date: June 13, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15.+10 13 3.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-23618 Missing date and timestamp on multiple GC log lines when PrintGCDateStamps is specified. ZVM-23575 High GC time percentage when thread CPU usage information is not correctly read from /proc. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "e2d31402-ffb0-4bc9-b927-006a1ac584b6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-96",
  "content" : "Resolved Issues Issue ID Description ZVM-23618 Missing date and timestamp on multiple GC log lines when PrintGCDateStamps is specified. ZVM-23575 High GC time percentage when thread CPU usage information is not correctly read from /proc."
}, {
  "objectID" : "8d523ec5-0eef-4058-bd3d-72007b4371f2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.200.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_200_0",
  "content" : "22.02.200.0 Release Notes PDF Release date: May 4, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 8 8u332 11 11.0.15.+10 13 3.0.11+4 15 15.0.7+4 17 17.0.3+7 What’s New Internal bug fixes. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "5111431b-6434-4689-a3ef-ff989c899366",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.100.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_100_0",
  "content" : "22.02.100.0 Release Notes PDF Release date: April 19, 2022 This CPU release is based on Azul Platform Prime 22.02.3.0 and corresponds the following OpenJDK versions: Major Version OpenJDK Version 7 7u341 8 8u331 11 11.0.14.1.101+3 13 13.0.10.0.101+2 15 15.0.6.0.101+2 17 17.0.2.0.101+2 What’s New April 2022 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2018-25032 ZIP Multiple Yes 7.5 Network Low None None Unchanged None None High 17, 15, 13, 11, 8, 7, 6 CVE-2022-21449 Libraries Multiple Yes 7.5 Network Low None None Unchanged None High None 18, 17, 15 Note 1 CVE-2022-21476 Libraries Multiple Yes 7.5 Network Low None None Unchanged High None None 18, 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21426 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21434 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21496 JNDI Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21443 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-0778 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "bf975e89-6e72-4d99-8717-3e8975580048",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-98",
  "content" : "What’s New April 2022 CPU release security fixes."
}, {
  "objectID" : "1874630a-911e-4ee3-b426-7ebf4e674cef",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.3.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_3_0",
  "content" : "22.02.3.0 Release Notes PDF Release date: April 12, 2022 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-10114 When -XX:ActiveProcessorCount=N is added to the command line, the number of compiler threads is now adjusted accordingly. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "7953945c-d8c5-44ed-a546-629529880c1b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-99",
  "content" : "Resolved Issues Issue ID Description ZVM-10114 When -XX:ActiveProcessorCount=N is added to the command line, the number of compiler threads is now adjusted accordingly."
}, {
  "objectID" : "1d8488e4-42df-4b52-888f-b83db5bed8de",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.2.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_2_0",
  "content" : "22.02.2.0 Release Notes PDF Release date: April 4, 2022 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-23089 Two additional openjdk 8 symlinks, /usr/lib/jvm/jre and /usr/alternatives/jre have been added to Azul Platform Prime Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "f0f01c6a-f86f-4285-9453-dfa5ee2766bc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-100",
  "content" : "Resolved Issues Issue ID Description ZVM-23089 Two additional openjdk 8 symlinks, /usr/lib/jvm/jre and /usr/alternatives/jre have been added to Azul Platform Prime"
}, {
  "objectID" : "528f301f-143d-4ee7-9a31-43fe4aeda960",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "22.02.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_22_02_1_0",
  "content" : "22.02.1.0 Release Notes PDF Release date: March 28, 2022 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+9 13 13.0.10+5 15 15.0.6+5 17 17.0.2+8 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-21804 In container systems with an elastic CPU definition (CPU min and max both set or cgroups cpu.shares and cpu.quota both defined) Runtime.availableProcessors() now returns the same value as on OpenJDK (the upper limit). Previously it returned the lower bound. That API method is often used to size application thread pools. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "eda2e7ee-7304-44ae-9d3e-afa7b7accd29",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.502.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_502_0",
  "content" : "21.08.502.0 Release Notes PDF Release date: July 4, 2022 This release is based on Azul Platform Prime 21.08.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u341 8 8u331 11 11.0.14.1.101+3 13 13.0.10.0.101+2 15 15.0.6.0.101+2 What’s New Internal bug fixes. ZVM-24010 - Optimized layout of GC internal data structure, improving native memory consumption by the garbage collector (GC). Resolved Issues Issue ID Description ZVM-21414 Made loop unrolling optimization more robust. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "5b3bdbe8-8b33-4fb8-8dcc-854737ef6552",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-102",
  "content" : "What’s New Internal bug fixes. ZVM-24010 - Optimized layout of GC internal data structure, improving native memory consumption by the garbage collector (GC)."
}, {
  "objectID" : "596f8cb4-3510-4668-9559-b2e3f9a04285",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-102",
  "content" : "Resolved Issues Issue ID Description ZVM-21414 Made loop unrolling optimization more robust."
}, {
  "objectID" : "9c8c1d52-9e22-4e25-affd-27427e641416",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.501.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_501_0",
  "content" : "21.08.501.0 Release Notes PDF Release date: July 4, 2022 This release is based on Azul Platform Prime 21.08.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u341 8 8u331 11 11.0.14.1.101+3 13 13.0.10.0.101+2 15 15.0.6.0.101+2 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-23590 Fix corruption of Falcon-compiled code in compressed::DebugMap::clean_inline_caches_concurrent (and its stw counterpart). Note This patch affects only Falcon-compiled code. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "6bb2ae1d-c9e4-497c-bfc2-89807d98cafc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-103",
  "content" : "Resolved Issues Issue ID Description ZVM-23590 Fix corruption of Falcon-compiled code in compressed::DebugMap::clean_inline_caches_concurrent (and its stw counterpart). Note This patch affects only Falcon-compiled code."
}, {
  "objectID" : "596afeaa-adcd-4419-b9fb-0a2c99400919",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.500.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_500_0",
  "content" : "21.08.500.0 Release Notes PDF Release date: April 19, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u341 8 8u331 11 11.0.14.1.101+3 13 13.0.10.0.101+2 15 15.0.6.0.101+2 What’s New Internal bug fixes. April 2022 CPU release security fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2018-25032 ZIP Multiple Yes 7.5 Network Low None None Unchanged None None High 17, 15, 13, 11, 8, 7, 6 CVE-2022-21449 Libraries Multiple Yes 7.5 Network Low None None Unchanged None High None 18, 17, 15 Note 1 CVE-2022-21476 Libraries Multiple Yes 7.5 Network Low None None Unchanged High None None 18, 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21426 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21434 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21496 JNDI Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21443 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-0778 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "f7dbd59f-d582-4702-971a-9e60a0255ca4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-104",
  "content" : "What’s New Internal bug fixes. April 2022 CPU release security fixes."
}, {
  "objectID" : "b4936f65-5016-4209-a18c-72f37e6c95af",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.402.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_402_0",
  "content" : "21.08.402.0 Release Notes PDF Release date: April 5, 2022 This release is based on Azul Platform Prime 21.08.400.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+1 13 13.0.10+5 15 15.0.6+5 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-23164 Constant pool indexes related to the EnclosingMethod class file attribute were not handled correctly at JVMTI redefinition operation. This could in rare cases result in a crash on an attempt to use certain java.lang.Class helpers such as 'getSimpleName' or 'getEnclosingMethod' against the redefined class due to the invalid access to the constant pool using stale indexes. ZVM-23089 Two additional openjdk 8 symlinks, /usr/lib/jvm/jre and /usr/alternatives/jre have been added to Azul Platform Prime. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "93b2613a-ac8b-463f-bab8-c5e9095cee57",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-105",
  "content" : "Resolved Issues Issue ID Description ZVM-23164 Constant pool indexes related to the EnclosingMethod class file attribute were not handled correctly at JVMTI redefinition operation. This could in rare cases result in a crash on an attempt to use certain java.lang.Class helpers such as 'getSimpleName' or 'getEnclosingMethod' against the redefined class due to the invalid access to the constant pool using stale indexes. ZVM-23089 Two additional openjdk 8 symlinks, /usr/lib/jvm/jre and /usr/alternatives/jre have been added to Azul Platform Prime."
}, {
  "objectID" : "574c64d2-7d34-42c7-95ab-3c9d09cf6475",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.401.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_401_0",
  "content" : "21.08.401.0 Release Notes PDF Release date: March 7, 2022 This release is based on Azul Platform Prime 21.08.400.0.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+1 13 13.0.10+5 15 15.0.6+5 What’s New Internal bug fixes. Resolved Issues Issue ID Description ZVM-22555 Crash in codegen exposed by -XX:-FalconSpeculateNoThrowCalls using compilation recorded by RN. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "9f104c6c-802c-4718-8f50-6d684d696748",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-106",
  "content" : "Resolved Issues Issue ID Description ZVM-22555 Crash in codegen exposed by -XX:-FalconSpeculateNoThrowCalls using compilation recorded by RN."
}, {
  "objectID" : "fc8ccf1c-ba77-4e52-b7e8-02c33ecf49be",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.400.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_400_0",
  "content" : "21.08.400.0 Release Notes PDF Release date: February 18, 2022 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u332 8 8u322 11 11.0.14.1+1 13 13.0.10+5 15 15.0.6+5 What’s New Remaining fixes from the January 2022 PSU release. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "95f88009-bd8d-485d-b0ec-4e93f24736c5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-107",
  "content" : "What’s New Remaining fixes from the January 2022 PSU release."
}, {
  "objectID" : "0fbd6654-609d-48e2-bfc2-900556a80fdc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.301.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_301_0",
  "content" : "21.08.301.0 Release Notes PDF Release date: January 18, 2022 This release is based on Azul Platform Prime 21.08.300.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u331 8 8u321 11 11.0.13.0.101+2 13 13.0.9.0.101+1 15 15.0.5.0.101+2 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "f7a4b1dd-f146-45aa-8426-a83fe19cb9a0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.300.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_300_0",
  "content" : "21.08.300.0 Release Notes PDF Release date: January 18, 2022 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u331 8 8u321 11 11.0.13.0.101+2 13 13.0.9.0.101+1 15 15.0.5.0.101+2 What’s New Common Vulnerabilities and Exposure (CVE) fixes for January 2022 OpenJDK. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21277 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 Note 1 CVE-2022-21282 JAXP Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21283 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21291 Hotspot Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-21293 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21294 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21296 JAXP Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21299 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21305 Hotspot Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21340 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21341 Serialization Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21349 2D Multiple Yes 5.3 Network Low None None Unchanged None None Low 8, 7 Note 1 CVE-2022-21360 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21365 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21366 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 Note 1 CVE-2022-21248 Serialization Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-22959 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTP Yes 6.5 Network Low None None Unchanged Low Low None None CVE-2022-21271 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low None Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments, typically in clients running sandboxed Java applications, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "ecc68551-9ab5-4451-bf5b-0a3d6ad2e1d6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-109",
  "content" : "What’s New Common Vulnerabilities and Exposure (CVE) fixes for January 2022 OpenJDK."
}, {
  "objectID" : "2ced3594-98d9-4429-a667-a2ccb69d1784",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-25",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21277 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 Note 1 CVE-2022-21282 JAXP Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21283 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21291 Hotspot Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-21293 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21294 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21296 JAXP Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21299 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21305 Hotspot Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21340 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21341 Serialization Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21349 2D Multiple Yes 5.3 Network Low None None Unchanged None None Low 8, 7 Note 1 CVE-2022-21360 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21365 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21366 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 Note 1 CVE-2022-21248 Serialization Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-22959 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTP Yes 6.5 Network Low None None Unchanged Low Low None None CVE-2022-21271 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low None Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments, typically in clients running sandboxed Java applications, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs."
}, {
  "objectID" : "1cc5d510-21f0-4dfc-9e9b-7e7b9ce36003",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.202.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_202_0",
  "content" : "21.08.202.0 Release Notes PDF Release date: January 4, 2022 This release is based on Azul Platform Prime 21.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13+8 13 13.0.9+3 15 15.0.5+3 What’s New General stability improvements. Resolved Issues Issue ID Description ZVM-21048 When -XX:+UseLargePages is used and the number of static huge pages reserved by nr_hugepages is insufficient for the total heap, Prime failed to start. Now it matches OpenJDK behavior and continues as expected. ZVM-22049 OldGC is not triggered often enough during idle time when NewGCs are occurring. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "97827305-ef96-4d1e-ac04-a20d3eba61ea",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-110",
  "content" : "What’s New General stability improvements."
}, {
  "objectID" : "e5b2cf24-996c-42e4-8622-c1362e84a0de",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-110",
  "content" : "Resolved Issues Issue ID Description ZVM-21048 When -XX:+UseLargePages is used and the number of static huge pages reserved by nr_hugepages is insufficient for the total heap, Prime failed to start. Now it matches OpenJDK behavior and continues as expected. ZVM-22049 OldGC is not triggered often enough during idle time when NewGCs are occurring."
}, {
  "objectID" : "f0e7dd17-c8ca-46bf-9019-3357b4928c74",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.201.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_201_0",
  "content" : "21.08.201.0 Release Notes PDF Release date: December 27, 2021 This release is based on Azul Platform Prime 21.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13+8 13 13.0.9+3 15 15.0.5+3 What’s New General stability improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "82d15569-e40f-442e-abbd-2b2d72cf7562",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.200.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_200_0",
  "content" : "21.08.200.0 Release Notes PDF Release date: November 15, 2021 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u322 8 8u312 11 11.0.13+8 13 13.0.9+3 15 15.0.5+3 What’s New October 2021 PSU fixes New JIT flag for setting the compiler thread count as a percentage of the core count. See Command Line Options for more about the CIMaxCompilerThreadsPercent flag. General stability improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "c9da4a48-7b0c-4ef5-a1d1-20db74a2d508",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-112",
  "content" : "What’s New October 2021 PSU fixes New JIT flag for setting the compiler thread count as a percentage of the core count. See Command Line Options for more about the CIMaxCompilerThreadsPercent flag. General stability improvements."
}, {
  "objectID" : "0a0eb693-e20c-4b95-b5b6-89446a496de0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.100.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_08_100_0",
  "content" : "21.08.100.0 Release Notes PDF Release date: October 19, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u321 8 8u311 11 11.0.12.0.101+2 13 13.0.8.0.101+1 15 15.0.4.101+1 What’s New October 2021 Critical Vulnerability and Exposures (CVE) fixes. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-3517 JavaFX (libxml) Multiple Yes 8.6 Network Low None None Unchanged Low Low High 17, 15, 13, 11, 8 Note 1 CVE-2021-35567 Libraries Kerberos No 6.8 Network Low Low Required Changed High None None 17, 15, 13, 11, 8 Note 2 CVE-2021-35550 JSSE TLS Yes 5.9 Network High None None Unchanged High None None 11, 8, 7, 6 Note 2 CVE-2021-3522 JavaFX (GStreamer) None No 5.5 Local Low None Required Unchanged None None High 17, 15, 13, 11, 8 Note 1 CVE-2021-35556 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-35559 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35561 Utility Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35564 Keytool Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35565 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 3 CVE-2021-35578 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8 Note 3 CVE-2021-35586 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35603 JSSE TLS Yes 3.7 Network High None None Unchanged Low None None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35588 Hotspot Multiple Yes 3.1 Network High None Required Unchanged None None Low 8, 7, 6 Note 2 CVE-2021-27290 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-35560 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Deployment Multiple Yes 7.5 Network High None Required Unchanged High High High None Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "a4eea177-2a6a-421b-8647-0a39b4d1aaa2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-113",
  "content" : "What’s New October 2021 Critical Vulnerability and Exposures (CVE) fixes."
}, {
  "objectID" : "9e67aad7-3acf-4703-8802-2e0869f245a6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-26",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-3517 JavaFX (libxml) Multiple Yes 8.6 Network Low None None Unchanged Low Low High 17, 15, 13, 11, 8 Note 1 CVE-2021-35567 Libraries Kerberos No 6.8 Network Low Low Required Changed High None None 17, 15, 13, 11, 8 Note 2 CVE-2021-35550 JSSE TLS Yes 5.9 Network High None None Unchanged High None None 11, 8, 7, 6 Note 2 CVE-2021-3522 JavaFX (GStreamer) None No 5.5 Local Low None Required Unchanged None None High 17, 15, 13, 11, 8 Note 1 CVE-2021-35556 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-35559 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35561 Utility Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35564 Keytool Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35565 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 3 CVE-2021-35578 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8 Note 3 CVE-2021-35586 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35603 JSSE TLS Yes 3.7 Network High None None Unchanged Low None None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35588 Hotspot Multiple Yes 3.1 Network High None Required Unchanged None None Low 8, 7, 6 Note 2 CVE-2021-27290 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-35560 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Deployment Multiple Yes 7.5 Network High None Required Unchanged High High High None Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service."
}, {
  "objectID" : "51f6d6d2-2199-451a-948d-f5398f2bc3d8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.08.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_08_1_0",
  "content" : "21.08.1.0 Release Notes PDF Release date: October 5, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New There are no new features. Resolved Issues Issue ID Description High CPU utilization exists in HeapCommit thread in some specific scenarios. High pause time during OldGC due to unloading of a long chain of subclasses. Abort the VM if GC safepoint operation time exceeds a configurable threshold. Installation packages are now signed. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "ebe40ec5-7ebe-45a5-aa66-b01a2cc635bd",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-114",
  "content" : "What’s New There are no new features."
}, {
  "objectID" : "48647ba5-bb53-4c89-bec3-bbcf736b5f3b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-114",
  "content" : "Resolved Issues Issue ID Description High CPU utilization exists in HeapCommit thread in some specific scenarios. High pause time during OldGC due to unloading of a long chain of subclasses. Abort the VM if GC safepoint operation time exceeds a configurable threshold. Installation packages are now signed."
}, {
  "objectID" : "a503e79b-8992-45f4-877e-66dee64e421f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.500.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_02_500_0",
  "content" : "21.02.500.0 Release Notes PDF Release date: October 19, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u321 8 8u311 11 11.0.12.0.101+2 13 13.0.8.0.101+1 15 15.0.4.101+1 What’s New October 2021 PSU fixes and stability improvements. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-3517 JavaFX (libxml) Multiple Yes 8.6 Network Low None None Unchanged Low Low High 17, 15, 13, 11, 8 Note 1 CVE-2021-35567 Libraries Kerberos No 6.8 Network Low Low Required Changed High None None 17, 15, 13, 11, 8 Note 2 CVE-2021-35550 JSSE TLS Yes 5.9 Network High None None Unchanged High None None 11, 8, 7, 6 Note 2 CVE-2021-3522 JavaFX (GStreamer) None No 5.5 Local Low None Required Unchanged None None High 17, 15, 13, 11, 8 Note 1 CVE-2021-35556 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-35559 Swing Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35561 Utility Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35564 Keytool Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35565 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 3 CVE-2021-35578 JSSE TLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8 Note 3 CVE-2021-35586 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35603 JSSE TLS Yes 3.7 Network High None None Unchanged Low None None 17, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-35588 Hotspot Multiple Yes 3.1 Network High None Required Unchanged None None Low 8, 7, 6 Note 2 CVE-2021-27290 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-35560 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Deployment Multiple Yes 7.5 Network High None Required Unchanged High High High None Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "a815c381-bb7f-47f9-ae65-b1eb371e488a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-115",
  "content" : "What’s New October 2021 PSU fixes and stability improvements."
}, {
  "objectID" : "119a343d-df0b-46f1-9026-6a42c1380767",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.401.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_02_401_0",
  "content" : "21.02.401.0 Release Notes PDF Release date: September 24, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New July 2021 PSU fixes and stability improvements. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "207a0dcb-c1fc-4905-8305-a36c7832475e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-116",
  "content" : "What’s New July 2021 PSU fixes and stability improvements."
}, {
  "objectID" : "1c762a7a-8161-4be8-a4a4-e5ee4950d6ed",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.400.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_02_400_0",
  "content" : "21.02.400.0 Release Notes PDF Release date: August 18, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u312 8 8u302 11 11.0.12+7 13 13.0.8+5 15 15.0.4+5 What’s New July 2021 PSU Release. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "a64672c2-5177-49a4-be3a-95fee5580978",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-117",
  "content" : "What’s New July 2021 PSU Release."
}, {
  "objectID" : "1dc867cb-db46-4513-8449-84ef0271f653",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.300.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_02_300_0",
  "content" : "21.02.300.0 Release Notes PDF Release date: July 20, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u311 8 8u301 11 11.0.11.0.101+2 13 13.0.7.0.101+1 15 15.0.3.0.101+1 What’s New July 2021 CPU Release. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "357ba24a-f68d-4cbd-835b-f3dce00df986",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-118",
  "content" : "What’s New July 2021 CPU Release."
}, {
  "objectID" : "be4d880a-7887-4161-a3c4-406c9ff64179",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.201.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_02_201_0",
  "content" : "21.02.201.0 Release Notes PDF Release date: July 5, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "20706525-b78c-4cf7-8d54-74e4f9837598",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.200.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_02_200_0",
  "content" : "21.02.200.0 Release Notes PDF Release date: May 21, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u302 8 8u292 11 11.0.11+9 13 13.0.7+5 15 15.0.3+3 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "b1dd9459-3280-4d6e-9689-8efff6bf1f25",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.100.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_21_02_100_0",
  "content" : "21.02.100.0 Release Notes PDF Release date: April 20, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u301 8 8u291 11 11.0.10.0.101+1 13 13.0.6.0.101+2 15 15.0.2.0.101+2 What’s New April 2021 CPU Release. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "1bcac4a8-d1a8-4dfc-9d1e-59eca9546725",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-121",
  "content" : "What’s New April 2021 CPU Release."
}, {
  "objectID" : "623d83cb-52f5-4b93-a4c1-2c227127af7b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.2.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_02_2_0",
  "content" : "21.02.2.0 Release Notes PDF Release date: April 9, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 15 15.0.2+7 What’s New Internal bug fixes. Resolved Issues There are no resolved issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "79e54253-0d0e-4f01-85c2-4959e176a6dd",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "21.02.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stream_21_02_1_0",
  "content" : "21.02.1.0 Release Notes PDF Release date: March 17, 2021 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 13 13.0.6+5 15 15.0.2+7 What’s New Improved compatibility between the MXBean memory pool names and names expected by in-memory data management systems (e.g., Pivotal GemFire 8.2). See GPGCReportJavaHeapPoolMXBean, GPGCHeapJavaPoolMXBeanName, GPGCNewGenPoolMXBeanName, GPGCOldGenPoolMXBeanName, GPGCPermGenPoolMXBeanName in Using Zing Command-Line Options for details. New Java Flight Recorder feature that allows to asynchronously subscribe to select JFR events and avoid overhead associated with creating a recording in Zing JDK 15. See JEP 349: JFR Event Streaming for details. Experimental ReadyNow mode that enables the pre-initialization of a greater number of bootstrap classes. Resolved Issues Issue ID Description ZVM-19089 Provide -XX:+OverrideVMProperties to enable setting the java.home system property by -modifiedJavaHome=<java-home>. ZVM-19058 Possible segmentation fault during materialization of a lazy object with a symbolic state. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "cffe4c2a-4018-4942-90e3-4c33a7d02043",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-123",
  "content" : "What’s New Improved compatibility between the MXBean memory pool names and names expected by in-memory data management systems (e.g., Pivotal GemFire 8.2). See GPGCReportJavaHeapPoolMXBean, GPGCHeapJavaPoolMXBeanName, GPGCNewGenPoolMXBeanName, GPGCOldGenPoolMXBeanName, GPGCPermGenPoolMXBeanName in Using Zing Command-Line Options for details. New Java Flight Recorder feature that allows to asynchronously subscribe to select JFR events and avoid overhead associated with creating a recording in Zing JDK 15. See JEP 349: JFR Event Streaming for details. Experimental ReadyNow mode that enables the pre-initialization of a greater number of bootstrap classes."
}, {
  "objectID" : "c56affd1-446e-4e88-a6e3-7992f91659fb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-123",
  "content" : "Resolved Issues Issue ID Description ZVM-19089 Provide -XX:+OverrideVMProperties to enable setting the java.home system property by -modifiedJavaHome=<java-home>. ZVM-19058 Possible segmentation fault during materialization of a lazy object with a symbolic state."
}, {
  "objectID" : "02d54e5d-9bc6-4938-bdd2-75b1e0325d98",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.501.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_501_0",
  "content" : "20.08.501.0 Release Notes PDF Release date: May 21, 2021 This release is based on Azul Platform Prime 20.08.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u301 8 8u291 11 11.0.10.0.101+1 What’s New Internal bug fixes and stability improvements. Resolved Issues Issue ID Description ZVM-19857 Setting the JVM options GenPauselessNewThreads or GenPauselessOldThreads via means other than the command-line induces a JVM crash at start-up. Environment flags such as _JAVA_OPTIONS and JAVA_TOOL_OPTIONS are examples of such affected alternatives. Can impact upgrades from 19.07 or prior releases to this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "93a566a8-977b-446b-868c-8ac7ac639c37",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-124",
  "content" : "Resolved Issues Issue ID Description ZVM-19857 Setting the JVM options GenPauselessNewThreads or GenPauselessOldThreads via means other than the command-line induces a JVM crash at start-up. Environment flags such as _JAVA_OPTIONS and JAVA_TOOL_OPTIONS are examples of such affected alternatives. Can impact upgrades from 19.07 or prior releases to this release."
}, {
  "objectID" : "a82a96fd-b86d-4179-b7c8-ec72e693b928",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.500.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_500_0",
  "content" : "20.08.500.0 Release Notes PDF Release date: April 20, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u301 8 8u291 11 11.0.10.0.101+1 What’s New April 2021 CPU update. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2021-2161 Libraries Multiple Yes 5.9 Network High None None Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-2163 Libraries Multiple Yes 5.3 Network High None Required Unchanged None High None 16, 15, 13, 11, 8, 7, 6 Note 2 CVE-2021-23841 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None CVE-2021-3450 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 7.4 Network High None None Unchanged High High None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. It can also be exploited by supplying untrusted data to APIs in the specified Component. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "a5a6cc88-84c4-4132-827b-676a5a161e8d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-125",
  "content" : "What’s New April 2021 CPU update."
}, {
  "objectID" : "ccf840af-6ac7-4720-bea4-00e17707ae09",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.400.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_400_0",
  "content" : "20.08.400.0 Release Notes PDF Release date: February 22, 2021 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u292 8 8u282 11 11.0.10+9 What’s New January 2021 PSU updates. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "0e85eb40-c80f-4ed9-b3f2-6727bcab89c5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-126",
  "content" : "What’s New January 2021 PSU updates."
}, {
  "objectID" : "49fdf669-1612-4a3f-b8f9-4dd5c4995f69",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.300.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_300_0",
  "content" : "20.08.300.0 Release Notes PDF Release date: January 19, 2021 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u291 8 8u281 11 11.0.9.1.101+5 What’s New January 2021 CPU security update. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14803 Libraries Multiple Yes 5.3 Network Low None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "31985c67-1909-4d76-8a2c-11f10bbc8ebc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-127",
  "content" : "What’s New January 2021 CPU security update."
}, {
  "objectID" : "0ac0095f-90f1-4980-95d1-0ef18e47f3a0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-29",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14803 Libraries Multiple Yes 5.3 Network Low None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security."
}, {
  "objectID" : "cc5715f4-535e-4e45-8058-2d4764312024",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.202.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_202_0",
  "content" : "20.08.202.0 Release Notes PDF Release date: January 8, 2021 This release is based on Azul Platform Prime 20.08.201.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u285 8 8u275 11 11.0.9.1+1 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "3caf80ca-27ba-438c-8352-6acc343c7f19",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.201.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_201_0",
  "content" : "20.08.201.0 Release Notes PDF Release date: December 20, 2020 This release is based on Azul Platform Prime 20.08.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u285 8 8u275 11 11.0.9.1+1 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "e887a7d4-4b5a-4bdb-a491-02cdf1e612d2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.200.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_200_0",
  "content" : "20.08.200.0 Release Notes PDF Release date: November 20, 2020 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u285 8 8u275 11 11.0.9.1+1 What’s New October 2020 PSU updates. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "3fa81111-3e01-4d4e-ae9d-b36f711aca6a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-130",
  "content" : "What’s New October 2020 PSU updates."
}, {
  "objectID" : "c732336f-f160-4bb5-8e12-b054d379d7bb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.101.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_101_0",
  "content" : "20.08.101.0 Release Notes PDF Release date: November 3, 2020 This release is based on Azul Platform Prime 20.08.100.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New Internal bug fixes and stability improvements. Resolved Issues Issue ID Description ZVM-17168 Checkpoint timeout crash while running async-profiler along with Zing. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "f5150cf9-fdd9-4075-9bb7-93632a6894ae",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-131",
  "content" : "Resolved Issues Issue ID Description ZVM-17168 Checkpoint timeout crash while running async-profiler along with Zing."
}, {
  "objectID" : "4d7c5099-5716-475d-8626-6c4d86cd7831",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.100.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_100_0",
  "content" : "20.08.100.0 Release Notes PDF Release date: October 20, 2020 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New October 2020 Critical Patch Update (CPU) security update. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14803 Libraries Multiple Yes 5.3 Network Low None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 1 CVE-2020-14792 Hotspot Multiple Yes 4.2 Network High None Required Unchanged Low Low None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14779 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14781 JNDI Multiple Yes 3.7 Network High None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14782 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14797 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14796 Libraries Multiple Yes 3.1 Network High None Required Unchanged Low None None 15, 13, 11, 8, 7 Note 1 CVE-2020-14798 Libraries Multiple Yes 3.1 Network High None Required Unchanged None Low None 15, 13, 11, 8, 7 Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "e1feadbf-ddae-4283-aeed-352e7113956b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-132",
  "content" : "What’s New October 2020 Critical Patch Update (CPU) security update."
}, {
  "objectID" : "2a218ebb-81ed-4d19-9bcf-56d8365f9003",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-30",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14803 Libraries Multiple Yes 5.3 Network Low None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 1 CVE-2020-14792 Hotspot Multiple Yes 4.2 Network High None Required Unchanged Low Low None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14779 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14781 JNDI Multiple Yes 3.7 Network High None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14782 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14797 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14796 Libraries Multiple Yes 3.1 Network High None Required Unchanged Low None None 15, 13, 11, 8, 7 Note 1 CVE-2020-14798 Libraries Multiple Yes 3.1 Network High None Required Unchanged None Low None 15, 13, 11, 8, 7 Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service."
}, {
  "objectID" : "0224270e-b92b-4fe0-a4e7-0148256f97e4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.2.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_2_0",
  "content" : "20.08.2.0 Release Notes PDF Release date: October 8, 2020 This release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 What’s New SHA1withDSAinP1363Format, NONEwithDSAinP1363Format, SHA224withDSAinP1363Format, and SHA256withDSAinP1363Format are removed from signature algorithms enabled by default in Zing 20.08.1.0. The algorithms are not supported in other JDK 8 virtual machines. Resolved Issues Issue ID Description ZVM-16971 Compiler crash with signature polymorphic invokedynamic calls. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "4628f243-09c0-443a-83fc-2b827db495e9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-133",
  "content" : "What’s New SHA1withDSAinP1363Format, NONEwithDSAinP1363Format, SHA224withDSAinP1363Format, and SHA256withDSAinP1363Format are removed from signature algorithms enabled by default in Zing 20.08.1.0. The algorithms are not supported in other JDK 8 virtual machines."
}, {
  "objectID" : "6f6466e5-1586-4363-bf61-a7abda28f0ba",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#resolved-issues-133",
  "content" : "Resolved Issues Issue ID Description ZVM-16971 Compiler crash with signature polymorphic invokedynamic calls."
}, {
  "objectID" : "e023dfca-433c-492c-8c87-5f644c1efdae",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.08.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_08_1_0",
  "content" : "20.08.1.0 Release Notes PDF Release date: September 14, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u262 11 11.0.8+10 What’s New Internal bug fixes. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "7425eae0-617b-4da3-b653-9846fa12663b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.501.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_501_0",
  "content" : "20.02.501.0 Release Notes PDF Release date: December 1, 2020 This release is based on Azul Platform Prime 20.02.500.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "12f5b3b3-aa1a-4a70-bd14-06eada4d6cb6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.500.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_500_0",
  "content" : "20.02.500.0 Release Notes PDF Release date: October 20, 2020 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u281 8 8u271 11 11.0.8.0.101+5 What’s New October 2020 Critical Patch Update (CPU). CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14803 Libraries Multiple Yes 5.3 Network Low None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 1 CVE-2020-14792 Hotspot Multiple Yes 4.2 Network High None Required Unchanged Low Low None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14779 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14781 JNDI Multiple Yes 3.7 Network High None None Unchanged Low None None 15, 13, 11, 8, 7, 6 Note 2 CVE-2020-14782 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14797 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 15, 13, 11, 8, 7 Note 2 CVE-2020-14796 Libraries Multiple Yes 3.1 Network High None Required Unchanged Low None None 15, 13, 11, 8, 7 Note 1 CVE-2020-14798 Libraries Multiple Yes 3.1 Network High None Required Unchanged None Low None 15, 13, 11, 8, 7 Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "f81ac6c3-bbb9-473d-b1c5-685fd98d99b4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-136",
  "content" : "What’s New October 2020 Critical Patch Update (CPU)."
}, {
  "objectID" : "91e6d7f0-a5fb-4858-9a04-71ed9023c2ad",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.402.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_402_0",
  "content" : "20.02.402.0 Release Notes PDF Release date: October 5, 2020 This release is based on Azul Platform Prime 20.02.401.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "9fc8b968-c8c6-4bb3-a420-b5ddc7c8866c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.401.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_401_0",
  "content" : "20.02.401.0 Release Notes PDF Release date: September 21, 2020 This release is based on Azul Platform Prime 20.02.400.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 What’s New Cryptographic Algorithms Removal SHA1withDSAinP1363Format, NONEwithDSAinP1363Format, SHA224withDSAinP1363Format, and SHA256withDSAinP1363Format are removed from signature algorithms enabled by default in ZVM 20.08.1.0. The algorithms are not supported in other JDK 8 virtual machines. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "6e3d9325-1ad2-4d51-8c73-a33cd1011cc9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-138",
  "content" : "What’s New Cryptographic Algorithms Removal SHA1withDSAinP1363Format, NONEwithDSAinP1363Format, SHA224withDSAinP1363Format, and SHA256withDSAinP1363Format are removed from signature algorithms enabled by default in ZVM 20.08.1.0. The algorithms are not supported in other JDK 8 virtual machines."
}, {
  "objectID" : "aeffc9e8-d8b8-46f1-af50-84daa0c9bb2b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.400.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_400_0",
  "content" : "20.02.400.0 Release Notes PDF Release date: August 14, 2020 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u272 8 8u265 11 11.0.8+10 What’s New July PSU 2020. Transport Layer Security Protocol Version 1.3 in Zing 8 Zing 8 supports TLS 1.3 by default and follows the application programming interface (API) changes introduced by Maintenance Release 3 to the Java SE 8 specification. See Using Version 1.3 of Transport Layer Security (TLS) Protocol for more information. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "6167ecc2-6dd6-4703-bf5a-ce97b9519c4f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-139",
  "content" : "What’s New July PSU 2020. Transport Layer Security Protocol Version 1.3 in Zing 8 Zing 8 supports TLS 1.3 by default and follows the application programming interface (API) changes introduced by Maintenance Release 3 to the Java SE 8 specification. See Using Version 1.3 of Transport Layer Security (TLS) Protocol for more information."
}, {
  "objectID" : "2b113dfd-76df-4a41-bda0-b7dd527f5102",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.300.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_300_0",
  "content" : "20.02.300.0 Release Notes PDF Release date: July 14, 2020 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u271 8 8u262 11 11.0.7.0.101+5 What’s New July 2020 CPU security updates. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14583 Libraries Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8, 7, 6 Note 1 CVE-2020-14664 JavaFX Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8 Note 1 CVE-2020-14593 2D Multiple Yes 7.4 Network Low None Required Changed None High None 14, 13, 11, 8, 7, 6 Note 1 CVE-2020-14562 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 14, 13, 11 Note 1 CVE-2020-14621 JAXP Multiple Yes 5.3 Network Low None None Unchanged None Low None 14, 13, 11, 8, 7, 6 Note 2 CVE-2020-14556 Libraries Multiple Yes 4.8 Network High None None Unchanged Low Low None 14, 13, 11, 8 Note 3 CVE-2020-14577 JSSE TLS Yes 3.7 Network High None None Unchanged Low None None 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-14578 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 8, 7, 6 Note 3 CVE-2020-14579 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 8, 7, 6 Note 3 CVE-2020-14581 2D Multiple Yes 3.7 Network High None None Unchanged Low None None 14, 13, 11 Note 3 CVE-2020-14573 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. 3 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "213aebb0-edd1-4911-9384-c8e8ad5fb82f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-140",
  "content" : "What’s New July 2020 CPU security updates."
}, {
  "objectID" : "a519e5bb-e908-4697-b211-d43b63b897c6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-32",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-14583 Libraries Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8, 7, 6 Note 1 CVE-2020-14664 JavaFX Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8 Note 1 CVE-2020-14593 2D Multiple Yes 7.4 Network Low None Required Changed None High None 14, 13, 11, 8, 7, 6 Note 1 CVE-2020-14562 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 14, 13, 11 Note 1 CVE-2020-14621 JAXP Multiple Yes 5.3 Network Low None None Unchanged None Low None 14, 13, 11, 8, 7, 6 Note 2 CVE-2020-14556 Libraries Multiple Yes 4.8 Network High None None Unchanged Low Low None 14, 13, 11, 8 Note 3 CVE-2020-14577 JSSE TLS Yes 3.7 Network High None None Unchanged Low None None 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-14578 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 8, 7, 6 Note 3 CVE-2020-14579 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 8, 7, 6 Note 3 CVE-2020-14581 2D Multiple Yes 3.7 Network High None None Unchanged Low None None 14, 13, 11 Note 3 CVE-2020-14573 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. 3 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service."
}, {
  "objectID" : "88c29fbf-6e5a-45e8-975b-bf9e55303df9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.201.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_201_0",
  "content" : "20.02.201.0 Release Notes PDF Release date: June 8, 2020 This release is based on Azul Platform Prime 20.02.200.0 and corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "85c94bbf-27e9-4e6f-8652-412b79fd871e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.200.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_200_0",
  "content" : "20.02.200.0 Release Notes PDF Release date: May 13, 2020 This PSU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u262 8 8u252 11 11.0.7+10 What’s New April PSU 2020. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "239df6e0-782c-482b-bc43-640d7eb08b19",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-142",
  "content" : "What’s New April PSU 2020."
}, {
  "objectID" : "06bfd030-a220-4f6e-adaa-f821ab385043",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.101.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_101_0",
  "content" : "20.02.101.0 Release Notes PDF Release date: April 28, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 7 7u261 8 8u251 11 11.0.6.0.101+11 What’s New Internal bug fixes and stability improvements. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "319717a6-47a3-44f5-95ae-2008ae08c1a2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.100.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_100_0",
  "content" : "20.02.100.0 Release Notes PDF Release date: April 14, 2020 This CPU release is based on the following OpenJDK versions: Major Version OpenJDK Version 7 7u261 8 8u251 11 11.0.6.0.101+11 What’s New April 2020 CPU security update. CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-2803 Libraries Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8, 7 Note 1 CVE-2020-2805 Libraries Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8, 7 Note 1 CVE-2019-18197 JavaFX(libxslt) Multiple Yes 8.1 Network High None None Unchanged High High High 13, 11, 8 Note 1 CVE-2020-2816 JSSE HTTPS Yes 7.5 Network Low None None Unchanged None High None 14, 13, 11, 8 Note 2 CVE-2020-2781 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2830 Concurrency Multiple Yes 5.3 Network Low None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2767 JSSE HTTPS Yes 4.8 Network High None None Unchanged Low Low None 14, 13, 11, 8 Note 3 CVE-2020-2800 Lightweight HTTP Server Multiple Yes 4.8 Network High None None Unchanged Low Low None 14, 13, 11, 8, 7, 6 Note 2 CVE-2020-2754 Scripting Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8 Note 3 CVE-2020-2755 Scripting Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8 Note 3 CVE-2020-2756 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2757 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2773 Security Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2778 JSSE HTTPS Yes 3.7 Network High None None Unchanged Low None None 14, 13, 11, 8 Note 3 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. 3 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "0e9cdaa3-6d3d-4762-a56f-5b4f13d7d105",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-144",
  "content" : "What’s New April 2020 CPU security update."
}, {
  "objectID" : "541bd8fb-538c-4548-bc56-4145eddf4265",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "CVE fixes",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#cve-fixes-33",
  "content" : "CVE fixes CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2020-2803 Libraries Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8, 7 Note 1 CVE-2020-2805 Libraries Multiple Yes 8.3 Network High None Required Changed High High High 14, 13, 11, 8, 7 Note 1 CVE-2019-18197 JavaFX(libxslt) Multiple Yes 8.1 Network High None None Unchanged High High High 13, 11, 8 Note 1 CVE-2020-2816 JSSE HTTPS Yes 7.5 Network Low None None Unchanged None High None 14, 13, 11, 8 Note 2 CVE-2020-2781 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2830 Concurrency Multiple Yes 5.3 Network Low None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2767 JSSE HTTPS Yes 4.8 Network High None None Unchanged Low Low None 14, 13, 11, 8 Note 3 CVE-2020-2800 Lightweight HTTP Server Multiple Yes 4.8 Network High None None Unchanged Low Low None 14, 13, 11, 8, 7, 6 Note 2 CVE-2020-2754 Scripting Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8 Note 3 CVE-2020-2755 Scripting Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8 Note 3 CVE-2020-2756 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2757 Serialization Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2773 Security Multiple Yes 3.7 Network High None None Unchanged None None Low 14, 13, 11, 8, 7, 6 Note 3 CVE-2020-2778 JSSE HTTPS Yes 3.7 Network High None None Unchanged Low None None 14, 13, 11, 8 Note 3 Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service. 3 This vulnerability applies to client and server deployment of Java. This vulnerability can be exploited through untrusted code executed under Java sandbox restrictions. It can also be exploited by supplying data to APIs in the specified Component without using untrusted code executed under Java sandbox restrictions, such as through a web service."
}, {
  "objectID" : "3fc69396-e1e4-4f5a-958f-b9ab284e7db3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "20.02.1.0",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#prime_stable_20_02_1_0",
  "content" : "20.02.1.0 Release Notes PDF Release date: April 8, 2020 This release corresponds to the following OpenJDK versions: Major Version OpenJDK Version 8 11 13 15 17 What’s New Internal bug fixes and stability improvements Resolved Issues There are no resolved issues to report in this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "9685ec52-b0a4-4d35-b050-79d4ae48278b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Release Notes of Azul Zing Stream and Stable Builds of OpenJDK",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/prime/release-notes",
  "link" : "https://docs.azul.com/prime/release-notes#whats-new-145",
  "content" : "What’s New Internal bug fixes and stability improvements"
}, {
  "objectID" : "1251c7aa-7104-44d4-b68e-2ae9cd663553",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Features Added in Older Releases of Azul Platform Prime Builds of OpenJDK",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes-features-added-in-older-versions",
  "link" : "https://docs.azul.com/prime/release-notes-features-added-in-older-versions",
  "content" : "Note This page lists new features in each release of Azul Zing Builds of OpenJDK (Zing) prior to 20.02.1.0. Zing 19.12.102.0 Zing 19.12.102.0 contains -XX:+FalconCompensateForIntelMCUForErratumSKX102 which is an off-by-default option and introduces a nop padding based mitigation for performance regressions seen on some systems following Intel’s microcode updates in response to errata SKX102. This option is expected to become the default in a future Zing release. If enabled, nop padding will be used to align affected branches on systems with the microcode update applied. For testing purposes, the flag -XX:+ForceFalconCompensateForIntelMCUForErratumSKX102 is also provided. This can be used to force the generation of nop padded code on unaffected systems for performance validation. Zing 19.12.101.0 Zing 19.12.101.0 is a critical patch update (CPU) release that contains security and critical bug fixes only. Zing 19.12.101.0 is based on Zing 19.12.100.0 and Zing 19.12.0.0 and brings the associated JDK 7, JDK 8, and JDK 11 versions to January 2020 CPU security update levels. Zing 19.12.0.0 Zing 19.12.0.0 introduces additional non-security changes associated with the PSU 2019 OpenJDK 8u232 and OpenJDK 11.0.5 release contents. The release of Zing 19.12.0.0 provides further improved throughput and latency characteristics with heaps less than or equal to 1 GB. The release of Zing 19.12.0.0 provides enhanced escape analysis and a few other improvements in the Falcon JIT compiler, which may decrease the allocation rate and deliver higher performance on some workloads. The release of Zing 19.12.0.0 enhances the improvements of ReadyNow and Compile Stashing started in Zing 19.10.0.0, which now dramatically reduces CPU consumption for JIT compilation on many workloads.. Starting with Zing 19.12.0.0, Compile Stashing is not enabled by default with the -XX:ProfileLogOut command-line option. Compile Stashing is still enabled by default only in combination with the -XX:ProfileLogIn command-line option. Zing 19.09.0.0 Zing 19.09.0.0 introduces an option to write live memory objects into Zing flight recordings for troubleshooting memory leaks. Use the JFRDescribeLiveSetPercentage command-line option to tune the percentage amount of a live set to be described. Due to providing better input from ReadyNow to Falcon and enabling Falcon to do better optimizations, Zing 19.09.0.0 closes or significantly shortens a gap between ReadyNow and default Zing final throughputs in rare cases when the gap is observed. Note that in some cases doing better optimizations may lead to an increase in CPU consumption or startup time. In such cases, the new FalconOptimizationLevel command-line option can be used to lower the aggressiveness of optimizations. See Falcon Compiler Options for details. Starting with Zing 19.08.0.0, Zing supports a heap size of 512 MB. The release of Zing 19.09.0.0 adds improved Zing performance for heaps of less than 2 GB. Zing 19.09.0.0 significantly reduces CPU usage due to a new compilation policy and improvements in the Falcon compiler. Zing 19.09.0.0 features updated Zing MXBeans javadoc. In Zing 19.09.0.0 the default values for CodeCacheMinimumFreeSpace, CodeCacheOopTableSize and ReservedCodeCacheSize command-line options are changed to allow more space for objects in the Java heap with small heaps. Zing 19.09.0.0 introduces new Thread Local Allocation Buffer (TLAB) command-line options to resize TLABs and manage allocation of objects in TLABs. In Zing 19.09.0.0, the default value of the AlignArrayStart command-line option is changed to true. In Zing 19.09.0.0, the default value of the HserrRawCodeWindowSize command-line option is changed to 512. Zing 19.09.0.0 introduces a new MaxRAMPercentage command-line option for adjusting the maximum heap size based on the configured cgroup memory limit. Zing 19.08.0.0 Zing 19.08.0.0 incorporates additional non-security changes associated with the PSU 2019 OpenJDK 8u222 and OpenJDK 11.0.4 release contents. Zing 19.08.0.0 introduces the OpenJSSE TLS 1.3 JSSE provider which can be used to enable TLS 1.3 support with no application or code changes. Use the -XX:+UseOpenJSSE command-line option to enable TLS 1.3 support. A new PrintGCHSLines command-line option for controling additional system information lines. Zing 19.07.0.0 Zing 19.07.0.0 brings the associated JDK 7, JDK 8, and JDK 11 versions to July 2019 CPU security update levels. Starting with Zing 19.07.0.0 the Zing Virtual Machine installs without the Zing System Tools component dependencies by default. Zing 19.07.0.0 introduces a new FalconOptimizationLevel command-line option for controling the level of compiling optimization. Enhancements for the ReadyNow performance tuning tool. Zing 19.05.100.0 Zing 19.05.100.0 brings the associated JDK 7, JDK 8, and JDK 11 versions to July 2019 CPU security update levels. Zing 19.05.0.0 Zing 19.05.0.0 incorporates additional non-security changes associated with the April 2019 OpenJDK 8u212 and OpenJDK 11.0.3 release contents. Zing JDK 8 supports JEP 328. The Java Flight Recorder feature records information about Zing VM and its environment while it is running. Zing 19.03.0.0 The GPGCPausePreventionMemory command-line option is introduced to restrict pause prevention memory. The ProfilePreMainTier2CompilerThreads, and ProfileWorkerThreads command-line options are added. The default value of ProfileStartupLimitInSeconds, is changed to 60. The default value of the FalconUseAVX command-line option is changed to 2. The default value of the ProfileStartupLimitInSeconds command-line option is changed to 60. The default value of the ResetSignalMaskAtLaunch command-line option is changed to true. The default value of the RunVMErrorOnUnhandledSignals command-line option is changed to true. Zing 19.02.0.0 Zing 19.02.0.0 applies fixes reflecting January 2019 OpenJDK 7u211, OpenJDK 8u201, OpenJDK 8u202, and OpenJDK 11.0.2 changes. A new gcLogScraper script is introduced for easy parsing of GC log files. The speed of the existing Datagram Channel is dramatically improved. The -XX:[+/-] UseStringDeduplication command-line option is now back to being product and is ignored by the VM. Zing 19.01.0.0 The MaxDirectMemorySize command-line option changed its type to unsigned and no longer accepts negative values. Its default value is changed from -1 to 0 while preserving the corresponding default behavior. Zing 18.07.0.0 Fixes reflecting July 2018 OpenJDK 8u181 and 7u191 critical patch updates provided. Zing 18.04.0.0 Fixes reflecting April 2018 OpenJDK 8u172 and 7u181 changes provided. Zing 18.02.0.0 Compiler Statistics Reporting Updates: Adding total wait-in-queue time to compiler statistic reporting and GC log records. Changing TotalAcutalTimeMS to TotalCPUTimeMS in GC log records and compiler statistics. Performance and stability improvements. Zing 18.01.0.0 Unlimited Cryptographic Policy is Enabled by Default. Providing Azul OEM Master License Key. Enhancements for gcLogAnalyser. Compiler Enhancements including Using Compile Stashing. Deprecation of Support for RHEL 5 Zing 17.12.0.0 Enhance control of precompilation to allow control of each tier’s precompliation separately. Add support for uncounted loop safepoint removal. Add a command-line option that changes the threshold at which the OSR compiles are triggered. Enhance the gcLogAnalyser tool’s graph PNG file generator to automatically add html pages to: Easily navigate the graphs in a set of PNG files using a web browser Compare any two graphs in one view using a web browser Zing 17.11.0.0 Include JCE Jurisdiction Policy files. Set limit on array length. CodeCache flushing improvements. New Falcon inlining command-line option. ReadyNow enhancements. Zing 17.10.0.0 Increase maximum heap size (-Xmx) supported by Zing from 2 TB to 8 TB. Zing 17.06.0.0 The ZST 5.20 that is included in the Zing Trial Program has two new behaviors. First, system-config-zing-memory is run automatically after the installation of the ZST to configure the System Zing Memory. Second, the default policy for reservation of memory used by the Zing has been changed from reserve-at-config (reserved when system-config-zing-memory is run) to reserve-at-launch (reserved when the Zing process is launched). Support for Stop-The-World (STW) garbage collection in the Zing. Multiple changes and improvements in the GC Log Analyser tool. Enable CodeCache Flushing and support for ParallelClassLoaders. Zing 17.03.0.0 Falcon compiler becomes the default Tier 2 compiler for Zing (for Java SE 7 and 8) replacing C2. Multiple changes and improvements in the Zing monitoring tools. Many improvements of the ReadyNow performance tuning tool. Zing 16.12.0.0 General Availability of the Falcon Compiler. Adding the UseFastJNIAccessors option to the list of the unchangeable options. Adding the ability to process files that have GC log lines without any timestamp preceding the log line label. Zing 16.10.0.0 Increased number of supported operating systems and kernels. Compiler Enhancements. Performance and Stability Improvements Zing 16.07.0.0 Intel TSX support Additions to the Garbage Collector output information Enhancements in the gcLogAnalyser tool Large number of supported operating systems and kernels Performance Improvements. Zing 16.01.0.0 Extended Java Heap Size up to 2 TB per JVM instance The Native Memory Tracking functionality includes invocation of Memory-tracking functions to record allocations. New graphs are available in the gcLogAnalyser tool. Bug fixes."
}, {
  "objectID" : "00346782-b66c-4f0e-84b1-be26111027d3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Resolved Issues in Older Releases of Azul Zing Builds of OpenJDK",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes-older-resolved-issues",
  "link" : "https://docs.azul.com/prime/release-notes-older-resolved-issues",
  "content" : "Note This page lists the issues resolved in releases prior to Azul Zing Builds of OpenJDK (Zing) 20.02.1.0. Issue ID Release Resolved Description ZVM-7678 19.12.102 Backport of JDK-8162795 to fix JNI weak handle native memory leak which can occur in some use cases since ZVM 19.02.102.0. ZVM-13744 19.12.0.0 Crash during application start with -XX:+UseC2 on AMD avx2 since ZVM 19.09.0.0 ZVM-13736 19.12.0.0 Zing might crash at startup with Java Flight Recorder on systems with specific network interface configurations. ZVM-13579 19.12.0.0 An issue with -XX:+PreserveFramePointer in _counterMode_AESCrypt intrinsic. ZVM-12803 19.12.0.0 Test failure due to code cache exhaustion on configurations with heaps of 4 GB and below are more likely to happen on ZVM 19.10.0.0 as the default CodeCache size progressively shrinks for such configurations. ZVM-13596 19.10.1.0 Utilization of the ProfileLogOut flag with a hard disk that has I/O issues causes TTSP problems in ZVM 19.10.0.0. ZVM-12392 19.08.1.0 ZVM crash when running Zing with OrgLock license. ZVMTOOL-226 19.08.0.0 Better detection when attempting to open non-Zing GC logs. 19180 19.07.0.0 Internal Error (src/share/vm/runtime/sharedRuntime.cpp:764) guarantee(markWord::is_self_locked(h()→mark())) failed: should be self-locked. 18837 19.05.0.0 Zing 19.04.0.0 gives error for Cloudera Enterprise 5.14.4 (Hadoop 2.6.0-cdh5.14.4). 18651 19.05.0.0 ZVM launches fail with the following error message if the license file is in the MS-DOS encoding format: Zing VM Error: Zing License Verification failed. 17462 19.02.1.0 MaxJavaStackTraceDepth of -1 is handled incorrectly by the JVM. 17128 19.02.1.0 Accumulation of thread local allocation in LLVMContext for long lived compiler thread. 17041 19.02.1.0 Fix memory leaks associated with thread deaths. 17147 19.02.0.0 -XX:[+/-]UseStringDeduplication command-line option is ignored by the JVM. 16759 19.01.0.0 Crash in native code outside the JVM due to calling ComputeLinearScanOrder::mark_loops()+0x196. 15702 18.09.1.0 JVM crash with signature guarantee(!OopHelper::is_old(obj)) seen at low frequency under heavy allocation pressure. 14927 18.09.0.0 JVM fails to crash with guarantee (!function_not_ok) due to persistent duplicate class ids (KIDs). 14952 18.06.1.0 18.07.1.0 Memory leak in modified ThreadLocal implementation. 14887 18.06.1.0 18.07.1.0 Limit iterations in NMT mutator flush loops. 14886 18.07.0.0 -XX:+PreserveFramePointer crashes on 18.06.0.0. 14704 18.07.0.0 Support switching AT&T/intel syntax by PrintAssemblyOptions. 14558 18.07.0.0 Take CFS quota/period into account when determining available CPU count. 14195 18.07.0.0 Crash due to incorrectly formed implicit null check. 14182 18.07.0.0 Implement the set_native_thread_name method in Zing. 12042 18.07.0.0 Print error message on java -version when no valid license was found. 4323 18.07.0.0 -XX:+PreserveFramePointer now supports C1 frames in addition to the previously supported Falcon and interpreter frames. 14186 18.06.0.0 JVM fails to crash with guarantee (!function_not_ok). 14078 18.06.0.0 Occasional failures to replace compiled code by more optimized compiled code in the OSR part of the tiered JIT compiler (C2 and Falcon). 13812 18.06.0.0 Improved null pointer handling of java.lang.reflect.Method.invoke() in Falcon to match C2. 12028 18.06.0.0 MemoryMXBean.getHeapMemoryUsage().getCommitted() returns the heap size that is equal to MemoryMXBean.getHeapMemoryUsage().getUsed(). 8884 18.06.0.0 Enhanced support for using the perf tool to create flamegraphs and similar performance analysis tools: stackwalking of Java code running in the Interpreter mode and therefore fewer [unknown] markings are now possible. 14245 18.05.0.0 bool AutoTuneResourceDefaultsBasedOnXmx ZVM command-line option added. false by default but set to true when running java -version under ZVM. 13641 18.05.0.0 Reduced memory footprint amount taken from a ZST partition by java -version and j-tools run under the ZVM. 13426 18.04.1.0 Increased time variation when using Bouncy Castle library to decode data stored in a database on multi-socket systems. 13765 18.04.0.0 Incorrect comparison of two null values of different types in some cases. 12904 18.04.0.0 Printing header when PrintCodeCacheFlushing is set to true is not consistent with printing of other GC log file headers. 13944 18.03.2.0 ReadyNow incorrectly limits counters to 16-bits instead of 32-bits. 13943 18.03.2.0 After object cache hit, Falcon does not provide inlining information to ReadyNow. 13933 18.03.1.0 JVM crash when Compile Stashing runs out of local storage space. 13070 18.03.1.0 AsyncGetCallTrace call: crash in GPGC_Layout::addr_to_BasePageForSpace(). 13360 18.03.0.0 Legacy stack walking compilation policy removed. A warning displays if a value of 1 is specified for CompilationPolicyChoice. 13312 18.03.0.0 Added auto-identification of ExtClassLoader. 12815 18.02.0.0 ZVM crashes due to a series of errors in InductiveRangeCheckElimination.cpp. 13102 18.02.0.0 MapR default library loading incompatible with ReadyNow. The fix ensures that MapR 4+ works with ReadyNow with default settings. 13154 18.02.0.0 ZVM crashes with no hs_err and zero size core file when run in combination with AZ_CHEAP_MEMORY_SANITIZER=1. 10414 18.01.0.0 In the product version of the ZVM, restrict the set of command-line options shown in ZVision’s HotSpot Flags window to the available set of -XX options. Previously, non-product options were also shown. 12521 18.01.0.0 Backport of JDK-8063086: Math.pow yields different results upon repeated calls. 12629 18.01.0.0 The application threads waits to be notified by the collector until the end of next new collection for allocations when they hit allocation failure. The use of the newly introduced -XX:GPGCMutatorSleepBeforeAllocRetryMS option makes the delayed to respond to the freed pages earlier and helps in reducing the length of allocation delays seen by the application threads. 12428 17.12.1.0 Expressions with nested Math.pow() fail with the result Not-a-Number error for some floating point values. 12767 17.12.1.0 Comodo root Certificate Authority is missing in cacerts files. 8606 17.12.0.0 Zing crashes if its command line contains only -Xms but no -Xmx, and -Xms is larger than default max heap size (currently 1G). The fix ensures no more such crashes happen. 11772 17.12.0.0 Zing tools do not work with an OEM license because the entry point JAR file is loaded by bootstrap. 12010 17.11.1.0 ZVM garbage collector related process abort at C [libjvm.so+0x29672c] GPGC_Layout::addr_to_BasePageForSpace. 12461 17.11.1.0 ZVM Falcon compiler related process abort at C [libjvm.so+0x58dca8] DolphinParser::reify_abstract_state. 12492 17.11.1.0 Interpreter or other runtime ZVM abort following a deoptimization of Falcon compiled code and an attempt to recompile and run the newly compiled method. Internal root cause is Falcon compiler’s reuse of OopTable indices. 8341 17.11.0.0 ZVM will not start if -Xmx and -Xms are both specified and have values that are odd numbers. 11143 17.11.0.0 Unexpected use of the System.nanoTime() method in the Falcon compiler. 11850 17.11.0.0 ZVM crashed in guarantee(secondary_supers()) failed: Unitialized secondary supers during typecheck. 11896 17.11.0.0 Backport of JDK-6512830: Error: assert(tag_at(which).is_unresolved_klass(), \"Corrupted constant pool\"). 12131 17.11.0.0 Backport JDK-8075484: SocketInputStream.socketRead0 can hang even with soTimeout set. 12132 17.11.0.0 Backport JDK-8178536: OOM ERRORS + SERVICE-THREAD TAKES A PROCESSOR TO 100%. 10064 17.10.0.0 ZVM crashed due to incorrect deoptimization in clone intrinsic implementation. 11612 17.06.2.0 A bug in a function call in the optimized intrinsic code for AES. 10043 17.06.0.0 Using the -usedatex command-line option together with the Set Time Range option of the GC Log Analyser tool resulted in empty graphs. 10298 17.06.0.0 INVOKEINTERFACE called on the java.lang.Object method in ASM-generated byte code fails after several iterations. 10428 17.06.0.0 The use of the date/time X-axis of the GC Log Analyser tool encounters error caused by duplicate elapsed times for items in a dataset. 10440 17.06.0.0 Warning counters differ in jstat -profile and -profileerrors output of the ReadyNow tool. 10499 17.03.3.0 Internal Error at ciObject.hpp: compiler_assert(is_instance()) failed: bad cast : 10353 17.03.3.0 Crash due to an unexpected error detected by Java Runtime Environment: guarantee(lbl == _ex_labels→at(idx)) failed: single handler bci given 2 different rel_pc mappings. 10334 17.03.3.0 Scala 2.12 fails with bytecode error. 10174 17.03.3.0 Crash with the error message: LLVM fatal error: Unable to allocate section memory! 10297 17.03.2.0 Crash with the following problematic frame: J (C2) com.mchange.v2.c3p0.impl.NewPooledConnection.carefulCheckHoldability(Ljava/sql/Connection;)I 9970 17.03.2.0 Zing crashes with the following error: LLVM fatal error: Do not know how to split the result of this operator! 10156 17.03.1.0 Too many recompilations on a particular method results in the same being marked \"do not-compile any longer\". 4702 17.03.0.0 Use of the OnOutOfMemoryError flag triggers a crash. 8298 16.12.3.0 New generation relocation aborts can lead to Java heap live set growth. This affects ZVM versions 16.01.0.0 through ZVM 16.12.2. 9463 16.12.3.0 Frequent New GC cycles can lead to Java heap live set growth. When the New GC intercycle time is lower than the promotion threshold, objects can be retained in the new generation causing a growth in the live set. This affects ZVM versions 15.09.0.0 through ZVM 16.12.2. 7911 16.12.2.0 Crash with the following problematic frame: C [libjvm.so+0x38d1c2] jvmti_GetTime+0x62. 9050 16.12.2.0 On some RHEL 5 systems, where the command: find /sys/devices/system/cpu -name thread_siblings produces a list of files that is in descending numerical order by a CPU directory name, ThreadOpt will exit with an IndexOutOfBoundsException. 9086 16.12.1.0 Applications can hang when ZVM runs with the Falcon compiler. 8655 16.12.0.0 Crash due to usage of the +UseFastJNIAccessors option. The option has not been implemented yet. To avoid crashing the option marked as unchangeable. 6520 16.12.0.0 No timestamp generated with the +PrintGCDetails option alone on command line causes gcLogAnalyser \"unable to read\". 8561 16.10.1.0 ZVM can exit due to code cache exhaustion by Java monitors. Applications which make heavy use of Java monitors either due to lock contention or wait/notify mechanisms, can potentially see a high footprint related to monitors in the code cache. 8224 16.10.0.0 A stray C2 thread is running at 100% CPU without making any forward progress. 8071 16.07.1.0 C-Heap Leak happens in raw-monitor creation. RawMonitors are leaking semaphore objects which are eagerly created during VMLock creation. The fix includes releasing sem_t objects and calling sem_destroy. 7756 16.07.1.0 ZVM crashes with the following problematic frame: [libjvm.so+0x318ab3] java_lang_Class::as_klassOop(oopDesc*)+0x23. 2820 16.07.1.0 Nashorn benchmark stalls after encountering data error processing profile log error (error: 101) while running Nashorn benchmarks with ReadyNow enabled. The fix adds supports for dealing with Nashorn and eliminates this issue. 4758 16.07.0.0 Additional control flags introduced to prevent startup crashes due to usage of ProfileLogIn. Following are those control flags: * ProfileUsePersistedInstructionData * ProfileProactivelyCompileC1 * ProfileProactivelyCompileC2 4811 16.07.0.0 jstat -profile (and -profileerrors) returned unresolved symbols when ProfileLogIn is not specified. The fix now ensures that zeros will be printed instead of unresolved symbols. 5803 16.07.0.0 Wrong class was being loaded only when using the ProfileLogIn profile. The fix implements safe mode for ReadyNow to avoid an improper speculative load that might produce a misleading and worrisome report. 6300 16.07.0.0 Removed non-relevant data from graphs (Old Gen Collector: App Threads Delay and Pages Promoted). 6778 16.07.0.0 ReadyNow failed to recognize the generated Lambda classes as generated. The fix implements safe mode for ReadyNow to use when ReadyNow’s generated class heuristics do not work for a class generator. 7422 16.07.0.0 Enabling ProfileLiveObjects seems to increase GC cycle durations significantly. The fix implements an improved hash function along with few other optimizations resulting in reduced GC cycle durations. 7434 16.07.0.0 The default value of MlockLevel has been changed to 1 from 0: * MlockLevel=0 – do not attempt any mlocks * MLockLevel=1 – quietly attempt to mlock libjvm.so 7451 16.07.0.0 Crash with the following problematic frame: StubRoutines::find_SEGV_continuation_address. 7654 16.07.0.0, 16.01.7.0 Resolving an orphaned FinalLive objects through JNI weak handle during ConcurrentRefProcessing could lead to the following crash: guarantee(loop_count < size) failed: should have found the relocation record 7422 16.01.7.0 Enabling ProfileLiveObjects seems to increase GC cycle durations significantly. The fix implements an improved hash function along with few other optimizations resulting in reduced GC cycle durations. 5547 16.01.7.0 When running on some Cassandrs nodes, the following enexpected error has been detected: guarantee(GPGC_Marks::is_any_marked_strong_live(obj)) failed: NewGen oop at final clear not strong live 6907 16.01.6.0 aCrash due to an internal error: guarantee(loop_count < size) failed: should have found the relocation record The fix ensures that a class of a Java object is treated as StrongLive even if that object is itself only FinalLive. This guarantees that the classes of FinalLive objects cannot be orphaned before the StrongLive mark-through of FinalLive referents, and will ensure their relocation. 6058, 6108 16.01.5.0 High GC pauses due to JVM code being paged out. The fix introduces a new command-line option MlockLevel, which can be tuned. If the flag is set without a value, the default ensures no page JVM code page-outs. The option specifies one of four mlock strategies: . Do not attempt any mlock (EARLY) . mlock libjvm.so text region (LATE) . mlockall (EARLY) . mlockall (LATE) Example: use -XX:+MlockLevel=1001 to attempt strategy 1 while reporting verbosely. This option should be used only with guidance of Azul Support. 6258 16.01.5.0 A random error code is being returned from the JDK method: java.util.prefs.FileSystemPreferences.lockFile0(). 6436 16.01.5.0 In ZVision, clicking on the tty_lock entry in zvision → threads → contention causes a crash. 6631 16.01.5.0 +MinimizeJNICriticalLock causes an IllegalArgumentException in java.util.zip.Deflater.deflate. 6898 16.01.5.0 Nginx-Clojure does not work with Zing because the linker option -Wl,-soname,libjvm.so has not been passed and the libjvm.so library cannot be found. 7071 16.01.5.0 Zing VM can crash at very early stages due to lack of system resources. 6542 16.01.3.0 Applications that use large chunks(>100s of MBs) of DirectByteBuffer could potentially face high TTSP times in New/OldGC pause3 because of the deallocation of these buffers. 6791 16.01.3.0 NullPointerException caused by wrong code generated from C2. 6938 16.01.3.0 Thread.sleep can sleep ~30% longer than specified when the Intel pstate driver is enabled. The pstate driver can be disabled to workaround this problem with older ZVMs. You can determine whether the pstate driver has been enabled by checking /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver for the string “intel_pstate”. 6956 16.01.3.0 A race condition in CodeCache::GPGC_unlink can cause a crash when there are multiple GenPauselessOldThreads. This affects ZVM versions 16.01.0.0, 16.01.1.0, and 16.01.2.0. For these ZVMs, the workaround is to set -XX:GenPauselessOldThreads=1 but this can cause a spike in Old GC cycle times for applications with a large live set. 6736 16.01.2.0 Fatal error in native method: JDWP PushLocalFrame: Unable to push JNI frame, jvmtiError=AGENT_ERROR_OUT_OF_MEMORY(188). 6124 16.01.1.0 Crash in generated code of the following method: it.unimi.dsi.fastutil.ints.IntRBTreeSet.add. 6370 16.01.1.0 GC log file SYSINFO line reports Page Cache active(file) value for the Page Cache active(anon) value. 2699 16.01.0.0 New intrinsic for BigInteger.multiplToLen() for improved BigInteger performance. 3178 16.01.0.0 The new UseCRC32Intrinsics option for improved CRC32 performance. 3910 16.01.0.0 New intrinsics for the squareToLen and mulAdd methods in BigInteger for improved BigInteger performance. 5002 16.01.0.0 The UseSuperWord ZVM option is turned on by default. It enables up to 16-byte vectorization. 5437 16.01.0.0 Memory-tracking functions to record the use of the native memory. For more details, see the Native Memory Tracking section of the Zing 16.01.0.0 User Guide. 5478 16.01.0.0 As of ZVM 14.09.0.0, a difference in the version of libstdc on the system and the libstdc version that is statically linked into libjvm could cause a crash due to malloc corruption. 5626 16.01.0.0 The printir compiler command dumps out C2 node IR phase by phase for a specific Java method. 5663 16.01.0.0 Crash with the following problematic frame: AddNode::Ideal(PhaseGVN*, bool). 5858 16.01.0.0 When the JVM core dumps, the hs error file is incorrectly reporting SCHED_IDLE threads as UNKNOWN. 5754 16.01.0.0 Crash with the following problematic frame: jvm_exception_handler. 5791 16.01.0.0 VM takes a long time to shutdown due to background page scrubbing. 6142 16.01.0.0 Crash with the following problematic frame: GraphKit::add_exception_states_from(JVMState*). 5467 15.09.1.0 Crash in Java_sun_font_ FreetypeFontScaler_disposeNativeScaler()."
}, {
  "objectID" : "ebfe59cb-525f-4412-9967-4c0536225c1a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "General Issues Known in Azul Zing Builds of OpenJDK",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes-overall-issues-known",
  "link" : "https://docs.azul.com/prime/release-notes-overall-issues-known",
  "content" : "Note This page summarizes general issues known in Azul Zing Builds of OpenJDK (Zing). Large Amounts of Virtual Memory Shown by top and ps for Zing Java Processes Linux tools like top, ps, etc. show large amounts of virtual memory address space for all Zing Java processes in the range of several TBytes. This is an expected and normal behavior as Zing utilizes a large address space for its GC algorithm. It will not take away memory resources from other processes as the memory itself is not used, just the large address space is needed. Unexpected Resident Set Size Memory Metric Shown by top and ps for Zing Java Processes For Zing without the Azul Zing System Tools (ZST) component (the default mode of Zing), the Linux top, ps, and other tools overestimate the memory use of Zing Java processes. As a result, resident set sizes (RSS, RES) of more than 3 times the -Xmx value display. The reason for this is Zing’s usage of virtual memory multi-maps, i.e., multiple references to the same physical memory locations. To get precise metrics for the actual memory utilization, you can run the Linux smem -P java command which shows the memory usage in the PSS (proportional set size) column. However, you should only use this tool interactively for diagnostic purpose and not in a scheduled way on production systems to avoid a performance impact. There is a general latency performance impact on Linux systems when accessing the /proc/PID/smaps metric which is read by the smem tool and similar tools like atop and process-exporter, depending on their configuration. The better alternative to get an overview of the complete system memory condition is the Linux free command or /proc/meminfo as those show correct metrics without impacting performance. For Zing with the installed ZST component, the memory metric resident set size (RSS, RES) does not include the memory used for the Java heap and thereby shows an unexpectedly small value of only a few hundred MBytes even when you set multiple GBytes of -Xmx. The reason for this is the dedicated memory management by the ZST. For performance reasons, ZST handles the memory for Java heaps independently of Linux default memory management. Only the total amount of memory used for Java heaps is visible by standard Linux tools like, for example, shown with the free command. To list the heap memory usage for Zing Java processes when ZST is installed, use the zing-ps -s command. With that, the heap memory, managed by the ZST, is shown in the Xmx column, the small amount of Linux RSS - in the LRSS column, and the memory used by Zing internally and managed by the ZST - in the ZRSS column. Also, on Zing with the installed ZST, a similar effect is visible regarding the Linux metric Mlocked in /proc/meminfo. While the ZST-managed memory is protected from being swapped out, similar to a Linux mlock, it is not visible as Mlocked in /proc/meminfo. Slow Process Restart for Large Heap Sizes on Small Linux Pages In non-ZST mode on system with Linux standard configuration, i.e. disabled shared memory transparent huge pages, restarting the java process can take up to 10 seconds per 100 GB heap size. Solution: Enable shared memory transparent huge pages as described in Enable Huge Pages or install ZST. In addition, on Ubuntu, Amazon Linux or similar systems with Linux kernel 4.19.7 and newer upgrade to Azul Platform Prime 21.04.0.0 or newer. Loop predicate and loop limit check code problem The java spec says explicitly that operations on integers can overflow and no exception will be thrown. Indeed, unlike the C++ spec that says integer overflow is undefined, java says integer overflow is required to happen. Java coding guidelines always point out that using Integer.MAX_VALUE in comparison expressions is dangerous programming. Especially if it is used in a loop bound. This loop will terminate because eventually i will be equal to Integer.MAX_VALUE: for (int i=0; i<Integer.MAX_VALUE; i+=1) { … } This loop will never terminate, because i will overflow: for (int i=0; i<Integer.MAX_VALUE; i+=2) { … } Zing will sometimes terminate the loop in (2b). Note -XX:+DisableLoopOptimizations will often avoid the problem but is is only recommend as a workaround on a per-method basis. -XX:CompileCommand='disableloopopts,classname::method'"
}, {
  "objectID" : "6868287d-c2b5-4fed-846e-24d0012c02fc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for January 2024",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-January24",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-January24",
  "content" : "The following Azul Platform Prime releases contain the January 2024 CPU release of OpenJDK: CPU PSU 23.08.300.0 24.01.0.0 23.02.700.0 23.08.400.0 The following table lists the latest CVE fixes added in the Azul Platform Prime CPU release. The CVE IDs in the table apply to JDK 8, JDK 11, and JDK 17 unless noted otherwise."
}, {
  "objectID" : "99e31769-792f-4c69-abf7-386ddef69231",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for January 2024",
  "section" : "January 2024 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-January24",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-January24#january-2024-cve-fix",
  "content" : "January 2024 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2024-20932 Security Multiple Yes 7.5 Network Low None None Unchanged None High None 17 Note 1 CVE-2024-20952 Security Multiple Yes 7.4 Network High None None Unchanged High High None 21, 17, 11, 8 Note 1 CVE-2024-20919 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 21, 17, 11, 8 Note 3 CVE-2024-20926 Scripting Multiple Yes 5.9 Network High None None Unchanged High None None 11, 8 Note 2 CVE-2024-20945 Security None No 4.7 Local High Low None Unchanged High None None 21, 17, 11, 8 Note 1 CVE-2024-20923 JavaFX Multiple Yes 3.1 Network High None Required Unchanged Low None None 21, 17, 11, 8 Note 1 CVE-2024-20925 JavaFX Multiple Yes 3.1 Network High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2024-20922 JavaFX None No 2.5 Local High None Required Unchanged None Low None 21, 17, 11, 8 Note 1 CVE-2023-44487 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None None High None CVE-2023-5072 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Tools (JSON-java) Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2024-20918 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 7.4 Network High None None Unchanged High High None None Note 2 CVE-2024-20921 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 2 CVE-2024-20955 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK, Oracle GraalVM Enterprise Edition: Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. 3 This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required (R) Scope Unchanged (U) and Changed (C) Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "a5e18c8d-b101-4a49-bb3c-27f38f8cc5a9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for January 2024",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-January24",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-January24#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. January 2024 Non-CVE Security Fix OpenJDK Patch ID Azul Prime Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8308204 8, 11, 17 Enhanced certificate processing CPU,PSU"
}, {
  "objectID" : "acf5b6d7-33de-4f84-ac78-74a026ad0229",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for October 2023",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-October23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-October23",
  "content" : "The following Azul Platform Prime releases contain the October 2023 CPU release of OpenJDK: CPU PSU 23.08.100.0 23.10.0.0 23.02.500.0 23.08.200.0 - 23.02.600.0 The following table lists the latest CVE fixes added in the Azul Platform Prime CPU release. The CVE IDs in the table apply to JDK 8, JDK 11, JDK 17, and JDK 21 unless noted otherwise."
}, {
  "objectID" : "cbce0e52-85a4-404b-a5b9-9527681ecb50",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for October 2023",
  "section" : "October 2023 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-October23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-October23#october-2023-cve-fix",
  "content" : "October 2023 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22067 CORBA CORBA Yes 5.3 Network Low None None Unchanged None Low None 8 Note 1 CVE-2023-22081 JSSE HTTPS Yes 5.3 Network Low None None Unchanged None None Low 21, 17, 11, 8 Note 2 CVE-2023-30589 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Node (Node.js) HTTP Yes 7.5 Network Low None None Unchanged None High None None CVE-2023-22091 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM for JDK: Compiler Multiple Yes 4.8 Network High None None Unchanged Low Low None None CVE-2023-22025 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged None Low None None Note 3 Notes: ID Notes 1 This vulnerability can only be exploited by supplying data to APIs in the specified Component, e.g., through a web service. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 3 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required (R) Scope Unchanged (U) and Changed (C) Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "b574cdb9-aa71-4097-bc0b-f31d2c7e2cdc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for October 2023",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-October23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-October23#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. October 2023 Non-CVE Security Fix OpenJDK Patch ID Azul Prime Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8283441 8 C2: segmentation fault in ciMethodBlocks::make_block_at(int) CPU,PSU JDK-8286503 8, 11, 17, 21 Enhance security classes CPU,PSU JDK-8296581 11, 17, 21 Better system proxy support CPU,PSU JDK-8297856 8, 11, 17, 21 Improve handling of Bidi characters CPU,PSU JDK-8304153 8, 11, 17, 21 Enhance image stability CPU,PSU JDK-8307278 8, 11, 17, 21 Upgrade Libpng CPU,PSU JDK-8307286 8, 11, 17, 21 Upgrade FreeType CPU,PSU JDK-8312248 17, 21 Enhanced archival support redux CPU,PSU JDK-8312367 8, 11, 17, 21 Enhance security classes CPU,PSU JDK-8314520 8, 11, 17, 21 Upgrade Webkit to latest CPU,PSU JDK-8314649 17, 21 Enhanced archival support redux CPU,PSU JDK-8317040 8, 11, 17 Adapt a cleaner test for older releases CPU,PSU JDK-8308204 8, 11, 17 Enhanced certificate processing PSU"
}, {
  "objectID" : "37f29ec5-e6ef-48b1-b81e-37c50b33a434",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for July 2023",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-July23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-July23",
  "content" : "The following Azul Platform Prime releases contain the July 2023 CPU release of OpenJDK: CPU PSU 23.02.300.0 23.07.0.0 - 23.02.400.0 The following table lists the latest CVE fixes added in the Azul Platform Prime CPU release. The CVE IDs in the table apply to JDK 8, JDK 11, and JDK 17 unless noted otherwise."
}, {
  "objectID" : "31ccb744-4725-40ba-bede-c740723bdf78",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for July 2023",
  "section" : "July 2023 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-July23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-July23#july-2023-cve-fix",
  "content" : "July 2023 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-22041 Hotspot None No 5.1 Local High None None Unchanged High None None 17, 11 Note 1 CVE-2023-22036 Utility Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22049 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-25193 2D (Harfbuzz) Multiple Yes 3.7 Network High None None Unchanged None None Low 17, 11 Note 2 CVE-2023-22006 Networking Multiple Yes 3.1 Network High None Required Unchanged None Low None 17, 11 Note 1 CVE-2023-22043 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. JavaFX Multiple Yes 5.9 Network High None None Unchanged None High None None Note 1 CVE-2023-22044 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22045 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 3.7 Network High None None Unchanged Low None None None Note 2 CVE-2023-22051 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. GraalVM Compiler Multiple Yes 3.7 Network High None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability can be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability also applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required (R) Scope Unchanged (U) and Changed (C) Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "1ea35185-aabe-4d9e-8d4b-961382ba96f0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for July 2023",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-July23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-July23#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. July 2023 Non-CVE Security Fix OpenJDK Patch ID Azul Prime Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8294323 17 Improve Shared Class Data CPU,PSU JDK-8296565 17 Enhanced archival support CPU,PSU JDK-8298676 8, 11, 17 Enhanced Look and Feel CPU,PSU JDK-8300285 11, 17 Enhance TLS data handling CPU,PSU JDK-8300596 8, 11, 17 Enhance Jar Signature validation CPU,PSU JDK-8301014 8, 11, 17 Update libxml CPU,PSU JDK-8303376 11, 17 Better launching of JDI CPU,PSU JDK-8306311 8, 11, 17 Better XML support CPU,PSU"
}, {
  "objectID" : "b2f56b28-ed55-4b05-87eb-874a6881b945",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for April 2023",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-April23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-April23",
  "content" : "The following Azul Platform Prime releases contain the April 2023 CPU release of OpenJDK: CPU PSU 23.02.100.0 23.04.0.0 22.08.500.0 - The following table lists the latest CVE fixes added in the Azul Platform Prime CPU release. The CVE IDs in the table apply to JDK 8, JDK 11, and JDK 17 unless noted otherwise."
}, {
  "objectID" : "03b82c2d-b718-49bc-96e3-98bb721bfb61",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for April 2023",
  "section" : "April 2023 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-April23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-April23#april-2023-cve-fix",
  "content" : "April 2023 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21930 JSSE TLS Yes 7.4 Network High None None Unchanged High High None 17, 11, 8 Note 1 CVE-2023-21967 JSSE HTTPS Yes 5.9 Network High None None Unchanged None None High 17, 11, 8 Note 1 CVE-2023-21939 Swing HTTP Yes 5.3 Network Low None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21937 Networking Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21938 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 2 CVE-2023-21968 Libraries Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 11, 8 Note 1 CVE-2023-21954 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Hotspot Multiple Yes 5.9 Network High None None Unchanged High None None None Note 1 CVE-2023-21986 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image None No 5.7 Local Low None None Changed None Low Low None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required (R) Scope Unchanged (U) and Changed (C) Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "5d796b3b-1b17-451c-9365-69f8e2416942",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for April 2023",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-April23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-April23#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. April 2023 Non-CVE Security Fix OpenJDK Patch ID Azul Prime Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8287404 17, 11, 8 Improve ping times CPU,PSU JDK-8303501 17, 11, 8 Unable to navigate to relative URLs after fix for JDK-8299781 CPU,PSU JDK-8300060 17, 11, 8 Improved Webkit support CPU,PSU JDK-8299781 17, 11, 8 Improve JFX navigation CPU,PSU JDK-8299129 17, 11, 8 Enhance NameService lookups CPU,PSU JDK-8297371 17, 11, 8 Improve UTF8 representation redux CPU,PSU JDK-8292652 8 Enhance macro allocation CPU,PSU JDK-8288436 17, 11, 8 Improve Xalan supports CPU,PSU JDK-8305113 17, 11, 8 (tz) Update Timezone Data to 2023c CPU,PSU"
}, {
  "objectID" : "20402f66-e01d-4dcc-9679-121ee83bfe44",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for January 2023",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-January23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-January23",
  "content" : "The following Azul Platform Prime releases contain the January 2023 CPU release of OpenJDK: CPU PSU 22.08.300.0 23.01.0.0 - 22.08.400.0 The following table lists the latest CVE fixes added in the Azul Platform Prime CPU release. The CVE IDs in the table apply to JDK 8, JDK 11, JDK 13, JDK 15, and JDK 17 unless noted otherwise."
}, {
  "objectID" : "69a395b8-b87a-4dc8-9043-2fd690caad76",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for January 2023",
  "section" : "January 2023 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-January23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-January23#january-2023-cve-fix",
  "content" : "January 2023 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2023-21830 Serialization Multiple Yes 5.3 Network Low None None Unchanged None Low None 8 CVE-2023-21835 JSSE DTLS Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 CVE-2023-21843 Sound Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 CVE-2022-43548 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 8.1 Network High None None Unchanged High High High None Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required (R) Scope Unchanged (U) and Changed (C) Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "dbecb8eb-5cbf-41aa-b00d-bd62e0bdc625",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for January 2023",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-January23",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-January23#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. January 2023 Non-CVE Security Fix OpenJDK Patch ID Azul Prime Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8283277 8 ISO 4217 Amendment 171 Update CPU,PSU JDK-8297804 17, 15, 13, 11, 8 (tz) Update Timezone Data to 2022g CPU,PSU JDK-8296239 17, 15, 13, 11, 8 ISO 4217 Amendment 174 Update CPU,PSU JDK-8296108 17, 15, 13, 11, 8 (tz) Update Timezone Data to 2022f CPU,PSU JDK-8295723 17, 15, 13, 11, 8 security/infra/wycheproof/RunWycheproof.java fails with Assertion Error CPU,PSU JDK-8295687 17, 15, 13, 11, 8 Better BMP bounds CPU,PSU JDK-8295173 17, 15, 13, 11, 8 (tz) Update Timezone Data to 2022e CPU,PSU JDK-8294779 17, 15, 13, 11, 8 Improve FX pages CPU,PSU JDK-8294357 17, 15, 13, 11, 8 (tz) Update Timezone Data to 2022d CPU,PSU JDK-8294307 17, 15, 13, 11, 8 ISO 4217 Amendment 173 Update CPU,PSU JDK-8293734 17, 15, 13, 11, 8 Improve BMP image handling CPU,PSU JDK-8293717 17, 15, 13, 11, 8 Objective view of ObjectView CPU,PSU JDK-8293598 17, 15, 13, 11, 8 Enhance InetAddress address handling CPU,PSU JDK-8293554 17, 15, 13, 11, 8 Enhanced DH Key Exchanges CPU,PSU JDK-8292112 17, 15, 13, 11, 8 Better DragView handling CPU,PSU JDK-8292105 17, 15, 13, 11, 8 Improve Robot functionality CPU,PSU JDK-8292097 17, 15, 13, 11, 8 Better video decoding CPU,PSU JDK-8289549 8 ISO 4217 Amendment 172 Update CPU,PSU JDK-8289343 17, 15, 13, 11, 8 Better GL support CPU,PSU JDK-8289336 17, 15, 13, 11, 8 Better platform image support CPU,PSU JDK-8288516 17, 15, 13, 11, 8 Enhance font creation CPU,PSU JDK-8286496 17, 15, 13, 11, 8 Improve Thread labels CPU,PSU JDK-8286070 17, 15, 13, 11 Improve UTF8 representation CPU,PSU ZULU-43112 17, 15, 13, 11, 8 Update copyright year with 2023 in welcome.html for Jan cpu CPU,PSU"
}, {
  "objectID" : "f6f53a6a-24f8-4694-b9e1-2c9ea0964cf7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for October 2022",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-October22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-October22",
  "content" : "The following Azul Platform Prime releases contain the January 2023 CPU release of OpenJDK: CPU PSU 22.02.500.0 22.10.0.0 22.08.100.0 - The following table lists the latest CVE fixes added in the Azul Platform Prime 22.08.100.0 release. The CVE IDs in the table apply to JDK 8, JDK 11, JDK 13, JDK 15, and JDK 17 unless noted otherwise."
}, {
  "objectID" : "bdec31e8-30e5-45a3-8459-2375787005ba",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for October 2022",
  "section" : "October 2022 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-October22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-October22#october-2022-cve-fix",
  "content" : "October 2022 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21618 JGSS Kerberos Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 2 CVE-2022-21626 Security HTTPS Yes 5.3 Network Low None None Unchanged None None Low 15, 13, 11, 8 Note 2 CVE-2022-21628 Lightweight HTTP Server HTTP Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21619 Security Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-21624 JNDI Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8 Note 2 CVE-2022-39399 Networking HTTP Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-32215 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTPS Yes 9.1 Network Low None None Unchanged High High None None CVE-2022-21634 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: LLVM Interpreter Multiple Yes 7.5 Network Low None None Unchanged None None High None CVE-2022-21597 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: JavaScript HTTP Yes 5.3 Network Low None None Unchanged Low None None None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). 2 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required ® Scope Unchanged (U) and Changed © Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "727b9da8-50b9-41d8-b3c1-b92c352ed45b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for October 2022",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-October22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-October22#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. October 2022 Non-CVE Security Fix OpenJDK Patch ID Azul Prime Version Synopsis CPU/PSUCPU fixes are included in both CPU and PSU bundles. PSU fixes are included in the PSU bundles only. JDK-8028265 17, 15, 13, 11, 8 Add legacy tz tests to OpenJDK CPU, PSU JDK-8291040 17, 15, 13, 11, 8 Upgrade WebKit CPU, PSU JDK-8290547 17, 15, 13, 11 Update font handling CPU, PSU JDK-8290540 17, 15, 13, 11, 8 Freer typing of fonts CPU, PSU JDK-8288508 17, 15, 13, 11, 8 Enhance ECDSA usage CPU, PSU JDK-8287446 17, 15, 13, 11 Enhance icon presentations CPU, PSU JDK-8286519 17, 15, 13, 11, 8 Better memory handling CPU, PSU JDK-8286511 17, 15, 13, 11, 8 Improve macro allocation CPU, PSU JDK-8285662 17, 15, 13, 11, 8 Better permission resolution CPU, PSU JDK-8282252 17, 15, 13, 11, 8 Improve BigInteger/Decimal validation CPU, PSU JDK-8292579 17, 15, 13, 11, 8 (tz) Update Timezone Data to 2022c CPU, PSU"
}, {
  "objectID" : "c88c587d-5e0c-4fd0-aafb-9d0cf266f7d1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for July 2022",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-July22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-July22",
  "content" : "The following Azul Platform Prime releases contain the July 2022 CPU release of OpenJDK: CPU PSU 22.02.300.0 22.07.0.0 The following table lists the latest CVE fixes added in the Azul Platform Prime 22.02.300.0 release. The CVE IDs in the table apply to JDK 8, JDK 11, JDK 13, JDK 15, and JDK 17 unless noted otherwise."
}, {
  "objectID" : "8c8e6a64-f12d-44cb-8b9f-fca6ff71c5dd",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for July 2022",
  "section" : "July 2022 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-July22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-July22#july-2022-cve-fix",
  "content" : "July 2022 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-34169 JAXP (Xalan-J) Multiple Yes 7.5 Network Low None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21541 Hotspot Multiple Yes 5.9 Network High None None Unchanged None High None 17, 15, 13, 11, 8 Note 1 CVE-2022-21540 Hotspot Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8 Note 1 CVE-2022-21549 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 17 Note 1 CVE-2022-25647 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Native Image (Gson) None No 6.2 Local Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and relies on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required ® Scope Unchanged (U) and Changed © Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "6d0fb216-f950-4f7e-b41a-7f8402c51b80",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for July 2022",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-July22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-July22#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. July 2022 Non-CVE Security Fix Patch ID Azul Prime Version Synopsis CPU/PSU JDK-8286324 17, 15, 13, 11, 8 Upgrade libxslt CPU JDK-8286317 17, 15, 13, 11, 8 Upgrade libxml2 CPU JDK-8285691 17, 15, 13, 11, 8 Additional fix for JDK-8282121 CPU JDK-8285686 17, 15, 13, 11, 8, 7, 6 Update FreeType to 2.12.0 CPU JDK-8284370 17, 15, 13, 11, 8, 7, 6 Improve zlib usage CPU JDK-8283389 17, 15, 13, 11, 8 Update XML processing CPU JDK-8283350 17, 15, 13, 11, 8, 7, 6 (tz) Update Timezone Data to 2022a CPU JDK-8283190 17, 15, 13, 11, 8, 7, 6 Improve MIDI processing CPU JDK-8282121 17, 15, 13, 11, 8 Improve WebKit referencing CPU JDK-8281159 17, 15, 13, 11, 8 Better JavaScript support CPU JDK-8277608 17, 15, 13, 11, 8, 7, 6 Address IP Addressing CPU JDK-8272249 17, 15, 13, 11, 8 Better properties of loaded Properties CPU JDK-8272243 17, 15, 13, 11, 8, 7, 6 Improve DER parsing CPU"
}, {
  "objectID" : "8a44e0a3-0da5-47c0-82a9-0def83a240c2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for April 2022",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-April22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-April22",
  "content" : "The following Azul Platform Prime releases contain the April 2022 CPU release of OpenJDK: CPU PSU 21.08.500.0 22.04.0.0 22.02.100.0 - The following table lists the latest CVE fixes added in the Azul Platform Prime 22.02.100.0 release. The CVE IDs in the table apply to JDK 7, JDK 8, JDK 11, JDK 13, and JDK 15 unless noted otherwise."
}, {
  "objectID" : "0d29662c-0e6b-4d4b-8db2-3dace98acfc9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for April 2022",
  "section" : "April 2022 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-April22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-April22#april-2022-cve-fix",
  "content" : "April 2022 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2018-25032 ZIP Multiple Yes 7.5 Network Low None None Unchanged None None High 17, 15, 13, 11, 8, 7, 6 CVE-2022-21449 Libraries Multiple Yes 7.5 Network Low None None Unchanged None High None 18, 17, 15 Note 1 CVE-2022-21476 Libraries Multiple Yes 7.5 Network Low None None Unchanged High None None 18, 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21426 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21434 Libraries Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21496 JNDI Multiple Yes 5.3 Network Low None None Unchanged None Low None 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21443 Libraries Multiple Yes 3.7 Network High None None Unchanged None None Low 18, 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-0778 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network Low None None Unchanged None None High None Notes: ID Notes 1 This vulnerability applies to Java deployments, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required ® Scope Unchanged (U) and Changed © Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "7cda8d0a-a63e-4597-bdfe-945db3bf614c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes for April 2022",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-April22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-April22#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. April 2022 Non-CVE Security Fix ZULU-35911 17, 15, 13, 11, 8, 7, 6 improve DDOT handling in xpath CPU JDK-8284548 17, 15, 13, 11, 8, 7, 6 Invalid XPath expression causes StringIndexOutOfBoundsException CPU JDK-8282397 17, 15, 13, 11, 8, 7, 6 createTempFile method of java.io.File is failing when called with suffix of spaces character CPU JDK-8282300 17, 15, 13, 11, 8, 7, 6 Throws NamingException instead of InvalidNameException after JDK-8278972 CPU JDK-8281498 17, 15, 13, 11, 8, 7, 6 Better DER support CPU JDK-8281388 17, 15, 13, 11, 8, 7, 6 Change wrapping of EncryptedPrivateKeyInfo CPU JDK-8281152 17, 15, 13, 11, 8, 7, 6 Improved WebKit support CPU JDK-8278805 17, 15, 13, 11, 8, 7, 6 Enhance BMP image loading CPU JDK-8278449 17, 15, 13, 11, 8, 7, 6 Improve keychain support CPU JDK-8278356 17, 15, 13, 11, 8, 7, 6 Improve file creation CPU JDK-8277465 17, 15, 13, 11, 8, 7, 6 Additional fix for JDK-8276371 CPU JDK-8277227 17, 15, 13, 11, 8, 7, 6 Better identification of OIDs CPU JDK-8276371 17, 15, 13, 11, 8, 7, 6 Better long buffering CPU JDK-8274221 17, 15, 13, 11, 8, 7, 6 More definite BER encodings CPU JDK-8272594 17, 15, 13, 11, 8, 7, 6 Better record of recordings CPU JDK-8272588 17, 15, 13, 11, 8, 7, 6 Enhanced recording parsing CPU JDK-8272261 17, 15, 13, 11, 8, 7, 6 Improve JFR recording file processing CPU JDK-8272255 17, 15, 13, 11, 8, 7, 6 Completely handle MIDI files CPU JDK-8269938 17, 15, 13, 11, 8, 7, 6 Enhance XML processing passes redux CPU"
}, {
  "objectID" : "184ef7a3-6ec7-4b77-a655-0221e523d29b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-January22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-January22",
  "content" : "The following Azul Platform Prime releases contain the January 2022 CPU release of OpenJDK: CPU PSU 21.08.300.0 21.08.400.0 - 22.01.0.0 The following table lists the latest CVE fixes added in the Azul Platform Prime 21.08.300.0 release. The CVE IDs in the table apply to JDK 7, JDK 8, JDK 11, JDK 13, and JDK 15 unless noted otherwise."
}, {
  "objectID" : "c985e1b8-5a9e-443f-a30a-4d81f265005f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "January 2022 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-January22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-January22#january-2022-cve-fix",
  "content" : "January 2022 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit w/o Auth. Base Score Attack Vector Attack Complex Privileges Req’d User Interact Scope Confiden-tiality Integrity Availability Versions Affected Notes CVE-2022-21277 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 Note 1 CVE-2022-21282 JAXP Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21283 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21291 Hotspot Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11 Note 1 CVE-2022-21293 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21294 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21296 JAXP Multiple Yes 5.3 Network Low None None Unchanged Low None None 17, 15, 13, 11, 8, 7 Note 1 CVE-2022-21299 JAXP Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21305 Hotspot Multiple Yes 5.3 Network Low None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21340 Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21341 Serialization Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21349 2D Multiple Yes 5.3 Network Low None None Unchanged None None Low 8, 7 Note 1 CVE-2022-21360 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21365 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2022-21366 ImageIO Multiple Yes 5.3 Network Low None None Unchanged None None Low 17, 15, 13, 11 Note 1 CVE-2022-21248 Serialization Multiple Yes 3.7 Network High None None Unchanged None Low None 17, 15, 13, 11, 8, 7, 6 Note 1 CVE-2021-22959 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Node (Node.js) HTTP Yes 6.5 Network Low None None Unchanged Low Low None None CVE-2022-21271 This CVE is not applicable to Azul Prime Builds of OpenJDK. It is listed here for comparison with other Java implementations which may contain this CVE. Oracle GraalVM Enterprise Edition: Libraries Multiple Yes 5.3 Network Low None None Unchanged None None Low None Note 1 Notes: ID Notes 1 This vulnerability applies to Java deployments, typically in clients running sandboxed Java applications, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Notes: This vulnerability applies to Java deployments, typically in clients running sandboxed Java applications, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required ® Scope Unchanged (U) and Changed © Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "a5711a8c-18c7-4639-837c-c309aeb80bf8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-January22",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-January22#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. January 2022 Non-CVE Security Fix Patch ID in OpenJDK Bug DB JDK Levels Applicable in Azul Platform Prime Synopsis Java Update Type JDK-8268488 17, 15, 13, 11, 8 More valuable DerValue CPU JDK-8271962 17, 15, 13, 11, 8 Better TrueType font loading CPU JDK-8272462 17, 15, 13, 11, 8 Enhance image handling CPU JDK-8268512 17, 15, 13, 11, 8 More content for ContentInfo CPU JDK-8279541 11 Improve HarfBuzz CPU JDK-8273968 17, 15, 13, 11, 8 JCK javax_xml tests fail in CI CPU JDK-8268795 11, 8 Enhance digests of Jar files CPU JDK-8269944 17, 15, 13, 11, 8 Better HTTP transport redux CPU JDK-8272272 17, 15, 13, 11, 8 Enhance jcmd communication CPU JDK-8273290 17, 15, 13, 11, 8 Enhance sound handling CPU JDK-8268494 17, 15, 13, 11, 8 Better inlining of inlined interfaces CPU JDK-8271968 17, 15, 13, 11, 8 Better canonical naming CPU JDK-8266091 15, 13, 11 Improve Zip file handling CPU JDK-8269151 17, 15, 13, 11, 8 Better construction of EncryptedPrivateKeyInfo CPU JDK-8271987 13, 11, 8 Manifest improved manifest entries CPU JDK-8268801 17, 15, 13, 11, 8 Improve PKCS attribute handling CPU"
}, {
  "objectID" : "75978e0f-3f65-4080-a292-2971322a0a85",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-October21",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-October21",
  "content" : "The following Azul Platform Prime releases contain the October 2021 CPU release of OpenJDK: CPU PSU 21.10.0.0 21.08.200.0 21.08.100.0 - 21.02.500.0 - The following table lists the latest CVE fixes added in the Azul Platform Prime 21.10.0.0 release. The CVE IDs in the table apply to JDK 7, JDK 8, JDK 11, JDK 13, and JDK 15 unless noted otherwise."
}, {
  "objectID" : "3147d309-4af2-401d-aec6-32fc3a25ff92",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "October 2021 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-October21",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-October21#october-2021-cve-fix",
  "content" : "October 2021 CVE Fix CVSS VERSION 3.1 RISK CVE # Component Protocol Remote Exploit without Auth. Base Score Attack Vector Attack Complex Privs Req’d User Interact Scope Confidentiality Integrity Availability Supported Azul Platform Prime Versions Affected Note CVE-2021-35550 JSSE TLS Yes 5.9 N H N N U H N N 11, 8, 7 See Note 2 CVE-2021-35556 Swing Multiple Yes 5.3 N L N N U N N L 17, 15, 13, 11, 8, 7 See Note 1 CVE-2021-35559 Swing Multiple Yes 5.3 N L N N U N N L 17, 15, 13, 11, 8, 7 See Note 2 CVE-2021-35561 Utility Multiple Yes 5.3 N L N N U N N L 17, 15, 13, 11, 8, 7 See Note 2 CVE-2021-35564 Keytool Multiple Yes 5.3 N L N N U N L N 17, 15, 13, 11, 8, 7 See Note 2 CVE-2021-35567 Libraries Kerberos No 6.8 N L L R C H N N 17, 15, 13, 11, 8 See Note 2 CVE-2021-35578 JSSE TLS Yes 5.3 N L N N U N N L 17, 15, 13, 11, 8 See Note 3 CVE-2021-35586 ImageIO Multiple Yes 5.3 N L N N U N N L 17, 15, 13, 11, 8, 7 See Note 2 CVE-2021-35588 Hotspot Multiple Yes 3.1 N H N R U N N L 8, 7 See Note 2 CVE-2021-35603 JSSE TLS Yes 3.7 N H N N U L N N 17, 15, 13, 11, 8, 7 See Note 2 CVE-2021-35565 JSSE TLS Yes 5.3 N L N N U N N L 15, 13, 11, 7, 8 See Note 3 CVE-2021-3517 JavaFX Multiple Yes 8.6 N L N N U L L H None See Note 1 CVE-2021-3522 JavaFX None No 5.5 L L N R U N N H None See Note 1 Notes: This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted applications, such as through a web service. Additional CVEs addressed: The updates that address CVE-2021-3517 also address CVE-2021-3537. Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required ® Scope Unchanged (U) and Changed © Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N)"
}, {
  "objectID" : "4d72ac38-fd49-4d00-ac4b-798657248041",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-October21",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-October21#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. October 2021 Non-CVE Security Fix Patch ID in OpenJDK Bug DB JDK Levels Applicable in Azul Platform Prime Synopsis Java Update Type JDK-8267712 7, 8, 11, 13, 15 Better LDAP reference processing CPU JDK-8269624 7, 8, 11, 13, 15 Enhance method selection support CPU JDK-8268506 7, 8, 11, 13, 15 More Manifest Digests CPU JDK-8267086 7, 8, 11, 13, 15 ArrayIndexOutOfBoundsException in java.security.KeyFactory.generatePublic CPU JDK-8269763 7, 8, 11, 13, 15 The JEditorPane is blank CPU JDK-8268193 11, 13, 15 Improve requests of certificates CPU JDK-8268199 11, 13, 15 Correct certificate requests CPU JDK-8270398 7, 8, 11, 13, 15 Enhance canonicalization CPU JDK-8270404 7, 8, 11, 13, 15 Better canonicalization CPU JDK-8268059 7, 8 Perfectly perplexing proclivity in the presence of a proxy CPU JDK-8266109 7, 8, 11, 13, 15 More Resilient Classloading CPU JDK-8266115 7, 8, 11, 13, 15 More Manifest Jar Loading CPU JDK-8270212 7, 8, 11, 13, 15 Improve KeyFactory key generation CPU JDK-8263314 7, 8, 11, 13, 15 Enhance XML Dsig modes CPU JDK-8265574 7, 8, 11, 13, 15 Improve handling of sheets CPU JDK-8265776 7, 8, 11, 13, 15 Improve Stream handling for SSL CPU JDK-8266103 7, 8, 11, 13, 15 Better specified spec values CPU"
}, {
  "objectID" : "18892135-102a-4a9c-8673-0b95839756f0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-July21",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-July21",
  "content" : "The following Azul Platform Prime releases contain the July 2021 CPU release of OpenJDK: CPU PSU 21.07.0.0 21.07.0.0 The following table lists the latest CVE fixes added in the Azul Platform Prime 21.07.0.0 release. The CVE IDs in the table apply to JDK 7, JDK 8, JDK 11, JDK 13, and JDK 15 unless noted otherwise."
}, {
  "objectID" : "0acd37c4-91c1-43aa-90d9-cc385b91d8e2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "July 2021 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-July21",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-July21#july-2021-cve-fix",
  "content" : "July 2021 CVE Fix CVSS VERSION 3.0 RISK CVE # Component Protocol Remote Exploit without Auth. Base Score Attack Vector Attack Complex Privs Req’d User Interact Scope Confidentiality Integrity Availability Supported Azul Platform Prime Versions Affected Note CVE-2021-2369 Library Multiple Yes 4.3 N L N R U N L N 15, 13, 11, 8, 7 Note 1 CVE-2021-2341 Networking Multiple Yes 3.1 N H N R U L N N 15, 13, 11, 8, 7 Note 1 CVE-2021-2388 Hotspot Multiple Yes 7.5 N H N R U H H H None Note 1 CVE-2021-2432 JNDI Multiple Yes 3.7 N H N N U N N L 7, 6 Note 2 CVE-2020-28928 Oracle GraalVM Enterprise Edition: LLVM Interpreter (musl libc) None No 5.5 L L L N U N N H None CVE-2021-29921 Oracle GraalVM Enterprise Edition: Python interpreter and runtime (CPython) Multiple Yes 9.8 N L N N U H H H None Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required ® Scope Unchanged (U) and Changed © Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N) Notes This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability does not apply to Java deployments, typically in servers, that load and run only trusted code (e.g., code installed by an administrator). This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs."
}, {
  "objectID" : "a004931c-0e79-4503-9eec-9ef544f08f6d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-July21",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-July21#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. July 2021 Non-CVE Security Fix Patch ID in OpenJDK Bug DB JDK Levels Applicable in Azul Platform Prime Synopsis Java Update Type JDK-8160768 7, 6 Add capability to custom resolve host/domain names within the default JNDI LDAP provider. CPU JDK-8256491 15, 13, 11, 8, 7 Better HTTP transport. CPU JDK-8262403 15, 13, 11, 8, 7 Enhanced data transfers. CPU JDK-8262410 15, 13, 11, 8 Enhanced rules for zones. CPU JDK-8262967 15, 13, 11, 8, 7 Improve Zip file support CPU JDK-8264460 15, 13, 11, 8 Improve NTLM support. CPU JDK-8260960 15, 13, 11, 8, 7 Signs of jarsigner signing. CPU JDK-8260453 15, 13, 11, 8, 7 Improve Font Bounding. CPU JDK-8262477 15, 13, 11, 8, 7 Enhance String Conclusions. CPU JDK-8262380 15, 13, 11, 8, 7 Enhance XML processing passes. CPU JDK-8256157 15, 13, 11, 8, 7 Improve bytecode assembly. CPU"
}, {
  "objectID" : "0e58ff1d-8cb5-47ad-a931-b7cccd56147b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-April21",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-April21",
  "content" : "The following Azul Platform Prime releases contain the April 2021 CPU release of OpenJDK: CPU PSU 21.04.0.0 21.04.0.0 The following table lists the latest CVE fixes added in the Azul Platform Prime 21.02.100.0 release. The CVE IDs in the table apply to JDK 7, JDK 8, JDK 11, JDK 13, and JDK 15 unless noted otherwise."
}, {
  "objectID" : "d2c0d83d-1f99-40d7-bc9b-b0c80315f00d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "April 2021 CVE Fix",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-April21",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-April21#april-2021-cve-fix",
  "content" : "April 2021 CVE Fix CVSS VERSION 3.0 RISK CVE # Component Protocol Remote Exploit without Auth. Base Score Attack Vector Attack Complex Privs Req’d User Interact Scope Confidentiality Integrity Availability Supported Azul Platform Prime Versions Affected Note CVE-2021-2161 Libraries Multiple Yes 5.9 Network H N N U N H N 15, 13, 11, 8, 7 Note1 CVE-2021-2163 Libraries Multiple Yes 5.3 Network H N R U N H N 1, 8, 7 Note 2 CVE-2021-23841 Oracle GraalVM Enterprise Edition: Node (OpenSSL) HTTPS Yes 7.5 Network L N N U N N H N/A CVE-2021-3450 Oracle GraalVM Enterprise Edition: Node (Node.js) Fixed in the October 2020 CPU release of Azul Platform Prime. Base and Impact Metric: Metrics Values Attack Vector Network (N), Adjacent (A), Local (L), and Physical (P) Attack Complexity Low (L) and High (H) Privileges Required None (N), Low (L), and High (H) User Interaction None (N) and Required ® Scope Unchanged (U) and Changed © Confidentiality Impact High (H), Low (L), and None (N) Integrity Impact High (H), Low (L), and None (N) Availability Impact High (H), Low (L), and None (N) Notes This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. It can also be exploited by supplying untrusted data to APIs in the specified Component. This vulnerability applies to Java deployments that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security."
}, {
  "objectID" : "285a8fd8-6a59-4b9f-a418-70df7f61e4ad",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Common Vulnerabilities and Exposures Fixes",
  "section" : "In-Depth Non-CVE Security Fixes",
  "url" : "https://docs.azul.com/prime/CVE-Fixes-April21",
  "link" : "https://docs.azul.com/prime/CVE-Fixes-April21#in-depth-non-cve-security-fixes",
  "content" : "In-Depth Non-CVE Security Fixes The following table lists the in-depth non-CVE security fixes implemented specifically for Azul Platform Prime. January 2021 Non-CVE Security Fix Patch ID in OpenJDK Bug DB JDK Levels Applicable in Azul Platform Prime Synopsis Java Update Type JDK-8261183 11, 8, 7 Follow on to Make lists of normal filenames CPU JDK-8259633 11 compiler/graalunit/CoreTest.java fails with NPE after JDK-8244543 CPU JDK-8259428 11, 8, 7 AlgorithmId.getEncodedParams() should return copy CPU JDK-8258247 11, 8, 7 Couple of issues in fix for JDK-8249906 CPU JDK-8257001 11 Improve HTTP client support CPU JDK-8253799 11, 8, 7 Make lists of normal filenames CPU JDK-8244473 11, 8, 7 Contextualize registration for JNDI CPU"
}, {
  "objectID" : "2946e57d-7a5c-436c-823b-f762e366a213",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK System Requirements",
  "section" : "CPU Requirements",
  "url" : "https://docs.azul.com/prime/Sys-Reqs",
  "link" : "https://docs.azul.com/prime/Sys-Reqs#cpu-requirements",
  "content" : "CPU Requirements Azul Platform Prime runs on machines with the following 64-bit CPUs: Intel® Xeon® server class processors released since 2009. AMD EPYC™ and Opteron™ server class processors released since 2010. AWS Graviton 2 or 3 (ARM64). Note Prime on ARM64 (Graviton) is currently only supported for LTS releases (JDK8, JDK11, and JDK17)."
}, {
  "objectID" : "d82429c8-dde2-4253-9772-2d9954adafe3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK System Requirements",
  "section" : "Operating System Requirements",
  "url" : "https://docs.azul.com/prime/Sys-Reqs",
  "link" : "https://docs.azul.com/prime/Sys-Reqs#operating-system-requirements",
  "content" : "Operating System Requirements Azul Platform Prime can be installed on machines running the following operating systems. Operating System Versions Intel, AMD Graviton Red Hat Enterprise Linux 7.3 or later - CentOS 7.3 or later 8 or later CentOS Stream 8 or later 8 or later Oracle Linux 7.3 or later 7.9 or later Ubuntu 18.04 or later 20.04 or later SLES 12 SP5 or later - Debian 9 or later - Amazon Linux 1,2 2 CoreOS 4.13.16 - Photon OS 3.0 or later - Note Using Zing without Azul Zing System Tools (ZST) requires the memfd_create(2) system call. This system call is available since mainline Linux 3.17 and it was backported to the operating system versions listed above. If you want to run Azul Platform Prime on an older operating system, you need to install ZST in addition to Zing."
}, {
  "objectID" : "a1568e34-64f3-4f9d-9997-163c7da72ecf",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK System Requirements",
  "section" : "Memory Requirements",
  "url" : "https://docs.azul.com/prime/Sys-Reqs",
  "link" : "https://docs.azul.com/prime/Sys-Reqs#memory-requirements",
  "content" : "Memory Requirements To install Azul Platform Prime, use the following memory requirements as a guideline: Minimum Java heap size is 512 MB (-Xmx512M). Depending on the available free RAM, up to 2.5 TB (2,500 GB) Java heap size in the default mode is possible and 20 TB with ZST."
}, {
  "objectID" : "d14b4d79-10e2-4246-ac1c-be9e295875c9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK System Requirements",
  "section" : "Supported Virtualized Platforms",
  "url" : "https://docs.azul.com/prime/Sys-Reqs",
  "link" : "https://docs.azul.com/prime/Sys-Reqs#supported-virtualized-platforms",
  "content" : "Supported Virtualized Platforms Azul Platform Prime runs on the following virtualized platforms: Virtual machines on the supported CPUs (e.g. Amazon EC2 (HVM), Azure, Oracle Virtual Box, Google Compute Engine, VMware). Container-based systems on the supported CPUs (e.g. Docker, Kubernetes)."
}, {
  "objectID" : "a7e5dfd0-c44d-44cd-a246-a6aed26a6ebc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK Installation Instructions",
  "section" : "",
  "url" : "https://docs.azul.com/prime/installation-and-configuration",
  "link" : "https://docs.azul.com/prime/installation-and-configuration",
  "content" : "For system requirements and maximum heap size, see Azul Platform Prime System Requirements."
}, {
  "objectID" : "8b2f8880-482b-4e8b-91a4-f1acb96e4903",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK Installation Instructions",
  "section" : "Installing Azul Zing Builds of OpenJDK",
  "url" : "https://docs.azul.com/prime/installation-and-configuration",
  "link" : "https://docs.azul.com/prime/installation-and-configuration#installing-azul-zing-builds-of-openjdk",
  "content" : "Installing Azul Zing Builds of OpenJDK Azul provides two builds types: Stable Builds: the recommended way for customers to run Azul Zing Builds of OpenJDK (Zing). These super-stable builds incorporate only CPUs (Critical Patch Update), PSUs (Patch Set Updates ), and Azul Platform Prime critical fixes and do not uptake new features and non-critical enhancements from Stream Builds. Stable builds can only be downloaded by Azul customers from our FTP server. Stream Builds: fast-moving monthly releases that include all the latest features and changes. Updates are not provided on Stream Builds, only on Stable Builds. Free for development and evaluation. Use in production requires an active subscription. Stream builds can be installed from Linux repositories."
}, {
  "objectID" : "1d1ae085-5bd2-41da-acf6-44ec1258b6a8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK Installation Instructions",
  "section" : "Installation Process",
  "url" : "https://docs.azul.com/prime/installation-and-configuration",
  "link" : "https://docs.azul.com/prime/installation-and-configuration#installation-process",
  "content" : "Installation Process Depending on your Linux distribution, different approaches can be used: Using APT (.deb packages): Debian, Ubuntu Using DNF/YUM (.rpm packages): Amazon Linux, Oracle, RHEL/CentOS, SLES 12 From a tar.gz Using Docker Using Kubernetes"
}, {
  "objectID" : "338e74db-1596-4b50-82b1-fd71e00866cb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK Installation Instructions",
  "section" : "Post Installation Tasks",
  "url" : "https://docs.azul.com/prime/installation-and-configuration",
  "link" : "https://docs.azul.com/prime/installation-and-configuration#post-installation-tasks",
  "content" : "Post Installation Tasks The following post-installation steps are not directly required when starting to use Zing, but it is recommended to go through them and implement any that are relevant for your environment. Install of License File Note Since Zing 20.10.0.0, a license file is no longer required to run commercial packages of Zing. If you are installing Zing 20.10.0.0 or later, it is not necessary to use a license file. Note that while our Stream builds are free for evaluation and development, our Stable builds do require a current subscription contract with Azul even though they do not require the use of a license file on the system. Copy the license file to your target host’s /etc/zing/ directory. To use any other file location, you must add -XX:ZingLicenseFile=<filename> to your Zing instance launch command. Licenses allow Zing instance launches up to the end of the day they are due to expire within the local timezone specified in the license file. To force Azul Prime (version 20.10 and newer) to verify the license, add the following arguments: -XX:+UseCommercialFeatures -XX:+ValidateLicenseKey. Transferring JDK Customizations If you have applied customizations to the existing non-Zing installation location, you might need to transfer those to Zing. Those customizations can be, for example, JAR files added to the directory $JAVA_HOME/jre/lib/ext or changes in the security settings below $JAVA_HOME/jre/lib/security. Zing offers the same directories to store custom JARs and security policies. Ensuring Sufficient Virtual Memory Areas Depending on the application activity and its Java object sizes, Zing requires a larger number of virtual memory areas (VMAs) than the Linux default of 65530. Most applications on Zing won’t need a change here, but to be on the safe side, set the upper limit to four times the system RAM size in MBytes. vm.max_map_count Linux system parameter defines this limit. To keep the configuration simple when managing multiple hosts, set it on all hosts to the same value as setting it too large doesn’t cause any harm. A value of 1,000,000 (one million) is recommended for systems with a RAM size of up to 256 GBytes. To set the recommended value, complete the following steps: Add the following line to the file /etc/sysctl.conf:  vm.max_map_count=1000000 To activate the setting without reboot, run:  sudo sysctl -p To check the setting on any system, type:  cat /proc/sys/vm/max_map_count"
}, {
  "objectID" : "d03f2314-34ab-4c0a-86ee-b468e2bb79ff",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK Installation Instructions",
  "section" : "Install of License File",
  "url" : "https://docs.azul.com/prime/installation-and-configuration",
  "link" : "https://docs.azul.com/prime/installation-and-configuration#install-of-license-file",
  "content" : "Install of License File Note Since Zing 20.10.0.0, a license file is no longer required to run commercial packages of Zing. If you are installing Zing 20.10.0.0 or later, it is not necessary to use a license file. Note that while our Stream builds are free for evaluation and development, our Stable builds do require a current subscription contract with Azul even though they do not require the use of a license file on the system. Copy the license file to your target host’s /etc/zing/ directory. To use any other file location, you must add -XX:ZingLicenseFile=<filename> to your Zing instance launch command. Licenses allow Zing instance launches up to the end of the day they are due to expire within the local timezone specified in the license file. To force Azul Prime (version 20.10 and newer) to verify the license, add the following arguments: -XX:+UseCommercialFeatures -XX:+ValidateLicenseKey."
}, {
  "objectID" : "09a31af8-5239-40a5-a21d-61a21288c866",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK Installation Instructions",
  "section" : "Transferring JDK Customizations",
  "url" : "https://docs.azul.com/prime/installation-and-configuration",
  "link" : "https://docs.azul.com/prime/installation-and-configuration#transferring-jdk-customizations",
  "content" : "Transferring JDK Customizations If you have applied customizations to the existing non-Zing installation location, you might need to transfer those to Zing. Those customizations can be, for example, JAR files added to the directory $JAVA_HOME/jre/lib/ext or changes in the security settings below $JAVA_HOME/jre/lib/security. Zing offers the same directories to store custom JARs and security policies."
}, {
  "objectID" : "44c0dc13-296c-4108-8432-822473fe9e1a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing Builds of OpenJDK Installation Instructions",
  "section" : "Ensuring Sufficient Virtual Memory Areas",
  "url" : "https://docs.azul.com/prime/installation-and-configuration",
  "link" : "https://docs.azul.com/prime/installation-and-configuration#_ensuring-sufficient-virtual-memory-areas",
  "content" : "Ensuring Sufficient Virtual Memory Areas Depending on the application activity and its Java object sizes, Zing requires a larger number of virtual memory areas (VMAs) than the Linux default of 65530. Most applications on Zing won’t need a change here, but to be on the safe side, set the upper limit to four times the system RAM size in MBytes. vm.max_map_count Linux system parameter defines this limit. To keep the configuration simple when managing multiple hosts, set it on all hosts to the same value as setting it too large doesn’t cause any harm. A value of 1,000,000 (one million) is recommended for systems with a RAM size of up to 256 GBytes. To set the recommended value, complete the following steps: Add the following line to the file /etc/sysctl.conf:  vm.max_map_count=1000000 To activate the setting without reboot, run:  sudo sysctl -p To check the setting on any system, type:  cat /proc/sys/vm/max_map_count"
}, {
  "objectID" : "a1db03c3-13ae-4384-bb95-3c857d426b27",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on APT Systems",
  "section" : "Installing a Stream Build via Linux Package",
  "url" : "https://docs.azul.com/prime/prime-quick-start-apt",
  "link" : "https://docs.azul.com/prime/prime-quick-start-apt#installing-a-stream-build-via-linux-package",
  "content" : "Installing a Stream Build via Linux Package Stream Builds are produced once a month, do not receive any security backports, and are free for development and evaluation. By downloading Stream Builds, you agree to the Azul Platform Prime Evaluation Agreement. For more information, see the Azul Platform Prime Roadmap. Import Azul’s public key: OS Command Debian  curl -s https://repos.azul.com/azul-repo.key | sudo gpg --dearmor -o /usr/share/keyrings/azul.gpg\necho \"deb [signed-by=/usr/share/keyrings/azul.gpg] https://repos.azul.com/zing/debian $(lsb_release -sc) main\" | sudo tee /etc/apt/sources.list.d/zing.list Ubuntu  curl -s https://repos.azul.com/azul-repo.key | sudo gpg --dearmor -o /usr/share/keyrings/azul.gpg\necho \"deb [signed-by=/usr/share/keyrings/azul.gpg] https://repos.azul.com/zing/ubuntu $(lsb_release -sc) main\" | sudo tee /etc/apt/sources.list.d/zing.list Update the information about available packages:  sudo apt update Run the following command to install Azul Platform Prime:  sudo apt install zing-jdk<version-number> Use the following strings to specify the JDK version number: JDK Version Version string JDK 8 x86 1.8.0 JDK 8 arm64 8.0.0 JDK 11 11.0.0 JDK 13 13.0.0 JDK 15 15.0.0 JDK 17 17.0.0 JDK 21 21.0.0"
}, {
  "objectID" : "0ea050ab-db6a-412a-bfbd-34382aabed15",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on APT Systems",
  "section" : "Installing a Downloaded Stable Build",
  "url" : "https://docs.azul.com/prime/prime-quick-start-apt",
  "link" : "https://docs.azul.com/prime/prime-quick-start-apt#installing-a-downloaded-stable-build",
  "content" : "Installing a Downloaded Stable Build Stable Builds require a license for use, contain only critical fix backports, and are produced on an ongoing basis. Download the build from the Azul Platform Prime Customer Downloads page. Import Azul’s public key:  curl -s https://repos.azul.com/azul-repo.key | sudo gpg --dearmor -o /usr/share/keyrings/azul.gpg\necho \"deb [signed-by=/usr/share/keyrings/azul.gpg] https://repos.azul.com/zing/ubuntu $(lsb_release -sc) main\" | sudo tee /etc/apt/sources.list.d/zing.list\nsudo apt update Run the following command:  sudo apt install ./<apt-installation-file> The <apt-installation-file> has the following form: zing<zulu_prime_version>-jdk<version>-<architecture>.deb For example: zing22.08.301.0-1-jdk17.0.5.0.101-linux_amd64.deb"
}, {
  "objectID" : "d764e152-c37c-4a54-9273-14119e7604b9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on APT Systems",
  "section" : "Installing a Downloaded Stream Build",
  "url" : "https://docs.azul.com/prime/prime-quick-start-apt",
  "link" : "https://docs.azul.com/prime/prime-quick-start-apt#installing-a-downloaded-stream-build",
  "content" : "Installing a Downloaded Stream Build Stream Builds are available for development and trial use and include the latest major features. Stream builds are released regularly on a monthly basis. Download the build from the Azul JDK Downloads page. Run the following command:  sudo apt install ./<apt-installation-file> The <apt-installation-file> has the following form: zing<zulu_prime_version>-jdk<version>-<architecture>.deb, For example: zing23.01.0.0-3-jdk17.0.6-linux_amd64.deb"
}, {
  "objectID" : "5055d87a-1e18-41db-821f-5f0f005eeda2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on APT Systems",
  "section" : "Running Azul Platform Prime",
  "url" : "https://docs.azul.com/prime/prime-quick-start-apt",
  "link" : "https://docs.azul.com/prime/prime-quick-start-apt#running-azul-platform-prime",
  "content" : "Running Azul Platform Prime Once you performed all installation steps, you can start running your Java applications with Azul Platform Prime as follows: Verify the Java version:  /opt/zing/zing-<jdk-version>/bin/java -version Sample output for Java 8:  java version \"1.8.0-zing_19.07.0.0\"\nZing Runtime Environment for Java Applications (build 1.8.0-zing_19.07.0.0-b3)\nZing 64-Bit Tiered VM (build 1.8.0-zing_19.07.0.0-b4-product-linux-X86_64, mixed mode) You may want to set the JAVA_HOME environment variable to point to the Azul Platform Prime installation directory, e.g. export JAVA_HOME=/opt/zing/zing-<jdk-version>."
}, {
  "objectID" : "5c16e84c-9077-4759-8d78-ff3141f16047",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on APT Systems",
  "section" : "What to do next",
  "url" : "https://docs.azul.com/prime/prime-quick-start-apt",
  "link" : "https://docs.azul.com/prime/prime-quick-start-apt#what-to-do-next",
  "content" : "What to do next Read more about: What To Expect When Evaluating Azul Platform Prime Performance Best Practice: Comparative Evaluation of JDK Setups"
}, {
  "objectID" : "9da8a6cf-071a-4924-aba4-b446a5a78581",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "Installing a Stream Build via Linux Package",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#installing-a-stream-build-via-linux-package",
  "content" : "Installing a Stream Build via Linux Package Stream Builds are produced once a month, do not receive any security backports, and are free for development and evaluation. By downloading Stream Builds, you agree to the Azul Platform Prime Evaluation Agreement. For more information, see the Azul Platform Prime Roadmap. The following examples contain the commands to install JDK 17 for each platform, see Version Mapping for other versions. Amazon Linux  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo curl -o /etc/yum.repos.d/zing.repo https://repos.azul.com/zing/amazonlinux/zing.repo\nsudo yum install zing-jdk<version-number> Oracle  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo curl -o /etc/yum.repos.d/zing.repo https://repos.azul.com/zing/oracle/zing.repo\nsudo yum install zing-jdk<version-number> CentOS 7 / RHEL  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo curl -o /etc/yum.repos.d/zing.repo https://repos.azul.com/zing/rhel/zing.repo\nsudo yum install zing-jdk<version-number> CentOS Stream  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo curl -o /etc/yum.repos.d/zing.repo https://repos.azul.com/zing/stream/zing.repo\nsudo yum install zing-jdk<version-number> SLES 12 x86_64  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo zypper addrepo https://repos.azul.com/zing/sles/12/x86_64 zing\nsudo zypper install zing-jdk<version-number>\n\n# For SLES 12 only, increase the limit for virtual memory usage\nsudo ulimit -v unlimited SLES 12 aarch64  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo zypper addrepo https://repos.azul.com/zing/sles/12/aarch64 zing\nsudo zypper install zing-jdk<version-number>\n\n# For SLES 12 only, increase the limit for virtual memory usage\nsudo ulimit -v unlimited Version mapping Use the following mappings to specify the JDK version: JDK Version Version string JDK 8 x86 1.8.0 JDK 8 arm64 8.0.0 JDK 11 11.0.0 JDK 13 13.0.0 JDK 15 15.0.0 JDK 17 17.0.0 JDK 21 21.0.0"
}, {
  "objectID" : "4601daf3-4e10-4262-9747-f0961bba595b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "Amazon Linux",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#amazon-linux",
  "content" : "Amazon Linux  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo curl -o /etc/yum.repos.d/zing.repo https://repos.azul.com/zing/amazonlinux/zing.repo\nsudo yum install zing-jdk<version-number>"
}, {
  "objectID" : "e03611a3-9756-4bda-94a6-1e48ffd4beb1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "Oracle",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#oracle",
  "content" : "Oracle  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo curl -o /etc/yum.repos.d/zing.repo https://repos.azul.com/zing/oracle/zing.repo\nsudo yum install zing-jdk<version-number>"
}, {
  "objectID" : "a2471475-f974-4ca1-b0cb-0c6bc6243207",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "CentOS 7 / RHEL",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#centos-7-rhel",
  "content" : "CentOS 7 / RHEL  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo curl -o /etc/yum.repos.d/zing.repo https://repos.azul.com/zing/rhel/zing.repo\nsudo yum install zing-jdk<version-number>"
}, {
  "objectID" : "bac37229-fd31-4e97-aad1-d43c3975599f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "CentOS Stream",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#centos-stream",
  "content" : "CentOS Stream  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo curl -o /etc/yum.repos.d/zing.repo https://repos.azul.com/zing/stream/zing.repo\nsudo yum install zing-jdk<version-number>"
}, {
  "objectID" : "ff00315e-8225-47f3-a966-f55bae5478f6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "SLES 12 x86_64",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#sles-12-x86_64",
  "content" : "SLES 12 x86_64  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo zypper addrepo https://repos.azul.com/zing/sles/12/x86_64 zing\nsudo zypper install zing-jdk<version-number>\n\n# For SLES 12 only, increase the limit for virtual memory usage\nsudo ulimit -v unlimited"
}, {
  "objectID" : "66a68d62-bfae-4c8f-b554-f2702f71f421",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "SLES 12 aarch64",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#sles-12-aarch64",
  "content" : "SLES 12 aarch64  sudo rpm --import https://repos.azul.com/azul-repo.key\nsudo zypper addrepo https://repos.azul.com/zing/sles/12/aarch64 zing\nsudo zypper install zing-jdk<version-number>\n\n# For SLES 12 only, increase the limit for virtual memory usage\nsudo ulimit -v unlimited"
}, {
  "objectID" : "ac2ac202-12d7-4d8d-a700-c19189e9ed56",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "Version mapping",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#version-mapping",
  "content" : "Version mapping Use the following mappings to specify the JDK version: JDK Version Version string JDK 8 x86 1.8.0 JDK 8 arm64 8.0.0 JDK 11 11.0.0 JDK 13 13.0.0 JDK 15 15.0.0 JDK 17 17.0.0 JDK 21 21.0.0"
}, {
  "objectID" : "2f81aad7-ff3d-4561-88c1-8b1d0c187dbf",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "Installing a Downloaded Stable Build",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#installing-a-downloaded-stable-build",
  "content" : "Installing a Downloaded Stable Build Stable Builds require a license for use, contain only critical fix backports, and are produced on an ongoing basis. Download the build from the Azul Platform Prime Customer Downloads page. Import Azul’s public key:  sudo rpm --import https://repos.azul.com/azul-repo.key Run the following command on the downloaded file.  sudo yum localinstall <yum-installation-file> For SLES 12, run this command:  sudo zypper install <yum-installation-file> The <yum-installation-file> name has the following format: zing<zulu_prime_version>-jdk<version>-<architecture>.rpm For example: zing22.08.301.0-1-jdk17.0.5.0.101-linux.x86_64.rpm"
}, {
  "objectID" : "5ccf48e5-8834-4b3e-b5b6-fd7a6232edb8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "Installing a Downloaded Stream Build",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#installing-a-downloaded-stream-build",
  "content" : "Installing a Downloaded Stream Build Stream Builds are available for development and trial use and include the latest major features. Stream builds are released regularly on a monthly basis. Download the build from the Azul JDK Downloads page. Run the following command on the downloaded file.  sudo yum localinstall <yum-installation-file> For SLES 12, run this command:  sudo zypper install <yum-installation-file> The <yum-installation-file> name has the following format: zing<zulu_prime_version>-jdk<version>-<architecture>.rpm For example: zing23.01.0.0-3-jdk17.0.6-linux.x86_64.rpm"
}, {
  "objectID" : "7ab92610-4267-4b10-8474-9dfa6fee3b03",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "Running Azul Platform Prime",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#running-azul-platform-prime",
  "content" : "Running Azul Platform Prime Once you’ve performed all installation steps, you can start running your Java applications with Azul Platform Prime as follows: Verify the Java version:  /opt/zing/zing-<jdk-version>/bin/java -version Sample output for Java 8:  java version \"1.8.0-zing_19.07.0.0\"\nZing Runtime Environment for Java Applications (build 1.8.0-zing_19.07.0.0-b3)\nZing 64-Bit Tiered VM (build 1.8.0-zing_19.07.0.0-b4-product-linux-X86_64, mixed mode) You may want to set the JAVA_HOME environment variable to point to the Azul Platform Prime installation directory, e.g. $ export JAVA_HOME=/opt/zing/zing-<jdk-version>."
}, {
  "objectID" : "5f08c9aa-d712-4ac0-94c2-f1d52d8c8cf5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime on YUM Systems",
  "section" : "What to do next",
  "url" : "https://docs.azul.com/prime/prime-quick-start-yum",
  "link" : "https://docs.azul.com/prime/prime-quick-start-yum#what-to-do-next",
  "content" : "What to do next Read more about: What To Expect When Evaluating Azul Platform Prime Performance Best Practice: Comparative Evaluation of JDK Setups"
}, {
  "objectID" : "f112eb0b-a7e2-4c05-b6c1-5df9760c6994",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime from a tar.gz Archive",
  "section" : "Downloading an Azul Platform Prime Stream Build",
  "url" : "https://docs.azul.com/prime/prime-quick-start-tar",
  "link" : "https://docs.azul.com/prime/prime-quick-start-tar#downloading-an-azul-platform-prime-stream-build",
  "content" : "Downloading an Azul Platform Prime Stream Build Stream Builds are produced once a month, do not receive any security backports, and are free for development and evaluation. By downloading Stream Builds, you agree to the Azul Platform Prime Evaluation Agreement. For more information, see the Azul Platform Prime Roadmap. Download the latest Stream Builds of Azul Platform Prime on our Azul Platform Prime downloads page."
}, {
  "objectID" : "d89dba2a-9748-4172-a757-aeb6c8d79955",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime from a tar.gz Archive",
  "section" : "Downloading an Azul Platform Prime Stable Build",
  "url" : "https://docs.azul.com/prime/prime-quick-start-tar",
  "link" : "https://docs.azul.com/prime/prime-quick-start-tar#downloading-an-azul-platform-prime-stable-build",
  "content" : "Downloading an Azul Platform Prime Stable Build Stable Builds require a license for use, contain only critical fix backports, and are produced on an ongoing basis. Download the build from the Azul Platform Prime Customer Downloads page."
}, {
  "objectID" : "5e8431f0-d5bd-4ce3-82f3-c027a27788ae",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime from a tar.gz Archive",
  "section" : "Uncompressing the Azul Platform Prime Archive",
  "url" : "https://docs.azul.com/prime/prime-quick-start-tar",
  "link" : "https://docs.azul.com/prime/prime-quick-start-tar#uncompressing-the-azul-platform-prime-archive",
  "content" : "Uncompressing the Azul Platform Prime Archive Uncompress the downloaded tar.gz archive on the host machine where the Java applications will be run:  tar xzvf zing<prime_version>-<jdk_version>.tar.gz Note The gzip and tar utilities are required to install the ZVM tar.gz archive on Linux host platforms. Verify that the Azul Zing Build of OpenJDK is successfully unpacked:  /<uncompressed_prime_archive_directory>/bin/java -version The output should look similar to the snippet below:  java version \"1.8.0-zing_21.06.0.0\"\nZing Runtime Environment for Java Applications (build 1.8.0-zing_21.06.0.0-b3)\nZing 64-Bit Tiered VM (build 1.8.0-zing_121.06.0.0-b4-product-linux-X86_64, mixed mode)"
}, {
  "objectID" : "87ddee02-3469-43b6-8b1f-b219aa1612ca",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime from a tar.gz Archive",
  "section" : "What to do next",
  "url" : "https://docs.azul.com/prime/prime-quick-start-tar",
  "link" : "https://docs.azul.com/prime/prime-quick-start-tar#what-to-do-next",
  "content" : "What to do next Read more about: What To Expect When Evaluating Azul Platform Prime Performance Best Practice: Comparative Evaluation of JDK Setups"
}, {
  "objectID" : "2f0893bb-4b15-4278-90d9-e136481075b7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime using Docker",
  "section" : "Using Docker Azul Zing Builds of OpenJDK",
  "url" : "https://docs.azul.com/prime/prime-quick-start-docker",
  "link" : "https://docs.azul.com/prime/prime-quick-start-docker#using-docker-azul-zing-builds-of-openjdk",
  "content" : "Using Docker Azul Zing Builds of OpenJDK Docker images of Azul Zing Builds of OpenJDK (Zing) are provided through Docker Hub. CentOS, Debian, and Ubuntu based official Docker images of Zing are available in the following repositories: Ubuntu: azul/prime CentOS: azul/prime-centos Debian: azul/prime-debian Usage The Azul Platform Prime repository supports numerous versions of OpenJDK-based Java SE JDKs. To run a container of your choice, use one of these example commands, depending on the required version:  docker run -it --rm azul/prime:17 java -version\n\ndocker run -it --rm azul/prime:15 java -version\n\ndocker run -it --rm azul/prime:13 java -version\n\ndocker run -it --rm azul/prime:11 java -version\n\ndocker run -it --rm azul/prime:8 java -version"
}, {
  "objectID" : "6a97b75d-78f5-49ef-a244-a9dfb841c340",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime using Docker",
  "section" : "Usage",
  "url" : "https://docs.azul.com/prime/prime-quick-start-docker",
  "link" : "https://docs.azul.com/prime/prime-quick-start-docker#usage",
  "content" : "Usage The Azul Platform Prime repository supports numerous versions of OpenJDK-based Java SE JDKs. To run a container of your choice, use one of these example commands, depending on the required version:  docker run -it --rm azul/prime:17 java -version\n\ndocker run -it --rm azul/prime:15 java -version\n\ndocker run -it --rm azul/prime:13 java -version\n\ndocker run -it --rm azul/prime:11 java -version\n\ndocker run -it --rm azul/prime:8 java -version"
}, {
  "objectID" : "0117053a-e976-4bd3-91a2-957f147427cc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime in a Kubernetes Cluster",
  "section" : "Creating a Pod with Containerized Azul Platform Prime",
  "url" : "https://docs.azul.com/prime/prime-quick-start-kubernetes",
  "link" : "https://docs.azul.com/prime/prime-quick-start-kubernetes#creating-a-pod-with-containerized-azul-platform-prime",
  "content" : "Creating a Pod with Containerized Azul Platform Prime Create a pod with Azul Platform Prime in a Docker container using the ConfigMap:  $ cat <<EOF > azul.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: azul-pod\nspec:\n  containers:\n  - name: azul-pod\n    image: azul/prime\n    envFrom:\n      - configMapRef:\n          name: azul-config\nEOF\n\n$ kubectl apply -f azul.yaml You are now ready to start running your Java applications using the containerized Azul Platform Prime deployed on a Kubernetes cluster."
}, {
  "objectID" : "b56388e4-0a14-43f9-ad1f-4c1766d1c287",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Get Started with Azul Platform Prime in a Kubernetes Cluster",
  "section" : "What to do next",
  "url" : "https://docs.azul.com/prime/prime-quick-start-kubernetes",
  "link" : "https://docs.azul.com/prime/prime-quick-start-kubernetes#what-to-do-next",
  "content" : "What to do next Read more about: What To Expect When Evaluating Azul Platform Prime Performance Best Practice: Comparative Evaluation of JDK Setups"
}, {
  "objectID" : "89890920-a6d9-430a-af3c-aca9c0d26d56",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Upgrading and Uninstalling Azul Zing Builds of OpenJDK",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Upgrade-Uninstall",
  "link" : "https://docs.azul.com/prime/Upgrade-Uninstall",
  "content" : "This section provides the steps to uninstall or upgrade Azul Platform Prime components. Tasks in this section apply to standard Azul Platform Prime and DKMS installations."
}, {
  "objectID" : "502d8011-cf4e-4c61-a282-7d8d22385bc8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Upgrading and Uninstalling Azul Zing Builds of OpenJDK",
  "section" : "Upgrading Azul Zing Builds of OpenJDK",
  "url" : "https://docs.azul.com/prime/Upgrade-Uninstall",
  "link" : "https://docs.azul.com/prime/Upgrade-Uninstall#upgrading-azul-zing-builds-of-openjdk",
  "content" : "Upgrading Azul Zing Builds of OpenJDK To upgrade an Azul Zing Build of OpenJDK (Zing): Login to your system with sudo privileges. Download the latest Zing software .rpm, .deb, or .tar.gz file. Ensure there are no running processes using Azul Platform Prime memory. All currently-running Zing instances must be terminated before attempting to upgrade. If this is not done, the upgrade and/or memory preallocation might fail or result in incorrect configuration. Identify the installed Zing packages. For RHEL or SLES:  rpm -qa|grep zing For Ubuntu:  dpkg -l|grep zing Sample response:  zing-jdk<version>-<zvm_version>.<platform> Install the downloaded Zing installation file. Use the appropriate operating system installation command: For Tar archive installation:  tar -C /<zing_java_directory>/zing -xzvf zing<zvm_version>-jdk<version>-<platform>.tar.gz For RHEL:  yum localinstall ./zing<zvm_version>-jdk<version>-<platform>.rpm For SLES:  zypper install ./zing<zvm_version>-jdk<version>-<platform>.rpm For Ubuntu:  dpkg -i ./zing<zvm_version>-jdk<version>_<platform>.deb"
}, {
  "objectID" : "43fec6c2-d809-4be4-9b00-1db0d6100044",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Upgrading and Uninstalling Azul Zing Builds of OpenJDK",
  "section" : "Uninstalling Azul Zing Builds of OpenJDK",
  "url" : "https://docs.azul.com/prime/Upgrade-Uninstall",
  "link" : "https://docs.azul.com/prime/Upgrade-Uninstall#uninstalling-azul-zing-builds-of-openjdk",
  "content" : "Uninstalling Azul Zing Builds of OpenJDK To uninstall an Azul Zing Build of OpenJDK (Zing), complete the following steps: Login to your system as a sudo user if Zing was installed using such standard Linux package mangers as rpm, dpkg, zypper, or yum. If Zing was installed by a user with access privileges other than a sudo user, login as the user with those privileges. Ensure there are no running processes using Zing memory. Identify the installed Zing packages. For RHEL or SLES:  rpm -qa|grep zing For Ubuntu:  dpkg -l|grep zing Sample response:  zing-jdk<version>-<zvm_version>.<platform> Run the appropriate remove or delete command: For Tar installations:  rm -rf <zing_java_directory> For RHEL:  sudo yum remove zing<zvm_version>-jdk<version>-<platform> For SLES:  sudo zypper remove zing<zvm_version>-jdk<version>-<platform> For Ubuntu:  sudo apt remove ./zing<zvm_version>-jdk<version>_<platform>"
}, {
  "objectID" : "d9e89f31-f184-44d3-ba0d-200699b0f48c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "What To Expect When Evaluating Azul Platform Prime Performance",
  "section" : "",
  "url" : "https://docs.azul.com/prime/what-to-expect",
  "link" : "https://docs.azul.com/prime/what-to-expect",
  "content" : "If you’re evaluating Azul Platform Prime, then you likely already have a Java application in production and are interested in comparing how that application runs on Azul Platform Prime instead of your current Java runtime. This page lists what to expect when running your program on Azul Platform Prime and comparing it to other OpenJDK-based runtimes. As a refresher, Azul Platform Prime contains several key elements: Azul Zing Builds of OpenJDK (Zing)- a highly optimized build of the OpenJDK runtime that replaces key pieces of JVM infrastructure like the garbage collector and the JIT compiler with optimized Azul versions of these components. Azul Zing System Tools (ZST) - a separate and optional component for older Linux kernels to coordinate memory usage. Azul Mission Control and other diagnostic tools."
}, {
  "objectID" : "83a0b7af-8d34-49f5-aeb7-479ae51b4855",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "What To Expect When Evaluating Azul Platform Prime Performance",
  "section" : "It’s the Same",
  "url" : "https://docs.azul.com/prime/what-to-expect",
  "link" : "https://docs.azul.com/prime/what-to-expect#its-the-same",
  "content" : "It’s the Same You do not need to recompile your code or make any changes to your current deployment mechanism. Zing is based on OpenJDK and is TCK-tested and Java SE compliant. As such, there are no functional differences between running your code on Azul Zing and any other OpenJDK runtime. To switch to Zing, simply install it and change your JAVA_HOME. You don’t need to change any of your Java startup flags or your OS environment."
}, {
  "objectID" : "7323f877-4e8e-481a-a805-e27a07228fc8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "What To Expect When Evaluating Azul Platform Prime Performance",
  "section" : "But It’s Different",
  "url" : "https://docs.azul.com/prime/what-to-expect",
  "link" : "https://docs.azul.com/prime/what-to-expect#but-its-different",
  "content" : "But It’s Different Zing replaces several key components of OpenJDK with enhanced versions. This can lead to profound performance improvements in JVM behavior, such as eventual code speed and response latency. It also leads to differences in things like memory usage, warm-up, and configuration flags. Here are some of the main areas where Zing differs. Garbage Collection One key benefit of Azul Platform Prime is the default garbage collector, called C4. Traditional Java garbage collectors like Parallel GC and G1 require stop-the-world pauses where the entire application pauses while garbage collection occurs. The higher your heap and the more objects that need collecting, the longer these stop-the-world pauses take. This leads to higher latencies and inconsistent transaction performance, making it especially difficult to meet SLAs. The Zing C4 Garbage Collector uses a 4 stage concurrent execution mechanism that eliminates almost all stop-the-world pauses. This lets your application continue executing while garbage collection is ongoing. When testing your application under real-world conditions, you will see reduced latencies across all percentiles and especially elimination of large outliers in latency. Note The benefits of C4 will only be visible if you test real applications under real-world conditions. Running a microbenchmark for ten minutes is not likely to generate any garbage collection activity, and even running your full app in an isolated test environment with a synthetic workload often produces limited garbage collector activity. To see the true value of C4, it’s always best to perform a test in your production environment with actual real-world traffic. Memory Usage Because larger Java heaps create longer stop-the-world garbage collection pauses, many people keep the Java heap low and scale horizontally. Zing minimizes stop-the-world garbage collection pauses, so you can use larger heaps without worrying about incurring high response latency during garbage collection operations. Where it makes sense, try raising your heap size within the limits of the physically available memory. Note that paging should always be avoided. Note The internals of JVM memory management for Azul Platform Prime differ from other JVMs. This results in different heap and native memory usage. Unlike OpenJDK, Zing doesn’t have metaspace where it stores some objects. Zing stores everything as ordinary Java objects in the Java heap. This practice simplifies heap management, since storing additional objects in the metaspace can lead to PermGen OOM errors. If you are comparing performance between OpenJDK and Zing, be aware that Zing is doing more in its Java heap than OpenJDK. Zing has no Compressed OOPs, which means all pointers are 64bit pointers. On memory-constrained environments, this can cause differences in application performance. Generally, pauseless garbage collectors like Zing’s C4 and OpenJDK’s ZGC/Shenandoah consume more heap than OpenJDK (when using traditional stop-the-world garbage collectors). Monitoring solutions that rely on JMX Beans can report memory usage for pauseless garbage collectors differently, and often incorrectly. See JMX Beans section below. Optimized Code Speed and Carrying Capacity Zing replaces the Hotspot JIT compiler in OpenJDK with the Falcon JIT compiler. Falcon produces faster end-state code than Hotspot. You should see increased throughput and carrying capacity for each of your VMs, which has the side effect of being able to serve the same amount of traffic from a smaller number of VMs. Warm-up Time With all modern JMVs, when you start an application, there is a \"warm-up\" period where the application runs slower while the code is optimized and all of the post-initialization tasks of your application complete. You can see the effect of this by, for example, looking at the throughput of your tests and seeing when the throughput stabilizes. When starting the application, throughput often has a curve that looks like this while warming up. Zing’s Falcon JIT compiler has different optimization levels that produce different speeds of the resulting code. The higher optimization levels that produce the fastest code come with higher upfront costs, which can take the form of longer warm-up periods with higher CPU loads. By default, Azul Platform Prime optimizes for speed, meaning we apply use a very high tier of optimizations by default. In cases where this causes too long or expensive warm-up period, you have many different options for optimizing the warm-up period. See Analyzing and Tuning Warm-up for more information. When running your performance tests, make sure that you have given the test enough time to warm up before beginning your measurements. Remember, short-running microbenchmarks may not show the real-world benefits of Zing. If you are impressed by Prime’s fully optimized performance but warmup times are a concern, see ReadyNow, Azul Platform Prime’s answer for fast starts. Note JIT optimization is often only one part of what is commonly seen as \"warm-up\". Other parts of warm-up include initializing resources needed by the application, rehydrating data from caches, etc. If you are experiencing long warm-up times, make sure to analyze everything that is happening during warm-up. JMX Beans Prior to JDK 17, standard Java MX Beans did not properly track heap usage by JVMs with concurrent garbage collectors. Standard JMX Beans before JDK 17 could not tell the difference between a GC pause and a GC concurrent collection cycle, so they marked everything as pauses. Monitoring tools that rely on standard JMX Beans often report longer GC pause times for Zing’s C4 garbage collector than for Stop The World garbage collectors like G1 and CMS. In general, you shouldn’t measure GC cycles with standard OpenJDK JMX metrics. Other frameworks or deployment models may make decisions based on heap usage as reported by standard JMX Beans. This can cause changes in behavior when you run these apps on Azul Platform Prime. This is because they look at overall heap usage, which see-saws. You should care more about the live set than the total heap use. Azul Platform Prime publishes its own set of JMX Beans that you can integrate with, in order to get consistent and reliable results. You can enable ZingMXBeans using the -XX:+UseZingMXBeans flag. See Monitoring the Zing JVM Using JMX and Azul Platform Prime MXBeans for more details. Different Java Command-Line Options Zing supports the majority of OpenJDK Java command-line options. The options that Zing does not support, it ignores. Your application should always run even without having to change command-line flags. Zing also has its own set of Java command-line options. Some of these, like the options for controlling compiler threads, are replacements for OpenJDK command-line options. To mimic the same behavior as in OpenJDK, you may have to update some command-line options for your application. In many cases, tuning your JVM with command-line options is much simpler with Zing. For example, you can more or less delete all the command-line options around tuning Parallel GC. For most parts, C4 only needs to be given a heap size. We love to talk about Java We’re here to answer any questions about Azul performance, warmup, pricing, or anything Java. Want to better understand what you can expect from Prime? Let us guide you! Contact Us"
}, {
  "objectID" : "44a1c791-6239-4b98-a07e-3284ba07e6b0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "What To Expect When Evaluating Azul Platform Prime Performance",
  "section" : "Garbage Collection",
  "url" : "https://docs.azul.com/prime/what-to-expect",
  "link" : "https://docs.azul.com/prime/what-to-expect#garbage-collection",
  "content" : "Garbage Collection One key benefit of Azul Platform Prime is the default garbage collector, called C4. Traditional Java garbage collectors like Parallel GC and G1 require stop-the-world pauses where the entire application pauses while garbage collection occurs. The higher your heap and the more objects that need collecting, the longer these stop-the-world pauses take. This leads to higher latencies and inconsistent transaction performance, making it especially difficult to meet SLAs. The Zing C4 Garbage Collector uses a 4 stage concurrent execution mechanism that eliminates almost all stop-the-world pauses. This lets your application continue executing while garbage collection is ongoing. When testing your application under real-world conditions, you will see reduced latencies across all percentiles and especially elimination of large outliers in latency. Note The benefits of C4 will only be visible if you test real applications under real-world conditions. Running a microbenchmark for ten minutes is not likely to generate any garbage collection activity, and even running your full app in an isolated test environment with a synthetic workload often produces limited garbage collector activity. To see the true value of C4, it’s always best to perform a test in your production environment with actual real-world traffic."
}, {
  "objectID" : "f2e4b82d-1c69-49a3-a06d-144db473cea8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "What To Expect When Evaluating Azul Platform Prime Performance",
  "section" : "Memory Usage",
  "url" : "https://docs.azul.com/prime/what-to-expect",
  "link" : "https://docs.azul.com/prime/what-to-expect#memory-usage",
  "content" : "Memory Usage Because larger Java heaps create longer stop-the-world garbage collection pauses, many people keep the Java heap low and scale horizontally. Zing minimizes stop-the-world garbage collection pauses, so you can use larger heaps without worrying about incurring high response latency during garbage collection operations. Where it makes sense, try raising your heap size within the limits of the physically available memory. Note that paging should always be avoided. Note The internals of JVM memory management for Azul Platform Prime differ from other JVMs. This results in different heap and native memory usage. Unlike OpenJDK, Zing doesn’t have metaspace where it stores some objects. Zing stores everything as ordinary Java objects in the Java heap. This practice simplifies heap management, since storing additional objects in the metaspace can lead to PermGen OOM errors. If you are comparing performance between OpenJDK and Zing, be aware that Zing is doing more in its Java heap than OpenJDK. Zing has no Compressed OOPs, which means all pointers are 64bit pointers. On memory-constrained environments, this can cause differences in application performance. Generally, pauseless garbage collectors like Zing’s C4 and OpenJDK’s ZGC/Shenandoah consume more heap than OpenJDK (when using traditional stop-the-world garbage collectors). Monitoring solutions that rely on JMX Beans can report memory usage for pauseless garbage collectors differently, and often incorrectly. See JMX Beans section below."
}, {
  "objectID" : "669f9f12-e1a5-4319-98f9-2e27470077b6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "What To Expect When Evaluating Azul Platform Prime Performance",
  "section" : "Optimized Code Speed and Carrying Capacity",
  "url" : "https://docs.azul.com/prime/what-to-expect",
  "link" : "https://docs.azul.com/prime/what-to-expect#optimized-code-speed-and-carrying-capacity",
  "content" : "Optimized Code Speed and Carrying Capacity Zing replaces the Hotspot JIT compiler in OpenJDK with the Falcon JIT compiler. Falcon produces faster end-state code than Hotspot. You should see increased throughput and carrying capacity for each of your VMs, which has the side effect of being able to serve the same amount of traffic from a smaller number of VMs."
}, {
  "objectID" : "ff145031-29a4-430d-a27c-5c69712022a4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "What To Expect When Evaluating Azul Platform Prime Performance",
  "section" : "Warm-up Time",
  "url" : "https://docs.azul.com/prime/what-to-expect",
  "link" : "https://docs.azul.com/prime/what-to-expect#warm-up-time",
  "content" : "Warm-up Time With all modern JMVs, when you start an application, there is a \"warm-up\" period where the application runs slower while the code is optimized and all of the post-initialization tasks of your application complete. You can see the effect of this by, for example, looking at the throughput of your tests and seeing when the throughput stabilizes. When starting the application, throughput often has a curve that looks like this while warming up. Zing’s Falcon JIT compiler has different optimization levels that produce different speeds of the resulting code. The higher optimization levels that produce the fastest code come with higher upfront costs, which can take the form of longer warm-up periods with higher CPU loads. By default, Azul Platform Prime optimizes for speed, meaning we apply use a very high tier of optimizations by default. In cases where this causes too long or expensive warm-up period, you have many different options for optimizing the warm-up period. See Analyzing and Tuning Warm-up for more information. When running your performance tests, make sure that you have given the test enough time to warm up before beginning your measurements. Remember, short-running microbenchmarks may not show the real-world benefits of Zing. If you are impressed by Prime’s fully optimized performance but warmup times are a concern, see ReadyNow, Azul Platform Prime’s answer for fast starts. Note JIT optimization is often only one part of what is commonly seen as \"warm-up\". Other parts of warm-up include initializing resources needed by the application, rehydrating data from caches, etc. If you are experiencing long warm-up times, make sure to analyze everything that is happening during warm-up."
}, {
  "objectID" : "01e43424-dfea-4b14-a0d5-8e48a131470f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "What To Expect When Evaluating Azul Platform Prime Performance",
  "section" : "JMX Beans",
  "url" : "https://docs.azul.com/prime/what-to-expect",
  "link" : "https://docs.azul.com/prime/what-to-expect#jmx-beans",
  "content" : "JMX Beans Prior to JDK 17, standard Java MX Beans did not properly track heap usage by JVMs with concurrent garbage collectors. Standard JMX Beans before JDK 17 could not tell the difference between a GC pause and a GC concurrent collection cycle, so they marked everything as pauses. Monitoring tools that rely on standard JMX Beans often report longer GC pause times for Zing’s C4 garbage collector than for Stop The World garbage collectors like G1 and CMS. In general, you shouldn’t measure GC cycles with standard OpenJDK JMX metrics. Other frameworks or deployment models may make decisions based on heap usage as reported by standard JMX Beans. This can cause changes in behavior when you run these apps on Azul Platform Prime. This is because they look at overall heap usage, which see-saws. You should care more about the live set than the total heap use. Azul Platform Prime publishes its own set of JMX Beans that you can integrate with, in order to get consistent and reliable results. You can enable ZingMXBeans using the -XX:+UseZingMXBeans flag. See Monitoring the Zing JVM Using JMX and Azul Platform Prime MXBeans for more details."
}, {
  "objectID" : "d1ae960e-1459-4790-97a4-97d39e6a5b3f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "What To Expect When Evaluating Azul Platform Prime Performance",
  "section" : "Different Java Command-Line Options",
  "url" : "https://docs.azul.com/prime/what-to-expect",
  "link" : "https://docs.azul.com/prime/what-to-expect#different-java-command-line-options",
  "content" : "Different Java Command-Line Options Zing supports the majority of OpenJDK Java command-line options. The options that Zing does not support, it ignores. Your application should always run even without having to change command-line flags. Zing also has its own set of Java command-line options. Some of these, like the options for controlling compiler threads, are replacements for OpenJDK command-line options. To mimic the same behavior as in OpenJDK, you may have to update some command-line options for your application. In many cases, tuning your JVM with command-line options is much simpler with Zing. For example, you can more or less delete all the command-line options around tuning Parallel GC. For most parts, C4 only needs to be given a heap size. We love to talk about Java We’re here to answer any questions about Azul performance, warmup, pricing, or anything Java. Want to better understand what you can expect from Prime? Let us guide you! Contact Us"
}, {
  "objectID" : "4429d287-73e3-4c72-a5a6-70357d25787f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "content" : "In today’s Java ecosystem, you have a wide range of possible runtimes. Choosing between them can have a huge impact on the capabilities or performance of your environments and applications. This document provides you with the best practices for comparative evaluations between JDK setups, whether that be different configurations in a single JDK or comparing Azul Zing Builds of OpenJDK (Zing) to OpenJDK itself. By following this guide, you will be able to establish credible evidence that Zing improves some aspects of application behavior to a degree that justifies using it within your organization."
}, {
  "objectID" : "5819bd1f-7b41-4ad4-b504-f78282ae7e98",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Comparative Evaluation",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#comparative-evaluation",
  "content" : "Comparative Evaluation What To Do When comparing Zing to different JDKs, the goal of your evaluation should be to test of your application under real-world conditions. We strongly recommend production testing to be 100% sure of the differences that can be achieved. Of course, this is not possible at all times, in which case lab testing can be used as long as the test results are providing the right insights to predict the impact when deploying Zing in production. Also make sure you are running a long enough test that both systems are completely warmed up. Zing can be slower or faster than OpenJDK to warm up your code to full speed, depending on the options used. Measure at what point your JVM has reached optimal speed and only start measuring your business metrics after that point, using the same (maximum) warmup period for all JDK configurations. What Not To Do When doing a comparative evaluation, you want to make sure you are measuring one change at a time. You should therefore not combine testing different JDKs with additional tuning of application, reconfiguration of the environment, or modifications to the code or the choice of third-party frameworks or libraries in the application. Just run your application exactly as you do in your default environment and run Azul with the minimal recommended tunings to get a baseline. You can then tune Zing to achieve the best performance. Also, do not use a ‘open-the-flood-gates’ approach where millions of transactions/messages are simulated and crunched in one go, solely as a short-duration test aiming to reproduce a production result with a lower load over a longer time. Although this is a possible production scenario, it is very rare. In most cases, those millions of transactions/messages would be processed over some time (7, 12, 24, or more hours). The general misconception is that if the application is tested for an ‘open-the-flood-gates’ scenario, it should automatically cover all the scenarios, including the production scenario, but this is untrue. In general, all software components such as Linux, Java, Messaging platform, etc. work very differently in a typical production environment versus completely saturated conditions, and the behavior of saturated environments is not a good indicator of performance under normal loads."
}, {
  "objectID" : "e9ea9436-07f5-487e-934d-edc0ec7fbb0b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "What To Do",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#what-to-do",
  "content" : "What To Do When comparing Zing to different JDKs, the goal of your evaluation should be to test of your application under real-world conditions. We strongly recommend production testing to be 100% sure of the differences that can be achieved. Of course, this is not possible at all times, in which case lab testing can be used as long as the test results are providing the right insights to predict the impact when deploying Zing in production. Also make sure you are running a long enough test that both systems are completely warmed up. Zing can be slower or faster than OpenJDK to warm up your code to full speed, depending on the options used. Measure at what point your JVM has reached optimal speed and only start measuring your business metrics after that point, using the same (maximum) warmup period for all JDK configurations."
}, {
  "objectID" : "38544b9d-0d26-4541-a2df-cd653ba82eff",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "What Not To Do",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#what-not-to-do",
  "content" : "What Not To Do When doing a comparative evaluation, you want to make sure you are measuring one change at a time. You should therefore not combine testing different JDKs with additional tuning of application, reconfiguration of the environment, or modifications to the code or the choice of third-party frameworks or libraries in the application. Just run your application exactly as you do in your default environment and run Azul with the minimal recommended tunings to get a baseline. You can then tune Zing to achieve the best performance. Also, do not use a ‘open-the-flood-gates’ approach where millions of transactions/messages are simulated and crunched in one go, solely as a short-duration test aiming to reproduce a production result with a lower load over a longer time. Although this is a possible production scenario, it is very rare. In most cases, those millions of transactions/messages would be processed over some time (7, 12, 24, or more hours). The general misconception is that if the application is tested for an ‘open-the-flood-gates’ scenario, it should automatically cover all the scenarios, including the production scenario, but this is untrue. In general, all software components such as Linux, Java, Messaging platform, etc. work very differently in a typical production environment versus completely saturated conditions, and the behavior of saturated environments is not a good indicator of performance under normal loads."
}, {
  "objectID" : "fbe98d30-c312-4d69-8168-df14a3138104",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Defining the Test Goals",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#defining-the-test-goals",
  "content" : "Defining the Test Goals Each application services its unique purpose and related goals and requirements. As such, different test goals can be defined. Define the Maximum Reachable Capacity When running large Java workloads that take multiple JVMs, your primary concerns usually are : What are the success criteria for a JVM that is functioning, according to your expectations? Usually, this is a business metric such as \"99.9% of requests complete within 100ms\" or \"only 0.1% of requests result in failures\". What are the parameters that indicate a JVM is over-utilized or under-utilized, and you need to scale up or down? Often, these are technical metrics such as \"the number of requests per second\" or \"average CPU utilization\". How much load can I put through each JVM instance before I need to scale out another instance? How many instances in total do I need to serve my expected total load? Your goal in testing Zing in these cases is usually to: Increase the amount of load a single JVM can handle while still meeting your success criteria. Decrease the total amount of compute-power you need to handle a given Java load. Azul has developed the TUSSLE (Throughput Under Service Level Expectation) testing framework to measure carrying capacity versus load. For more information about this tool, check the GitHub project. To see it in action, look at our benchmarking of Apache Cassandra carrying capacity. Minimize the Response Time Often your primary concern is how low and consistent you can get your response times. Financial trading systems are one typical example of this use case. Very fast responses with low latency and fewer outliers are one of the main benefits of Zing. When measuring this use case, make sure you measure latency under real-world conditions and not in saturated environments. The above-mentioned TUSSLE framework can help here too. Reach the Shortest Warm-Up Time In some use cases, you require an application to be warmed up and running at optimum speed as fast possible once it starts accepting traffic. For example, you may need to reach full speed from the 10th transaction, instead of the 10,000th. In default mode, Zing actually takes a longer time to warm up than OpenJDK. But when you use a tool like ReadyNow, you can in many cases reach optimum speed much quicker than with OpenJDK. How warm-up times can be measured, configured, and compared is described in detail on Analyzing and Tuning Warm-up."
}, {
  "objectID" : "e3f9743f-ee61-4d03-ae68-c68ed6f81563",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Define the Maximum Reachable Capacity",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#define-the-maximum-reachable-capacity",
  "content" : "Define the Maximum Reachable Capacity When running large Java workloads that take multiple JVMs, your primary concerns usually are : What are the success criteria for a JVM that is functioning, according to your expectations? Usually, this is a business metric such as \"99.9% of requests complete within 100ms\" or \"only 0.1% of requests result in failures\". What are the parameters that indicate a JVM is over-utilized or under-utilized, and you need to scale up or down? Often, these are technical metrics such as \"the number of requests per second\" or \"average CPU utilization\". How much load can I put through each JVM instance before I need to scale out another instance? How many instances in total do I need to serve my expected total load? Your goal in testing Zing in these cases is usually to: Increase the amount of load a single JVM can handle while still meeting your success criteria. Decrease the total amount of compute-power you need to handle a given Java load. Azul has developed the TUSSLE (Throughput Under Service Level Expectation) testing framework to measure carrying capacity versus load. For more information about this tool, check the GitHub project. To see it in action, look at our benchmarking of Apache Cassandra carrying capacity."
}, {
  "objectID" : "9d76642a-7d7e-4db8-9dbf-18a75a1cd51d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Minimize the Response Time",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#minimize-the-response-time",
  "content" : "Minimize the Response Time Often your primary concern is how low and consistent you can get your response times. Financial trading systems are one typical example of this use case. Very fast responses with low latency and fewer outliers are one of the main benefits of Zing. When measuring this use case, make sure you measure latency under real-world conditions and not in saturated environments. The above-mentioned TUSSLE framework can help here too."
}, {
  "objectID" : "17be5e2c-f03e-402f-ada9-ce80ef472edc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Reach the Shortest Warm-Up Time",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#reach-the-shortest-warm-up-time",
  "content" : "Reach the Shortest Warm-Up Time In some use cases, you require an application to be warmed up and running at optimum speed as fast possible once it starts accepting traffic. For example, you may need to reach full speed from the 10th transaction, instead of the 10,000th. In default mode, Zing actually takes a longer time to warm up than OpenJDK. But when you use a tool like ReadyNow, you can in many cases reach optimum speed much quicker than with OpenJDK. How warm-up times can be measured, configured, and compared is described in detail on Analyzing and Tuning Warm-up."
}, {
  "objectID" : "a78a47d2-0750-4894-b85d-354d501e6a43",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Defining the Test Approach",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#defining-the-test-approach",
  "content" : "Defining the Test Approach When evaluating your application performance on Zing, or any Java runtime, it is important to adhere to the following guidelines. Important Test Strategy Considerations It is important to establish a testing approach by asking the following questions: Is there a production-like environment for testing? The closer your test workload is to production, the less likely you are going to be surprised when you promote the application to production. The best place to test the performance characteristics and value of a JVM is in the production environment. As soon as you are comfortable/able, run tests in production. When not possible to test in production, make sure you can simulate the conditions as closely as possible compared to your production environment. The goal is to be confident you will achieve the same results once you deploy Zing in your production environment. Can the incoming load/request be spread like production? Production has the actual environment, workload, and monitoring you wish to evaluate against. Can the load be ingested over many hours? Long runs with real (production) workloads are more likely to capture the pain you are trying to address. Can the raw latency information be extracted from the individual transactions for the entire duration or specific duration (eg: for 3 hours after 45 min post-start-up)? Are clear and measurable success criteria defined? Focus on what matters to your business, be it response times, SLAs, timeouts,… This is where you want improvements. Enumerate the metrics (measurable properties) used to evaluate test outcomes. Can the logs (GC, profile, etc.) be extracted post-run? When evaluating ReadyNow: Can the application be restarted at certain intervals without losing the profile file from the previous run? Test Conditions To Avoid Test Type Why Avoid? Short runs Short runs are not realistic in most cases. In most cases, you want to evaluate the steady state of the application. And in most cases, you want to understand the performance profile over longer periods to capture those occasional but very bad events (such as STW GC pauses). Microbenchmarks There is a time for microbenchmarks, but not when evaluating the Java runtime for your critical application. Synthetic workloads Workloads that do not simulate production risk running tests that do not embody the problems faced in production. An application can do well on tests, only to fail once promoted to production. Insufficient cores Starving the JVM of CPU time will result in suboptimal results. Prime’s use of CPUs is not identical to OpenJDK. Ensure minimum requirements are met. Insufficient memory Prime can work with the same amount of memory as OpenJDK. However, Prime can use more memory without the usual drawbacks. Feel free to assign more memory to Prime, if available. More memory can allow for better performance. Poor metrics For instance, averages and no SLAs are considered as poor metrics. Looking at the average is rarely useful in the context of performance testing. Focus on where the pain is."
}, {
  "objectID" : "0920c7fc-79f2-483a-a4eb-a7a344aa7b9b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Important Test Strategy Considerations",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#important-test-strategy-considerations",
  "content" : "Important Test Strategy Considerations It is important to establish a testing approach by asking the following questions: Is there a production-like environment for testing? The closer your test workload is to production, the less likely you are going to be surprised when you promote the application to production. The best place to test the performance characteristics and value of a JVM is in the production environment. As soon as you are comfortable/able, run tests in production. When not possible to test in production, make sure you can simulate the conditions as closely as possible compared to your production environment. The goal is to be confident you will achieve the same results once you deploy Zing in your production environment. Can the incoming load/request be spread like production? Production has the actual environment, workload, and monitoring you wish to evaluate against. Can the load be ingested over many hours? Long runs with real (production) workloads are more likely to capture the pain you are trying to address. Can the raw latency information be extracted from the individual transactions for the entire duration or specific duration (eg: for 3 hours after 45 min post-start-up)? Are clear and measurable success criteria defined? Focus on what matters to your business, be it response times, SLAs, timeouts,… This is where you want improvements. Enumerate the metrics (measurable properties) used to evaluate test outcomes. Can the logs (GC, profile, etc.) be extracted post-run? When evaluating ReadyNow: Can the application be restarted at certain intervals without losing the profile file from the previous run?"
}, {
  "objectID" : "76deab79-6bbc-488c-9b1f-1016ae910300",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Test Conditions To Avoid",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#test-conditions-to-avoid",
  "content" : "Test Conditions To Avoid Test Type Why Avoid? Short runs Short runs are not realistic in most cases. In most cases, you want to evaluate the steady state of the application. And in most cases, you want to understand the performance profile over longer periods to capture those occasional but very bad events (such as STW GC pauses). Microbenchmarks There is a time for microbenchmarks, but not when evaluating the Java runtime for your critical application. Synthetic workloads Workloads that do not simulate production risk running tests that do not embody the problems faced in production. An application can do well on tests, only to fail once promoted to production. Insufficient cores Starving the JVM of CPU time will result in suboptimal results. Prime’s use of CPUs is not identical to OpenJDK. Ensure minimum requirements are met. Insufficient memory Prime can work with the same amount of memory as OpenJDK. However, Prime can use more memory without the usual drawbacks. Feel free to assign more memory to Prime, if available. More memory can allow for better performance. Poor metrics For instance, averages and no SLAs are considered as poor metrics. Looking at the average is rarely useful in the context of performance testing. Focus on where the pain is."
}, {
  "objectID" : "f8f62655-4032-4b06-9b6e-2da56e59af64",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Step-by-Step Guide",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#step-by-step-guide",
  "content" : "Step-by-Step Guide Comparing your Current JDK with Zing Create a baseline test with your current JDK. Run long tests. Tests must run long enough for the results to be meaningful. Run tests for at least an hour, if not longer. Micro-benchmarks are not valuable for proving value. Run realistic workloads. Real load is mandatory to show real value. Meaningful performance comparisons require a production-like load. Capture business metrics. Focus on the business metrics you care about, e.g., response times, throughput, and timeouts. Capture diagnostics. JVM metrics can help correlate internal behavior with application behavior. e.g., -XX:+PrintGCApplicationStoppedTime to both current and Zing JVM command lines allows for comparison of JVM pause times. For pilots and evaluation cases, we recommend setting the Xms value equal to Xmx. Configure the logging settings to be able to analyze the results with Azul GC Log Analyzer. GC File Size: 100MB. GC File Rotation: 30 files. -Xlog:gc,safepoint:gc.log::filesize=100m::filecount=30 Run the same tests on Zing. Do not change anything except JAVA_HOME. Use the same environment, configuration and load. Review the results. If performance meets the success criteria, great! Let us know, and we can guide you in the following steps. Otherwise, review the logs and tune accordingly. Let us know, we can help! Additional Linux Settings Based on your results, further tuning can be done on your Linux environment to stretch the performance boost provided by Zing. Azul Zing System Tools (ZST) enables Zing to support larger heap sizes, and to provide better memory management on older operating system versions that don’t have the required functionality already built in. If ZST cannot be used, a good alternative is Transparent Huge Pages (THP) on RHEL/CentOS 8, Ubuntu 18, Amazon Linux since 2018, Debian 10, SLES 12 SP4 and their later versions. These operating systems support THP with shared memory and feature improved implementation of THP that reduces the risk of system pauses. Set vm.swappiness=0. More info can be found at SWAP Settings. Ensure the ulimit is unlimited for virtual memory, resident memory, and core file size. At the command line, type ulimit -v unlimited -m unlimited -c unlimited. To make this change permanent after reboots, add this change in /etc/security/limits.conf or set it in /etc/profile or ~/.profile. We love to talk about Java We’re here to answer any questions about Azul performance, warmup, pricing, or anything Java. Want to compare how Prime can improve performance of your environment? Let us help! Contact Us"
}, {
  "objectID" : "6c11f8c9-7244-4b25-a651-eda21231a769",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Comparing your Current JDK with Zing",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#comparing-your-current-jdk-with-zing",
  "content" : "Comparing your Current JDK with Zing Create a baseline test with your current JDK. Run long tests. Tests must run long enough for the results to be meaningful. Run tests for at least an hour, if not longer. Micro-benchmarks are not valuable for proving value. Run realistic workloads. Real load is mandatory to show real value. Meaningful performance comparisons require a production-like load. Capture business metrics. Focus on the business metrics you care about, e.g., response times, throughput, and timeouts. Capture diagnostics. JVM metrics can help correlate internal behavior with application behavior. e.g., -XX:+PrintGCApplicationStoppedTime to both current and Zing JVM command lines allows for comparison of JVM pause times. For pilots and evaluation cases, we recommend setting the Xms value equal to Xmx. Configure the logging settings to be able to analyze the results with Azul GC Log Analyzer. GC File Size: 100MB. GC File Rotation: 30 files. -Xlog:gc,safepoint:gc.log::filesize=100m::filecount=30 Run the same tests on Zing. Do not change anything except JAVA_HOME. Use the same environment, configuration and load. Review the results. If performance meets the success criteria, great! Let us know, and we can guide you in the following steps. Otherwise, review the logs and tune accordingly. Let us know, we can help!"
}, {
  "objectID" : "16aeba6b-87c7-41ff-83c9-f4157bd624d0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Best Practice: Comparative Evaluation of JDK Setups",
  "section" : "Additional Linux Settings",
  "url" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups",
  "link" : "https://docs.azul.com/prime/comparative-evaluation-of-jdk-setups#additional-linux-settings",
  "content" : "Additional Linux Settings Based on your results, further tuning can be done on your Linux environment to stretch the performance boost provided by Zing. Azul Zing System Tools (ZST) enables Zing to support larger heap sizes, and to provide better memory management on older operating system versions that don’t have the required functionality already built in. If ZST cannot be used, a good alternative is Transparent Huge Pages (THP) on RHEL/CentOS 8, Ubuntu 18, Amazon Linux since 2018, Debian 10, SLES 12 SP4 and their later versions. These operating systems support THP with shared memory and feature improved implementation of THP that reduces the risk of system pauses. Set vm.swappiness=0. More info can be found at SWAP Settings. Ensure the ulimit is unlimited for virtual memory, resident memory, and core file size. At the command line, type ulimit -v unlimited -m unlimited -c unlimited. To make this change permanent after reboots, add this change in /etc/security/limits.conf or set it in /etc/profile or ~/.profile. We love to talk about Java We’re here to answer any questions about Azul performance, warmup, pricing, or anything Java. Want to compare how Prime can improve performance of your environment? Let us help! Contact Us"
}, {
  "objectID" : "f8e5b744-6d14-495b-8b8b-37d776174afa",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Up Your Development Environment",
  "section" : "",
  "url" : "https://docs.azul.com/prime/setting-up-environment",
  "link" : "https://docs.azul.com/prime/setting-up-environment",
  "content" : "Azul Platform Prime runs natively on the Linux operating system. If you are using a supported Linux distribution, your setup is trivial: install the latest Azul Zing Build of OpenJDK (Zing), integrate with your IDE or editor, and setup is complete. However, Prime is not natively available for Windows or macOS, so additional tools are required in these environments. This article describes how developers can set up an environment to use Azul Core and Azul Platform Prime to develop applications on Windows or macOS. Using this article as a guide, you can use a non-Linux system to develop and test your application before deploying on a production Linux host or container. The described environment is not the only option but is offered as an effective and productive solution. This solution is described for macOS but can be adapted for Windows as well."
}, {
  "objectID" : "5c694c72-d3bf-468f-859a-48189b0adffb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Up Your Development Environment",
  "section" : "Installing the Development JDK",
  "url" : "https://docs.azul.com/prime/setting-up-environment",
  "link" : "https://docs.azul.com/prime/setting-up-environment#installing-the-development-jdk",
  "content" : "Installing the Development JDK The easiest way to get started is to use Azul Platform Core as your primary development JDK. Download the latest Zing for your development platform. Zing is available for many platforms, including both macOS and Windows. Zulu builds are drop-in replacements of Oracles Java SE and can be installed and configured in the same way. Use the download filters to choose a specific JDK and OS. The image below shows the download screen and some of the filters available. Once you’ve found an OpenJDK version, download an installation package. For macOS, you can choose either a DMG, tar.gz, or zip package format. The easiest package for macOS may be the DMG format. Select the DMG package. Once you’ve downloaded it, install it by double-clicking the DMG file. For the command line and other tools, you will also want to put the JDK installation binaries on your shell search path. Add the following to your shell startup file. On most macOS systems, this will be the ~/.zshrc or similar file. Your JAVA_HOME and PATH environment should look similar to this:  export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH After installation, you should be able to run the OpenJDK tools from the command line:  % java -version\nopenjdk version \"17.0.1\" 2021-10-19 LTS\nOpenJDK Runtime Environment Zulu17.30+15-CA (build 17.0.1+12-LTS)\nOpenJDK 64-Bit Server VM Zulu17.30+15-CA (build 17.0.1+12-LTS, mixed mode, sharing)\n\n% javac --version\njavac 17.0.1"
}, {
  "objectID" : "304190e9-7401-4b68-960f-d376f66ee3c0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Up Your Development Environment",
  "section" : "Installing a Docker Image for Azul Platform Prime",
  "url" : "https://docs.azul.com/prime/setting-up-environment",
  "link" : "https://docs.azul.com/prime/setting-up-environment#installing-a-docker-image-for-azul-platform-prime",
  "content" : "Installing a Docker Image for Azul Platform Prime We will use Docker Desktop for macOS. Use Docker’s Getting Started guide to download and install Docker for your host. Azul Platform Prime’s Java compiler is not different from the Azul Core compiler. Therefore, you will see no benefit from compiling with the Prime compiler. Using the Core compiler will be sufficient. However, Azul Platform Prime runtime does offers significant runtime enhancements that are not available in Core. For this reason, you may want to test your software on the Prime runtime instead of the Core runtime. This provides the added security and assurance of knowing that you have tested and even executed your application on your local system with the same runtime used in production. In a macOS or Windows development environment, you can run Prime within a Docker container to perform local unit tests and even integration tests. You can also connect to a running, local Docker container for debugging purposes. Retrieve a Prime Docker image from Docker Hub. From your shell, download an image for your preferred Linux distribution. In this instance, we will choose the azul/prime-ubuntu image.  docker pull azul/prime-ubuntu Use the following command to see your pulled images from Azul:  % docker images --filter=reference='azul/*:latest'\nREPOSITORY          TAG       IMAGE ID       CREATED        SIZE\nazul/prime-centos   latest    c6e583988f53   45 hours ago   846MB\nazul/prime-ubuntu   latest    c8f64364f376   45 hours ago   597MB\nazul/prime          latest    c8f64364f376   45 hours ago   597MB Test your image now before going further. The Prime image for Ubuntu should be executable with the following command:  % docker run --rm azul/prime-ubuntu java -version The above command should produce something like the following in your terminal:  java version \"17.0.5\" 2022-10-27 LTS\nJava Runtime Environment Zing22.10.0.0+3 (build 17.0.5+8-LTS)\nZing 64-Bit Tiered VM Zing22.10.0.0+3 (build 17.0.5-zing_22.10.0.0-b3-product-linux-aarch64, mixed mode)"
}, {
  "objectID" : "8bcd9b1a-2f1f-483c-af18-6591d69ca168",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Up Your Development Environment",
  "section" : "Integrating OpenJDK with IntelliJ IDEA",
  "url" : "https://docs.azul.com/prime/setting-up-environment",
  "link" : "https://docs.azul.com/prime/setting-up-environment#integrating-openjdk-with-intellij-idea",
  "content" : "Integrating OpenJDK with IntelliJ IDEA You can integrate the Zulu JDK with most source code editors, Integrated Development Environments (IDE), Maven, Gradle, ANT and other common development tools. In this article, we’ve used the IntelliJ IDEA Community Edition. Use IntelliJ IDEA’s installation guide to install the IDE. To add Zulu OpenJDK 17 to your project, perform the following steps: Open IntelliJ IDEA Community Edition. Select File > Project Structure for New Projects > Platform Settings >SDKs. Press Command-N or the + symbol to add a new SDK. Since you’ve already installed Azul Zulu, IntelliJ IDEA may have detected it on your command path. If it has, select a 'Detected JDK'. Otherwise, select 'Add JDK…' and choose the folder containing your installed JDK. On macOS, the folder most likely begins with /Library/Java/JavaVirtualMachines/. Select Apply, then select OK from the same window. Zulu OpenJDK is now integrated with IntelliJ IDEA and is available to use in your Java projects."
}, {
  "objectID" : "afeee00b-f6a6-4575-ad2e-531ec89841b9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Up Your Development Environment",
  "section" : "Integrating Docker",
  "url" : "https://docs.azul.com/prime/setting-up-environment",
  "link" : "https://docs.azul.com/prime/setting-up-environment#integrating-docker",
  "content" : "Integrating Docker IntelliJ IDEA has a plugin for Docker support, which makes Docker easier to use from with its IDE. From within IntelliJ IDEA, choose Preferences→Plugins. From there, select the Marketplace tab. Type \"Docker\" into the search bar. Select the Docker plugin provided by IntelliJ IDEA and select the Install button. For more detailed installation help, follow IntelliJ IDEA’s Integration Guide for Docker."
}, {
  "objectID" : "e67270ce-31b7-4ffb-9c45-b8b52a18b709",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Up Your Development Environment",
  "section" : "Running the Application",
  "url" : "https://docs.azul.com/prime/setting-up-environment",
  "link" : "https://docs.azul.com/prime/setting-up-environment#running-the-application",
  "content" : "Running the Application Once you’ve integrated the Docker tools, you are ready to set up your application. We have chosen the Spring Boot Pet Clinic application to demonstrate full integration with our development toolchain. Use the following on your command line to download the Pet Clinic source code:  git clone https://github.com/dockersamples/spring-petclinic-docker.git This version of Pet Clinic has a runnable Dockerfile in the root directory. From within IntelliJ IDEA, simply select Open on the downloaded project directory. IntelliJ IDEA will recognize the maven project. Select Run > Edit Configurations. Select the + symbol to add a new Dockerfile run configuration. Choose the Dockerfile option for a new run configuration. Name the configuration \"Pet Clinic\". Select the Dockerfile file in the root of the application to build. Use pet-clinic as the \"Container name\", so we can easily identify this application in the list of running Docker applications. Because the running Docker container will use port 8080, you must also export this port. Select Modify→ Bind Ports to map port 8080 on the host to port 8080 within the container. Build the project before starting the Docker, by adding a \"Run Maven Goal\" in the \"Before lauch setting\", with the command line package. Finally, select Apply and then OK to create the run configuration. Our Dockerfile is quite simple. We simply use the azul/prime-ubuntu image, copy the jar, and run the application into the updated image:  FROM azul/prime-ubuntu\n\nWORKDIR /app\nCOPY target/spring-petclinic-2.7.0-SNAPSHOT.jar petclinic.jar\nCMD [\"java\", \"-jar\", \"petclinic.jar\"] Note depending on the sources of the Petclinic example you downloaded, you may need to modify the filename of target/spring-petclinic-2.7.0-SNAPSHOT.jar. You can test that the run configuration works by selecting Run > Run 'Pet Clinic` from the IntelliJ IDEA menu. After giving the container and application a few seconds to initialize, you can access the demonstration application from a browser at localhost:8080. With the docker ps command you can check the status of the Docker application.  docker ps\n\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                    NAMES\nee15e325a503   cda90d73e71e   \"java -jar petclinic…\"   5 seconds ago   Up 4 seconds   0.0.0.0:8080->8080/tcp   pet-clinic You can validate the used Java version in the Docker image by executing a command inside the Docker with the interactive -it option:  docker exec -it pet-clinic java -version\n\njava version \"17.0.5\" 2022-10-27 LTS\nJava Runtime Environment Zing22.10.0.0+3 (build 17.0.5+8-LTS)\nZing 64-Bit Tiered VM Zing22.10.0.0+3 (build 17.0.5-zing_22.10.0.0-b3-product-linux-aarch64, mixed mode) Debugging the Application within the Docker Container In addition to running your application in a Docker image, you will be able to debug the container as well. To do this, you will need to add a remote debugging configuration to the IDE. Select Run > Edit Configurations. Click the + symbol. Select Remote JVM Debug to add a debug configuration. Give the configuration a name, Debug Spring Pet Clinic. Also, we need to add a Before launch step. Add a new task to launch Docker before debugging. Add the following custom command to the Before launch step. This command starts the Docker container with options to enable remote debugging on port 5005 and exposes that port on the host.  java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -jar petclinic.jar The Before launch step is shown below in IntelliJ IDEA: Click OK to close the Docker configuration dialog box. Finally, select Apply and OK to close the new debug configuration. To begin a debug session, select Run→Debug 'Debug Spring Pet Clinic' from the IntelliJ IDEA menu. This begins a remote JVM debug session after launching the container image we’ve defined earlier. You can now set breakpoints in your application code as needed. Your application is running with Azul Platform Prime’s optimized Java runtime within a debuggable Docker image. Summary Azul Platform Prime is available in a Dockerized container image that can be integrated into your local development environment. Even if you use macOS or Windows as your host development platform, the Docker image allows you to run your application using the same Azul Platform Prime runtime. Resources Find additional resources and tools here: Azul Platform Prime Docker image Azul Platform Core, Zulu Builds of OpenJDK IntelliJ IDEA Community Edition Sample code for this article, Spring Boot Pet Clinic"
}, {
  "objectID" : "07b9b761-0cfd-493a-bdaa-2ec01f5b5755",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Up Your Development Environment",
  "section" : "Debugging the Application within the Docker Container",
  "url" : "https://docs.azul.com/prime/setting-up-environment",
  "link" : "https://docs.azul.com/prime/setting-up-environment#debugging-the-application-within-the-docker-container",
  "content" : "Debugging the Application within the Docker Container In addition to running your application in a Docker image, you will be able to debug the container as well. To do this, you will need to add a remote debugging configuration to the IDE. Select Run > Edit Configurations. Click the + symbol. Select Remote JVM Debug to add a debug configuration. Give the configuration a name, Debug Spring Pet Clinic. Also, we need to add a Before launch step. Add a new task to launch Docker before debugging. Add the following custom command to the Before launch step. This command starts the Docker container with options to enable remote debugging on port 5005 and exposes that port on the host.  java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -jar petclinic.jar The Before launch step is shown below in IntelliJ IDEA: Click OK to close the Docker configuration dialog box. Finally, select Apply and OK to close the new debug configuration. To begin a debug session, select Run→Debug 'Debug Spring Pet Clinic' from the IntelliJ IDEA menu. This begins a remote JVM debug session after launching the container image we’ve defined earlier. You can now set breakpoints in your application code as needed. Your application is running with Azul Platform Prime’s optimized Java runtime within a debuggable Docker image."
}, {
  "objectID" : "f8411876-cc34-470c-a401-64a7933e3990",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Up Your Development Environment",
  "section" : "Summary",
  "url" : "https://docs.azul.com/prime/setting-up-environment",
  "link" : "https://docs.azul.com/prime/setting-up-environment#summary",
  "content" : "Summary Azul Platform Prime is available in a Dockerized container image that can be integrated into your local development environment. Even if you use macOS or Windows as your host development platform, the Docker image allows you to run your application using the same Azul Platform Prime runtime."
}, {
  "objectID" : "1a5c9ab9-70c5-43cc-a3cb-b13a626cafdb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Up Your Development Environment",
  "section" : "Resources",
  "url" : "https://docs.azul.com/prime/setting-up-environment",
  "link" : "https://docs.azul.com/prime/setting-up-environment#resources",
  "content" : "Resources Find additional resources and tools here: Azul Platform Prime Docker image Azul Platform Core, Zulu Builds of OpenJDK IntelliJ IDEA Community Edition Sample code for this article, Spring Boot Pet Clinic"
}, {
  "objectID" : "548b9759-8693-41ed-b015-f398d39f77a0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Running a Java Application",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Run-a-Java-Application",
  "link" : "https://docs.azul.com/prime/Run-a-Java-Application",
  "content" : "With Azul Platform Prime, you can start Java applications the same way as with any other JVM:  java -jar application.jar or java -cp <directory> <main-class>"
}, {
  "objectID" : "f35b2339-48ea-43f4-8b77-8e0160dd01dd",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the Falcon Compiler",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Falcon-Compiler",
  "link" : "https://docs.azul.com/prime/Falcon-Compiler",
  "content" : "The Falcon compiler is the default optimizing JIT (Just-In-Time) compiler in the Azul Zing Builds of OpenJDK (Zing)."
}, {
  "objectID" : "1cfd40bc-4bfa-42a6-9a93-772e9e96bc07",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the Falcon Compiler",
  "section" : "Falcon Optimization Notes",
  "url" : "https://docs.azul.com/prime/Falcon-Compiler",
  "link" : "https://docs.azul.com/prime/Falcon-Compiler#falcon-optimization-notes",
  "content" : "Falcon Optimization Notes The main focus of the Falcon compiler is generating high performance code. This may result in longer compile times because additional CPU time is required for higher levels of optimization. Longer Falcon compile times can increase the application startup and warm-up times when compared to the startup and warm-up times when running Zing using the C2 compiler. Falcon fully supports Azul ReadyNow technology, which helps improve consistency of application performance during warmup. While future versions of Zing will likely include automatic ongoing eviction of contents in the Falcon cache, the current Zing version does not, and as of version 18.01.0.0, the Falcon cache is not automatically cleared or evicted. The cache will accumulate contents up to FalconMaxCacheSize. Once it reaches that size, newly encountered compilations will no longer be added to the cache. The cache can be reset at any time (including while Zing is running) by destroying the contents of the cache with, for example, rm -r .zing-falcon-cache."
}, {
  "objectID" : "9706a6cf-76ec-4bf0-b8be-238b8efb3281",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the Falcon Compiler",
  "section" : "History and Alternatives",
  "url" : "https://docs.azul.com/prime/Falcon-Compiler",
  "link" : "https://docs.azul.com/prime/Falcon-Compiler#history-and-alternatives",
  "content" : "History and Alternatives The Falcon compiler first became available as a feature in Azul Platform Prime 16.12.0.0. Falcon became the default Tier 2 optimizing compiler in Azul Platform Prime 17.03.0.0. If, for some reason, you need to switch to the non-default Tier 2 C2 compiler in Azul Platform Prime 17.03.0.0 - 20.03.1.0, use the -XX:+UseC2 option. For example,  $JAVA_HOME/bin/java -XX:+UseC2 –cp . myprog Starting with Azul Platform Prime 20.04.0.0, the -XX:+UseC2 option can use one of two separate implementations of C2 JIT compilation: A traditional SeaOfNodesC2 mode. A C2 implementation that has been part of Azul Platform Prime since 2010. A new KestrelC2 mode. A newer C2 implementation introduced to Azul Platform Prime in 2020. It is based on a lightweight use of the LLVM backend, and typically produces faster code than SeaOfNodesC2 while keeping compilation effort at similar levels. Both KestrelC2 and SeaOfNodesC2 typically exhibit significantly lower compilation-time CPU consumption than Falcon. Note that while C2 is entirely supported, active development has mostly stopped. As such, switching to C2 should be seen as a workaround until a Falcon issue can be resolved, and you are encouraged to retry Falcon after every major upgrade."
}, {
  "objectID" : "b16e01e1-9674-4f1d-a6c2-7c98c3eb2de1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the Falcon Compiler",
  "section" : "Cloud Native Compiler",
  "url" : "https://docs.azul.com/prime/Falcon-Compiler",
  "link" : "https://docs.azul.com/prime/Falcon-Compiler#cloud-native-compiler",
  "content" : "Cloud Native Compiler Azul’s Cloud Native Compiler can further improve the performance of the Falcon compiler by removing JIT compilation from your JVM and running them on a dedicate server. By offloading JIT compilation to the server, you get faster warm-up times with lower CPU consumption on your client JVMs. See the Cloud Native Compiler documentation for more information."
}, {
  "objectID" : "41f4e79a-03d9-4b45-8233-49cbbb58571b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options",
  "content" : "Java command-line options that control the interaction between Azul Zing Builds of OpenJDK (Zing) and Azul Zing System Tools (ZST) begin with the -XX: prefix. These options summarized in the following table. Zing command-line options are case-sensitive."
}, {
  "objectID" : "03f02cdb-52f5-4bd1-8134-7ca080a49212",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Zing Command-Line Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#zing-command-line-options",
  "content" : "Zing Command-Line Options Command Line Option Description Default -Xmx<size>[m|M|g|G] Specifies the maximum size of the Java heap. The Examples below both specify a 10 GB heap: -Xmx10240M -Xmx10G Minimum heap size is as follows: Minimum heap size: 512 MB Maximum heap size without ZST: 2500 GB (2.5 TB) Maximum heap size with ZST: 20000 GB (20 TB) The default heap size is 1 GB, except in the following situations: Container environments or under cgroups: here it matches OpenJDK and is 25% of the cgroup or container limit. The upper limit of the default value is 32 GB. With enabled heap elasticity, available since version 21.05.0.0, see Recommended Heap Size for details. Same as OpenJDK: 25% of the RAM size or cgroup/container limit, with a maximum value of 32 GB. -Xms<size>[m|M|g|G] Specifies the minimum size of the Java heap that is committed at the start of the Java command. During uptime, the Garbage Collector uses this minimum value as target heap utilization to minimize the memory footprint. For application environments with the primary goal of reducing latency and obtaining the highest throughput performance, setting -Xms to the value of -Xmx is recommended to avoid CPU intensive memory optimization. The default value depends on the system RAM and ranges from 512 MB to 2 GB. When ZST is installed, this flag is ignored and the initial heap size is always set to the -Xmx value, except when heap elasticity is enabled. Heap elasticity is only available since 21.05.0.0. See Recommended Heap Size for details. 1.5625% of the RAM size or cgroup/container limit, with a minimum value of 512 MB and a maximum value of 2 GB. -XX:MaxHeapSize=<size>[k|K|m|M|g|G] Can be used instead of -Xmx<size>, see above. -XX:InitialHeapSize=<size>[k|K|m|M|g|G] Can be used instead of -Xms<size>, see above. -XX:JavaMemMax=<size>[k|K|m|M|g|G] Specifies the maximum amount of memory that can be allocated to the Zing process (the Java heap). Units can be specified in kilobytes (K or k), megabytes (M or m), or gigabytes (G or g). For example: -XX:JavaMemMax=2g -XX:JavaMemMax=128M -XX:JavaMemMax=128m If this option is not specified the maximum size to which Java heap can grow is calculated internally by the JVM based on the size of the Java system memory. Contact Azul customer support for more information about this option. You might need this option when multiple JVMs are run on the same host and frequent usage of contingency or pause prevention memory has been observed. Value of -Xmx plus available Contingency Memory -XX:InitialRAMPercentage=<value> This is an alternative to -Xms and defines the initial heap size as percentage of the RAM of the machine, container or cgroup. With JDK 8, a decimal number is required as value, like 5.0. On JDK 11 and later integer numbers are also accepted. This parameter is only used when Heap Elasticity is enabled. 1.5 -XX:MaxRAMPercentage=<value> This is an alternative to -Xmx and defines the maximum heap size as percentage of the RAM of the machine, container or cgroup. With JDK 8, a decimal number is required as value, like 75.0. On JDK 11 and later integer numbers are also accepted. The default value is 25.0, but the default is capped to a maximum of 32 GB. 25 -XX:[+/-]AutoTuneResourceDefaultsBasedOnXmx Allows Zing to start with Xmx128M or Xmx256M by reducing default values for some parameters such as ReservedCodeCacheSize and GC thread count. The flag is automatically set to true for java -version, -help, etc. true -XX:[+/-]UseZST Allows Zing to start with or without the Azul Zing System Tools (ZST) component. false -XX:NonZSTModePreferenceLevel=<value> Sets the preference selection for launching Zing with ZST. The selection choices are as follows: 0 - Never select the non-ZST mode. Zing will error out if ZST is not installed, configured, or enabled. 1 - Select the non-ZST mode only if ZST is not installed properly. Note, if ZST is installed but misconfigured in this mode, Zing will error out. 2 - Select the non-ZST mode if ZST is not installed, configured, or enabled. Note, when enabled, -XX:+UseZST overrides the -XX:NonZSTModePreferenceLevel command-line option with its value. 1 -XX:SelfDiagnosticRunPath=<directory> and -XX:SelfDiagnosticRunLevel=<value> Since Azul Prime 22.02, you can enable multiple logs by using a master command line flag. This flag acts as an alias for a number of flags often used for logging, see \"Master Monitoring Flag\" for more details. Level=2 -XX[+/-]UseTrueObjectsForUnsafe Forces unsafe objects to be returned as their original class form, e.g. klassOop, instead of a Java class. true Master Monitoring Flag The master monitoring flag can be used in two ways: Simple usage: add the target directory to the command line, and default level (= 2) will be used.  -XX:SelfDiagnosticRunPath=<directory> Advanced usage: both directory and level are defined.  -XX:SelfDiagnosticRunPath=<directory> -XX:SelfDiagnosticRunLevel=3 Diagnostic levels There are three diagnostics levels. The 1st is the lowest with the smallest overhead; while the 3rd is the highest with the biggest overhead. These levels are additive, which means e.g. Level 2 equals to Level 1 flags + Level 2 flags, with possible overriding of some flags. SelfDiagnosticRunLevel = 1  -XX:ProfileLogOut=<directory>/profileLogOut<timestamp>.profile\n-Xlog:gc,safepoint:<directory>/gc-log<timestamp>.log::filecount=5,filesize=50M\n-XX:SafepointWaitTimeProfilerLog=<directory>/safepoint-profile<timestamp>.log\n-XX:SafepointProfilerThresholdMS=5\n-XX:+PrintCompilation\n-XX:+TraceDeoptimization\n-XX:-DisplayVMOutput\n-XX:LogFile=<directory>/hotspot<timestamp>.log\n-XX:+LogVMOutput SelfDiagnosticRunLevel = 2  -XX:+FlightRecorder\n-XX:StartFlightRecording=filename=<directory>/jfr<timestamp>.jfr\n-Xlog:gc*,safepoint:<directory>/gc-log-<timestamp>.log::filecount=5,filesize=50M // OVERRIDDEN SelfDiagnosticRunLevel = 3  -XX:FalconIRDumpRoot=<directory>\n-XX:FalconDumpIRToDiskOf=*\n-XX:+PrintInlining\n-Xlog:gc*,safepoint:<directory>/gc-log-<timestamp>.log::filecount=0  // OVERRIDDEN - ATTENTION: no limit to file size Explanation of logging options -XX:ProfileLogOut Writes a ReadyNow profile. -Xlog:gc,safepoint Write the Azul Prime GC log including safepoints. The GC log can be analysed using the GCLogAnalyzer tool found in <PRIME>/etc/GCLogAnalyzer2.jar` With default settings (level 1 and 2) the log file size will be limited. -XX:SafepointWaitTimeProfilerLog Logs details on safepoint which take longer than normal the threshold is 5ms. Under normal circumstances Safepoints should take less than 2ms and in a well configured system <500us. -XX:SafepointProfilerThresholdMS=5 -XX:+PrintCompilation Create a log of JIT compiler activity. -XX:+TraceDeoptimization Out of scope - please ask your Azul contact. -XX:-DisplayVMOutput -XX:+LogVMOutput -XX:LogFile=<directory>/hotspot<timestamp>.log Logs the compilation logs and other details to file. -XX:+FlightRecorder Enable Java Flight recorder logging with default settings. -XX:StartFlightRecording=filename=<directory>/jfr<timestamp>.jfr Java Flight Recorder logs can be opened with Azul Mission Control, a free tool for basic Java performance analysis. -XX:FalconIRDumpRoot Log the IR output of the Falcon JIT compiler. The Falcon JIT in Azul Prime is based on the LLVM compiler project. LLVM uses an IR (Intermediate representation), a pseudo assembler, before compiling to binary. The IR is human-readable and can be analysed by our engineering team to gain insight into the optimizations made (or not made) by the JIT compiler. -XX:FalconDumpIRToDiskOf=* Log ALL classes. -XX:+PrintInlining Log extra detail for inlined methods. Correctly Stopping Azul Prime While Logging Please stop Prime gracefully (i.e., do not perform a hard kill -9 <pid>), to flush JFR (and other) buffers to a file. Otherwise, your JFR log will be empty (file size equals zero)."
}, {
  "objectID" : "bc4be2cd-f8e0-455f-b6ca-802afa78ab73",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Master Monitoring Flag",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#master-monitoring-flag",
  "content" : "Master Monitoring Flag The master monitoring flag can be used in two ways: Simple usage: add the target directory to the command line, and default level (= 2) will be used.  -XX:SelfDiagnosticRunPath=<directory> Advanced usage: both directory and level are defined.  -XX:SelfDiagnosticRunPath=<directory> -XX:SelfDiagnosticRunLevel=3 Diagnostic levels There are three diagnostics levels. The 1st is the lowest with the smallest overhead; while the 3rd is the highest with the biggest overhead. These levels are additive, which means e.g. Level 2 equals to Level 1 flags + Level 2 flags, with possible overriding of some flags. SelfDiagnosticRunLevel = 1  -XX:ProfileLogOut=<directory>/profileLogOut<timestamp>.profile\n-Xlog:gc,safepoint:<directory>/gc-log<timestamp>.log::filecount=5,filesize=50M\n-XX:SafepointWaitTimeProfilerLog=<directory>/safepoint-profile<timestamp>.log\n-XX:SafepointProfilerThresholdMS=5\n-XX:+PrintCompilation\n-XX:+TraceDeoptimization\n-XX:-DisplayVMOutput\n-XX:LogFile=<directory>/hotspot<timestamp>.log\n-XX:+LogVMOutput SelfDiagnosticRunLevel = 2  -XX:+FlightRecorder\n-XX:StartFlightRecording=filename=<directory>/jfr<timestamp>.jfr\n-Xlog:gc*,safepoint:<directory>/gc-log-<timestamp>.log::filecount=5,filesize=50M // OVERRIDDEN SelfDiagnosticRunLevel = 3  -XX:FalconIRDumpRoot=<directory>\n-XX:FalconDumpIRToDiskOf=*\n-XX:+PrintInlining\n-Xlog:gc*,safepoint:<directory>/gc-log-<timestamp>.log::filecount=0  // OVERRIDDEN - ATTENTION: no limit to file size Explanation of logging options -XX:ProfileLogOut Writes a ReadyNow profile. -Xlog:gc,safepoint Write the Azul Prime GC log including safepoints. The GC log can be analysed using the GCLogAnalyzer tool found in <PRIME>/etc/GCLogAnalyzer2.jar` With default settings (level 1 and 2) the log file size will be limited. -XX:SafepointWaitTimeProfilerLog Logs details on safepoint which take longer than normal the threshold is 5ms. Under normal circumstances Safepoints should take less than 2ms and in a well configured system <500us. -XX:SafepointProfilerThresholdMS=5 -XX:+PrintCompilation Create a log of JIT compiler activity. -XX:+TraceDeoptimization Out of scope - please ask your Azul contact. -XX:-DisplayVMOutput -XX:+LogVMOutput -XX:LogFile=<directory>/hotspot<timestamp>.log Logs the compilation logs and other details to file. -XX:+FlightRecorder Enable Java Flight recorder logging with default settings. -XX:StartFlightRecording=filename=<directory>/jfr<timestamp>.jfr Java Flight Recorder logs can be opened with Azul Mission Control, a free tool for basic Java performance analysis. -XX:FalconIRDumpRoot Log the IR output of the Falcon JIT compiler. The Falcon JIT in Azul Prime is based on the LLVM compiler project. LLVM uses an IR (Intermediate representation), a pseudo assembler, before compiling to binary. The IR is human-readable and can be analysed by our engineering team to gain insight into the optimizations made (or not made) by the JIT compiler. -XX:FalconDumpIRToDiskOf=* Log ALL classes. -XX:+PrintInlining Log extra detail for inlined methods. Correctly Stopping Azul Prime While Logging Please stop Prime gracefully (i.e., do not perform a hard kill -9 <pid>), to flush JFR (and other) buffers to a file. Otherwise, your JFR log will be empty (file size equals zero)."
}, {
  "objectID" : "16b82d99-451a-4c9d-9846-0a298ad1a486",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Diagnostic levels",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#master-monitoring-flag-diagnostic-levels",
  "content" : "Diagnostic levels There are three diagnostics levels. The 1st is the lowest with the smallest overhead; while the 3rd is the highest with the biggest overhead. These levels are additive, which means e.g. Level 2 equals to Level 1 flags + Level 2 flags, with possible overriding of some flags. SelfDiagnosticRunLevel = 1  -XX:ProfileLogOut=<directory>/profileLogOut<timestamp>.profile\n-Xlog:gc,safepoint:<directory>/gc-log<timestamp>.log::filecount=5,filesize=50M\n-XX:SafepointWaitTimeProfilerLog=<directory>/safepoint-profile<timestamp>.log\n-XX:SafepointProfilerThresholdMS=5\n-XX:+PrintCompilation\n-XX:+TraceDeoptimization\n-XX:-DisplayVMOutput\n-XX:LogFile=<directory>/hotspot<timestamp>.log\n-XX:+LogVMOutput SelfDiagnosticRunLevel = 2  -XX:+FlightRecorder\n-XX:StartFlightRecording=filename=<directory>/jfr<timestamp>.jfr\n-Xlog:gc*,safepoint:<directory>/gc-log-<timestamp>.log::filecount=5,filesize=50M // OVERRIDDEN SelfDiagnosticRunLevel = 3  -XX:FalconIRDumpRoot=<directory>\n-XX:FalconDumpIRToDiskOf=*\n-XX:+PrintInlining\n-Xlog:gc*,safepoint:<directory>/gc-log-<timestamp>.log::filecount=0  // OVERRIDDEN - ATTENTION: no limit to file size"
}, {
  "objectID" : "5a0c874b-7455-4aaf-8713-6803aa46924f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Explanation of logging options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#explanation-of-logging-options",
  "content" : "Explanation of logging options -XX:ProfileLogOut Writes a ReadyNow profile. -Xlog:gc,safepoint Write the Azul Prime GC log including safepoints. The GC log can be analysed using the GCLogAnalyzer tool found in <PRIME>/etc/GCLogAnalyzer2.jar` With default settings (level 1 and 2) the log file size will be limited. -XX:SafepointWaitTimeProfilerLog Logs details on safepoint which take longer than normal the threshold is 5ms. Under normal circumstances Safepoints should take less than 2ms and in a well configured system <500us. -XX:SafepointProfilerThresholdMS=5 -XX:+PrintCompilation Create a log of JIT compiler activity. -XX:+TraceDeoptimization Out of scope - please ask your Azul contact. -XX:-DisplayVMOutput -XX:+LogVMOutput -XX:LogFile=<directory>/hotspot<timestamp>.log Logs the compilation logs and other details to file. -XX:+FlightRecorder Enable Java Flight recorder logging with default settings. -XX:StartFlightRecording=filename=<directory>/jfr<timestamp>.jfr Java Flight Recorder logs can be opened with Azul Mission Control, a free tool for basic Java performance analysis. -XX:FalconIRDumpRoot Log the IR output of the Falcon JIT compiler. The Falcon JIT in Azul Prime is based on the LLVM compiler project. LLVM uses an IR (Intermediate representation), a pseudo assembler, before compiling to binary. The IR is human-readable and can be analysed by our engineering team to gain insight into the optimizations made (or not made) by the JIT compiler. -XX:FalconDumpIRToDiskOf=* Log ALL classes. -XX:+PrintInlining Log extra detail for inlined methods."
}, {
  "objectID" : "66ad225b-0a20-4919-aca4-711bd34b8683",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Correctly Stopping Azul Prime While Logging",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#correctly-stopping-azul-prime-while-logging",
  "content" : "Correctly Stopping Azul Prime While Logging Please stop Prime gracefully (i.e., do not perform a hard kill -9 <pid>), to flush JFR (and other) buffers to a file. Otherwise, your JFR log will be empty (file size equals zero)."
}, {
  "objectID" : "b18497a9-e38d-4e75-9af0-300b32c28d39",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Intrinsic Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#intrinsic-options",
  "content" : "Intrinsic Options Intrinsics are hand-tuned machine code integrated into the JVM for some numeric algorithms like BigInteger, AES encryption, CRC checksum calculations, and SSE/AVM opcodes. Most are turned on by default. To see a list of all adjustable intrinsic options of the current Zing JVM and their default values, run the following command:  /opt/zing/zing-jdk1.8.0-<version>/bin/java -XX:+PrintFlagsFinal -version 2>&1 | grep Intrinsic Command-Line Option Description Default -XX:[+/-]UseMultiplyToLenIntrinsic Disables intrinsic for BigInteger::multiplyToLen() true -XX:[+/-]UseSquareToLenIntrinsic Disables intrinsic for BigInteger::squareToLen() true -XX:[+/-]UseMulAddIntrinsic Disables intrinsic for BigInteger::mulAdd() true -XX:[+/-]UseMontgomeryMultiplyIntrinsic Implements BigInteger.montgomeryMultiply intrinsic. true -XX:[+/-]UseMontgomerySquareIntrinsic Implements BigInteger.squareMultiply intrinsic. true -XX:[+/-]UseLog4jGetCallerClassIntrinsic Enables intrinsic for log4j StackLocator.getCallerClass(). false"
}, {
  "objectID" : "42733e75-7742-47e0-9e61-4f51a2cf9c40",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Prime Memory and CPU Footprint Control",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#prime-memory-and-cpu-footprint-control",
  "content" : "Prime Memory and CPU Footprint Control You can use the VMFootprintLevel' flag to indicate the level of resources available in the environment where Azul Platform Prime runs. `VMFootprintLevel is a \"master\" option which results in tuning a number of internal options. You can set VMFootprintLevel to \"XL\", \"L\", \"M\" or \"S\". \"XL\" is the default so there is no difference in behavior when you specify XL. You can visit Analyzing and Tuning Warmup for more information on VMFootprintlevel and which settings are specifically changed using this option."
}, {
  "objectID" : "77531d7a-7aa0-4a82-bc8a-969b8205f7a2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Native Memory Tracking Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#native-memory-tracking-options",
  "content" : "Native Memory Tracking Options These options are useful to analyze usage of memory outside the Java heap and ZST memory for NIO, thread stacks. Command-Line Option Description Default -XX:[+/-]PrintNMTStatistics Enables output of the Native Memory Tracking statistics. false -XX:NativeMemoryTracking=<tracking level> Specifies the level of tracking output. Note that enabling this will cause 5-10% performance overhead. off: Native Memory Tracking is turned off. summary: Only collect memory usage aggregated by subsystem. detail: Collect memory usage by individual call sites. To extend the functionality in versions 23.02.0.0 through 23.05.0.0, it is necessary to use LD_PRELOAD. To enable this extended tracking, set the environment variable pointing to libnmt_hooks.so included in the Prime package. From version 23.06.0.0, the libnmt_hooks.so library is linked by default.  LD_PRELOAD=$JAVA_HOME/etc/zing/lib/libnmt_hooks.so off"
}, {
  "objectID" : "ef557442-5de9-46d6-8350-18998b882fa5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Code Cache Use Optimization Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#code-cache-use-optimization-options",
  "content" : "Code Cache Use Optimization Options Command-Line Option Description Default -XX:[+/-]AllocCodeCacheInLower2G Allocate code cache and related data structures at virtual address within 2 GB. The maximum supported code cache size while this option is disabled is 1758 MB. true -XX:[+/-]UseEmergencyCodeCacheFlushing Disables emergency code cache flushing. Emergency flushing starts removing unused blobs only when more than 85% of code cache space is consumed. Before that it \"sleeps\" and does nothing. This option is enabled by default. true -XX:[+/-]UseIncrementalCodeCacheFlushing Enables regular code cache flushing. Unlike emergency flushing, regular flushing triggers unused blobs removal during the whole lifetime of Zing, i.e., it never waits for reaching 85% of code cache utilization. This option can be helpful when the code cache memory is being exhausted despite UseEmergencyCodeCacheFlushing was enabled. This option is disabled by default. false -XX:[+/-]EnableC1Flushing Turns off flushing of unused code blobs generated by the Tier 1 compiler. This option takes effect only if either the UseIncrementalCodeCacheFlushing or UseEmergencyCodeCacheFlushing option is set to true. true -XX:CodeCacheMinimumFreeSpace=<value in bytes> Reserves the specified amount of space for code other than code compiled methods. 26845184 -XX:CodeCacheOopTableSize=<value in bytes> Sets the initial size of the elastic table used internally by the VM to store information about object references that reside in the code cache. The maximum value is 64 MB. 25% of InitialCodeCacheSize -XX:ReservedCodeCacheSize=<value in bytes> Specifies the maximum size of the code cache. The minimum value is a minimum of 6% of Xmx and 256 MB. The maximum value is 1280 MB. 10% of Xmx -XX:InitialCodeCacheSize=<value in bytes> Specifies the initial size of the code cache. The minimum value is a minimum of 3% of Xmx and 64 MB The maximum value is the value of ReservedCodeCacheSize. Minimum of 2% of Xmx and 10% of ReservedCodeCacheSize -XX:[+/-]MlockCodeCache Locks code cache in memory, preventing it from being paged out or swapped out. The option is not applicable to the ZST mode. true for non-ZST mode -XX:[+/-]AllocCodeCacheInCHeap Decides whether code cache is accounted under C heap or under Java heap. true for non-ZST mode false for ZST mode"
}, {
  "objectID" : "dd5e8859-2c4d-42d4-84c8-fbfe160c1405",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Monitor Cache Use Optimization Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#monitor-cache-use-optimization-options",
  "content" : "Monitor Cache Use Optimization Options Command-Line Option Description Default -XX:InitialMonitorCacheSize=<value>[K|M|G] Specifies the initial size of the monitor cache. Units can be specified in kilobytes (K or k), megabytes (M or m), or gigabytes (G or g). 0 -XX:ReservedMonitorCacheSize=<value>[K|M|G] Specifies the maximum size of the monitor cache. Units can be specified in kilobytes (K or k), megabytes (M or m), or gigabytes (G or g). 512M -XX:[+/-]AllocMonitorCacheInCHeap Allows choosing between C heap and Java heap memory for MonitorCache. Using monitor cache elasticity is not recommended when monitors are in Java heap and, by default, InitialCodeCacheSize is set to ReservedCodeCacheSize when the flag is disabled. true -XX:[+/-]MlockMonitorCache Locks memory (mlock) to prevent monitor cache pages from being swapped out. true"
}, {
  "objectID" : "f8dd23ba-5940-46bb-80b3-e0d303cf78e8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Thread Local Allocation Buffer (TLAB) Use Optimization Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#thread-local-allocation-buffer-tlab-use-optimization-options",
  "content" : "Thread Local Allocation Buffer (TLAB) Use Optimization Options Command-Line Option Description Default -XX:MinTLABSize=<value in bytes> Minimum allowed size of the thread local allocation buffer (in bytes). 32768 -XX:[+/-]GPGCUseFullPageTLABs When true, uses a single 2 MB page as a fixed size TLAB. true -XX:TLABRefillWasteFraction Specifies maximum TLAB waste at a refill (internal fragmentation). 16 -XX:TLABSize=<value in bytes> Sets the size of the thread local allocation buffer. 2031616 -XX:TLABResizeStepPercent 25 -XX:TLABWasteTargetPercent Determines the percentage of the threshold of the TLAB when the object size is larger than a threshold, the TLAB is retired, and the object is allocated inside a new TLAB. 25"
}, {
  "objectID" : "00262be0-f867-4f44-b4fe-e295d7184396",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Zing in the Non-ZST Mode Options (available since Azul Zing 19.06.0.0)",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#zing-in-the-non-zst-mode-options-available-since-azul-zing-19-06-0-0",
  "content" : "Zing in the Non-ZST Mode Options (available since Azul Zing 19.06.0.0) Command-Line Option Description Default -XX:[+/-]UseLargePages Enables Zing to use large (2M pages) if the system is properly configured. Before trying to use large pages, read Using Huge Pages with Zing for system configuration steps. true for Zing with ZST, false for Zing in non-ZST mode -XX:[+/-]UseTransparentHugePages Enables Zing to use Transparent Huge Pages (THP) in shared memory madvise mode if the system is properly configured. Before trying to use large pages, read Using Huge Pages with Zing for system configuration steps. To enable, use -XX:-UseTransparentHugePages. Transparent Huge Pages (THP) in shared memory madvise mode is available in Linux kernel version 4.12.10 and above. false -XX:[+/-]UseTransparentHugePagesForCodeCache Use Transparent Huge Pages (THP) for code cache provided that (a) it is allocated in C heap memory and (b) it is safe to use THP without incurring defragmentation stall. true -XX:[+/-]UseTransparentHugePagesForMonitorCache Use Transparent Huge Pages (THP) for monitor cache provided that (a) it is allocated in C heap memory and (b) it is safe to use THP without incurring defragmentation stall. true -XX:[+/-]UseTransparentHugePagesForSideBand Use Transparent Huge Pages (THP) for sideband forwarding table provided that (a) it is allocated in C heap memory and (b) it is safe to use THP without incurring defragmentation stall. true -XX:GPGCNoZSTBackingStoragePath=<path> Points to the mount point for managing large pages when configuring static Large pages. Used in conjunction with -XX:UseLargePages on Linux kernel versions prior to 4.14. Before trying to use large pages, read Using Huge Pages with Zing for system configuration steps. -XX:[+/-]GPGCNoZSTUseNUMAInterleaving Enables non-uniform memory access (NUMA) interleaving when libnuma library is present. false if either libnuma (API version 2) is not present on the system or if the process has been already memory-bound to specified nodes using the numactl —membind option; true otherwise. -XX:[+/-]GPGCNoZSTWorkaroundRSSInaccuracy Report more accurate resident set size (RSS) value for off heap memory in the GC log file. In the non-ZST mode, Zing uses the shared memory multimapping facility provided by Linux. However, the RSS reported by Linux is known to be inaccurate when the process does multimapping. When the flag is turned on, Zing tries to compute a more accurate value for RSS, which is then reported in the GC log. false -XX:[+/-]AlwaysPreTouch Acquires all of Xmx upfront before starting the application. If the option is not specified, a JVM internal thread acquires the memory in the background after an application is started. false -XX:[+/-]GPGCNoZSTUseOptimizedMlockAll Optimizes mlockall(2) behavior to significantly reduce application exit times. true"
}, {
  "objectID" : "345100b8-0161-4e61-bc6d-4040f3e3e9a1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Garbage Collector Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#garbage-collector-options",
  "content" : "Garbage Collector Options Command-Line Option Description Default -XX:[+/-]GPGCCommitInitialHeapLazily Prevents the whole of the initial heap size, InitialHeapSize or -Xms, from being committed from the OS upfront, according to the specified value of GPGCLazyInitialHeapCommitPercent. The remainder gets committed based on regular elastic heap heuristics. false -XX:GPGCLazyInitialHeapCommitPercent Specifies what percent of InitialHeapSize or -Xms shall be committed from the OS upfront at startup, when GPGPCCommitInitialHeapLazily is enabled. 50 -XX:[+/-]GPGCReportLegacyGarbageCollectorMXBean Java 11 and 17: Switches back to the previous MXBean GC metric name java.lang.GarbageCollector.GPGC New and java.lang.GarbageCollector.GPGC Old. true -XX:[+/-]GPGCUseAllocationPacing Allows VM to smoothly decrease allocation rate of the application if GC doesn’t keep up. Helps to avoid complete exhaustion of heap space followed by possibly long stalls. Available in non-ZST mode only. false -XX:[+/-]CheckpointTimeout Tells the JVM to promote a checkpoint to a safepoint if the checkpoint takes too much time. A checkpoint happens when the JVM needs to interrupt a single Java thread and do something to it. The action will not affect any other threads that are running. true -XX:[+/-]DieOnSafePointTimeout Abort the VM upon failure to reach safepoint. A safepoint happens when the JVM needs to pause every Java thread that’s running in order to perform an operation which can only happen when all threads are asleep true -XX:CheckpointTimeoutDelay=<value in ms> Delay in milliseconds for option CheckpointTimeout. 50000 -XX:CheckpointTimeoutDelay=<value in ms> Delay in milliseconds for option DieOnSafepointTimeout. 50000 -XX:[+/-]DieOnSafepointOperationTimeout Abort the VM if safepoint operationTime exceeds SafepointOperationTimeoutDelayMS. true -XX:SafepointOperationTimeoutDelayMS=<value in ms> Timeout, in milliseconds, for safepoint operation when DieOnSafepointOperationTimeout is enabled. 50000 -XX:GPGCActiveObjectPaddingSize=<number> Number of cache lines of padding to insert after mutator relocated objects during relocation. 0 -XX:[+/-]GPGCRetainActiveObjectPadding When true, retain any previously allocated active object padding during GC relocation. When false, any previously allocated active object padding is removed during GC relocation and will not be re-added until the object is mutator relocated again. false -XX:GPGCTimeStampPromotionThresholdMS=<value in ms> Time, in milliseconds, that an object page stays in the new generation before getting promoted to the old generation. 2000 for Xmx > 2 GB, 500 for Xmx ⇐ 2 GB -XX:GPGCNewGenConcurrentMarkFlushRetryLimit=<upper limit of retries> Limits the number of mutator NMT reference buffer flushes performed during concurrent marking. The default value of the retry limit is 3. To return to the old behavior of looping in concurrent marking until no more mutator references are flushed, change the default value to -1. 3 -XX:GPGCNewGenConcurrentMarkFlushRetryLimitAction=<upper limit of iterations> Controls the behavior of the new garbage collector when the number of iterations of the concurrent marking mutator NMT flush loop exceeds the specified retry limit. The default action is to perform reference strengthening followed by iterating the limit of retries more times before exiting out of the loop and heading toward the safepoint. 2 -XX:GPGCPausePreventionMemory=<value in bytes> Allocates the limit from the pause fund to restrict pause prevention memory. -1 -XX:GPGCHeuristicCheckIntervalMS=<time interval in ms> Controls the time interval between consecutive heuristic evaluations when Zing runs heuristics to determine the time to trigger a garbage collection. The default is 20 milliseconds starting with Zing 20.03.0.0. Before Zing 20.03.0.0, it was 50 milliseconds. 20 -XX:[+/-]UseEpsilonGC Implements a no-op garbage collector. When enabled, Zing neither triggers any GC cycles nor generates GC barriers. Being an experimental option, it needs to be unlocked by preceding -XX:+UnlockExperimentalVMOptions. false -XX:GPGCHeuristicHalfLifeMS=<value in ms> Specifies the half-life, in milliseconds, for exponential decay of heuristic models that drive triggering of garbage collection cycles. 60000 -XX:GPGCNewGCMaxIntervalMS=<value in ms> Specifies the maximum interval between new generation garbage collection cycles triggered by GC heuristics. The interval is calculated from the start of the previous new generation collection. 0 -XX:GPGCOldGCMaxIntervalMS=<value in ms> Specifies the maximum interval between old generation garbage collection cycles triggered by GC heuristics. The interval is calculated from the start of the previous old generation collection. 0 -XX:GPGCMaxOldGCInterval=<number> Specifies the maximum number of new GC cycles that can be run before triggering the next full (Old) GC cycle. -1 -XX:[+/-]UseGCUnifiedLogging Enables unified GC logging in Zing 8, 11, and 13. true -XX:GPGCTargetPeakNewGenOccupancyBytes=<value in bytes> Specifies the soft limit for java heap usage by the new generation, in bytes, that GC heuristics target to achieve. If GPGCTargetPeakNewGenOccupancyBytes is not set, the value will be adjusted dynamically. Explicitly setting this options disables dynamic allocation. 0 -XX:GPGCTargetPeakNewGenOccupancyPercent=<value> Specifies the soft limit for java heap usage by the new generation, as a percentage of the maximum heap size, that GC heuristics target to achieve. If GPGCTargetPeakNewGenOccupancyPercent is not set, the value will be adjusted dynamically. Explicitly setting this options disables dynamic allocation. 0 -XX:GPGCTargetPeakHeapOccupancyPercent=<value> Specifies the soft limit for overall java heap usage, as a percentage of the maximum heap size, that GC heuristics target to achieve. If GPGCTargetPeakHeapOccupancyPercent is not set, the value will be adjusted dynamically. Explicitly setting this options disables dynamic allocation. 100 for ZST reserve-at-config, 95 for ZST reserve-at-launch, 90 for non-ZST mode -XX:GenPauselessNewThreads=<value> Specifies the number of garbage collection worker threads for the new generation. Setting default value is based off of Xmx: If Xmx is more than 2 GB, the default value is 45% of the number of logical cores available to the process. If Xmx is less than or equal to 2 GB, the default value is either Xmx divided by 128 MB or 45% of the number of logical cores available to the process, whichever is smaller. If -XX:+UseSTW is specified, the default value is the number of logical cores. available to the process. The minimum value supported is 1. If not set, this value can be managed dynamically using . See note in -XX:GPGCThreads. 15 -XX:GenPauselessOldThreads=<value> Specifies the number of garbage collection worker threads for the old generation. Setting default value is based off of Xmx: If Xmx is more than 2 GB, the default value is 30% of the number of logical cores available to the process. If Xmx is less than or equal to 2 GB, the default value is either 66% (two thirds) of the value of GenPauselessNewThreads, or 30% of the number of logical cores available to the process, whichever is smaller. When -XX:+UseSTW is specified, the default value is the same as the number of logical cores available to the process. The minimum value supported is 1. If not set, this value can be managed dynamically using . See note in -XX:GPGCThreads. 9 -XX:GPGCThreads=<value> Specifies the total number of garbage collection worker threads This is an alternative way to specify GenPauselessNewThreads and GenPauselessOldThreads When used, GenPauselessOldThreads is derived as 40% of GPGCThreads. GenPauselessNewThreads is then derived as GPGCThreads – GenPauselessOldThreads. The default value is the sum of the default values of GenPauselessNewThreads and GenPauselessOldThreads. The minimum value supported is 2. Note As of Azul Platform Prime 21.10.0.0, if the values GPGCThreads, GenPauslessNewThreads, and GenPauselessOldThreads are not set, the number of garbage collector worker threads are managed dynamically using UseDynamicNumberOfGCThreads, if enabled, according to the configuration of GPGCDynamicGCThreadCountPolicy. 24 -XX:[+/-]UseDynamicNumberOfGCThreads Turn on/off dynamic changes to GC thread counts. true -XX:GPGCDynamicGCThreadCountPolicy=<value> Enable dynamic garbage collection thread count policy. 0 - Disable dynamic handling. Set a static garbage collector thread count that is fixed to the -XX:GPGCThreads value. 1 - The garbage collector thread count is managed automatically and will dynamically increase but never decrease. The thread count is limited by -XX:GPGCThreads=N. 2 - The garbage collector thread count is managed automatically and will be increased and decreased dynamically. The thread count is limited by -XX:GPGCThreads=N. 1 -XX:[+/-]ConcurrentJVMTITagMapClearing Lower GC pauses with JVMTI, resolving deadlock with callbacks during JVMTI tag map clearing true -XX:[+/-]GPGCUseTargetCPUHeuristic If disabled, will cause CPU-based heuristics to be skipped for heap elasticity and dynamic GC thread counts. true -XX:[+/-]GPGCSafepointWaitForMutatorResume Tells the Garbage Collector to pause and wait for mutator threads to be woken up before resuming, after every GC safepoint. If -XX:-GPGCSafepointWaitForMutatorResume is set, the Garbage Collector resumes its work in parallel with mutator threads waking up. true Per-thread CPU utilization in GC Log Available from Azul Platform Prime 23.06.0.0, the per-thread CPU utilization options allow collection and charting of per-thread CPU core statistics. Command-Line Option Description Default -XX:[+/-]PrintCPUUtilization Enable printing of CPU utilization for process threads in JDK8-style logging. false -Xlog:gc,cpuut:<filename> Enable printing of CPU utilization for process threads in unified logging. - -XX:PrintCPUUtilizationAtIntervalSec=<time in seconds> Interval in seconds, at which CPU utilization statistics will be printed to GC log. Once printed the counters are reset to zero. 20 -XX:ThreadCPUUtilizationReportThreshold=<number of cores> Threshold, in cores, below which a thread will be grouped under OTHER category for reporting rather than being logged separately. 0.04 -XX:PrintCPUUtilizationCollectMode=<string> Mode of data sampling. Accepted strings are \"snapshotAtIPrintInterval\" and \"averageOverPrintInterval\". snapShotAtPrintInterval: Two samples will be taken around the print interval and the average will be computed between them (similar to what \"top -H\" does). averageOverPrintInterval: The averaging is done across the entire print interval. snapshotAtIPrintInterval -XX:CollectCPUUtilizationAtIntervalMillis=<time in milliseconds> Interval between the two samples in \"snapshotAtPrintInterval\" mode. 150 -XX:+CollectSystemwideCPUUtilization Enable collection of CPU utilization for each thread on the system. false"
}, {
  "objectID" : "eae16942-2a87-4054-82b0-f2ea61f4a28d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Per-thread CPU utilization in GC Log",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#per-thread-cpu-utilization-in-gc-log",
  "content" : "Per-thread CPU utilization in GC Log Available from Azul Platform Prime 23.06.0.0, the per-thread CPU utilization options allow collection and charting of per-thread CPU core statistics. Command-Line Option Description Default -XX:[+/-]PrintCPUUtilization Enable printing of CPU utilization for process threads in JDK8-style logging. false -Xlog:gc,cpuut:<filename> Enable printing of CPU utilization for process threads in unified logging. - -XX:PrintCPUUtilizationAtIntervalSec=<time in seconds> Interval in seconds, at which CPU utilization statistics will be printed to GC log. Once printed the counters are reset to zero. 20 -XX:ThreadCPUUtilizationReportThreshold=<number of cores> Threshold, in cores, below which a thread will be grouped under OTHER category for reporting rather than being logged separately. 0.04 -XX:PrintCPUUtilizationCollectMode=<string> Mode of data sampling. Accepted strings are \"snapshotAtIPrintInterval\" and \"averageOverPrintInterval\". snapShotAtPrintInterval: Two samples will be taken around the print interval and the average will be computed between them (similar to what \"top -H\" does). averageOverPrintInterval: The averaging is done across the entire print interval. snapshotAtIPrintInterval -XX:CollectCPUUtilizationAtIntervalMillis=<time in milliseconds> Interval between the two samples in \"snapshotAtPrintInterval\" mode. 150 -XX:+CollectSystemwideCPUUtilization Enable collection of CPU utilization for each thread on the system. false"
}, {
  "objectID" : "cd0c1b49-0fa7-4a76-957e-aa0cd58e079b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Advanced Miscellaneous Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#advanced-miscellaneous-options",
  "content" : "Advanced Miscellaneous Options Command-Line Option Description Default -XX:[+/-]OptimizeFindDeadlocksWithCheckpoint Enable elimination of safepoint pauses for finding deadlocks operations by first attempting to complete them using a checkpoint. If a deadlock is detected in the checkpoint, it is then confirmed using a safepoint pause. true -XX:DiagnosticFolder=<path> Gathers all useful diagnostic logs into one folder for easier evaluation. none -XX:[+/-]PrintGCHSLines Enables writing system information headers (GCHS) in the garbage collection log file. true if GC logging is enabled, false if GC logging is disabled -XX:[+/-]PrintGCExtraDetails Enables a new Garbage Collector logging level used wherever the data collection or reporting has a noticeable overhead. This flag also enables PrintGCDetails which is the next lower logging level. false -XX:[+/-]PromoteCheckpoints Lets tardy threads complete the checkpoint process by pausing active threads. See Troubleshooting Guide for suggestions on when to use this option. false -XX:CheckpointPromotionDelay=<time in ms> Defines the threshold for triggering the promotion timeout. This flag has an effect when -XX:+PromoteCheckpoints is specified. 850 -XX:ProfileStartupLimitInSeconds=<value in seconds> Sets time limit for ReadyNow to wait for compilations to finish at startup as specified in seconds. -1 (infinite) -XX:ActiveProcessorCount=<number of CPUs> Allows for specifying explicitly the number of CPUs available for Zing. Works only with the container support (i.e., if -XX:-UseContainerSupport is not specified) and overrides the automatic CPU detection logic in the JVM. -1 -XX:[+/-]UseContainerSupport Turns off using container-specific information about available CPUs instead of using the information about the whole system. Enabled by default. true -XX:[+/-]DashVersionSilenceLicenseErrors Starting with Zing 18.07.0.0, Zing diagnoses licensing problems if run with -version option: it prints a warning and exits with an error code. If this option is specified together with -version, the JVM ignores licensing problems (specifically the warning is not printed) and exits with 0. Setting the ZING_DASH_VERSION_SILENCE_LICENSE_ERRORS environment variable has the same effect. false -XX:[+/-]PreserveFramePointer (Available since Zing 17.03.0.0; requires ZST 5.18.0 or later) The flag is needed for producing flame graphs with the Linux perf utility and for similar performance analysis tools which rely on stackwalking to record Java method invocations, the time percentage spent in them, and their use of Linux system function calls. false -XX:[+/-]UseLLVMBasedDisassembler Turns the LLVM-based disassembler off. Starting with Zing 18.07.0.0, the default disassembler is changed from Zing internal to LLVM-based. true -XX:PrintAssemblyOptions=intel <diagnostic> Changes disassembly syntax from AT&T to intel. This flag is diagnostic and must be preceded by -XX:+UnlockDiagnosticVMOptions. -XX:[+/-]UseModifiedThreadLocal Internally polls on a ReferenceQueue to determine if a key object has been garbage collected rather than polling by checking for NULL through the Reference.get() API, that can unintentionally prevent the weakly reachable key from being garbage collected. The flag is more friendly to garbage collectors that perform marking concurrently. true -XX:[+/-]UseSpecialArrayCopy Indicates which version of arraycopy of objects intrinsic works with. When set to true, it stands for a new vectorized intrinsic version. When set to false, it stands for the old scalar version. true -Xnativevmflags:[ignore|error|warn] If -Xnativevmflags:error is specified and Zing detects an option that it does not support, it does not launch and generates the following type of message: HotSpot™ 64-Bit Tiered VM error: Unsupported native VM option ‘+UseParNewGC’ If -Xnativevmflags:warn is specified as a last option in the command line, it enables a warning message for each OpenJDK JVM option ignored by Zing. It prints a warning message while your application starts normally, for example: $ /opt/zing/zing-jdk8/bin/java -XX:+UseParallelGC -Xnativevmflags:warn -version Zing 64-Bit Tiered VM warning: Ignoring unsupported native VM option '+UseParallelGC' java version \"1.8.0-zing_18.12.0.0\" Zing Runtime Environment for Java Applications (build 1.8.0-zing_18.12.0.0-b4) Zing 64-Bit Tiered VM (build 1.8.0-zing_18.12.0.0-b9-product-azlinuxM-X86_64, mixed mode) ignore -XX:[+/-]ResetSignalMaskAtLaunch Clears the signal mask to enable SIGQUITs when set to true. true -XX:ProfilePreMainTier2ExtraCompilerThreads=<number of threads> Enables the use of extra threads for compilations for C2 and Falcon during the pre-main phase when ReadyNow triggers and executes different activities. This option is complementary to CIMaxCompilerThreads. In pre-main phase when your code is not yet being executed and GC is silent, the total amount of C2/Falcon compiler threads is equal to the sum of CIMaxCompilerThreads and ProfilePreMainTier2ExtraCompilerThreads. Note that the sum is capped to match the number of CPUs available for Zing on a machine. When the pre-main phase is done (i.e., ProfileStartupLimitInSeconds is exhausted) and your main is started, the total amount of compiler thread goes back to standard CIMaxCompilerThreads. 2 -XX:ProfileWorkerThreads=<number of threads> When this option value is greater than 0, it allows ReadyNow to use multiple concurrent background threads to asynchronously trigger and execute different ReadyNow-related activities such as early class loading, class initializations, or trigger compilations.When the flag value is set to 0, old synchronous event’s triggering and/or processing is used. The default value is equal to the minimum number of CPUs available for Zing on a machine. 4 -XX:[+/-]RunVMErrorOnUnhandledSignals Does error reporting for SIGABRT, SIGFPE, and SIGTRAP signals if there are no user defined handlers installed. true -XX:[+/-]SafelyTrustEffectivelyFinalFields Enables effectively final optimizations for private fields which are initialized inside a constructor or class initializer, but are otherwise read only. The effectively final family of optimizations allows the VM to perform compiler optimization as if the fields were constants, but deoptimize if a later write is detected at runtime. true -XX:[+/-]UseOpenJSSE Enables the OpenJSSE provider that supports TLS 1.3, see https://github.com/openjsse/openjsse for details. false -XX:[+/-]UseLegacy8uJSSE Enables the Legacy8uJSSE provider that includes the 8u252 JSSE provider implementation without TLS 1.3 support as a fallback measure, and the non-default OpenJSSE provider previously included in Zing 8 distributions for non-default support for TLS 1.3. See Using Version 1.3 of Transport Layer Security (TLS) Protocol for details. false -XX:MaxRAMPercentage=<percentage of the memory limit> Adjusts the maximum heap size (if not explicitly specified) based on the configured cgroup memory limit. If Xmx is not specified, the VM heap size limit is calculated as (MaxRAMPercentage / 100) * cgroups_limit. 25 -XX:[+/-]AlignArrayStart Enables 64-bit alignment of the starting point of any array in the heap memory. true -XX:HserrRawCodeWindowSize=<size in bytes> Specifies the size of raw x86 instructions to dump into hs_err file. 512 -XX:MlockLevel=<level> Selects the memory locking strategy during JVM initialization: 0 - Do not attempt any mlock in the JVM. 1 - Lock only libjvm.so text region (can mlock up to 20 MB). 2 - Lock all existing memory regions before JVM initialization (can mlock up to 150MB). 3 - Lock all existing memory regions at the end of JVM initialization (can mlock up to 500 MB with ZST mode, additionally locks the complete Xmx with non-ZST mode). Note that for the mlock operation to succeed the user should have permission to lock the required amount of memory in RAM. Check the ulimit l setting before starting the JVM with the MlockLevel option. Only a privileged user can increase this limit. By default, no error message is printed if the mlock operation fails. Adding 1000 to the values above results in the same operation performed with errors, if any, printed to stderr. For example, specifying -XX:MlockLevel=1001 will print a warning if locking libjvm.so text region fails but -XX:MlockLevel=1 will not. 1 -XX:[+/-]KeepCodeEntrantOnAsyncExceptions Keeps code of the compiled method entrant for further utilization (instead of making it non-entrant) in the case when an asynchronous exception (OutOfMemoryError, StackOverflowError) occurs during the execution of the JIT-compiled version of the method. false -XX:[+/-]ProfileExitOnInputError Exits when an input profile is specified but cannot be found or is malformed. The option is applicable when file_name is missing for -XX:ProfileLogIn=<filename>. false -XX:[+/-]UseFastJNIAccessors Enables JNI Get<type>Field function optimization. When the optimization is enabled, the function tries to quickly access the field value first. If it is not possible (e.g., garbage collection is in progress), the value is retrieved with the standard procedure. true -XX:[+/-]UseSpecialHashSet Enables optimization for a special HashSet filling pattern when elements of the input collection are frequently added into an empty HashSet. false -XX:[+/-]UseThreadStateNativeWrapperProtocol Enables lock-less JNI transitions. This flag needs a minimum of 4K available lockable memory to be enabled. Otherwise, the flag ergonomically resets to false. true -XX:[+/-]UseKestrelC2 Enables a newer C2 implementation introduced to Zing in 2020. It is based on a lightweight use of the LLVM backend, and typically produces faster code than UseSeaOfNodesC2 while keeping compilation effort at similar levels. UseKestrelC2 generally exhibits a significantly lower compilation-time CPU consumption compared to Falcon. This option is complementary to UseC2. true -XX:[+/-]UseSeaOfNodesC2 Note Deprecated since 24.01.0.0 Enables the traditional C2 implementation that has been part of Zing since 2010. This option is complementary to UseC2. false -XX:ZingTestingGracePeriodSec=<value in seconds> Specifies the Zing testing grace period, in seconds (up to 3600). 0 -XX:[+/-]UseFastJNIExceptionCheck Enables the JNI ExceptionCheck function optimization. When the optimization is enabled, the function tries to quickly check for a synchronous pending exception. If an async exception is set, the exception check happens with the standard procedure. true -XX:[+/-]MaxFDLimit Enables the attempt to set the soft limit for the number of open file descriptors to the hard limit. true -XX:[+/-]UseLegacyJNINameEscaping Enables skipping the extra mapping check to avoid compatibility issues due to new mapping rules for JNI methods introduced in JDK-8233624. See New mapping rules from a Java native method name to a C native library implementation function name for more information about new mapping rules. false -XX:[+/-]GPGCReportJavaHeapPoolMXBean Exposes the total sum of memory usage of all MemoryPoolMXBean memory pools to the java.lang.management interface. false -XX:GPGCHeapJavaPoolMXBeanName=<value> Specifies the name of the total java heap pool only when GPGCShowJavaHeapPoolMXBean is enabled. 0 -XX:GPGCNewGenPoolMXBeanName=<value> Specifies the name of the new generation in the java heap pool. 0 -XX:GPGCOldGenPoolMXBeanName=<value> Specifies the name of the old generation in the java heap pool. 0 -XX:GPGCPermGenPoolMXBeanName=<value> Specifies the name of the permanent generation in the java heap pool. 0 -XX:[+/-]UseModifiedRuleBasedCollator Enable the use of the custom implementation of RuleBasedCollator to improve performance over OpenJDK’s text collation and normalization. true -XX:[+/-]UseModifiedInputStreams Use unsynchronized ByteArrayInputStream if it is used as an input of ObjectInputStream as a custom implementation. false -XX:[+/-]UseContainerCpuShares Consider CPU shares when computing available processors inside a cgroup. false -XX:[+/-]PreferContainerQuotaForVMInternalCPUCount Use CPU quota divided by period as base for calculating VM internal thread counts in containers. true from Azul Platform Prime 23.08.0.0. -XX:[+/-]PreferContainerSharesForVMInternalCPUCount Use CPU shares divided by 1024 as base for calculating VM internal thread counts in containers. false"
}, {
  "objectID" : "6ccccd35-dccf-4a6b-a3a2-0d0b8df7305e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Garbage Collector Options to Control ZVision Output",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#garbage-collector-options-to-control-zvision-output",
  "content" : "Garbage Collector Options to Control ZVision Output Note As of Azul Platform Prime 23.08.0.0, ZVision and ZVRobot components have been deprecated and are no longer actively developed. While we still support these components, we encourage users to switch to Java Flight Recorder(https://docs.azul.com/prime/Java-Flight-Recorder), as ZVision and ZVRobot are planned for End-of-life with Azul Platform Prime 24.02.0.0 (February 2024). These Zing command-line options control the output of garbage collector information when using ZVision. Command-Line Option Description -Xloggc:[filename] Enables verbose GC logging and directs it to a file. It is recommended to add a timestamp and a PID to get a unique log name: -Xloggc:gc_%t_%p.log -XX:[+/-]PrintGCDetails Enables the detailed logging output. -XX:PrintSYSINFOAtIntervalSec=<value in seconds> Writes the SYSINFO line (CPU load, memory usage, paging info) at fixed intervals in seconds. As of Zing release 5.10.0, the default value of the Zing flag DisableExplicitGC is off. Prior to release 5.10.0, calls to System.gc() were ignored and no garbage collection was initiated unless -XX:-DisableExplicitGC was set. From 5.10.0 this is no longer the case and System.gc() calls may initiate a full GC cycle depending on the value of the GPGCOptimisticExplicitGC flag. If a System.gc() call initiates a garbage collection, the calling thread may or may not be blocked for the duration of the GC depending on the value of the SynchronousExplicitGC flag. The previous behavior is achieved by turning on the DisableExplicitGC flag, using -XX:+DisableExplicitGC. -XX:[+/-]GPGCOptimisticExplicitGC When enabled, a thread calling System.gc() initiates a new garbage collection if and only if one is not already in progress or one is pending. This flag is enabled by default. -XX::[+/-]SynchronousExplicitGC When enabled, a thread that initiates a garbage collection by calling System.gc() is blocked for the entire garbage collection cycle and resumes when the GC completes. Otherwise, a concurrent garbage collection is initiated and the calling thread continues to execute. This flag is enabled by default."
}, {
  "objectID" : "471a8297-0ed6-4094-ba9d-b338aef1d962",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Reserved Memory Command",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#reserved-memory-command",
  "content" : "Reserved Memory Command When a Java application starts, heap memory is Reserved according to the value specified using the -Xmx command-line option. If not specified, the value is 1 GB. There is no specific ulimit pertaining to -Xmx for Zing. Such memory is configured for use during the system’s configuration using ZST. Configuration of the system using ZST requires root level permissions (superuser). If -Xmx is less than 1 GB, Zing automatically increases it to 1 GB and writes a warning to stderr. If you are running on a SUSE Linux Enterprise Server (SLES) system, prior to launching Zing for the first time, set the amount of virtual memory available to the shell using ulimit. At the command line, type: ulimit -v unlimited"
}, {
  "objectID" : "0cb01b7e-3dea-41c1-b736-96e9c0db0a3e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Collecting JVM Behavior Data by Using jstat",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#collecting-jvm-behavior-data-by-using-jstat",
  "content" : "Collecting JVM Behavior Data by Using jstat To collect information about Zing’s garbage collectors' behavior, use Zing’s monitoring tool (jstat) with the -gpgc command-line option . Use the jstat distributed with Zing, not the jstat distributed with Oracle’s JVM. Usage Syntax  jstat -gpgc [-t == show timestamps] pid [msec between samples [# samples]] Samples Sample -gpgc, -t, samples, #samples options  $ jstat -gpgc -t 6549 10 5\nTimestamp  NGU   OGU   PGU   JHMX   NGC   NGCT    OGC   OGCT    GCT\n172.0  419840.0 2048.0 6144.0 1036288.0 276  170.689 123 94.579  265.268\n172.1  419840.0 2048.0 6144.0 1036288.0 276  170.689 123 94.579  265.268\n172.1  419840.0 2048.0 6144.0 1036288.0 276  170.689 123 94.579  265.268\n172.1  419840.0 2048.0 6144.0 1036288.0 276  170.689 123 94.579  265.268\n172.1  419840.0 2048.0 6144.0 1036288.0 276  170.689 123 94.579  265.268 Sample -gpgc option  $ jstat -gpgc 44265\nNGU          OGU         PGU          JHMX           NGC   NGCT    OGC    OGCT     GCT\n36864.0    73728.0   36864.0  1036288.0   742  186.860   221  147.621  334.481 Sample -class option  $ jstat -class 44265\nLoaded  Bytes  Unloaded  Bytes     Time\n3063    7777.3         1             0.0         1.14 Sample -gc option  $ jstat -gc 44265\nNGU        OGU      PGU       JHMX       NGC    NGCT    OGC    OGCT     GCT\n36864.0    73728.0   36864.0   1036288.0   742  186.860   221  147.621  334.481 Sample -gccause option  $ jstat -gccause 44265\nJavaHeapPercentUsed  NGU  OGU  PGU  JHMX  NGC  NGCT  OGC  OGCT  LGCC   GCC\n14.23  36864.0  73728.0  36864.0  1036288.0  742  186.860  221  147.621 No GC No GC Sample -gcnew option  $ jstat -gcnew 44265\nNGU         JHMX       NGC    OGC    NGCT\n36864.0     1036288.0    742    221   186.860 Sample -gcold option  $ jstat -gcold 44265\nPGU      OGU         JHMX       NGC    OGC    OGCT     GCT\n36864.0  73728.0     1036288.0      742   221  147.621  334.481 Sample -gcutil option  $ jstat -gcutil 44265\nJavaHeapPercentUsed     JHMX       NGC     NGCT    OGC    OGCT     GCT\n14.23          1036288.0   742     186.860  221   147.621  334.481 Sample -stats option  $ jstat -stats 44265\nLoaded   classInitTime classLinkedTime classVerifyTime    sun.cls.time applicationTime safepointSyncTime  safepointTime  vmOperationTime  NGC   NGCT OGC     OGCT\n3063      0.759357     0.121911     0.250850     1.140906     1996.780026  0.450701        1.511731        1.663066    742 186.860000   221  147.621000 Sample -profile option  $ jstat -profile 44265\nLoaders   IDedLoaders Class SpecLoad    SpecInit Loaded Inited  Developed  Method  T1E  T1C  T2E   T2C   Profiled   ProfUsed   Warn   Error\n21         2        3065      2947      1697      2927    2274      1445     1407   230    220     221    831    797 261 0 Sample -profileerrors option  $ jstat -profile 44265\nWarn  ColClass SpecLoadFail  UnmatchLoad RepLoad  OverDeveloped  Error ColLoader UnresLoaders UnresClass  SpecInitFail  UnresMthod  ColMathod\n18     1         0            15         0            2            0           0      0        0       0        0       0 Sample -deopt option  $ jstat -deopt 44265\nCHA  UnreachedIf UnreachedCall  Unloaded Uninit  Unexpected  Null StuckInLoop NotEntrant Cast  Range  Throw  Div0   UncountedLoops   Jvmti  Other\n13     6           13           0         0            2       1           0      0        3       0        0       0       0       0       0 See also Using jstat with ReadyNow Profile."
}, {
  "objectID" : "153b66dc-0376-4997-b06d-bc36d7e0d8d3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Output Header Descriptions",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#output-header-descriptions",
  "content" : "Output Header Descriptions Header Description applicationTime Time called Bytes Bytes consumed classInitTime Time called classLinkedTime Time called classVerifyTime Time called GCC GC cause GCT Both generation collectors total GC time JavaHeapPercentUsed Percent of memory used by Java heap JHMX Java heap Xmx value Loaded Processes loaded LGCC Last GC cause NGC New generation GC count NGCT New generation GC time (concurrent time the collector is running) OGC Old generation GC count (at that instant) OGCT Old generation GC time (concurrent time the collector is running) NGU New generation use (at that instant) OGU Old generation use (at that instant) PGU Permanent generation use safepointSyncTime Time called safepointTime Time called sun.cls.time Time called Time Elapsed time Unloaded Processes unloaded vmOperationTime Time called"
}, {
  "objectID" : "40ff37c5-9771-464b-8774-3cf44e12d1b3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Zing Mini-Core File Option",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#zing-mini-core-file-option",
  "content" : "Zing Mini-Core File Option There is an option, -XX:+DumpMiniCore, that creates significantly smaller Zing core files. This option is specified through the Java application launch command and applied to the runtime Java application. It is not applied to the Zing host machine. When you use this option: Generated Zing core files do not include application objects stored in the Java heap. Time required to produce a Zing core file or core file bundle is reduced."
}, {
  "objectID" : "20ce3181-890a-4cf5-b7be-6d08fc47592f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Zing Mini-Core File Requirements",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#zing-mini-core-file-requirements",
  "content" : "Zing Mini-Core File Requirements The mini-core file option requires ZST 5.7.5 or later and Zing 5.10.x or later. If the option is specified and either the ZST version or Zing version is not compatible, a message is issued. If the ZST version supports the -XX:+DumpMiniCore option, but the Zing version does not, an Unrecognized VM option warning is printed to STDERR. For example:  $ <my dir>/jdk6/x86_64/product/bin/java -XX:+DumpMiniCore -version\nZing 64-Bit Tiered VM error: Unrecognized VM option '+DumpMiniCore'\nCould not create the Java virtual machine. If the Zing version supports the -XX:+DumpMiniCore option, but the ZST version does not, a warning message is issued. For example:  $ /bin/java -jar -XX:+DumpMiniCore -version\nZing VM Warning: -XX:+DumpMiniCore is not supported by this ZST (found API version 0x5e, requires API version >= 0x5f)\njava version \"1.7.0-internal-zing_99.99.99.99.dev\"\nZing Runtime Environment for Java Applications (build 1.7.0-internal-zing_99.99.99.99.dev-b25)\nZing 64-Bit Tiered VM (build 1.7.0-zing_99.99.99.99.dev-b501-product-azlinuxM-X86_64, mixed mode)"
}, {
  "objectID" : "0ad6c37e-84a4-4f9e-8270-f8af06e37cf2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Setting the Zing Mini-Core File Option",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#setting-the-zing-mini-core-file-option",
  "content" : "Setting the Zing Mini-Core File Option Include the option -XX:+DumpMiniCore with your Java launch command. Some failures cannot be effectively diagnosed with a mini-core file. In this case, Azul support may request that you try to reproduce the failure and produce a full-sized core file, by removing -XX:+DumpMiniCore from your Java launch command. When -XX:+DumpMiniCore option is not specified, a full core file, including the application objects stored in the Java heap, is created if Zing crashes. When -XX:+DumpMiniCore option is specified, a core file, that does not include the application objects stored in the Java heap, is created if Zing crashes."
}, {
  "objectID" : "04d6ace4-86ae-4b38-afa8-764b83714252",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Speculative Locking Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#speculative-locking-options",
  "content" : "Speculative Locking Options Speculative Locking in Zing leverages the Intel® Transactional Synchronization Extensions (Intel® TSX) instruction set, to take advantage of the situation where there is lock contention between threads, but no data contention inside the locked region. If a multithreaded program can concurrently modify shared data, a synchronized block or method is usually necessary to ensure correctness. This causes lock contention. The synchronization is not necessary if the concurrent accesses are to different parts of the shared data. In other words, a lock is not necessary when there is no data contention inside the locked region. For example, two different threads can modify a hash table concurrently without taking a lock, if they change values in different buckets of the hash table. Speculative Locking elides locks by speculating that there is no data contention. It does so by starting a transaction using Intel TSX instructions. If the speculation turns out to be wrong, the Intel TSX enabled CPU will detect it, abort the transaction and roll back execution to the start of lock. If a transaction gets aborted, the VM, using certain heuristics, either retries speculation or just acquires the lock as usual. The heuristic maintains aborted or attempted transactions for every speculated lock and disables speculation on that lock if it detects a high aborted or attempted value. The following table summarizes the command-line options that control the use of speculative locking in Zing. The command lines options are case-sensitive. Command-Line Option Description Default -XX:[+/-]UseRTMLocking Enables speculative locking. false -XX:[+/-]RTMHeuristic Enables (Restricted Transactional Memory) RTM heuristics. true -XX:RTMAbortRatio=<threshold value> Threshold value for RTM heuristics. If aborted or attempted transactions ratio goes beyond this limit for a monitor then speculation is disabled for that monitor. 50 -XX:RTMRetryCount=<attempts> Number of times speculation is attempted on a monitor, per lock acquisition. Fewer, or no attempts will be made if internal heuristic disables speculation on the monitor. 5 Note that RTMHeuristic, RTMAbortRatio, and RTMRetryCount options are meaningful if the UseRTMLocking option is true."
}, {
  "objectID" : "7d28430b-3613-4d41-882d-ac82841ba720",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Falcon Compiler Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#_falcon_compiler_options",
  "content" : "Falcon Compiler Options The Falcon compiler is an optimizing JIT (Just-In-Time) compiler that is the default Zing compiler starting from Zing release 17.03.0.0. Below are the Falcon-specific command-line options: Option Description -XX:[+/-]UseFalcon Specifies which Tier 2 compiler should be used. The default Tier 2 compiler is Falcon. To use the C2 JIT instead of the Falcon JIT, run the following command: $JAVA_HOME/bin/java -XX:-UseFalcon –cp . myprog -Xcompilerflags:ignore|warn|error Controls the handling of a C2 or Falcon specific flag used when the other compiler is active. The default value is \"warn\". -XX:[+/-]UseFalconOSR Controls the On Stack Replacement (OSR) functionality. OSR is enabled by default. It is not recommended to disable this option. If needed, disable it for only diagnostics purposes. -XX:Tier2OSRThreshold=<threshold value> Changes the threshold at which the OSR is triggered – that is loop compilation by C2 or Falcon compiler. The default value is 14000. The value might be decreased to improve warm-up characteristics. -XX:FalconCompileThreshold=<threshold value> Threshold value for the Falcon JIT compiler. Replaces the identical option of the C2 compiler (-XX:C2CompileThreshold). The default value is 10000. -XX:CompileCommand Sets the compile threshold for a particular method, used in the following way: -XX:CompileCommand=\"option,<Class>::<method>,FalconCompileThreshold=<threshold value>\" -XX:+UseKestrelC2 Disables Falcon and switches to the KestrelC2 compiler. -XX:FalconUseAVX Specifies the highest supported AVX instructions set on x86/x64 CPUs. The default value is 2. -XX:[+/-]FalconUseLegacyInliner This option is deprecated with no replacement starting with the release of Zing 20.02.0.0. Switches back to the old implementation of the LLVM inliner instead of using a highly customized integrated inliner to perform inlining optimizations in Falcon compiles. The default value is false. -XX:FalconOptimizationLevel=<3,2,1,0> Controls the level of compiling optimization. The default value is 2 (full Falcon). Suggested use: the default value is expected to fit most cases. However, if the CPU load at warmup is too high or warmup takes too long, there is a reason to try 1. The downside is that peak performance might be lower with that setting. Accepts values from 0 to 3: 0 - minimal optimizations, lowest CPU consumption by Falcon (not recommended for production) 1 - reasonable optimizations and CPU time/warmup (good for production) 2 - aggressive optimizations, might expose high CPU utilization in some cases (default) 3 - turns on very aggressive optimizations known to cause long compilations and high CPU load at warmup (not recommended for production) -XX:[+/-]FalconPreserveBoxingIdentity Disables aggressive optimization of boxing types (integer, double, etc.). Should only be used for applications which are found to rely on implementation defined behavior as opposed to the specified behavior of boxing routines. The default value is false. -XX:FalconGenerateProfilerInfo=<value> Specifies the method inlining detail level for performance profiling output of compiled code. Setting a lower level may help to reduce compiled code size by a few percent. Accepts values from 0 to 2: 0 - no method inlining information is generated 1 - stack of inlined methods is generated only (default) 2 - stack of inlined methods with bytecode indices (bci) is generated -XX:[+/-]FalconCompensateForIntelMCUForErratumSKX102 Introduces a nop padding based mitigation for performance regressions seen on some systems following Intel’s micro code updates in response to errata SKX102. This option is expected to become the default in a future Zing release. If enabled, nop padding is used to align affected branches on systems with the micro code update applied. The default value is false. -XX:[+/-]ForceFalconCompensateForIntelMCUForErratumSKX102 Forces generation of nop padded code on unaffected systems for performance validation. The default value is false. -XX:[+/-]FalconOptBoxing Enables the optimization to eliminate redundant boxing conversions. The default value is true. -XX:[+/-]FalconLockCoarsenOverLoop Enables a lock coarsening optimization for loops where the lock over a loop is coarsened. This is done by chunking the loop and coarsening the lock over the chunked loop. The default value is true. -XX:[+/-]FalconEnableAggressiveLockOpt Enables loop chunking by chunk size of 32 and performs lock coarsening over the loop. Additionally, enables lock coarsening over memory operations with monitor exit when valid to do so. The default value is true. NOTE: The Falcon compiler is available for Java 7, Java 8, Java 11, Java 13, and Java 15. An attempt to use the -XX:+UseFalcon option for Java 6 will cause a failure."
}, {
  "objectID" : "8d09b528-5f42-4d40-961b-2564203a5c01",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Optimizer Hub Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#optimizer-hub-options",
  "content" : "Optimizer Hub Options Below are the command-line options for Optimizer Hub to interact with Cloud Native Compiler and ReadyNow Orchestrator. Cloud Native Compiler JVM Options Note The minimum JVM options to request compilations from Cloud Native Compiler are -XX:OptHubHost=<host:port> and -XX:+CNCEnableRemoteCompiler. Command Line Option Description Default -XX:OptHubHost=<host:port> Address where Optimizer Hub is listening. The default is localhost:50051. See Configuring Optimizer Hub Host and Port for instructions on determining the correct host and port. -XX:[+/-]CNCEnableRemoteCompiler Allows usage of the remote compiler when Cloud Native Compiler has established a connection. false -XX:CNCEngineUploadAddress=<host:port> Address to upload the compiler engine. Only needed when your Optimizer Hub has non-standard ports. See Specifying a Custom Compiler Engine Upload Port. -XX:[+/-]CNCAbortOnBadChannel With this flag, the JVM crashes if it loses connection with a Cloud Native Compiler. false -XX:[+/-]OptHubUseSSL Instructs Zing to communicate directly with Optimizer Hub without using SSL. Use this option if you installed Optimizer Hub without SSL. true -XX:OptHubSSLRootsPath=<path to cert.pem> Instructs Zing to use and trust a specified SSL certificate on the filesystem. -Xlog:[+/-]concomp Display messages describing communication with Optimizer Hub. false ReadyNow Orchestrator JVM Options The following options are available in Azul Prime when using the ReadyNow Orchestrator with Optimizer Hub: Command Line Option Description Default -XX:OptHubHost={host:port} Address where Optimizer Hub is listening. The default is localhost:50051. See Connecting a JVM to Optimizer Hub for how instructions on determining the correct host and port. null -XX:ProfileLogName=<profilePath> Name of the profile that the JVM both reads from and writes to. Use of this flag is equivalent to using -XX:ProfileLogIn=<profilePath> -XX:ProfileLogOut=<profilePath>, and is the preferred way to specify profile names when different input and output names are not needed. If prefixed with opthub://, <profilePath> is used as the profile name in ReadyNow Orchestrator. If not prefixed with opthub://, <profilePath> is interpreted as a file path on the JVM. null -XX:ProfileLogOut=<profilePath> ProfileLogOut enables Zing to record compilations from the current run. <profilePath> is the name of the profile that the JVM reads as input to ReadyNow. If prefixed with opthub://, <profilePath> is used as the profile name in ReadyNow Orchestrator. If not prefixed with opthub://, <profilePath> is interpreted as a file path on the JVM. null -XX:ProfileLogIn=<profilePath> ProfileLogIn allows Zing to base its decisions on the information from a previous run. The current ProfileLogIn file information will be read in its entirety - before Zing starts to create a new ProfileLogOut log. <profilePath> is the name of the profile that the JVM reads as input to ReadyNow. If prefixed with opthub://, <profilePath> is used as the profile name in ReadyNow Orchestrator. If not prefixed with opthub://, <profilePath> is interpreted as a file path on the JVM. null -XX:ProfileLogOutNominationMinSize Indicate to server that the produced profile is eligible for promotion after specified amount of bytes recorded. 0 = any size eligible -1 = will never be promoted 1M -XX:ProfileLogOutNominationMinSizePerGeneration Define minimum acceptable amount of bytes per generation which the profile size should reach to become eligible for promotion. null -XX:ProfileLogOutNominationMinTimeSec When used with ReadyNow Orchestrator, the minimum time, in seconds, a profile must record before ReadyNow Orchestrator will nominate it as a candidate. 0 = any duration eligible -1 = will never be promoted 120 -XX:ProfileLogOutNominationMinTimeSecPerGeneration When used with ReadyNow Orchestrator, the minimum time, in seconds, per generation during which the profile should be recorded in order to become eligible for promotion. null -XX:ProfileLogOutMaxNominatedGenerationCount When used with ReadyNow Orchestrator, specifies the maximum generation of a profile that a VM will nominate. This JVM command line parameter overrides the serverside default to configure ReadyNow Orchestrator. 0 = unlimited 0 -XX:ProfileLogMaxSize=<value in bytes> Specifies the maximum size that a ReadyNow profile log is allowed to reach. Profiles will be truncated at this size, regardless of whether the application has actually been completely warmed up. This JVM command line parameter overrides the serverside default to configure ReadyNow Orchestrator. It is recommended to either not set this size explicitly, or set it generously if required, for example: -XX:ProfileLogMaxSize=1G 0 = unlimited 0 -XX:ProfileLogTimeLimitSeconds=<value in seconds> Instructs ReadyNow to stop adding to the profile log after a period of N seconds regardless of where the application has been completely warmed up. It is recommended to either not set this size explicitly, or set it generously if required. 0 = unlimited 0 -XX:ProfileLogDumpInputToFile=<name> Dumps input profile to the specified path. For debugging purposes only. null -XX:ProfileLogDumpOutputToFile=<name> Dumps output profile to the specified path. For debugging purposes only. null -XX:RNOConnectionTimeoutMillis Timeout on establishing remote connection and timeout on interval between downloading two chunks. Specified in milliseconds. 5000 -XX:RNOProfileFallbackInput Experimental feature. Local filesystem path which gets used in case no profile data is downloaded. E.g., in case of a missing connection or the requested profile name doesn’t exist on the server. null -XX:ProfileLogOutVerbose Enables logging of verbose, optional tracing information in -XX:ProfileLogOut true"
}, {
  "objectID" : "0a558db9-a24a-48d9-8dc8-a752effeba4c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Cloud Native Compiler JVM Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#cloud-native-compiler-jvm-options",
  "content" : "Cloud Native Compiler JVM Options Note The minimum JVM options to request compilations from Cloud Native Compiler are -XX:OptHubHost=<host:port> and -XX:+CNCEnableRemoteCompiler. Command Line Option Description Default -XX:OptHubHost=<host:port> Address where Optimizer Hub is listening. The default is localhost:50051. See Configuring Optimizer Hub Host and Port for instructions on determining the correct host and port. -XX:[+/-]CNCEnableRemoteCompiler Allows usage of the remote compiler when Cloud Native Compiler has established a connection. false -XX:CNCEngineUploadAddress=<host:port> Address to upload the compiler engine. Only needed when your Optimizer Hub has non-standard ports. See Specifying a Custom Compiler Engine Upload Port. -XX:[+/-]CNCAbortOnBadChannel With this flag, the JVM crashes if it loses connection with a Cloud Native Compiler. false -XX:[+/-]OptHubUseSSL Instructs Zing to communicate directly with Optimizer Hub without using SSL. Use this option if you installed Optimizer Hub without SSL. true -XX:OptHubSSLRootsPath=<path to cert.pem> Instructs Zing to use and trust a specified SSL certificate on the filesystem. -Xlog:[+/-]concomp Display messages describing communication with Optimizer Hub. false"
}, {
  "objectID" : "9184fc6b-9834-4e83-8131-36bbcb308ab3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "ReadyNow Orchestrator JVM Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#readynow-orchestrator-jvm-options",
  "content" : "ReadyNow Orchestrator JVM Options The following options are available in Azul Prime when using the ReadyNow Orchestrator with Optimizer Hub: Command Line Option Description Default -XX:OptHubHost={host:port} Address where Optimizer Hub is listening. The default is localhost:50051. See Connecting a JVM to Optimizer Hub for how instructions on determining the correct host and port. null -XX:ProfileLogName=<profilePath> Name of the profile that the JVM both reads from and writes to. Use of this flag is equivalent to using -XX:ProfileLogIn=<profilePath> -XX:ProfileLogOut=<profilePath>, and is the preferred way to specify profile names when different input and output names are not needed. If prefixed with opthub://, <profilePath> is used as the profile name in ReadyNow Orchestrator. If not prefixed with opthub://, <profilePath> is interpreted as a file path on the JVM. null -XX:ProfileLogOut=<profilePath> ProfileLogOut enables Zing to record compilations from the current run. <profilePath> is the name of the profile that the JVM reads as input to ReadyNow. If prefixed with opthub://, <profilePath> is used as the profile name in ReadyNow Orchestrator. If not prefixed with opthub://, <profilePath> is interpreted as a file path on the JVM. null -XX:ProfileLogIn=<profilePath> ProfileLogIn allows Zing to base its decisions on the information from a previous run. The current ProfileLogIn file information will be read in its entirety - before Zing starts to create a new ProfileLogOut log. <profilePath> is the name of the profile that the JVM reads as input to ReadyNow. If prefixed with opthub://, <profilePath> is used as the profile name in ReadyNow Orchestrator. If not prefixed with opthub://, <profilePath> is interpreted as a file path on the JVM. null -XX:ProfileLogOutNominationMinSize Indicate to server that the produced profile is eligible for promotion after specified amount of bytes recorded. 0 = any size eligible -1 = will never be promoted 1M -XX:ProfileLogOutNominationMinSizePerGeneration Define minimum acceptable amount of bytes per generation which the profile size should reach to become eligible for promotion. null -XX:ProfileLogOutNominationMinTimeSec When used with ReadyNow Orchestrator, the minimum time, in seconds, a profile must record before ReadyNow Orchestrator will nominate it as a candidate. 0 = any duration eligible -1 = will never be promoted 120 -XX:ProfileLogOutNominationMinTimeSecPerGeneration When used with ReadyNow Orchestrator, the minimum time, in seconds, per generation during which the profile should be recorded in order to become eligible for promotion. null -XX:ProfileLogOutMaxNominatedGenerationCount When used with ReadyNow Orchestrator, specifies the maximum generation of a profile that a VM will nominate. This JVM command line parameter overrides the serverside default to configure ReadyNow Orchestrator. 0 = unlimited 0 -XX:ProfileLogMaxSize=<value in bytes> Specifies the maximum size that a ReadyNow profile log is allowed to reach. Profiles will be truncated at this size, regardless of whether the application has actually been completely warmed up. This JVM command line parameter overrides the serverside default to configure ReadyNow Orchestrator. It is recommended to either not set this size explicitly, or set it generously if required, for example: -XX:ProfileLogMaxSize=1G 0 = unlimited 0 -XX:ProfileLogTimeLimitSeconds=<value in seconds> Instructs ReadyNow to stop adding to the profile log after a period of N seconds regardless of where the application has been completely warmed up. It is recommended to either not set this size explicitly, or set it generously if required. 0 = unlimited 0 -XX:ProfileLogDumpInputToFile=<name> Dumps input profile to the specified path. For debugging purposes only. null -XX:ProfileLogDumpOutputToFile=<name> Dumps output profile to the specified path. For debugging purposes only. null -XX:RNOConnectionTimeoutMillis Timeout on establishing remote connection and timeout on interval between downloading two chunks. Specified in milliseconds. 5000 -XX:RNOProfileFallbackInput Experimental feature. Local filesystem path which gets used in case no profile data is downloaded. E.g., in case of a missing connection or the requested profile name doesn’t exist on the server. null -XX:ProfileLogOutVerbose Enables logging of verbose, optional tracing information in -XX:ProfileLogOut true"
}, {
  "objectID" : "43a8b253-a637-4343-a792-236f92f0ecb1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "CPU Budgeting Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#cpu-budgeting-options",
  "content" : "CPU Budgeting Options These CPU Budgeting options are applicable to the Falcon Tier 2 Compiler. Flag Description Default -XX:[+/-]EnableTier2CompilerBudgeting Enables CPU budgeting options for the C2 compiler. false -XX:CIMaxCompilerThreads=<number of threads> Defines the maximum number of threads which can be dedicated to the compiler. Dependent on the CPU count -XX:CIMaxCompilerThreadsPercent=<percent of threads> Defines the maximum number of threads, as a percent, which can be dedicated to the compiler. The number of threads is rounded up to the nearest whole number. Use the option CompilerTier2BudgetingCPUPercent instead to use a fractional value. Dependent on the CPU count -XX:CompilerWarmupExtraThreads=<number of threads> Defines how many extra threads over CIMaxCompilerThreads the C2 compiler can use during warmup, before the Main class in compiled. After warmup, the value of CIMaxCompilerThreads shall be respected. 0 -XX:ProfilePreMainTier2ExtraCompilerThreads=<number of threads> Defines how many extra threads over CIMaxCompilerThreads the C2 compiler can use during warmup, before Main class is compiled. 0 -XX:CompilerWarmupPeriodSeconds=<value in seconds> Defines how long the C2 compiler warmup period shall be, in seconds. 0 -XX:CompilerTier2BudgetingWarmupCPUPercent=<value> Specifies the number of threads, as a percent, which can be used for C2 compilation during warmup. The resulting value can be less than 1 thread or any other non-whole number of threads. The C2 compiler waits for this percent of threads to be available before continuing. 0 -XX:CompilerTier2BudgetingCPUPercent=<value> Specifies the number of threads, as a percent, which can be used for C2 compilation post warmup. 67 -XX:CompilerTier2BudgetWindowDurationMs=<value in ms> Specifies a window of time, in ms, in which the average CPU consumption of the compiler shall not exceed CompilerTier2BudgetingCPUPercent. 1000"
}, {
  "objectID" : "e3a01e88-e656-45fc-9877-0a5d4ec8c34c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Compilation Ranks by Priority",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#_compilation_ranks",
  "content" : "Compilation Ranks by Priority These options allow the Falcon Tier 2 Compiler to assign compilation ranks to methods based on min-time-between-promotions. Each method, based on its min-time-between-promotions value, is assigned a rank: hot, warm, or cold. For more information on compilation ranks, see Analyzing and Tuning Warmup. Flag Description Default -XX:TopTierCompileThresholdTriggerMillis=<value in ms> Previously TopTierCompileThresholdMs - Controls the triggering time limit (in ms) in which the method needs to reach the compile threshold in order to be queued for compilation. If the threshold is reached, but not within this time limit, the method is ignored and the timer starts over again. This option assigns the same value to TopTierHotCompileThresholdTriggerMillis and TopTierWarmCompileThresholdTriggerMillis, creating a boundary between hot and cold ranks while eliminating the warm rank. This option must not be set if you are using TopTierHotCompileThresholdTriggerMillis and TopTierWarmCompileThresholdTriggerMillis to specify hot, warm, and cold ranks. 2147483647 -XX:TopTierHotCompileThresholdTriggerMillis=<value in ms> Sets an upper bound for min-time-between-promotions for the hot rank and a lower bound for the warm rank. The upper bound for the hot rank is 1ms less than the value set. 2147483647 -XX:TopTierWarmCompileThresholdTriggerMillis=<value in ms> Sets the upper bound for min-time-between-promotions for the warm rank and lower bound for the cold rank. The upper bound for the warm rank is 1ms less than the value set. 600000 -XX:TopTierWarmCompileCpuPercent Specifies the percentage of CPU time from the total budget available to compiler threads that can be spent on warm rank compilation. hot ranks are given 100% and cold ranks are given 0%. -1 The default settings for compilation ranking by priority sets the following ranks: hot: 0-59999ms min-time-between-promotions, budget 100% cold: 60000-599999ms min-time-between-promotions, budget 25% skip: 600000ms-inf min-time-between-promotions, budget 0%"
}, {
  "objectID" : "4dda4aeb-a773-4451-9a48-e6c59615dcfc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "ReadyNow Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#readynow-options",
  "content" : "ReadyNow Options Below are the ReadyNow-specific command-line options: Option Description Default -XX:ProfileLogOut=<filename> ProfileLogOut enables Zing to record compilations from the current run. <filename> is the name of the profile that the JVM reads as input to ReadyNow. If prefixed with cnc://, it will attempt to pull the profile from Cloud Native Compiler. If ReadyNow is configured as a rolling profile (with ProfileLogIn equal to ProfileLogOut), The JVM creates a backup of the input profile at startup before the profile is being read into memory. Otherwise, the file will be overwritten. null -XX:ProfileLogIn=<filename> ProfileLogIn allows Zing to base its decisions on the information from a previous run. The current ProfileLogIn file information will be read in its entirety - before Zing starts to create a new ProfileLogOut log. <filename> is the name of the profile that the JVM reads as input to ReadyNow. If prefixed with cnc://, it will attempt to pull the profile from Cloud Native Compiler. null -XX:ProfileLogName=<name> Name of the profile that the JVM both reads from and writes to. If prefixed with cnc://, it will attempt to write from Cloud Native Compiler. Replaces ProfileLogIn and ProfileLogOut. Can be used in place of -XX:ProfileLogIn=<profile1> -XX:ProfileLogOut=<profile1> null -XX:ProfileLogDumpInputToFile=<name> Dump input profile to the specified path. For debugging purposes only. null -XX:ProfileLogDumpOutputToFile=<name> Dump output profile to the specified path. For debugging purposes only. null -XX:ProfileLogMaxSize=<value>[K|M|G] Specifies the maximum size that a ReadyNow profile log is allowed to reach. Units can be specified in kilobytes (K or k), megabytes (M or m), or gigabytes (G or g). Profiles will be truncated at this size, regardless of whether the application has actually been completely warmed up. It is recommended to either not set this size explicitly, or set it generously if required, for example: -XX:ProfileLogMaxSize=1G 0 = unlimited 0 -XX:ProfileLogOutMaxNominatedGenerationCount=<value> When used with Cloud Native Compiler, specifies the maximum generation of a profile that a VM will nominate. If ContinueRecordingAfterPromotion (CNC server-side parameter) is set to false (default), then the JVM will not output another generation after this limit has been reached. If ContinueRecordingAfterPromotion is true, the JVM will output another generation to Cloud Native Compiler but will never nominate it. These additional generations are for debugging and analysis only. 0 = unlimited 0 -XX:ProfileLogOutNominationMinTimeSec=<value in seconds> When used with Cloud Native Compiler, the minimum time, in seconds, a profile must record before CNC will nominate it as a candidate. If no -XX:ProfileLogOutNominationMinTimeSec is set, then the candidate is nominated by CNC when -XX:ProfileLogTimeLimitSeconds is reached. 0 = any duration eligible, -1 means it will never be promoted 120 -XX:ProfileLogTimeLimitSeconds=<value in seconds> Instructs ReadyNow to stop adding to the profile log after a period of N seconds regardless of where the application has been completely warmed up. It is recommended to either not set this size explicitly, or set it generously if required. 0 = unlimited 0 -XX:ProfileLogServiceConnectionTimeoutMillis=<value in ms> Timeout on establishing remote connection and timeout on interval between downloading two chunks. Specified in milliseconds. 5000 -XX:ProfileLogOutNominationMinSize=<value in bytes> Indicate to server that the produced profile is eligible for promotion after specified amount of bytes recorded. 0 = any size eligible, -1 means it will never be promoted 1m -XX:[+/-]ProfileLogOutVerbose Enables logging of verbose, optional tracing information in -XX:ProfileLogOut true Compile Stashing Options Compile Stashing is a Zing feature that caches compiles performed in one run and reuses them in subsequent runs. For more information on Compile Stashing, see Using Compile Stashing Use the following command-line options to control caching and enable reporting: Option Description Default -XX:[+/-]FalconUseCompileStashing Enables/disables Compile Stashing, populates the cache. false. Before 19.12.0.0, true if -XX:ProfileLogOut is set. -XX:FalconObjectCacheRoot=<path> Sets the cache location. By default, different instances of Zing running on the same host share the same stash location. However, different instances can be configured to use different locations via the FalconObjectCacheRoot option. $HOME/.zing/falcon-cache/<zvm_version>/ -XX:[+/-]FalconLoadObjectCache Enables loading from compile cache. false -XX:[+/-]FalconSaveObjectCache Enables saving to compile cache. false -XX:FalconMaxStashedCompileSize=<max_size in bytes> Specifies the maximum size of a stashed compile entry. When running multiple virtual machines concurrently, different cache sizes for different virtual machines are not recommended. Similar cache sizes are advised. 0 -XX:FalconMaxCacheSize=<max_size in bytes> Specifies the maximum size of the compile cache. 10 GB 1-XX:[+/-]FalconObjectCachePrintReport Prints stashing statistics. false -XX:[+/-]FalconObjectCachePrintPrecompilationReport Prints stashing report at the end of ReadyNow precompilation. false"
}, {
  "objectID" : "0ebb47e9-1a70-4a09-8a1d-cd2c5d35f625",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Compile Stashing Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#compile-stashing-options",
  "content" : "Compile Stashing Options Compile Stashing is a Zing feature that caches compiles performed in one run and reuses them in subsequent runs. For more information on Compile Stashing, see Using Compile Stashing Use the following command-line options to control caching and enable reporting: Option Description Default -XX:[+/-]FalconUseCompileStashing Enables/disables Compile Stashing, populates the cache. false. Before 19.12.0.0, true if -XX:ProfileLogOut is set. -XX:FalconObjectCacheRoot=<path> Sets the cache location. By default, different instances of Zing running on the same host share the same stash location. However, different instances can be configured to use different locations via the FalconObjectCacheRoot option. $HOME/.zing/falcon-cache/<zvm_version>/ -XX:[+/-]FalconLoadObjectCache Enables loading from compile cache. false -XX:[+/-]FalconSaveObjectCache Enables saving to compile cache. false -XX:FalconMaxStashedCompileSize=<max_size in bytes> Specifies the maximum size of a stashed compile entry. When running multiple virtual machines concurrently, different cache sizes for different virtual machines are not recommended. Similar cache sizes are advised. 0 -XX:FalconMaxCacheSize=<max_size in bytes> Specifies the maximum size of the compile cache. 10 GB 1-XX:[+/-]FalconObjectCachePrintReport Prints stashing statistics. false -XX:[+/-]FalconObjectCachePrintPrecompilationReport Prints stashing report at the end of ReadyNow precompilation. false"
}, {
  "objectID" : "ca6e6ee0-3622-4e11-90ad-453ea44a267f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Tick Profiler Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#tick-profiler-options",
  "content" : "Tick Profiler Options The Tick Profiler provides information to allow calculation of how processor resources are used for an interval of recorded time. Below is the Tick Profiler-specifc command-line option: Option Description Default -XX:[+/-]UseTickProfiler Enables and disables profiling of processor core time spent between various software execution units (for example, threads, methods, and run-time tasks). Due to known issues with version 3.10 and earlier Linux kernels, including those used in RHEL 7.x and CentOS 7.x, using +UseTickProfiler in production should be done with caution, as potential hangs may result under heavy loads. false"
}, {
  "objectID" : "f90e93b7-9188-4449-a4c0-7736160bd503",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Out-of-Memory Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#out-of-memory-options",
  "content" : "Out-of-Memory Options Out-of-Memory command-line options let the JVM handle out-of-memory occurrences: Option Description Default -XX:[+/-]ExitOnOutOfMemoryError Enables the JVM exit on the first occurrence of an out-of-memory error. Useful if you prefer restarting an instance of the JVM to handling out of memory errors. false -XX:[+/-]CrashOnOutOfMemoryError Enables the JVM crash and produce text and binary crash files when an out-of-memory error occurs. false"
}, {
  "objectID" : "3f52c16a-ee22-4804-808b-f7aac6f1c301",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Flight Recorder Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#flight-recorder-options",
  "content" : "Flight Recorder Options Flight Recorder command-line options gather and register events that help to understand the behavior of a Java Application and Zing: Option Description Default -XX:[+/-]FlightRecorder The Java Flight Recorder (JFR) is always available in Zing, this flag is not needed to use JFR. This flag is useful only to prevent JFR from being activated by users or from within an application. That can be achieved by adding -XX:-FlightRecorder to the command line. It gives no performance benefit. See Using Java Flight Recorder for details. false JFR remains available until -XX:-FlightRecorder is set -XX:StartFlightRecording Starts a flight recording from the command line with recording parameters provided as a value for this option. For example, -XX:StartFlightRecording=filename=myrecording.jfr starts a recording in the file system while -XX:StartFlightRecording=disk=false,filename=myrecording.jfr starts an in-memory recording. In both cases the result is written to the myrecording.jfr file at the end of the JVM session. For the description of additional Java Flight Recording (JFR) parameters refer to JFR resources available in the Internet. null -XX:FlightRecorderOptions Specifies additional parameters to configure Java Flight Recorder (JFR). For the description of additional JFR parameters refer to JFR resources available in the Internet. null -XX:JFRDescribeLiveSetPercentage=<value> Specifies the percentage amount of a live set to be described by recorded JFR events. To omit some minor events from the recording, change the value of this option to a smaller number, e.g., 90. 99 -XX:[+/-]UseTickProfilerAsJFRThreadSampler Enables Zing to use the Tick Profiler instead of the JFR Thread Sampler. When set to true, EventExecutionSample JFR events are generated from data provided by the Tick Profiler. true -XX:TickProfilerNotifierIntervalMillis=<value in ms> Controls the interval between consecutive polls for the new Tick Profiler samples to pass them to the JFR in-memory buffer. This option has an effect only when -XX:+UseTickProfilerAsJFRThreadSampler is specified. 200"
}, {
  "objectID" : "34668fbd-c0a7-4c93-a316-3af35de93be8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Command-Line Options",
  "section" : "Zing MXBean Options",
  "url" : "https://docs.azul.com/prime/Command-Line-Options",
  "link" : "https://docs.azul.com/prime/Command-Line-Options#zing-mxbean-options",
  "content" : "Zing MXBean Options Zing MXBean command-line options help monitor the Zing heap utilization: Option Description Default -XX:[+/-]ReportUsedAsCommitted The MemoryMXBean.getHeapMemoryUsage() method of MXBeans API returns the value of the Committed memory equal to the amount of JVM heap memory guaranteed as available for running an application (see Understanding Heap Memory Management for details). To switch to the old behavior of the MXBeans interface that returned the value of the Committed memory equal to Used memory, change the value of this option to true. false -XX:[+/-]MimicG1GCMemoryManagerNames Changes garbage collector names returned by GarbageCollectorMXBean from GPGC to G1. To define exact New and Old GC names use -XX:GPGCNewGCMemoryManagerName=\"GPGC New\" and -XX:GPGCOldGCMemoryManagerName=\"GPGC Old\" respectively. This option provides a workaround for applications that do not recognize GPGC names such as Logstash. false -XX:GPGCNewGCMemoryManagerName=<New collector name> Sets the name returned by GarbageCollectorMXBean for the New generation collector. GPGC New -XX:GPGCOldGCMemoryManagerName=<Old collector name> Sets the name returned by GarbageCollectorMXBean for the Old generation collector. GPGC Old -XX:[+/-]IncludeNonObjectHeapInReportedJavaHeap Makes Java heap reporting APIs and Tools include \"non-object\" use. false -XX:[+/-]ReportConstantMaxPossibleHeapAsMaxJavaHeap Lets APIs which report max heap capacity be aware of elasticity. false"
}, {
  "objectID" : "6803f751-14c1-437a-9a94-dee84cb8c627",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "About ReadyNow",
  "section" : "What is ReadyNow?",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow#what-is-readynow",
  "content" : "What is ReadyNow? ReadyNow is a feature of Azul Platform Prime that, when enabled, dramatically improves the warm-up behavior of the application. What is Warm-Up? Warm-up is the time taken for the Java application to reach optimal performance. It is the task of the Just-in-Time (JIT) compiler to deliver optimal performance by producing optimized compiled code from application bytecode. This process takes time as the JIT compiler seeks optimization opportunities based upon profiling of the application. How Does ReadyNow Work? ReadyNow persists the profiling information gathered during the run of the application so that subsequent runs do not have to learn again from scratch. Warm-up improves each application run until optimal performance is reached. Running ReadyNow To enable ReadyNow, add the following command-line options, where <file> is typically the same for both: -XX:ProfileLogIn=<file> instructs Azul Platform Prime to use information from an existing profile log. -XX:ProfileLogOut=<file> records the previous compilation and the deoptimization decisions from the run. Running the application will then automatically generate or update a profile log. This profile log will be consumed upon subsequent runs of the application, improving warm-up."
}, {
  "objectID" : "a3d1d350-8aa9-4605-b087-6270bd853407",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "About ReadyNow",
  "section" : "What is ReadyNow?",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow#what-is-readynow",
  "content" : "What is ReadyNow? ReadyNow is a feature of Azul Platform Prime that, when enabled, dramatically improves the warm-up behavior of the application."
}, {
  "objectID" : "08535485-743a-4601-aa1b-055c2d3f15f7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "About ReadyNow",
  "section" : "What is Warm-Up?",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow#what-is-warm-up",
  "content" : "What is Warm-Up? Warm-up is the time taken for the Java application to reach optimal performance. It is the task of the Just-in-Time (JIT) compiler to deliver optimal performance by producing optimized compiled code from application bytecode. This process takes time as the JIT compiler seeks optimization opportunities based upon profiling of the application."
}, {
  "objectID" : "c3175d3b-8318-4b04-8d76-e963829b631d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "About ReadyNow",
  "section" : "How Does ReadyNow Work?",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow#how-does-readynow-work",
  "content" : "How Does ReadyNow Work? ReadyNow persists the profiling information gathered during the run of the application so that subsequent runs do not have to learn again from scratch. Warm-up improves each application run until optimal performance is reached."
}, {
  "objectID" : "7c67a4a2-2d73-49d0-b899-b8e7dec14dac",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "About ReadyNow",
  "section" : "Running ReadyNow",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow#running-readynow",
  "content" : "Running ReadyNow To enable ReadyNow, add the following command-line options, where <file> is typically the same for both: -XX:ProfileLogIn=<file> instructs Azul Platform Prime to use information from an existing profile log. -XX:ProfileLogOut=<file> records the previous compilation and the deoptimization decisions from the run. Running the application will then automatically generate or update a profile log. This profile log will be consumed upon subsequent runs of the application, improving warm-up."
}, {
  "objectID" : "6c19f3a0-a6a5-4185-af0f-03efdb781d52",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Training ReadyNow",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow-Training",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow-Training",
  "content" : "Since ReadyNow learns from previous executions and improves warm-up and start-up time incrementally at every new invocation, you need to train ReadyNow to improve your application performance. ReadyNow gathers data from training runs and stores it in a profile log which ensures better performance after the first and subsequent runs. Depending on your goals and constraints, different approaches to train ReadyNow profile can apply."
}, {
  "objectID" : "632857e0-44a6-49ef-9343-3f8d5bf4c362",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Training ReadyNow",
  "section" : "Optimal Approach (Pre-Production)",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow-Training",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow-Training#optimal-approach-pre-production",
  "content" : "Optimal Approach (Pre-Production) To produce a profile that minimizes or eliminates learning in production, follow this approach. Train the profile across two separate runs in the pre-production environment with the following command-line options:  -XX:ProfileLogIn=<file> -XX:ProfileLogOut=<file> That is, perform a run of the application until it reaches optimal performance, restart the JVM using the profile just generated, and again run the application until it reaches optimal performance. Note, to reach an optimal profile, a minimum of 10,000 executions of all important application methods are needed in each run."
}, {
  "objectID" : "23d1d08e-70e8-4d6a-91f8-d4abc75df409",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Training ReadyNow",
  "section" : "Basic Approach (Pre-Production)",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow-Training",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow-Training#basic-approach-pre-production",
  "content" : "Basic Approach (Pre-Production) If time for training ReadyNow is limited, perform one run of your application in the pre-production environment with the following command-line options:  -XX:ProfileLogIn=<file> -XX:ProfileLogOut=<file> This captures a very good profile. Such a profile may feature a possible odd outlier on the first day of production run but will improve with subsequent runs."
}, {
  "objectID" : "90981fad-b8fb-49cb-aa5f-221ee6ec2dcf",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Training ReadyNow",
  "section" : "No Profile Approach (Production)",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow-Training",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow-Training#no-profile-approach-production",
  "content" : "No Profile Approach (Production) If you cannot create a profile in a pre-production environment, allow it to learn in production with the following command-line options:  -XX:ProfileLogIn=<file> -XX:ProfileLogOut=<file> This results in the poor warm-up first day in production but better performance on subsequent days."
}, {
  "objectID" : "c23e2b59-07e7-436d-806e-b95cd4952f56",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Training ReadyNow",
  "section" : "Understanding if Training Was Enough",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow-Training",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow-Training#understanding-if-training-was-enough",
  "content" : "Understanding if Training Was Enough To validate the sufficiency of ReadyNow training, check for outliers. The absence of outliers denotes the training went well. Reduced start-up latency also proves there is enough training data gathered in a profile log. Otherwise, a few more runs are needed to enhance the profile content and get a fully optimized profile log."
}, {
  "objectID" : "d5c98b28-e7be-462d-b9ec-a6b920ce5bbc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Reducing Uninitialized Deoptimizations",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow-Deopts",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow-Deopts",
  "content" : "In some applications, uninitialized deoptimizations are common. This problem typically occurs in applications with a warm-up phase that does not compile all the necessary methods. Resolving dependencies in the Java thread as compilation is being scheduled is key. It removes many trapping situations and by combining eager initialization with eager resolution, traps can often be eliminated completely, even for new objects and static field and method access."
}, {
  "objectID" : "6ef8277d-29f4-4c2b-b489-18e1de13aae6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Reducing Uninitialized Deoptimizations",
  "section" : "Using UseEnhancedClassResolution as a Flag",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow-Deopts",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow-Deopts#using-useenhancedclassresolution-as-a-flag",
  "content" : "Using UseEnhancedClassResolution as a Flag To reduce uninitialized deoptimizations, Azul Zing Builds of OpenJDK (Zing) provide the flag UseEnhancedClassResolution. This flag reduces uninitialized deoptimizations when the class is already loaded and initialized, but has not been resolved within a particular class This optimization only applies to allocation sites and might not help applications that are deliberated design to avoid garbage collection."
}, {
  "objectID" : "7c85ed83-0234-49ea-be1f-3d3d7b42932d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Reducing Uninitialized Deoptimizations",
  "section" : "Using UseEnhancedClassResolution as an Option",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow-Deopts",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow-Deopts#using-useenhancedclassresolution-as-an-option",
  "content" : "Using UseEnhancedClassResolution as an Option The UseEnhancedClassResolution option can be used on per method basis in the CompileCommandFile, but given the low impact on throughput, this is usually unnecessary."
}, {
  "objectID" : "556250b3-15e2-4108-8aad-269bf8975b7b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Reducing Uninitialized Deoptimizations",
  "section" : "Using EagerInitializeDuringEarlyClassLoading as a Flag",
  "url" : "https://docs.azul.com/prime/Use-ReadyNow-Deopts",
  "link" : "https://docs.azul.com/prime/Use-ReadyNow-Deopts#using-eagerinitializeduringearlyclassloading-as-a-flag",
  "content" : "Using EagerInitializeDuringEarlyClassLoading as a Flag If UseEarlyClassLoading is already being used and UseEnhancedClassResolution failed to reduce uninitialized deoptimizations, using the flag EagerInitializeDuringEarlyClassLoading may help."
}, {
  "objectID" : "701539dc-5fb8-431e-9256-35a9aad3dcc6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Compile Stashing",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Compile-Stashing",
  "link" : "https://docs.azul.com/prime/Compile-Stashing",
  "content" : "Compile Stashing is an Azul Zing Builds of OpenJDK (Zing) feature that caches compiles performed in one run and reuses them in subsequent runs. Compile Stashing used with ReadyNow has mixed results but has been shown to significantly reduce compiler start time and CPU usage in some cases."
}, {
  "objectID" : "20b221bd-c32b-4f01-92e8-87f95b147d95",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Compile Stashing",
  "section" : "Usage Recommendations",
  "url" : "https://docs.azul.com/prime/Compile-Stashing",
  "link" : "https://docs.azul.com/prime/Compile-Stashing#usage-recommendations",
  "content" : "Usage Recommendations It is recommended to use Compile Stashing with ReadyNow for the best results. Note Starting with ZVM 19.12.0.0, Compile Stashing is not enabled by default with the -XX:ProfileLogOut command-line option. Compile Stashing is still enabled by default only in combination with the -XX:ProfileLogIn command-line option. Use -XX:+FalconUseCompileStashing if you need to turn on Compile Stashing, and -XX:-FalconUseCompileStashing to turn it off. The structure of a disk cache location can change. It is safe to delete an arbitrary file from a directory. The default configuration when all Zing JVMs use the same cache is beneficial because the JVMs can reuse each other’s compilations when all JVM instances running on the same machine use the same cache. To avoid the slowdown of the Compile Stashing read, write, and lookup functions, make sure the cache file system is fast (for example, stored locally)."
}, {
  "objectID" : "37a38bff-d5ce-451b-bc73-5c07b40ab34b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Compile Stashing",
  "section" : "Populating Compile Stashing",
  "url" : "https://docs.azul.com/prime/Compile-Stashing",
  "link" : "https://docs.azul.com/prime/Compile-Stashing#populating-compile-stashing",
  "content" : "Populating Compile Stashing To populate the cache, use the -XX:+FalconUseCompileStashing command-line option. You can adjust the cache size using the -XX:FalconMaxCacheSize=<size in bytes> option, where number is how many gigabytes you allocate for your cache. Compile Stashing writes compiled code to the file system to access it again for the next run of Zing. By default, it writes up to 10 GB of data to the file system at $HOME/.zing/falcon-cache/<zvm_version>/ so you must provide enough free space in $HOME. If the home directory is smaller than 10 GB, use the -XX:FalconObjectCacheRoot=<path> command-line option to change the default location or disable Compile Stashing. Compile Stashing can work without ReadyNow. However, if both are enabled, the startup time is significantly reduced."
}, {
  "objectID" : "f94d7c78-94c8-4072-b101-4be66bf9dfaa",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Compile Stashing",
  "section" : "Command-Line Options for Compile Stashing",
  "url" : "https://docs.azul.com/prime/Compile-Stashing",
  "link" : "https://docs.azul.com/prime/Compile-Stashing#command-line-options-for-compile-stashing",
  "content" : "Command-Line Options for Compile Stashing For the full list of Command Line Options for Compile Stashing, see Command Line Option, Compile Stashing Options. When printing stashing statistics is enabled, it is included in the cumulative report as shown in the sample below:  Stashing Final:\nCompiles performed: 2204\nEstimated compile time win: 0.0s\nEstimated avg. compile time win: -nans\nBiggest compile time win: 0.0s\nMatches attempted: 2204 (100.0%)\nReads excluded via compile command: 0\nSucceeded to match: 0 (0.0%)\nMissing in cache: 408 (18.5%)\nCache found but did not match: 1796 (81.5%)\nAdded to cache: 0 (0.0%)\nWrites excluded via compile command: 0\nLookup errors: 0\nWrite errors: 0"
}, {
  "objectID" : "e058515f-c463-4be5-8170-bddbfeb7968b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Recommended Heap Size",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Heap-Size",
  "link" : "https://docs.azul.com/prime/Heap-Size",
  "content" : "The -Xmx or -XX:MaxRAMPercentage command line parameters specifies the maximum Java heap size. That’s the amount of memory available for the Java application running on Azul Zing Builds of OpenJDK (Zing) to store its objects and classes. Starting with Azul Platform Prime 21.07.0.0, the heap elasticity feature is enabled by default when Azul Zing System Tools (ZST) are not installed. Heap elasticity provides elastic expansion and shrinking of the Java heap. The garbage collector tries to minimize the memory footprint, keeping it between the user-defined range of -Xms and -Xmx. At the same time, Azul Platform Prime monitors the CPU usage of the garbage collector and relaxes the memory minimizing goal when the CPU usage increases too much. The metrics used to determine when to acquire or release memory are the percentage of wall-clock time the garbage collector concurrently (GC Time % metric visible in the GC Log Analyzer) and the CPU utilization of the GC threads. By default, the GC tries to keep the GC time below 40%, and the CPU utilization below 5% of all available CPUs. Memory is released when the GC time drops below 3%. Flags to define the Java heap size: -Xmx<size>[m|M|g|G] Specifies the maximum size of the Java heap. Examples to specify a 10GB heap: -Xmx10240M or -Xmx10G The minimum value is 512 MB. Starting with Zing 21.05.0.0, the default value when no -Xmx parameter is set matches OpenJDK and is 25% of the system RAM or cgroup/container limit. The upper limit of the default value is 32GB. The possible maximum setting is 2500GB (2.5TB). When ZST is installed, the default value is 1GB and the maximum is 20000GB (20TB). -Xms<size>[m|M|g|G] Starting with 21.07.0.0, this flag specifies the minimum size of the Java heap that is committed at the start of the Java process. During uptime, the garbage collector uses this minimum value as target heap utilization to minimize the memory footprint. For application environments with primary goal of reducing latency and highest throughput performance, you should set -Xms to the value of -Xmx to avoid CPU-intensive memory optimization. The default value is 1.5625% of the total system memory or cgroup/container limit, and ranges from 512 MB to 2 GB. When ZST is installed, this parameter is ignored and the minimum heap size equal to -Xmx, except when heap elasticity is enabled. -XX:MaxRAMPercentage=<value> This is an alternative to -Xmx and defines the maximum heap size as percentage of the RAM of the machine, container or cgroup. With JDK 8, a decimal number is required as value, like 75.0. On JDK 11 and later integer numbers are also accepted. -XX:InitialRAMPercentage=<value> This is an alternative to -Xms and defines the initial heap size as percentage of the RAM of the machine, container or cgroup. With JDK 8, a decimal number is required as value, like 5.0. On JDK 11 and later integer numbers are also accepted. For application environments with primary goal of reducing latency and highest throughput performance, you should set InitialRAMPercentage to the value of MaxRAMPercentage to avoid CPU-intensive memory optimization."
}, {
  "objectID" : "3a180c7c-2b48-41b3-a988-2d4a31cbdbf1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Applications",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Native-Application",
  "link" : "https://docs.azul.com/prime/Native-Application",
  "content" : "A native application is any application that is written in a language other than Java and calls JNI_CreateJavaVM to create the VM and makes calls to Java code. This is usually written in C/C++ and contains the “main” function to start execution. For Information about known issues while running native launch apps with Azul Zing Builds of OpenJDK (Zing), see Known Issues Running Native Apps in the Troubleshooting Azul Platform Prime section of this guide. For information about garbage collection and tuning, see GC Log File Analyser."
}, {
  "objectID" : "bfcd950c-03ef-4873-b50d-c9ea79ff16b3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Applications",
  "section" : "Invoking Native Applications with Zing",
  "url" : "https://docs.azul.com/prime/Native-Application",
  "link" : "https://docs.azul.com/prime/Native-Application#invoking-native-applications-with-zing",
  "content" : "Invoking Native Applications with Zing If Native (C/C++) applications invoke Zing, consider these issues before you execute your code. Native application — Identify how the native app creates the VM to find possible collisions with areas used by or allocated by Zing. Consider known limitations when running native apps on Azul Platform Prime. Identify the issues by the failure messages. Invoking Zing — check for differences between a stock build and a Zing build. Native apps should also know how to run Zing-specific features such as the Tick Profiler mechanism and C-Heap Leak detection. Consult the cases listed below to determine your best course of action."
}, {
  "objectID" : "1c54f669-fb5e-459e-a47a-6fd9941c18d6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Applications",
  "section" : "Invoking Zing in Native Applications",
  "url" : "https://docs.azul.com/prime/Native-Application",
  "link" : "https://docs.azul.com/prime/Native-Application#invoking-zing-in-native-applications",
  "content" : "Invoking Zing in Native Applications There are two primary ways of invoking Zing in native applications. Key sections of code are highlighted. Case 1: Native application dlopens libjvm.so and uses dlsym to find 'JNI_CreateJavaVM’. Note libjvm.so is dependent on libraries inside the paths mentioned in LD_LIBRARY_PATH. Sample source:  ...\nJavaVMInitArgs vm_args;\nJavaVMOption options[1];\noptions.optionString = \"-Djava.class.path=./\";\nvm_args.version = JNI_VERSION_1_6;\nvm_args.options = options;\nvm_args.nOptions = 1;\n\n/* Create the Java VM */\nvoid* libjvm_handle;\njint (*createVM_handle) (JavaVM **pvm, void **penv, void *args);\nlibjvm_handle = dlopen(\"libjvm.so\", RTLD_LOCAL | RTLD_LAZY);\nif (!libjvm_handle) {\nfprintf(stderr, \"Can't load libjvm.so with error %s\\n\",dlerror());\nexit(1);\n}\ncreateVM_handle = dlsym(libjvm_handle, \"JNI_CreateJavaVM\");\nres = createVM_handle(&jvm, (void**)&env, &vm_args);\nif (res < 0) {\nfprintf(stderr, \"Can't create Java VM\\n\");\nexit(1);\n}\n... Sample build/compile line:  gcc -fPIC -I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux –o hello_world hello_world.c Sample run:  LD_LIBRARY_PATH=${JAVA_HOME}/jre/lib/amd64/server:$LD_LIBRARY_PATH ./hello_world Case 2: Native application directly calls JNI_CreateJavaVM by linking against libjvm. Sample source:  ...\nJavaVMInitArgs args;\nJavaVMOption options;\nargs.version = JNI_VERSION_1_6;\nargs.nOptions = 1;\noptions.optionString = \"-Djava.class.path=./\";\nargs.options = &options;\nint rv;\nrv = JNI_CreateJavaVM(jvm, (void**)&env, &args);\nif (rv < 0 || !env)\nprintf(\"Unable to Launch JVM %d\\n\",rv);\nelse\nprintf(\"Launched JVM! \\n\");\n... Sample build/compile line:  export LD_LIBRARY_PATH=${JAVA_HOME}/etc/zing/lib:${JAVA_ HOME}/etc/orca/lib:${JAVA_HOME}/etc/libc++:${LD_LIBRARY_PATH} gcc -fPIC - I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux -L${JAVA_HOME}/jre/lib/amd64/server –ljvm –o hello_world hello_world.c Sample run:  LD_LIBRARY_PATH=${JAVA_HOME}/jre/lib/amd64/server:$LD_LIBRARY_PATH ./hello_world The libjvm.so library has a dependency on the libstdc` version 3.4.20 or higher. If the executable loads `libstdc from the system, where the version of libstdc++ is less than 3.4.20, the following error is thrown:  /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20` not found (required by /path/to/libjvm.so) See Troubleshooting Zing JVM Errors for the details and solution."
}, {
  "objectID" : "d463d0c7-c161-47ac-9347-5cdf33e17495",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Version 1.3 of Transport Layer Security (TLS) Protocol",
  "section" : "",
  "url" : "https://docs.azul.com/prime/TLS13",
  "link" : "https://docs.azul.com/prime/TLS13",
  "content" : "Starting with Azul Platform Prime 20.07.0.0, Zing 8 supports TLS 1.3 by default and follows the application programming interface (API) changes introduced by Maintenance Release 3 to the Java SE 8 specification. See JDK-8248721: Backport TLSv1.3 protocol implementation for more information. Version 1.3 of the TLS protocol is included in the default (SunJSSE) JSSE provider in Azul Platform Prime 8. In addition to the default JSSE provider, Azul Platform Prime 8 also includes a non-default Legacy8uJSSE provider. The Legacy8uJSSE provider contains the prior provider implementation (8u252 JSSE without TLS 1.3 support) as a fallback measure, and the non-default OpenJSSE provider previously included in Zing 8 distributions for non-default support for TLS 1.3. The table below lists three bundled modes for JSSE in Zing 8. Name Description How to Enable Default The SunJSSE provider includes SSL 3.0, TLS 1.0, TLS 1.1, TLS 1.2, and TLS 1.3 protocols support. By default, TLS 1.3 is disabled on the client side. You can enable it via the SSLSocket/SSLEngine/SSLParameters/SSLContext API, jdk.tls.client.protocols, or https.protocols properties. Enabled by default Fallback The Legacy8uJSSE provider includes the prior, 8u252 JSSE provider implementation (without TLS 1.3 support). This mode may be useful if any application issues are introduced by the new TLS 1.3 support in the default JSSE provider. -XX:+UseLegacy8uJSSE OpenJSSE The OpenJSSE provider includes a TLS 1.3 protocol implementation. This mode is introduced in Zing 8 starting with ZVM 19.08.0.0 and may be useful for prior users of the OpenJSSE provider that wish to keep using it in place of the new default SunJSSE provider (even though the new default provider now includes all functionality previously covered by the OpenJSSE provider). For example, applications that chose to use org.openjsse APIs directly may want to keep using the OpenJSSE mode. -XX:+UseOpenJSSE Azul Platform Prime 11 supports version 1.3 of the TLS protocol by default."
}, {
  "objectID" : "2b62ef06-a3f3-488a-9d9b-42e0dc204da3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "About Azul Zing System Tools",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/about",
  "link" : "https://docs.azul.com/prime/zst/about",
  "content" : "Azul Zing System Tools (ZST) is a component of Azul Platform Prime that allows you to coordinate memory usage between Azul Zing Builds of OpenJDK (Zing) and the underlying Linux operating system. Azul Platform Prime’s C4 garbage collector works the same way, with or without ZST. ZST enables Azul Platform Prime to support larger heap sizes, and to provide better memory management on older operating system versions that don’t have the required functionality already built in. Generally, it is simpler to run Azul Platform Prime without ZST. Your operational overhead may be less complex without the need to manage ZST installation and configuration. However, there are some conditions which require the use of ZST, and there are some operational considerations which could also mean that ZST is a preference for you. As of Zing 19.07, ZST becomes an optional component for Azul Platform Prime. With modern Linux kernels, the Linux kernel itself can provide most of the functionality that ZST provides. For most applications, the functionality now provided by modern Linux kernels is sufficient for good application performance on Azul Platform Prime, so we no longer require the use of ZST. However, there are some things that ZST can do that even the most modern Linux kernels can not, so in some cases, using ZST is still required, or desired if it gives better performance or simpler system management, and thus ZST remains an optional component for use with Azul Platform Prime."
}, {
  "objectID" : "0fda784a-3f93-4d30-8c0f-aaae88f9bea5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "About Azul Zing System Tools",
  "section" : "Considerations",
  "url" : "https://docs.azul.com/prime/zst/about",
  "link" : "https://docs.azul.com/prime/zst/about#considerations",
  "content" : "Considerations There are three main ways to use Azul Platform Prime: Zing without ZST, Zing without ZST but with Transparent Huge Pages (THP) configured, or Zing with ZST (ZST provides it own memory management for large pages). Each of these has different minimum operating system requirements, so a table format may be helpful. Read on below the table for details about each of the considerations. Minimum Operating System versions to run Azul Platform Prime in each of these configuration types: Azul Platform Prime without ZST - Recommended if ZST is not otherwise required or beneficial. Azul Platform Prime without ZST, with Transparent Huge Pages - Recommended for heap sizes 100 GB or more or if lower throughput or reduced start time is seen without ZST. Azul Platform Prime with ZST - Required for heap sizes over 2.5 TB and for older operating systems. Useful in environments where you can’t otherwise guarantee available memory at application launch time Operating System Without ZST Without ZST, With Transparent Huge Pages With ZST Red Hat Enterprise Linux 7.3 or later 8 or later 7 or later CentOS CentOS Linux 7.3 or later not supported 7 or later CentOS Stream 8 or later 8 or later 8 or later Oracle Linux UEK [1] 7.3 or later 7.6 or later 7 or later RHCK [2] 7.3 or later 8 or later 7 or later Ubuntu 16.04 LTS or later 18 or later 16.04 - 20.04 SLES 12 SP5 12 SPR or later 12 SP5 Debian 9 or later 10 or later 9 and 10 Amazon Linux 1, 2 Since 2018 1, 2 Amazon Linux 2023 all versions all versions not planned Note For technical questions about the table above, contact us at [email protected] More info about each of the considerations: Java heap size (-Xmx) ZST is required for heap size above 2.5 TB. If you don’t require heap sizes above 2.5 TB, you should try running without ZST if your operating system supports it. Note From Zing 19.07 to 20.03, the max heap size without ZST is 1 TB. As of Zing 20.04, the max heap size without ZST is 2.5 TB. Operating system version Using Azul Platform Prime without ZST requires the memfd_create(2) system call. This system call is available since mainline Linux 3.17. If you want to run Azul Platform Prime on an older operating system, you will have to use ZST. If your operating system supports running without ZST, you should try it. See System Requirements to verify minimum OS version requirements for Azul Platform Prime without ZST. See System Tools Requirements for minimum OS requirements for Azul Platform Prime with ZST. Large Pages For large heaps in the range of 100 GB or more, large memory pages (2 MB) are recommended to increase throughput performance and JVM start time. Most modern operating systems can meet this need with Transparent Huge Pages. If your application sees reduced throughput or JVM start time when you test with Azul Platform Prime without ZST, try using THP. If you find yourself in this situation and your operating system doesn’t support Transparent Huge Pages, then you can run Azul Platform Prime with ZST as ZST implements a more efficient memory manager for large pages than standard Linux and is recommended in these situations. See Enabling Huge Pages for more info. Reserved memory for your Java applications on Azul Platform Prime ZST can be used in reserve-at-config mode which reserves memory exclusively for use by Zing java process. Other processes using memory on the server will not be able to unexpectedly use up available memory on the host and impact your Zing application launches. An added benefit is the predictable application start time as you do not depend on Linux memory management at process start time when using ZST with \"reserve-at-config\". If you need to worry about other processes that might get run on the same host, you may prefer to use ZST to guarantee memory is always available for the Azul Platform Prime instances. If you don’t need to worry about other processes on the host, and the application is rarely restarted, this may be less of a concern for you and you may be fine without ZST, or with ZST using reserve-at-launch if ZST is used for other reasons. See Configuring Zing Memory with ZST for more info. If you don’t use ZST, here are some things you should consider and configure if needed: Enabling Huge Pages. For large heaps in the range of 100 GB or more, large memory pages (2 MB) are recommended to increase throughput performance and JVM start time. This can be enabled on all current modern operating systems. Increase vm.max_map_count If you still have questions about ZST and non-ZST mode, please contact us at [email protected]."
}, {
  "objectID" : "2e20e081-538b-43ce-8b5f-c6b7b36eb268",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Release Notes",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes-zst",
  "link" : "https://docs.azul.com/prime/release-notes-zst",
  "content" : "Release Date: November 20, 2023 These release notes describe new features, resolved issues, and known issues in the release of Azul Zing System Tools (ZST) 5.22.16."
}, {
  "objectID" : "8cbbe194-0c7b-4f8c-8077-46947bce65a2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Release Notes",
  "section" : "New Features and Updates",
  "url" : "https://docs.azul.com/prime/release-notes-zst",
  "link" : "https://docs.azul.com/prime/release-notes-zst#new-features-and-updates",
  "content" : "New Features and Updates ZST 5.22.16 includes several internal performance fixes."
}, {
  "objectID" : "5e703274-9e22-4b3d-9d46-920fddc3ad35",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Release Notes",
  "section" : "Resolved Issues",
  "url" : "https://docs.azul.com/prime/release-notes-zst",
  "link" : "https://docs.azul.com/prime/release-notes-zst#resolved-issues",
  "content" : "Resolved Issues The following table lists resolved issues in ZST 5.22.16: Bug ID Description ZST-2099 Prime 21.08.502 with ZST on CentOS 9 Stream is 8% slower than the same on CentOS 7.9"
}, {
  "objectID" : "4008888a-4665-4a63-9c97-dbcbd62c3e3e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Release Notes",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/prime/release-notes-zst",
  "link" : "https://docs.azul.com/prime/release-notes-zst#known-issues",
  "content" : "Known Issues There are no new known issues in ZST 5.22.16."
}, {
  "objectID" : "0ff99f4c-d4fa-4a8c-a08c-8629da2ee196",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools New Features and Updates in Previous Versions",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/new-features-and-updates",
  "link" : "https://docs.azul.com/prime/zst/new-features-and-updates",
  "content" : "This page lists new features and updates prior to the release of Azul Zing System Tools (ZST) 5.22.16. Release Addressed Description 5.22.15 6.1.x and 6.2.x kernels are now supported with ZST 5.22.15 5.22.14 SLES 12 SP3 and SP4 are no longer supported in ZST 5.22.14. 5.22.13 No new features are released in 5.22.13. Miscellaneous performance improvements are included. 5.22.12 No new features are released in 5.22.12. Miscellaneous performance improvements are included. 5.22.11 ZST 5.22.11 provides support for Linux 5.11.x to 5.14.x kernels. 5.22.10 Performance improvements with Optimized Java heap management for Intel® Optane™ DC Persistent Memory. 5.22.9 ZST 5.22.9 provides support for Linux 5.9.x and 5.10.x kernels. 5.22.8 ZST 5.22.8 provides support for Linux 5.7.x and 5.8.x kernels. Debian 10 (Buster) LTS is supported in ZST 5.22.8. Support for Debian 8 (Jessie) LTS and Debian 7 (Wheezy) LTS has reached its end-of-life in ZST 5.22.8. 5.22.7 ZST 5.22.7 provides support for Linux 5.4.x, 5.5.x, and 5.6.x kernels. Ubuntu 20.04 LTS (Focal Fossa) is supported in ZST 5.22.7. The maximum memory allocation pool for the Zing Virtual Machine with ZST is 20 TB. for Ubuntu 14.04 Support for Ubuntu 14.04 LTS is discontinued in ZST 5.22.7 5.22.6 ZST 5.22.6 provides support for Linux 5.3.x kernels. Support for SLES 11 SP4 is dropped in ZST 5.22.6. 5.22.5 ZST 5.22.5 provides support for Linux 5.1 and 5.2 kernels. 5.22.4 ZST 5.22.4 provides support for Oracle Linux 7 UEK kernel versions 4.14.x. 5.22.3 ZST 5.22.3 introduces support for Red Hat Enterprise Linux 8. ZST 5.22.3 provides support for Linux kernel versions 4.19.x. 5.22.2 ZST 5.22.2 introduces support for Linux kernel versions 4.18.x. 5.22.1 ZST 5.22.1 introduces a -e zing-ps command-line option for printing information about a new memory pool planned for future versions of Zing Virtual Machine. See the Zing User’s Guide for details. Cgroup controls are disabled by default in ZST 5.22.1. See the Zing User’s Guide for details. 5.21.8 ZST 5.21.8 introduces support for Linux kernel versions 4.18.x. 5.21.7 No new features are released in 5.21.7. Miscellaneous performance improvements are included. 5.21.6 No new features are released in 5.21.6. Miscellaneous performance improvements are included. 5.21.5 No new features are released in 5.21.5. Miscellaneous performance improvements are included. 5.21.4 No new features are released in 5.21.4. Miscellaneous performance improvements are included. 5.21.3 No new features are released in 5.21.3. Miscellaneous performance improvements are included. 5.21.2 ZST 5.21.2 introduces support for Ubuntu 18.04 LTS. ZST 5.21.2 provides support for SUSE Linux Enterprise Server 12 SP3. ZST 5.21.2 no longer supports Ubuntu 12.04. 5.21.1 ZST 5.21.1 introduces support for Linux kernel 4.15.x. Support for control groups (cgroups) to favor memory limits on RHEL 7.x. 5.21.0 ZST 5.21.x includes an installation behavior change that automatically configures Zing memory as part of the ZST install. This eliminates the need to run system-config-zing-memory after the ZST install. When the ZST is installed, the default for the configuration policy is reserve-at-launch – System Zing memory will only be reserved when a ZVM process starts. If you normally configure System Zing memory using the reserveat-config policy to guarantee that the memory is reserved at the time of the configuration, then you will need to run system-configzing-memory and select the reserve-at-config policy. Be certain that you select whether you want to use percentages of total system memory or specific amounts of memory because the defaults have changed. For the reserve-at-launch policy, specify overall upper limit ofSystem Zing memory use by all ZVM processes running on the system. The reserve-at-launch policy allows you to specify amounts of memory for Reservable, Contingency and Pause Prevention that might add up to greater than 100% of the memory available on the machine. The limit on overall System Zing memory use puts an upper bound on the sum of all System Zing memory use. New format and contents for the pmem.conf config file for both types of configuration policy, reserve-at-config and Elastic Zing Memory (reserve-at-launch). 5.20.8 No new features are released in 5.20.8. Miscellaneous performance improvements are included. 5.20.7 ZST 5.20.7 provides support for control groups (cgroups) to favor memory limits on RHEL 7.x. ZST 5.20.7 comes with more aggressive mode of memory allocation that may involve flushing disk caches if there is lack of memory. 5.20.6 No new features are released in 5.20.6. Miscellaneous performance improvements are included. 5.20.5 ZST 5.20.5 provides compatibility with the newly available fixes for the recently reported Intel CPU kernel side-channel security flaws, and is required for Zing to operate on Linux distributions that have been updated to address these flaws with the addition of KPTI (kernel page table isolation). It is recommended to upgrade your ZST to ZST 5.20.5 or higher as soon as possible. With ZST 5.20.5, you can switch to a supported kernel without reinstalling the ZST package. Use notes: This enhancement doesn’t include support for kernels with same ABI version . It also doesn’t affect DKMS packages. This enhancement doesn’t work for major OS upgrades, for example, RHEL6 to RHEL7 Additional support for the following operating systems: Ubuntu 16.04 SLES 12, SLES 11 SP4 Oracle Linux 6, 7 Amazon Linux RHEL/CentOS 7 5.20.4 Added support for 4.7.3 CoreOS. 5.20.3 Additional support for the following operating systems: Ubuntu 14.04 and 16.04 Oracle Linux 6, 7 Amazon Linux Debian Stretch 5.20.2 ZST 5.20.x running ZVM 17.06.1.0 and later implement a behavior change for the default memory reservation policy. Previously, the default at the time of memory configuration was for all requested memory to be pre-allocated (reserve-at-config) at the time of configuration and, naturally, ahead of JVM startup. For the version of Zing (ZST and ZVM) downloaded from the free trial website, the default has been changed to not reserve the memory during the memory configuration but at ZVM startup. When installing ZST 5.20.* using RPM and DEB packages, the Zing memory needs to be configured manually upon installation by running \"system-config-zing-memory.” The following table shows the list of the packages that require manual memory configuration and the packages that have reserve-at-launch memory preconfigured during the installation. Operating System Package Zing Memory Configuration RHEL5, OEL5 (RHEL5), RHEL6, RHEL6 MRG (RHEL6), Amazon Linux (RHEL DKMS), DEB DKMS, SLES DKMS, RHEL DKMS. manual configuration after installation OEL6, RHEL7, OEL7, SLES11 SP4, SLES12, Ubuntu 12.04, Ubuntu 14.04, Ubuntu 16.04. reserve-at-launch configuration during installation 5.20.1 ZVM 17.06.1.0 and higher together with ZST 5.20.x includes an installation behavior change whereby default Zing memory is allocated at JVM startup (reserve-at-launch) as opposed to prior releases where memory is all pre-allocated (reserve-at-config) ahead of JVM startup. If your normal operational use of Zing requires pre-allocated memory, then be sure to reset the policy to reserve-at-config. 5.20.0 Additional support for the following operating systems: Ubuntu 12.04, 14.04, and 16.04 SLES 11 SP4 and SLES 12 SP1 Oracle Linux 6, 7 Amazon Linux 5.19.0 No new features are released in 5.19.0. Miscellaneous performance improvements are included. 5.18.0 Additional support for the following operating systems: Ubuntu 12.04, 14.04, and 16.04 SLES 11 SP4, SLES 12 SP1, and SLES 12 SP2 Oracle Linux 5.17.0 No new features are released in 5.17.0. Miscellaneous performance improvements are included. 5.16.1 Additional support for the following operating systems: Ubuntu 12.04, 14.04, and 16.04 SLES 11 SP4 and SLES 12 SP1 Oracle Linux 6 and 7 RHEL/CentOS 7.3 5.16.0 Adding the Reference field to the license file: REFERENCE: <TEXT> This field enables entering key-specific text values. Fix for the zing-ps command 5.15.2 No new features are released in 5.15.2. Miscellaneous performance improvements are included. 5.15.1 Additional support for the following operating systems: Ubuntu 12.04, 14.04, and 16.04 SLES 11 SP4 and SLES 12 SP1 Oracle Linux 6 and 7 5.15.0 More supported kernels for Oracle Linux 5, Ubuntu 16.04, Ubuntu 12.04, Ubuntu 14.04, SLES 11 SP4, and SLES 12 SP1. 5.14.0 Enabled building of Oracle 6 and 7 ZPG packages. More supported kernels for Ubuntu 16.04, Ubuntu 12.04, Ubuntu 14.04, and SLES 11 SP4. Newly added support for SLES 12 SP1. 5.12.0 Extended support for Ubuntu 16.04. Support for additional kernels for Ubuntu 14.04 and Ubuntu 12.04. 5.11.1 Newly added support for Ubuntu 16.04. Support for additional kernels for Ubuntu 14.04 and Ubuntu 12.04. 5.11.0 The newly introduced --batch-mode option of the zingzst.shutdown command enables uninstalling ZST without user interaction. Newly added support for SLES 11 SP4. Wide range of the supported kernels for Ubuntu 14.04 and Ubuntu 12.04 Support for Debian Jessie (DKMS only). Documentaion Change: All information about Zing system requirements, ZVM and ZST version compatibility, and Zing ZST API versions is now added to the separate document. Refer to the Zing System Requirements and Compatibility References for specific details regarding the supported operating systems and Zing component compatible versions. 5.7.19.1 No new features are released in 5.7.19.1. Miscellaneous performance improvements are included. 5.7.19 Newly added support for the following Linux kernels: Oracle Linux Server 3.8.13-68.1.3.el6uek.x86_64 Oracle Linux Server 3.8.13-35.3.4.el6uek.x86_64 Ubuntu 14.04 kernels using DKMS Ubuntu 15.10 4.2.0-18-generic using DKMS Ubuntu 15.04 4.1.10-040110-generic using DKMS RHEL7.2 3.10.0-327 SLES11 SP3 3.0.101-0.47.52-default SLES11SP3 3.0.101-0.46-default"
}, {
  "objectID" : "a3b64cd5-4468-4c2c-8cc7-797eebe1a45e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Issues Resolved in Previous Releases",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/resolved-issues",
  "link" : "https://docs.azul.com/prime/zst/resolved-issues",
  "content" : "The following table lists known issues resolved prior to the release of Azul Zing System Tools (ZST) 5.22.16. Release Resolved Description 5.22.15 Dynamic timeout for ZST reservation does not work on 5.15 gke kernel 5.22.14 EFS install fails on startup on RHEL 8 - ERROR: Mounted RPM version is incompatible. Exiting Remove restrictions with pre-depends on python (>= 2.6.6) | python2 (>= 2.6.6) 5.22.13 ZST install fails with 5.16.1 kernel ZST install fails on CentOS 8 kernels 4.18.0-358.el8 and higher ZST install fails on kernel 5.18.x kernels 5.22.12 Fixes to allow running Prime System tools on Icelake machines. 5.22.11 ZST support for RHEL/CentOS/CentOS 8 Stream 5.22.9 ZST service start fails on large RAM systems due to init_on_alloc=1 default kernel setting on Ubuntu 20.04 5.22.7 ZST DKMS build fails on 5.4.x kernels with the following error message: coderecipe for target 'zm_adapter.o' failed. 5.22.6 ZVM with ZST and cgroups enabled crashes on Virtuozzo Hypervisor. 5.22.5 ZST dkms build fails for 5.0.0-x azure kernels. 5.22.4 Support for OEL6 4.1.12.x kernels is now available with ZST 5.22.4 5.22.3 zing-licensed does not start after ZST upgrade. 5.22.2 Zing Memory fails to start with ZST 4.18.x kernels. 5.22.1 The /etc/zing/drop.conf configuration file is added to the ZST package for improved memory defragmentation (see bug 16404). 5.22.0 Cgroup support for 4.x kernels. 5.21.7 Improved handling of fragmented memory when starting Zing in reserve-at-launch mode and when starting zing-memory service in reserve-at-config mode. 5.21.6 Zing Memory fails to start when vormetric agent is enabled. 5.21.5 Temporarily allocate 4k chunks of memory when there are active file mappings in the buffer cache to overcome 2M allocation failure on RHEL7 systems. 5.21.4 A race condition in VMA manipulation leads to zero byte zing cores. 5.21.3 The system service ZST now uses systemd (if available) instead of sysvinit (init.d scripts) on RHEL/CentOS. 5.21.3 Graceful VM Error reporting (hs_err_pid) support for the libc_hooks errors. 5.21.1 insmod error when using ZST 5.21.0.0 or lower version of rheldkms package with dkms 2.5. 5.21.1 Kernel crashes with the following error messages: BUG: unable to handle kernel NULL pointer dereference 5.20.7 Zing ignores memory constraints enforced by cgroups in a container environment. 5.21.1 Support for Linux kernel 4.15.*. 5.21.0 ZST 5.21.0 version of zing-ps now displays valid information when run with an older version of ZST. 5.21.0 Zing core bundler can bundle core files without gdb. 5.21.0 Uninstalling ZST on Amazon Linux displays warning messages when rpm is upgraded. Ignore these warning messages. warning: file /lib/modules/zing-driver/extra/zm_linux_3.4.57-48.42.amzn1.x86_64.o: remove failed: No such file or directory warning: file /lib/modules/zing-driver/extra/zm_linux_3.4.48-45.46.amzn1.x86_64.o: remove failed: No such file or directory 5.20.6 Zing Memory crashes with the following error: Unknown symbol kaiser_set_shadow_pgd (err 0). 5.20.3 Kernel crash on RHEL 5 systems when running zing-ps in a loop to print ZVM process information (Error message: unable to handle kernel NULL pointer dereference). 5.20.3 zing-ps missing to print \"Consolidated Summary\" of memory usage when used along with --comma option. 5.20.2 Linux kernel bug caused by incorrect Zing Memory management at: /var/lib/dkms/zing_mm/[5.20.5.21.]/build/zm_mm.c:4801 5.20.2 Running a ZVM on a machine with an enabled user-level Non-Uniform Memory Access Daemon (numad) daemon causes unexpected high system load average. 5.20.2 Kernel crash when running zing-ps in a loop to print ZVM process information Error message: unable to handle kernel NULL pointer dereference 5.20.1 Long application pause times occur during New-To-Old/Old collections when collecting both the New and Old Generations. 5.20.1 Kernel crashes with the following error messages: BUG: unable to handle kernel NULL pointer dereference 5.16.0 The zing-ps command should report zing-memory is stopped. No Zing processes found. in all situations where zing-memory is not running. 5.15.0 Dumping non-Zing cores causes RHEL 5 systems to panic under certain conditions. 5.15.0 The java -version command reports an exception: Failed to reserve lower 2g address. error : 12. The fix changes the prereserve mmap in the libc_hooks init() to MAP_NORESERVE and PROT_NONE. 5.15.0 Deadlock is detected when trying to preload a third party library jemalloc. 5.15.0 Entering \"default\" for contingency memory when configuring ZST memory caused 0 size pool. 5.14.0 Unable to shutdown or startup Zing instances when running incompatible versions of ZVM and ZST. 5.12.0 Kernel may crash when configuring Zing Memory on some SGI systems. 5.12.0 On Ubuntu 16.04, zing-ps reports the following error for non-root users: Unable to open /proc/33639/maps: errno=13: Permission denied 5.12.0 On Ubuntu 16.04, when the zing-memory service is stopped, attempting to start a ZVM gives the following error: Zing Error: The Zing Memory device (/dev/zing_mm*) is not present. Zing Error: Please make sure the device is shared with the container. See the Zing documentation for details. 5.12.0 Zing core bundler deletes Zing core when no space is left in the current working directory. Also introduces -output-dir argument to zing-core-bundler. 5.11.0 Server reboots without any info when using custom signal handler with Zing. This problem appeared because the NULL file table entry impedes obtaining the stored binary format. 5.11.0 Some SIGSEGV backtraces are not accurately reported in hs_err_pid*.log. The fix implements checking the az_mprobe return value before checking the protection bits on the page. 5.11.0 Unable to handle kernel paging request. 5.7.19 kill -SIGBUS generates incomplete core files. 5.7.19 mlockall interaction: if core dumps are collected during crashes in processes that made an mlockall, the core dumps would be partial and will not include Zing VMAs. 5.7.18 Allow shut down scripts to uninstall ZST if Zing services don’t exist or they fail to stop. 5.7.18 The Pool License Server fails to start with JDK 8. 5.7.17 system-config-zing-core-pattern enables users to choose a destination directory for cores but does not honor this. 5.7.17 Not able to dump cores on containers when zing-core-pattern is enabled and the host does not have access to the specified directory which is mounted on the container. 5.7.17 Allow cores to be dumped to any configurable location. 5.7.16 Unable to launch Zing with reserve-at-launch policy even when sufficient memory is available. 5.7.15 Update zing-ps to work correctly with new policy of System Zing Memory reservation on process launch. 5.7.15 ps and zing-ps do not show detailed information for Cassandra processes running on Zing. 5.7.14 Support browsers updated with the fix for Logjam vulnerability. Upgrade to ZST 5.7.14 or above if you see (Error code: ssl_error_weak_server_ephemeral_dh_key. 5.7.12 Uninstalling ZST 5.7.11 on Amazon Linux displays a message. Ignore this message: /bin/cat: /etc/redhat-release: No such file or directory 5.7.12 zing-licensed prints ERROR: Failed to verify Zing license '/etc/zing/license', but ZVM can start as long as license is indeed valid. 5.7.12 libjvm.so does not link against a specific version of libazsys, libc_hooks and libazprof, resulting in errors such as: java: error while loading shared libraries: libc_hooks2.so.1: cannot open shared object file: No such file or directory 5.7.12 Add support for Oracle Linux- 2.6.39-400.246.2.el6uek.x86_64, 2.6.39-400.249.3.el5uek.x86_64, 2.6.39-400.249.3.el6uek.x86_64"
}, {
  "objectID" : "e6d4990d-513e-4e32-91de-b3738215f479",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/system-requirements",
  "link" : "https://docs.azul.com/prime/zst/system-requirements",
  "content" : "The ZST component is only needed for the following situations or requirements: Heapsize (-Xmx) larger than 2500 GBytes. With ZST, Zing supports up to 20 TB (20000 GBytes). Static memory reservation for Java heaps at system start. Older OS versions than listed on Zing Operating System Requirements The Azul Platform Prime with ZST can be installed on machines running the following operating systems using .rpm or .deb installers, as appropriate: Operating System Versions Red Hat Enterprise Linux 7, 8, 9 CentOS 7.x CentOS/CentOS Stream 8, 9 Rocky/Alma Linux 8 Oracle Linux 7 SLES 12 (SP3, SP4, SP5) Ubuntu 18.04 LTS, 20.04 LTS, 22.04 LTS Debian 9 (Stretch) and 10 (Buster) Amazon Linux 1, 2 CoreOS 4.13.16 See the complete list of the supported kernels on the Azul Platform Prime Customer Downloads page. You need to obtain a username and password from [email protected] to access the page."
}, {
  "objectID" : "ca62b1d6-7bde-46ae-aeb8-70606be6a12f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "ZST CPU Requirements",
  "url" : "https://docs.azul.com/prime/zst/system-requirements",
  "link" : "https://docs.azul.com/prime/zst/system-requirements#zst-cpu-requirements",
  "content" : "ZST CPU Requirements Azul Platform Prime with ZST can be installed on machines running the following CPU types. 64-bit x86 CPUs Intel® Xeon® server class processors released 2009 and later. AMD Opteron™ server class processors released 2010 and later. Azul Platform Prime is supported on systems with 2 or more vCores. Systems with higher core counts are obviously going to scale better, and provide lower scheduling related hiccup/jitter behavior."
}, {
  "objectID" : "f8efb2a6-488c-4f45-934b-3b1620e901b0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "ZST Memory Requirements",
  "url" : "https://docs.azul.com/prime/zst/system-requirements",
  "link" : "https://docs.azul.com/prime/zst/system-requirements#zst-memory-requirements",
  "content" : "ZST Memory Requirements Azul Platform Prime with ZST requires the following amount of RAM: 8+ GB RAM recommended 512 MB hard minimum"
}, {
  "objectID" : "42a673b6-b49d-44af-b860-666ec0ba2c3e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "ZST Platform Requirements",
  "url" : "https://docs.azul.com/prime/zst/system-requirements",
  "link" : "https://docs.azul.com/prime/zst/system-requirements#zst-platform-requirements",
  "content" : "ZST Platform Requirements Azul Platform Prime with the ZST runs on any of the following hardware or virtualized platforms: x86-64 hardware x86-64 virtual machines configured with Intel VT-x or AMD-V (e.g., Amazon EC2 (HVM), Azure, Oracle Virtual Box, Google Compute Engine, VMware)"
}, {
  "objectID" : "44395a80-1578-4496-8425-e4992762a573",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "ZST Kernel Support Timeline",
  "url" : "https://docs.azul.com/prime/zst/system-requirements",
  "link" : "https://docs.azul.com/prime/zst/system-requirements#zst-kernel-support-timeline",
  "content" : "ZST Kernel Support Timeline In the vast majority of cases, we release ZST support on the same day as the release of the new version of the Linux kernel. In some cases, we may need additional time to address issues found in testing."
}, {
  "objectID" : "2dcb797d-464b-4c27-b1e7-5e234c3d2015",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Versioning and Naming Conventions",
  "section" : "Versioning Scheme",
  "url" : "https://docs.azul.com/prime/zst/versioning-and-naming",
  "link" : "https://docs.azul.com/prime/zst/versioning-and-naming#versioning-scheme",
  "content" : "Versioning Scheme The numbers in the ZST package name contain information about which different environments and kernels a ZST package supports. Part Example Description ZST API 8c The ZST API version. KERNEL 4.18.0 The supported Linux kernel version in format A.B.C. VERSION 5.22.13.0 The ZST release version in format A.B.C.D as listed on the customer downloads page. When the fourth digit D is a zero, it is omitted from references to the version on the downloads page and in release notes. In this example, only 5.22.13 is used in all links and documentation. BUILD 2 The build number = the number of times this version of the software has been built and packaged. CKMS 3 Optional CKMS build number. When present, the package has support for newer kernels while there are no ZST code changes. CKMS = \"Continuous Kernel Monitoring System\": the internal code name for the Azul system that detects and adds support for newer kernels."
}, {
  "objectID" : "24c3bb10-69ef-46e0-8bc6-1721df046488",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Versioning and Naming Conventions",
  "section" : "Bundle Name Convention",
  "url" : "https://docs.azul.com/prime/zst/versioning-and-naming",
  "link" : "https://docs.azul.com/prime/zst/versioning-and-naming#bundle-name-convention",
  "content" : "Bundle Name Convention RPM Packages The ZST version number has the following structure for rpm packages: <NAME>-<ZST API>.<KERNEL A.B.C>-<VERSION A.B.C.D>.<BUILD>.<CKMS>.<DISTRIBUTION>.<ARCHITECTURE>.<PACKAGE> To explain both the RPM and DEB packages uniformly in this document, we don’t follow the exact naming used in the RPM specification (see RPM File Naming Convention for more information). This is the link between the naming used in this document and the RPM specification: Prime RPM <NAME> name <ZST API>.<KERNEL A.B.C> version <VERSION A.B.C.D>.<BUILD>.<CKMS> release <DISTRIBUTION>.<ARCHITECTURE> architecture The following table explains every part of the file name using this example package: zing-zst-8c.4.18.0-5.22.13.0.2.3.el8.x86_64.rpm Part Example Description NAME zing-zst The product name. ZST API 8c The ZST API version. KERNEL 4.18.0 The supported Linux kernel version in format A.B.C. VERSION 5.22.13.0 The ZST release version in format A.B.C.D. BUILD 2 The build number. CKMS 3 Optional CKMS build number. DISTRIBUTION el8 el8 stands for Enterprise Linux 8. The distribution format el is used for RHEL, CentOS, CentOS Stream, Alma and Rocky Linux. Other available distributions: el7, el7uek, el9, sles12, amzn2. ARCHITECTURE x86_64 The target platform. PACKAGE rpm The package format. DEB Packages The ZST version number has the following structure for DEB packages: <NAME>-<ZST API>.<KERNEL A.B.C>.<ARCHITECTURE>-<DISTRIBUTION>-<VERSION A.B.C.D>.<BUILD>.<CKMS>_<ARCHITECTURE>.<PACKAGE> The following table explains every part of the file name using this example package: zing-zst-8c.4.15.0.x86.64-ub2204-5.22.13.0.2.3_amd64.deb Part Example Description NAME zing-zst The product name. ZST API 8c The ZST API version. KERNEL 4.15.0 The supported Linux kernel version in format A.B.C. ARCHITECTURE x86.64 The processor instruction set. DISTRIBUTION ub2204 ub2204 stands for Ubuntu 22.04. Other available distributions: ub1804, ub2004 VERSION 5.22.13.0 The ZST release version in format A.B.C.D. BUILD 2 The build number. CKMS 3 Optional CKMS build number. ARCHITECTURE amd64 The target platform. PACKAGE deb The package format."
}, {
  "objectID" : "bcf310da-73e1-453b-b6ef-840065a973ec",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Versioning and Naming Conventions",
  "section" : "RPM Packages",
  "url" : "https://docs.azul.com/prime/zst/versioning-and-naming",
  "link" : "https://docs.azul.com/prime/zst/versioning-and-naming#rpm-packages",
  "content" : "RPM Packages The ZST version number has the following structure for rpm packages: <NAME>-<ZST API>.<KERNEL A.B.C>-<VERSION A.B.C.D>.<BUILD>.<CKMS>.<DISTRIBUTION>.<ARCHITECTURE>.<PACKAGE> To explain both the RPM and DEB packages uniformly in this document, we don’t follow the exact naming used in the RPM specification (see RPM File Naming Convention for more information). This is the link between the naming used in this document and the RPM specification: Prime RPM <NAME> name <ZST API>.<KERNEL A.B.C> version <VERSION A.B.C.D>.<BUILD>.<CKMS> release <DISTRIBUTION>.<ARCHITECTURE> architecture The following table explains every part of the file name using this example package: zing-zst-8c.4.18.0-5.22.13.0.2.3.el8.x86_64.rpm Part Example Description NAME zing-zst The product name. ZST API 8c The ZST API version. KERNEL 4.18.0 The supported Linux kernel version in format A.B.C. VERSION 5.22.13.0 The ZST release version in format A.B.C.D. BUILD 2 The build number. CKMS 3 Optional CKMS build number. DISTRIBUTION el8 el8 stands for Enterprise Linux 8. The distribution format el is used for RHEL, CentOS, CentOS Stream, Alma and Rocky Linux. Other available distributions: el7, el7uek, el9, sles12, amzn2. ARCHITECTURE x86_64 The target platform. PACKAGE rpm The package format."
}, {
  "objectID" : "200bd32f-de48-4f14-8bc2-a713dc40ccbb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Versioning and Naming Conventions",
  "section" : "DEB Packages",
  "url" : "https://docs.azul.com/prime/zst/versioning-and-naming",
  "link" : "https://docs.azul.com/prime/zst/versioning-and-naming#deb-packages",
  "content" : "DEB Packages The ZST version number has the following structure for DEB packages: <NAME>-<ZST API>.<KERNEL A.B.C>.<ARCHITECTURE>-<DISTRIBUTION>-<VERSION A.B.C.D>.<BUILD>.<CKMS>_<ARCHITECTURE>.<PACKAGE> The following table explains every part of the file name using this example package: zing-zst-8c.4.15.0.x86.64-ub2204-5.22.13.0.2.3_amd64.deb Part Example Description NAME zing-zst The product name. ZST API 8c The ZST API version. KERNEL 4.15.0 The supported Linux kernel version in format A.B.C. ARCHITECTURE x86.64 The processor instruction set. DISTRIBUTION ub2204 ub2204 stands for Ubuntu 22.04. Other available distributions: ub1804, ub2004 VERSION 5.22.13.0 The ZST release version in format A.B.C.D. BUILD 2 The build number. CKMS 3 Optional CKMS build number. ARCHITECTURE amd64 The target platform. PACKAGE deb The package format."
}, {
  "objectID" : "686b9181-6c6b-436a-895a-bb3098f5ca0c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation",
  "content" : "This page describes how to install Azul Zing System Tools (ZST)"
}, {
  "objectID" : "53c719ee-a48b-4790-8eb0-45c7e424c4a7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Recommended Configuration",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#recommended-configuration",
  "content" : "Recommended Configuration Note These prerequisites are only applicable to the Azul Zing Builds of OpenJDK (Zing) running with Azul Zing System Tools (ZST). While Zing with ZST runs fine with certain default system settings, there are default OS settings that can cause response time sensitive applications to experience multi-hundred-of-millisecond stalls regardless of the JVM. Since Zing tends to eliminate or dramatically reduce JVM-related stalls, these remaining OS related stalls will tend to dominate the worst-case latency behavior of applications. It is therefore highly recommended that the following settings be applied. To ensure that OS settings are appropriate for performance sensitive applications, apply the following settings. SWAP Settings vm.min_free Settings vm.zone_reclaim_mode Settings Transparent HugePages Settings If you are using a Nehalem power efficiency chip set in the latency-sensitive systems, you might need to disable the Intel idle driver. Note Installing ZST will cause a kernel panic if you are using Ice Lake hardware with 5-level paging. Use 4-level paging or disable ZST with this release."
}, {
  "objectID" : "20b5d873-b95b-4acf-83ad-5fa17587fbc4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Installing Azul Zing System Tools",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#installing-azul-zing-system-tools",
  "content" : "Installing Azul Zing System Tools Azul Zing System Tools installation packages are available from the Azul Platform Prime Customer Downloads page and are only available to Azul customers. Perform the following steps to install and configure ZST: Login to your system as root administrator or use sudo. Download ZST installation package to your system <zst_install> directory. If you have installed Azul Platform Prime from the package repository, skip this step. The zing-zst package contains the kernel module and various tools. Only one version of zing-zst may be installed at a time. The ZST installation package is specific to the operating system version, service pack, and/or kernel on the installation machine. System ZST Installation Package Format RHEL, CentOS, CentOS Stream, Oracle Linux, Amazon Linux, Rocky Linux and Alma Linux zing-zst-<zst_API>.<kernel_version>-<zst_version>.<platform>.<architecture>.rpm For example: zing-zst-8c.4.18.0-5.22.8.0.4.1.el8.x86_64.rpm Amazon Linux zing-zst-<zst_API>.<kernel_version>-<zst_version>.<platform>.<architecture>.rpm For example: zing-zst-8c.2.6.32-5.22.8.0.4.el.x86_64.rpm SLES zing-zst-<zst_API>.<kernel_version>-<zst_version>.<platform>.<architecture>.rpm For example: zing-zst-8c.4.4.82-5.22.8.0.4.1.sles12.x86_64.rpm Ubuntu zing-zst_<zst_API>.<kernel_version>-<platform>-<zst_version>_<architecture>.deb For example: zing-zst_8c.5.4.0.x86.64-ub2004-5.22.8.0.4.5_amd64.deb If you have manually downloaded the ZST package, install ZST using the following commands appropriate for your operating system: System Commands to Install Packages RHEL, CentOS, CentOS Stream, Oracle Linux, Amazon Linux, Rocky Linux and Alma Linux sudo yum localinstall <zing zst package> SLES sudo zypper install <zing zst package> Ubuntu sudo apt install ./<zing zst package> If you are using the package repository, install ZST with the following commands appropriate for your operating system: System Commands to Install Packages RHEL, CentOS, CentOS Stream, Oracle Linux, Amazon Linux, Rocky Linux and Alma Linux sudo yum install zing-zst SLES sudo zypper install zing-zst Ubuntu sudo apt install zing-zst ZST 5.21.x ZST 5.21.x includes an installation behavior change that automatically configures Zing Memory as part of the ZST install. This eliminates the need to run system-config-zing-memory after the ZST install. When the ZST is installed, the default for the configuration policy is reserve-at-launch – System Zing Memory will only be reserved when a Zing process starts. If you normally configure System Zing Memory using the reserve-at-config policy to guarantee that the memory is reserved at the time of the configuration, then you will need to run system-config-zing-memory and select the reserve-at-config policy. Be certain that you select whether you want to use percentages of total system memory or specific amounts of memory because the defaults have changed. The following table shows the list of the packages that have reserve-at-launch memory pre-configuration during the installation of ZST 5.21.x. Operating System Package Zing Memory Configuration RHEL6, RHEL6 MRG (RHEL6), Amazon Linux (RHEL DKMS), DEB DKMS, SLES DKMS, RHEL DKMS, OEL6, RHEL7, OEL7, SLES12, Ubuntu 14.04, Ubuntu 16.04, Ubuntu 18.04 reserve-at-launch configuration during installation ZST 5.20.x When installing ZST 5.20.x using RPM and DEB packages, you might need to configure Azul Platform Prime memory manually upon installation by running system-config-zing-memory. The following table shows the list of the packages that require manual memory configuration and the packages that have reserve-at-launch memory pre-configuration during the installation. Operating System Package Zing Memory Configuration RHEL5, OEL5 (RHEL5), RHEL6, RHEL6 MRG (RHEL6), Amazon Linux (RHEL DKMS), DEB DKMS, SLES DKMS, RHEL DKMS manual configuration after installation OEL6, RHEL7, OEL7, SLES11 SP4, SLES12, Ubuntu 14.04, Ubuntu 16.04 reserve-at-launch configuration during installation To configure Azul Platform Prime memory manually, use the system-config-zing-memory command:  sudo system-config-zing-memory (ZST 5.20.x-specific only) To accept default configuration settings type:y when prompted. See Configure Zing Memory for more information. Verify the ZST installation by running the zing-ps -s command."
}, {
  "objectID" : "6539a016-846d-4c5a-9295-ac9149e8fa7d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Installing ZST Using DKMS",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#installing-zst-using-dkms",
  "content" : "Installing ZST Using DKMS This guide describes how to install ZST using the Dynamic Kernel Module Support (DKMS) framework. Use the ZST DKMS package if a ZST package is not yet available for the Linux kernel version of your system on the Software Downloads and Documents page. Note This information is intended for advanced users only. While this feature is tested and validated for a selected set of operating system versions, there are always risks. Test thoroughly in your staging environment before going into production. If you are installing on RHEL 8.x/7.x/6.x, Oracle Linux 7.x/6.x, SLES 12 SP5/SP4/SP3/SP2, Ubuntu 20.04/18.04/16.04 kernels, use the standard ZST installation packages. To install Zing using DKMS, perform the steps listed below. Complete Prerequisites Locate and install the kernel headers that match the kernel version that will be running the ZST. Install the DKMS package appropriate for your target operating system. DKMS is already included in Amazon Linux, Amazon Linux 2, Ubuntu, and Debian but not directly provided by CentOS, RHEL, SLES, Oracle Linux. For those systems, it can be installed from the Fedora EPEL repository. See also Using DKMS on RHEL, CentOS, or Oracle Linux to build ZST for other kernel versions. Run the commands as root or use sudo. System Commands to Install Packages RHEL, CentOS, CentOS Stream, Oracle Linux (Non-UEK Kernels), Amazon Linux, Rocky Linux and Alma Linux # yum install kernel-devel-$(uname -r) dkms SLES # zypper install kernel-default-devel-$(uname -r) dkms Oracle Linux (UEK Kernels) # yum install kernel-uek-devel-$(uname -r) dkms Ubuntu and Debian # apt-get install linux-headers-$(uname -r) dkms Depending upon the operating system the required packages include: OpenSSL 0.9.8 or later binutils required to ensure that any core files, generated when a Zing instance fails abnormally, include the shared libraries that were in use at the time Install ZST The ZST installation package contains a kernel loadable module and supporting scripts and tools. To install ZST: Ensure that you have access to https://www.azul.com/software-downloads-and-documents/ to download Zing packages (contact [email protected] to obtain the required credentials). Login to your system as root or sudo. Download and install the ZST package. To install ZST, use the command appropriate for your system: System Commands to Install Packages RHEL, CentOS, CentOS Stream, Oracle Linux, Amazon Linux, Rocky Linux and Alma Linux # yum localinstall zing-zst-<zst-api-version>.dkms-<zst_version>.x86_64.rpm For example: # yum localinstall zing-zst-8b.dkms.2.6.32-5.22.5.0.4.el.x86_64.rpm SLES # zypper install <zst-api-version>.dkms-<zst_version>.<platform>.rpm For example: # sudo zypper install zing-zst-8c.4.4.82-5.22.13.0.2.1.sles12.x86_64.rpm Ubuntu and Debian # apt install ./zing-zst_<zst-api-version>.dkms-<zst_version>.<platform>.deb For example: # sudo apt install ./zing-zst_8b.dkms.3.2.0.x86.64-server-5.22.5.0.4_amd64.deb A sample system response is shown below:  Preparing... ################################# [100%]\nUpdating / installing...\n1:zing-zst-8b.dkms.2.6.32-5.22.5.0.################################# [100%]\nCreating symlink /var/lib/dkms/zing_mm/5.22.5.0-4/source ->\n/usr/src/zing_mm-5.22.5.0-4\nDKMS: add completed.\nKernel preparation unnecessary for this kernel. Skipping...\nBuilding module:\ncleaning build area...\nmake -j24 KERNELRELEASE=3.10.0-957.27.2.el7.x86_64 KERNELDIR=/lib/modules/3.10.0-957.27.2.el7.x86_64/build DKMS=1 INTERNAL_BUILD_NAME=zst-5.22.5.0 BUILD_SUFFIX= BUILD_NUMBER=4.....\ncleaning build area...\nDKMS: build completed.\nzing_mm.ko.xz:\nRunning module version sanity check.\n- Original module\n- No original module exists within this kernel\n- Installation\n- Installing to /lib/modules/3.10.0-957.27.2.el7.x86_64/extra/\nAdding any weak-modules\ndepmod....\nDKMS: install completed.\nzing-memory: INFO: Restarting...\nzing-memory: INFO: Stopping...\nzing-memory: INFO: stop successful\nzing-memory: INFO: Starting...\nINFO: Zing Memory reserved using reserve-at-launch policy\nINFO: az_pmem_set_device_limit to 500034437120 bytes succeeded\nINFO: az_pmem_set_overall_device_limit to 243259146240 bytes succeeded\nINFO: az_pmem_fund_limit_transfer (to 7, from 0, bytes 500034437120) succeeded\nINFO: az_pmem_fund_limit_transfer (to 1, from 7, bytes 135144669184) succeeded\nINFO: az_pmem_fund_limit_transfer (to 3, from 7, bytes 135144669184) succeeded\nINFO: az_pmem_fund_limit_transfer (to 0, from 7, bytes 229745098752) succeeded\nINFO: Set ContingencyMinimumFreeMemory to 209715200\nINFO: Successfully set fund MinimumFreeMemory\nINFO: Set PausePreventionMinimumFreeMemory to 209715200\nINFO: Successfully set fund MinimumFreeMemory\nINFO: Set PausePreventionMinimumFreeMemory to 209715200\nINFO: Successfully set fund MinimumFreeMemory\nINFO: You can now run Java processes up to -Xmx219102m or -Xmx213g.\nINFO: Azul pmem initialized successfully.\nzing-memory: INFO: start successful\nzing-memory: INFO: restart successful"
}, {
  "objectID" : "dce059f9-d654-4a7e-a585-dff19667cb13",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Complete Prerequisites",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#complete-prerequisites",
  "content" : "Complete Prerequisites Locate and install the kernel headers that match the kernel version that will be running the ZST. Install the DKMS package appropriate for your target operating system. DKMS is already included in Amazon Linux, Amazon Linux 2, Ubuntu, and Debian but not directly provided by CentOS, RHEL, SLES, Oracle Linux. For those systems, it can be installed from the Fedora EPEL repository. See also Using DKMS on RHEL, CentOS, or Oracle Linux to build ZST for other kernel versions. Run the commands as root or use sudo. System Commands to Install Packages RHEL, CentOS, CentOS Stream, Oracle Linux (Non-UEK Kernels), Amazon Linux, Rocky Linux and Alma Linux # yum install kernel-devel-$(uname -r) dkms SLES # zypper install kernel-default-devel-$(uname -r) dkms Oracle Linux (UEK Kernels) # yum install kernel-uek-devel-$(uname -r) dkms Ubuntu and Debian # apt-get install linux-headers-$(uname -r) dkms Depending upon the operating system the required packages include: OpenSSL 0.9.8 or later binutils required to ensure that any core files, generated when a Zing instance fails abnormally, include the shared libraries that were in use at the time"
}, {
  "objectID" : "8a3e8ba9-3695-4fd0-91a2-8c5b4795c01f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Install ZST",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#install-zst",
  "content" : "Install ZST The ZST installation package contains a kernel loadable module and supporting scripts and tools. To install ZST: Ensure that you have access to https://www.azul.com/software-downloads-and-documents/ to download Zing packages (contact [email protected] to obtain the required credentials). Login to your system as root or sudo. Download and install the ZST package. To install ZST, use the command appropriate for your system: System Commands to Install Packages RHEL, CentOS, CentOS Stream, Oracle Linux, Amazon Linux, Rocky Linux and Alma Linux # yum localinstall zing-zst-<zst-api-version>.dkms-<zst_version>.x86_64.rpm For example: # yum localinstall zing-zst-8b.dkms.2.6.32-5.22.5.0.4.el.x86_64.rpm SLES # zypper install <zst-api-version>.dkms-<zst_version>.<platform>.rpm For example: # sudo zypper install zing-zst-8c.4.4.82-5.22.13.0.2.1.sles12.x86_64.rpm Ubuntu and Debian # apt install ./zing-zst_<zst-api-version>.dkms-<zst_version>.<platform>.deb For example: # sudo apt install ./zing-zst_8b.dkms.3.2.0.x86.64-server-5.22.5.0.4_amd64.deb A sample system response is shown below:  Preparing... ################################# [100%]\nUpdating / installing...\n1:zing-zst-8b.dkms.2.6.32-5.22.5.0.################################# [100%]\nCreating symlink /var/lib/dkms/zing_mm/5.22.5.0-4/source ->\n/usr/src/zing_mm-5.22.5.0-4\nDKMS: add completed.\nKernel preparation unnecessary for this kernel. Skipping...\nBuilding module:\ncleaning build area...\nmake -j24 KERNELRELEASE=3.10.0-957.27.2.el7.x86_64 KERNELDIR=/lib/modules/3.10.0-957.27.2.el7.x86_64/build DKMS=1 INTERNAL_BUILD_NAME=zst-5.22.5.0 BUILD_SUFFIX= BUILD_NUMBER=4.....\ncleaning build area...\nDKMS: build completed.\nzing_mm.ko.xz:\nRunning module version sanity check.\n- Original module\n- No original module exists within this kernel\n- Installation\n- Installing to /lib/modules/3.10.0-957.27.2.el7.x86_64/extra/\nAdding any weak-modules\ndepmod....\nDKMS: install completed.\nzing-memory: INFO: Restarting...\nzing-memory: INFO: Stopping...\nzing-memory: INFO: stop successful\nzing-memory: INFO: Starting...\nINFO: Zing Memory reserved using reserve-at-launch policy\nINFO: az_pmem_set_device_limit to 500034437120 bytes succeeded\nINFO: az_pmem_set_overall_device_limit to 243259146240 bytes succeeded\nINFO: az_pmem_fund_limit_transfer (to 7, from 0, bytes 500034437120) succeeded\nINFO: az_pmem_fund_limit_transfer (to 1, from 7, bytes 135144669184) succeeded\nINFO: az_pmem_fund_limit_transfer (to 3, from 7, bytes 135144669184) succeeded\nINFO: az_pmem_fund_limit_transfer (to 0, from 7, bytes 229745098752) succeeded\nINFO: Set ContingencyMinimumFreeMemory to 209715200\nINFO: Successfully set fund MinimumFreeMemory\nINFO: Set PausePreventionMinimumFreeMemory to 209715200\nINFO: Successfully set fund MinimumFreeMemory\nINFO: Set PausePreventionMinimumFreeMemory to 209715200\nINFO: Successfully set fund MinimumFreeMemory\nINFO: You can now run Java processes up to -Xmx219102m or -Xmx213g.\nINFO: Azul pmem initialized successfully.\nzing-memory: INFO: start successful\nzing-memory: INFO: restart successful"
}, {
  "objectID" : "3ad33868-d144-4e9d-96e8-38182f31c687",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Azul Zing System Tools Post Installation Tasks",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#azul-zing-system-tools-post-installation-tasks",
  "content" : "Azul Zing System Tools Post Installation Tasks The following post-installation steps are not directly required when starting to use Azul Zing Builds of OpenJDK (Zing) with Azul Zing System Tools (ZST), but it is recommended to go through them to avoid later problems in production systems. Transferring JDK Customizations If you have applied customizations to the existing non-ZST Azul Platform Prime installation location, you might need to transfer those to the new installation location. Those customizations could be, for example, JAR files added to the directory $JAVA_HOME/jre/lib/ext or changes in the security settings below $JAVA_HOME/jre/lib/security. Azul Platform Prime offers the same directories to store custom jar files and security policies. Setting an Unlimited ulimit Ensure the ulimit is unlimited for virtual memory, resident memory, and core file size. At the command line, type:  ulimit -v unlimited -m unlimited -c unlimited Some operating systems default the ulimit to -v unlimited, others do not. The -v unlimited value is required prior to launching a Zing instance for the first time. The -m and -c options issue warnings and do not prevent a Zing instance from launching. Set the ulimit prior to launching any Zing instances or add it to a system start command file. Ensuring Sufficient Virtual Memory Areas If you are running Oracle HotSpot or OpenJDK and using XX:+UseLargePages, you must ensure there is sufficient memory allocated to each: Azul Platform Prime and Linux memory. To ensure that OS settings are appropriate for performance sensitive applications, apply the following settings: Disable transparent_hugepages on your Linux system where you are running Azul Platform Prime. Turn off SWAP either by removing swap or by setting swappiness to 0`. Best practice removes swap. Set vm.min_free_kbytes to 1 GB or more. Best practice assigns more than 1 GB. Set vm.max_map_count=1000000. JDK Configuration Compatibility If your Java application requires access to any javax.crypto unlimited strength policy files: If they are included with your existing version of the JDK, copy them to the Linux JDK where the Zing software package is installed. If you do not have an existing JDK, download the javax.crypto policy files from the Oracle website directly and store them to the Linux JDK where the Zing software package is installed. Since Zing 17.11.0.0 the Java Cryptography Extension (JCE) jurisdiction policy files are included. In order to use encryption with key lengths more than 128 bit, no installation of JCE files is required and adding the following line in your code is sufficient:  Security.setProperty(\"crypto.policy\", \"unlimited\"); With Zing 17.11.0.0 no additional encryption algorithm code was added compared to earlier releases, it only enabled existing code by default. The previous approach of copying the policy files is still available and all policy files for limited and unlimited key lengths are now included. To activate the unlimited key length:  cp /opt/zing/zing-jdk8/jre/lib/security/policy/unlimited/* /opt/zing/zing-jdk8/jre/lib/security/"
}, {
  "objectID" : "81215781-5951-42c3-979a-0b7aae14e9d7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Transferring JDK Customizations",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#transferring-jdk-customizations",
  "content" : "Transferring JDK Customizations If you have applied customizations to the existing non-ZST Azul Platform Prime installation location, you might need to transfer those to the new installation location. Those customizations could be, for example, JAR files added to the directory $JAVA_HOME/jre/lib/ext or changes in the security settings below $JAVA_HOME/jre/lib/security. Azul Platform Prime offers the same directories to store custom jar files and security policies."
}, {
  "objectID" : "e08a7eed-1f4b-4d39-84a7-fdf0eb0f4749",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Setting an Unlimited ulimit",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#setting-an-unlimited-ulimit",
  "content" : "Setting an Unlimited ulimit Ensure the ulimit is unlimited for virtual memory, resident memory, and core file size. At the command line, type:  ulimit -v unlimited -m unlimited -c unlimited Some operating systems default the ulimit to -v unlimited, others do not. The -v unlimited value is required prior to launching a Zing instance for the first time. The -m and -c options issue warnings and do not prevent a Zing instance from launching. Set the ulimit prior to launching any Zing instances or add it to a system start command file."
}, {
  "objectID" : "665dbe93-297e-4090-896d-c7dff9819c26",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Ensuring Sufficient Virtual Memory Areas",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#ensuring-sufficient-virtual-memory-areas",
  "content" : "Ensuring Sufficient Virtual Memory Areas If you are running Oracle HotSpot or OpenJDK and using XX:+UseLargePages, you must ensure there is sufficient memory allocated to each: Azul Platform Prime and Linux memory. To ensure that OS settings are appropriate for performance sensitive applications, apply the following settings: Disable transparent_hugepages on your Linux system where you are running Azul Platform Prime. Turn off SWAP either by removing swap or by setting swappiness to 0`. Best practice removes swap. Set vm.min_free_kbytes to 1 GB or more. Best practice assigns more than 1 GB. Set vm.max_map_count=1000000."
}, {
  "objectID" : "5637bc51-1cc1-48d7-bd3b-b22cc7d2108f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "JDK Configuration Compatibility",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#jdk-configuration-compatibility",
  "content" : "JDK Configuration Compatibility If your Java application requires access to any javax.crypto unlimited strength policy files: If they are included with your existing version of the JDK, copy them to the Linux JDK where the Zing software package is installed. If you do not have an existing JDK, download the javax.crypto policy files from the Oracle website directly and store them to the Linux JDK where the Zing software package is installed. Since Zing 17.11.0.0 the Java Cryptography Extension (JCE) jurisdiction policy files are included. In order to use encryption with key lengths more than 128 bit, no installation of JCE files is required and adding the following line in your code is sufficient:  Security.setProperty(\"crypto.policy\", \"unlimited\"); With Zing 17.11.0.0 no additional encryption algorithm code was added compared to earlier releases, it only enabled existing code by default. The previous approach of copying the policy files is still available and all policy files for limited and unlimited key lengths are now included. To activate the unlimited key length:  cp /opt/zing/zing-jdk8/jre/lib/security/policy/unlimited/* /opt/zing/zing-jdk8/jre/lib/security/"
}, {
  "objectID" : "b9f65bb5-485a-4aea-a827-4ca7f1c102ac",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing Azul Zing System Tools",
  "section" : "Disabling 5-level Paging on Ice Lake Hardware",
  "url" : "https://docs.azul.com/prime/zst/installation",
  "link" : "https://docs.azul.com/prime/zst/installation#disabling-5-level-paging-on-ice-lake-hardware",
  "content" : "Disabling 5-level Paging on Ice Lake Hardware If you use ZST on Ice Lake hardware, you must disable 5-level paging. Determine whether 5-level paging is enabled. Run cat /proc/cpuinfo | grep -m 1 la57 If the output is empty, 5-level paging mode is either not supported or disabled. If the output is not empty, 5-level paging is enabled, and you should proceed to the next step. Switch back to 4-level paging. Add no5lvl to the list of command line options for the Linux boot loader. For example, using /etc/default/grub, update the GRUB_CMDLINE_LINUX value to include the no5lvl option. GRUB_CMDLINE_LINUX=\"crashkernel=auto resume=/dev/mapper/cl-swap rd.lvm.lv=cl/root rd.lvm.lv=cl/swap rhgb quiet no5lvl\" Update grub On Ubuntu, run update-grub. On RHEL8 Legacy mode, run grub2-mkconfig -o /boot/grub2/grub.cfg. On RHEL8 UEFI mode, run grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg. Reboot the host machine."
}, {
  "objectID" : "ae451af5-4d7f-4e58-b591-937941cd91d1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Upgrading Azul Zing System Tools",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/upgrading",
  "link" : "https://docs.azul.com/prime/zst/upgrading",
  "content" : "Note The instructions below are applicable only if Azul Zing System Tools (ZST) is installed on the system. These do not apply if Azul Zing Builds of OpenJDK (Zing) was installed using a tarball and is being used without the ZST. To switch to a newer kernel within a major release of a particular OS, you do not need to upgrade your ZST installation if a kernel version is supported by a major release of ZST. With ZST 5.20.5 and higher, the newer kernel is enabled seamlessly once installed on your system. You need to upgrade your ZST in case the kernel version is not supported. Sample message:  zing-memory: INFO: Starting...\n/usr/lib/zing/bin/tar: zm.o_3.10.0-514.55.4.el7.x86_64: Not found in archive\n/usr/lib/zing/bin/tar: zm_linux.o_3.10.0-514.55.4.el7.x86_64: Not found in archive\n/usr/lib/zing/bin/tar: Exiting with failure status due to previous errors\nzing-memory: INFO: Zing ZST support for kernel 3.10.0-514.55.4.el7.x86_64 is unavailable. Please upgrade ZST. For any other ZST upgrade cases, use the appropriate Linux packaging upgrade command. Login to your system as root. Download the latest ZST .rpm or .deb file. Ensure there are no running processes using Zing Memory. All currently-running Zing instances must be terminated before attempting to upgrade ZST. If this is not done, the upgrade and/or memory preallocation might fail or result in incorrect configuration.  zing-ps See Using the zing-ps Tool. Identify the installed Zing ZST packages. For RHEL or SLES:  yum list zing-zst Sample response:  Installed Packages\nzing-zst.x86_64   8c.3.10.0-5.22.12.0.1.1.el7   installed For Ubuntu:  apt list zing-zst Sample response:  zing-zst/now 8c.5.4.0.x86.64-ub2004-5.22.13.0.2.1 amd64 [installed,local] Run the upgrade command on your ZST package: For RHEL:  yum localinstall <packagename> For SLES:  zypper install <packagename> For Ubuntu:  apt install ./<package name> There is no direct upgrade path for ZST using read only ZST images. You must uninstall the existing ZST read only image and install and configure the new ZST read only image."
}, {
  "objectID" : "6c63eb99-c075-4f19-8a59-5b5e3f12cdf6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Uninstalling Azul Zing System Tools",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/uninstalling",
  "link" : "https://docs.azul.com/prime/zst/uninstalling",
  "content" : "Note The instructions below are applicable only if Azul Zing System Tools (ZST) is installed on the system. These do not apply if an Azul Zing build of OpenJDK (Zing) was installed using a tarball and being used without ZST. Uninstalling ZST removes all the ZST elements, which includes the following: Zing Memory zing-ps To uninstall ZST: Login to your system as root. Ensure there are no running processes using Zing Memory, type:  zing-ps Identify the installed Zing packages. For RHEL or SLES:  rpm -qa|grep zing For Ubuntu:  dpkg -l|grep zing Sample response:  zng-zst-5e.2.6.32-5.7.2.0.10.el6.x86_64\nzing-jdk1.7.0-5.8.0.0-13.x86_64 Uninstall ZST. Run the appropriate remove or delete command. For RHEL:  yum remove zing-zst-<version> For SLES:  zypper remove zing-zst-<version> For Ubuntu:  dpkg -P zing-zst-<version> This completes the ZST uninstallation."
}, {
  "objectID" : "1d03e3a4-59c6-4476-bd4f-77140c1b6663",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Uninstalling Azul Zing System Tools",
  "section" : "Uninstalling the ZST from a ZST Node",
  "url" : "https://docs.azul.com/prime/zst/uninstalling",
  "link" : "https://docs.azul.com/prime/zst/uninstalling#uninstalling-the-zst-from-a-zst-node",
  "content" : "Uninstalling the ZST from a ZST Node Uninstalling ZST removes the ZST elements from the ZST node. To uninstall ZST: Login to your system as root. Shutdown all the Zing Java processes. Ensure there are no running processes using Zing Memory, type:  zing-ps Run the shutdown script, zing-zst.shutdown, and confirm at the prompt. For example, including the optional -r option.  /azul/zing_node/zst/scripts/zing-zst.shutdown -r The system responds:  Uninstalling ZST from the system...\nDo you want to continue? (yes or no) y\nRestoring core pattern\nRemoving zing-licensed\nzing-licensed: INFO: Stopping...26109\nzing-licensed: INFO: stop successful\nRemoving zing-memory\nzing-httpd: INFO: Stopping...\nzing-httpd: INFO: stop successful\nzing-certd: INFO: Stopping...\nzing-certd: INFO: stop successful\nzing-memory: INFO: Stopping...\nzing-memory: INFO: stop successful\nRemoving directories\nKeeping /var/log/zing-httpd, directory is not empty\nRemoving ZST Kernel Object\nRemoving symlinks\nRemoving user and groups created for ZST\nRemoving /etc/zing\nUninstallation complete! If you had enabled zing-core-pattern, the zing-zst.shutdown command restores your original core pattern. The zing-zst.shutdown command has the following options: Command-Line Option Description -h Displays help text. -r, --remove-etc-zing-folder Removes the /etc/zing folder. --batch-mode Uninstalls ZST without user interaction. Use it to avoid any confirmation questions during the uninstall procedure. Unmount the Zing server read-only directory from the local ZST node.  # umount -l <zst_node_dir> For example:  # umount -l /azul/zing_node/zst This command unmounts the local ZST node directory. Optionally, remove the Zing log file directory. The /var/log/zing-httpd directory contains log files. If you want to remove those files as well, remove the directory manually."
}, {
  "objectID" : "f31fc70f-df21-429f-8c5c-1ff57e4f1c95",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Uninstalling Azul Zing System Tools",
  "section" : "Uninstalling the ZST from the Zing Server",
  "url" : "https://docs.azul.com/prime/zst/uninstalling",
  "link" : "https://docs.azul.com/prime/zst/uninstalling#uninstalling-the-zst-from-the-zing-server",
  "content" : "Uninstalling the ZST from the Zing Server Uninstalling ZST removes all the ZST elements, this includes the following: Zing Memory zing-ps To uninstall ZST: Uninstall ZST from all the ZST nodes. See the Uninstalling the ZST from a ZST Node section. Login to your Zing server as root. Ensure there are no running processes using Zing Memory, type:  zing-ps Uninstall ZST from the Zing server. Run the remove command.  yum remove zing-zst-<version> This completes the ZST uninstallation."
}, {
  "objectID" : "e3bfa933-dc94-434b-bdad-edc7c90af83f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Compatibility Reference",
  "section" : "",
  "url" : "https://docs.azul.com/prime/release-notes-compatibility-overview",
  "link" : "https://docs.azul.com/prime/release-notes-compatibility-overview",
  "content" : "This section describes the Azul Platform Prime component version compatibility, Azul Zing System Tools (ZST) and API version compatibility, and Azul Platform Prime component deprecation."
}, {
  "objectID" : "cacad131-7a99-42c4-ba05-1d708106244b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Compatibility Reference",
  "section" : "Component Version Compatibility",
  "url" : "https://docs.azul.com/prime/release-notes-compatibility-overview",
  "link" : "https://docs.azul.com/prime/release-notes-compatibility-overview#component-version-compatibility",
  "content" : "Component Version Compatibility This table lists the component versions that have been tested and are compatible. All component versions listed are compatible with each other. Important: If you are using Intel KPTI fix, it is recommended to upgrade your ZST to ZST 5.20.5 or higher. See the release notes for ZST 5.20.5 in Azul Zing System Tools New Features and Updates for more information. Note The information in the table below is updated up to Azul Platform Prime 23.09.0.0 and Azul Zing System Tools (ZST) 5.22.15. ZST Version Azul Platform Prime Version 5.22.16.0 24.01.x.x 23.01.x.x - 23.12.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.01.x.x - 17.12.x.x 16.01.x.x - 16.12.x.x 15.02.x.x 15.05.1.x - 15.09.x.x 5.22.15.0 24.01.x.x 23.01.x.x - 23.12.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.12.xx 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.12.x.x 17.01.x.x - 17.02.x.x 17.04.x.x - 17.05.x.x 17.07.x.x 16.02.x.x - 16.06.x.x 16.08.x.x - 16.09.x.x 15.01.x.x - 15.04.x.x 15.05.1.x - 15.05.3.x 15.06.x.x - 15.08.x.x 15.10.x.x - 15.12.x.x 5.22.14.0 24.01.x.x 23.01.x.x - 23.12.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.12.xx 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.12.x.x 17.01.x.x - 17.02.x.x 17.04.x.x - 17.05.x.x 17.07.x.x 16.02.x.x - 16.06.x.x 16.08.x.x - 16.09.x.x 15.01.x.x - 15.04.x.x 15.05.1.x - 15.05.3.x 15.06.x.x - 15.08.x.x 15.10.x.x - 15.12.x.x 5.22.13.0 24.01.x.x 23.01.x.x - 23.12.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.09.x.x 18.12.x.x 17.01.x.x - 17.02.x.x 17.04.x.x - 17.05.x.x 17.07.x.x 17.09.x.x 16.02.x.x - 16.06.x.x 15.02.x.x 5.22.10.0 - 5.22.12.0 24.01.x.x 23.01.x.x - 23.12.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.21.8.0 24.01.x.x 23.01.x.x - 23.12.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.20.1.0 - 5.20.8.0 24.01.x.x 23.01.x.x - 23.12.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.20.0.0 23.01.x.x - 23.09.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.19.0.0 23.01.x.x - 23.09.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.18.0.0 23.01.x.x - 23.09.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.17.1.0 23.01.x.x - 23.09.x.x 22.01.x.x - 22.12.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.16.0.0 - 5.16.1.0 22.01.x.x - 22.10.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.15.2.0 22.01.x.x - 22.10.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.15.1.0 22.01.x.x - 22.10.x.x 21.01.x.x - 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.15.0.0 22.01.x.x - 22.10.x.x 21.01.x.x - 21.09.x.x 21.12.x.x 20.01.x.x - 20.12.x.x 19.01.x.x - 19.12.x.x 18.01.x.x - 18.12.x.x 17.03.x.x - 17.12.x.x 16.01.x.x - 16.07.x.x 15.02.x.x 15.09.x.x 5.7.19 16.01.x.x 16.07.x.x 16.10.x.x 5.7.16 15.09.x.x 5.7.12 15.05.1.0 15.05.2.0 15.05.3.0 5.7.11 15.05.0.0 5.7.0 15.02.x.x 5.7.6 14.11.x.x 5.7.0 14.09.x.x 5.7.x.x - 5.10.x.x"
}, {
  "objectID" : "deba7a02-e048-4316-bfbf-666c0b92ef74",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Compatibility Reference",
  "section" : "Component Retirement Summary",
  "url" : "https://docs.azul.com/prime/release-notes-compatibility-overview",
  "link" : "https://docs.azul.com/prime/release-notes-compatibility-overview#component-retirement-summary",
  "content" : "Component Retirement Summary This table lists the component versions that have been retired. All component versions listed pertain to the last supported version at start of their retirement. Azul Zing Builds of OpenJDK Deprecation Summary Retired Platform Azul Platform Prime Version Java SE 7 21.03.0.0, 21.02.500.0, 21.08.502.0 Java SE 6 17.03.3.0 ZST Deprecation Summary Retired Platform ZST Version RHEL/CentOS 5.x, Oracle Linux 5.x 5.20.0"
}, {
  "objectID" : "a8452b5e-0ed4-4a13-9669-14ecd636e1a8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Compatibility and API Versions",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/compatibility",
  "link" : "https://docs.azul.com/prime/zst/compatibility",
  "content" : "The following table lists the component versions that have been tested and are compatible. It also shows the ZST API level for each ZST version as some ZVM and ZST features, such as DumpMiniCore and AzMemPartition, require a specific ZST API level. ZST Version ZST API Compatible ZVM Version 5.22.x 8b, 8c All available 5.21.x 8a All available 5.20.8, 5.20.7, 5.20.6, 5.20.5, 5.20.4, 5.20.3, 5.20.2, 5.20.1, 5.20.0, 5.19.0, 5.18.0, 5.17.0 7f All available 5.16.1, 5.16.0 7e All available 5.15.2, 5.15.1, 5.15.0 7d All available 5.14.0, 5.12.0, 5.11.1, 5.11.0, 5.7.19 7d 16.10.x.x and below 5.7.17, 5.7.16 7c 15.09.x.x. and below 5.7.14, 5.7.12 6c 15.05.3.0 and below 5.7.11 6b 15.05.0.0 and below 5.7.10, 5.7.9, 5.7.8, 5.7.7, 5.7.6 6a 14.09.3.0 and below 5.7.5 5f 14.09.3.0 and below 5.7.4, 5.7.3, 5.7.2, 5.7.1, 5.7.0, 5.2.7, 5.2.6 5e 14.09.3.0 and below 5.2.5, 5.2.4, 5.2.3 5d 14.09.3.0 and below 5.2.2, 5.2.1, 5.2.0 5c 14.09.3.0 and below 5.1.3, 5.1.2, 5.1.1, 5.1.0 5b 14.09.3.0 and below"
}, {
  "objectID" : "6f8f5c9f-231e-4219-8f39-070574da688a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Memory Configuration",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/memory-configuration",
  "content" : "If you have the Azul Zing System Tools (ZST) installed, you can configure the Zing Memory either by using the system-config-zing-memory wizard (see Configure Zing Memory for details) or by directly modifying the settings in the /etc/zing/pmem.conf file. To reload the modified settings, a restart of the zing-memory system service is needed. The restart is possible only when all Azul Platform Prime java processes are stopped. The following command checks for running Azul Platform Prime java processes:  $ zing-ps -s To restart the ZST zing-memory system service, use:  $ sudo service zing-memory restart The ZST can be configured in two different modes: reserve-at-config: the memory pool used for all Java heaps is allocated and reserved during the start of the zing-memory system service reserve-at-launch: the memory used for each Java heap is allocated at the time of the java process start. This behavior is similar to when using Azul Platform Prime without the ZST, which is possible since version 19.07.0.0 of the Azul Zing Build of OpenJDK (Zing). See a configuration example for reserve-at-config in file /etc/zing/pmem.conf:  # Memory configuration file version\nversion 2.0\n\n# ZST status (should always be enabled)\n# values: enabled | disabled\npmem enabled\n\n# ZST mode\nwhen-to-reserve reserve-at-config\n\n# memory reservations for ZST, all in percentage of system RAM\n# instead of % you can also use absolute values with unit specifier MB or GB\n\n# reserved memory for Java heaps, sum of all -Xmx\nReservable 68%\n\n# contingency memory\nContingency 4%\n\n# pause prevention memory\nPausePrevention 4%\n\n# use all NUMA nodes\nnodemask ALL See a configuration example for reserve-at-launch in file /etc/zing/pmem.conf:  # Memory configuration file version\nversion 2.0\n\n# ZST status (should always be enabled)\n# values: enabled | disabled\npmem enabled\n\n# memory cgroup enforcement\n# values: enabled | disabled\ncgroups disabled\n\n# ZST mode\nwhen-to-reserve reserve-at-launch\n\n# memory limits for ZST, all in percentage of system RAM\n# instead of % you can also use absolute values with unit specifier MB or GB\n\n# total sum of all limits\nOverallUpperLimit 76%\n\n# limit for sum of all -Xmx\nReservableUpperLimit 68%\n\n# contingency memory\n# here we reserve a static block of 4% of system RAM\nContingencyUpperLimit 4%\nContingencyMinimumFreeMemory 4%\n\n# pause prevention memory\n# here we reserve a static block of 4% of system RAM\nPausePreventionUpperLimit 4%\nPausePreventionMinimumFreeMemory 4%\n\n# use all NUMA nodes\nnodemask ALL To view and verify the current configuration settings, run the following command:  zing-ps -s This command also shows the current maximum available -Xmx value in megabytes. For the reserve-at-config mode, the maximum -Xmx is guaranteed and shown in the Free row of the Reservable column. For the reserve-at-launch mode, only the theoretical upper limit of -Xmx is shown in the UpperLimit row of the Reservable column as the practically usable amount can be slightly smaller depending on the current memory fragmentation of the system."
}, {
  "objectID" : "3cf9c896-4d68-4720-8835-6302580318ed",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing and Configuring Using Read-Only Images",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/read-only-images",
  "link" : "https://docs.azul.com/prime/zst/read-only-images",
  "content" : "This guide describes how to install and configure Azul Zing Builds of OpenJDK (Zing) using read-only images of Azul Zing System Tools (ZST) and Zing for use in an Enterprise File System (EFS). Note ZST with a read-only image is supported on RHEL/CentOS 5.2 or later, and RHEL/CentOS 6.x. systems only."
}, {
  "objectID" : "95badecd-7cbf-463f-8eca-6cc80fc771ed",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing and Configuring Using Read-Only Images",
  "section" : "Complete Prerequisites",
  "url" : "https://docs.azul.com/prime/zst/read-only-images",
  "link" : "https://docs.azul.com/prime/zst/read-only-images#complete-prerequisites",
  "content" : "Complete Prerequisites Prior to installing ZST, complete the following steps to ensure your system can support ZST. Note ZST must be installed prior to installing Zing. Login to your system as root administrator. Ensure the following packages are installed. RHEL/ CentOS 6, supported Oracle Linux 6  sudo yum install openssl binutils curl RHEL/CentOS 7, 8, and Oracle Linux 7  sudo yum install openssl binutils curl\nsudo yum install perl-Sys-Syslog.x86_64 Amazon Linux  sudo yum install openssl binutils curl\nsudo yum install perl-Sys-Syslog.x86_64\nsudo yum install kernel-devel-$(uname -r) SLES  sudo zypper install openssl binutils curl Ubuntu  sudo apt-get install openssl binutils curl Depending upon the operating system the required packages include: OpenSSL 0.9.8 or later Development tools – Download the package from the operating system website. binutils – Are required to ensure that any core files, generated when a Zing instance fails abnormally, include the shared libraries that were in use at the time."
}, {
  "objectID" : "a3b29e4e-1d0f-4f27-b3b8-ecbc8fc8a627",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing and Configuring Using Read-Only Images",
  "section" : "Install ZST on the Zing Server",
  "url" : "https://docs.azul.com/prime/zst/read-only-images",
  "link" : "https://docs.azul.com/prime/zst/read-only-images#install-zst-on-the-zing-server",
  "content" : "Install ZST on the Zing Server Complete a standard full ZST installation on the Zing server. The ZST nodes access this server as source for ZST installation and configuration. The ZST installation package contains a kernel loadable module and supporting scripts and tools. To install ZST: Login to your system as root administrator or use sudo. Ensure that you have access to the download FTP server (contact [email protected] to obtain the required credentials). Download ZST installation package to your system <zst_install> directory.  zing-zst-<kernel_version>.<zst_version>.<platform>.rpm The zing-zst package contains the kernel module and various tools. Only one version of zing-zst may be installed at a time. The ZST installation package is specific to the operating system version, service pack, and/or kernel on the installation machine. Install ZST using the following command, type:  # rpm --prefix=<zing_server_dir> -ivh <download_dir>/zing-zst-<kernel_version>.<zst_version>.<platform>.rpm <zing_server_dir> is the path that all ZST nodes use to access the Zing server installation. Using the --prefix option creates the specified directory, in this example, /azul/zing_server/zst. <download_dir> is the location on the server where you downloaded the ZST package. In this example, /azul. For example:  # rpm --prefix=/azul/zing_server/zst -ivh /azul/zing-zst-5e.2.6.18-5.7.2.0.10.el5.x86_64.rpm The system responds.  Preparing... ########################################### [100%]\n1:zing-zst ########################################### [100%]\nZing ZST is installed at /azul/zing_server/zst\nRun /azul/zing_server/zst/scripts/zing-zst.startup to start Zing services Add /usr/sbin to any Zing executable path. For example, at the following to the appropriate profile file:  export PATH=/usr/sbin:$PATH"
}, {
  "objectID" : "ec474226-8b13-4868-b516-b43ead604a75",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing and Configuring Using Read-Only Images",
  "section" : "Prepare the ZST Server",
  "url" : "https://docs.azul.com/prime/zst/read-only-images",
  "link" : "https://docs.azul.com/prime/zst/read-only-images#prepare-the-zst-server",
  "content" : "Prepare the ZST Server The steps in this section are typically performed by a network administrator. The ZST read-only directory must be available to all ZST nodes. On the Zing server, export the directory, /azul/zing_server/zst, to make it read-only visible to all other ZST nodes. For example:  # cat /etc/exports The system responds:  /azul/zing_server/zst *(ro,fsid=0,sync) Restart the network file system to apply the export. For example:  # service nfs restart The system responds.  Shutting down NFS mountd: [ OK ]\nShutting down NFS daemon: [ OK ]\nShutting down NFS quotas: [ OK ]\nShutting down NFS services: [ OK ]\nStarting NFS services: [ OK ]\nStarting NFS quotas: [ OK ]\nStarting NFS daemon: [ OK ]\nStarting NFS mountd: [ OK ]"
}, {
  "objectID" : "08f43e39-4870-4401-b0af-ca9aa52f545e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing and Configuring Using Read-Only Images",
  "section" : "Install ZST on the ZST Nodes",
  "url" : "https://docs.azul.com/prime/zst/read-only-images",
  "link" : "https://docs.azul.com/prime/zst/read-only-images#install-zst-on-the-zst-nodes",
  "content" : "Install ZST on the ZST Nodes Note Install ZST on the Zing server before you install ZST on any ZST node. The ZST installation package contains a kernel loadable module and supporting scripts and tools. This includes: Zing Memory Zing license daemon Zing tools, including zing-ps To install ZST: On each ZST node, login to your system as root administrator. Create a ZST directory.  # mkdir /azul/zing_node/zst Mount the Zing server read-only directory to a local ZST node directory.  # mount <ZST_Server_IP>:<zing_server_dir> <zst_node_dir> For example:  # mount 10.10.163.113:/azul/zing_server/zst /azul/zing_node/zst This command creates the local ZST node directories, as needed. Change to the /script directory.  # cd /azul/zing_node/zst/scripts/ Install ZST using the zing-zst.startup command.  # ./zing-zst.startup The system responds:  Installing ZST ...\nChecking ZST package dependencies...\nDependency check complete...\nzing-licensed: INFO: start successful [ OK ]\nzing-memory: INFO: Starting...\nWarning: Zing Virtual Machine support is disabled.\nWarning: Run system-config-zing-memory to enable.\nWarning: Try 'man zing-zst' for more information.\nWarning: Azul pmem configuration disabled.\nzing-memory: INFO: start successful\nInstallation complete! The zing-zst.startup command has the following options: Option Description --h Displays help text. -p, --pmem <pmem_filename> References a pmem.conf file that contains ZST memory configuration information. -l, --license <license_filename> References a Zing license file. For example, including the optional -l and -p options:  # /zing/57210/scripts/zing-zst.startup -l /tmp/license -p /tmp/pmem.conf\nInstalling ZST ...\nChecking ZST package dependencies...\nDependency check complete...\nInstalled: '/tmp/license'\nInstalled: '/tmp/pmem.conf'\nzing-licensed: INFO: start successful [ OK ]\nzing-memory: INFO: Starting...\nInfo: azulPmemPages: 5888.\nINFO: az_pmem_reserve_pages (num2mPages 5888) succeeded\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 12348030976) succeeded\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 616562688) succeeded\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 616562688) succeeded\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 11114905600) succeeded\nInfo: You can now run Java processes up to -Xmx10600m or -Xmx10g.\nInfo: Azul pmem initialized successfully.\nzing-memory: INFO: start successful\nInstallation complete! In this example, the comment to run system-config-zing-memory is not included because the memory configuration file was provided with the zing-zst.startup command. Configure Zing memory allocation. See Configure Zing Memory. Repeat the Step 1 through Step 7 for each ZST Node."
}, {
  "objectID" : "d60cc136-8cfc-49f1-873f-c8f82bf2508f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing and Configuring Using Read-Only Images",
  "section" : "Configure Zing Memory on the ZST Nodes",
  "url" : "https://docs.azul.com/prime/zst/read-only-images",
  "link" : "https://docs.azul.com/prime/zst/read-only-images#configure-zing-memory-on-the-zst-nodes",
  "content" : "Configure Zing Memory on the ZST Nodes After ZST is installed you must configure Zing Memory allocation. Zing requires a portion of host system memory to be set aside and managed independently from Linux. The system-config-zing-memory wizard assists with this. Note The system-config-zing-memory creates or replaces any existing version of the pmem.conf file. Running the system-config-zing-memory wizard is required for first time installations. This section describes creating a default configuration. To customize your Zing memory configuration, see Modifying Zing Memory Configuration. Complete the steps in Install ZST on the ZST Nodes. Configure Zing memory management using the system-config-zing-memory command. Zing requires a portion of host system memory to be set aside and managed independently from Linux. Use the system-config-zing-memory wizard for initial configuration. From the command line, type:  # /azul/zing_node/zst/usr/sbin/system-config-zing-memory The system responds:  Welcome to the Zing memory configuration wizard by Azul Systems.\nThis wizard sets up the Zing memory configuration file\n/etc/zing/pmem.conf.0 and initializes Zing memory. (Read the man pages for zing, zing-zst, and zing-pmem-conf for more information about this configuration file.)\nBy default, Azul recommends setting up your system with 25% Linux memory and 75% Zing memory. Choose yes to accept this default, or no to enter the wizard expert flow.\n** accept default configuration\n** (y)es or (n)o [default 'y']: Y Accept default configuration settings. At the prompt, type y.  ** accept default configuration\n** (y)es or (n)o [default 'y']:  Y The system response lists the zing services that are started or restarted and memory configuration information. For example:  zing-memory: INFO: Restarting...\nzing-memory: INFO: Stopping...\nzing-memory: INFO: stop successful\nzing-memory: INFO: Starting...\nInfo: azulPmemPages: 54454.\nINFO: az_pmem_reserve_pages (num2mPages 54454) succeeded\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 114198315008) succeeded\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 5708447744) succeeded\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 5708447744) succeeded\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 102781419520) succeeded\nInfo: You can now run Java processes up to -Xmx98020m or -Xmx95g.\nInfo: Azul pmem initialized successfully.\nzing-memory: INFO: start successful\nzing-memory: INFO: restart successful."
}, {
  "objectID" : "b5d4ccbf-c72b-403b-a398-161af6dcc7b0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing and Configuring Using Read-Only Images",
  "section" : "Install Zing License File on the ZST Nodes",
  "url" : "https://docs.azul.com/prime/zst/read-only-images",
  "link" : "https://docs.azul.com/prime/zst/read-only-images#install-zing-license-file-on-the-zst-nodes",
  "content" : "Install Zing License File on the ZST Nodes After ZST is installed, install your Zing license. A Zing license is required to start a Java application using a Zing instance. Zing licenses are issued by Azul and are necessary for Self-Service Trials only."
}, {
  "objectID" : "fd5b9761-f924-4b87-bc90-052ae45b9aa9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing and Configuring Using Read-Only Images",
  "section" : "Install Zing Virtual Machine on the ZST Nodes",
  "url" : "https://docs.azul.com/prime/zst/read-only-images",
  "link" : "https://docs.azul.com/prime/zst/read-only-images#install-zing-virtual-machine-on-the-zst-nodes",
  "content" : "Install Zing Virtual Machine on the ZST Nodes After ZST is installed and the Zing licensing is applied, install Zing. See the Installation Instructions for complete instructions. The following is an overview of the Zing installation when you are using ZST with a read-only image. On the Zing server, download Zing. The installer package uses the following naming format depending on the Java version supported: zing-jdk<version>-<zvm_version>.<platform>.rpm Login as root. Enter the root shell. Type the su command. Enter the super-user password when prompted. Install Zing.  # rpm -ivh --prefix=<zing_server_dir> -ivh <download_dir>/zing-jdk<version>-<zvm_version>.<platform>.rpm Where: <zing_server_dir> is the path that all Zing nodes use to access the Zing server installation. Using the --prefix option creates the specified directory, in this example, /azul/zing_server/zvm. <download_dir> is the location on the server where you downloaded the ZST package. In this example, /azul. For example:  # rpm -ivh --prefix=/azul/zing_server/zvm /azul/zing-jdk1.7.0-5.8.0.0-13.x86_64.rpm\nPreparing... ########################################### [100%]\n1:zing-jdk1.7.0 ########################################### [100%] Export the read-only directory, /azul/zing_server/zvm.  # more /etc/exports The system responds:  /azul/zing_server/zvm *(ro,fsid=0,sync) Restart NFS.  # service nfs restart\nShutting down NFS daemon: [ OK ]\nShutting down NFS mountd: [ OK ]\nShutting down NFS quotas: [ OK ]\nShutting down NFS services: [ OK ]\nStarting NFS services: [ OK ]\nStarting NFS quotas: [ OK ]\nStarting NFS mountd: [ OK ]\nStopping RPC idmapd: [ OK ]\nStarting RPC idmapd: [ OK ]\nStarting NFS daemon: [ OK ] On each ZST node, mount the Zing installed directory. For example:  # mkdir /azul/zing_node/zvm\n# mount 10.10.163.192:/azul/zing_server/zvm /azul/zing_node/zvm"
}, {
  "objectID" : "f6b523b5-561f-45d7-b255-268cb0ac68c6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installing and Configuring Using Read-Only Images",
  "section" : "Verify Zing Installation on the ZST Nodes",
  "url" : "https://docs.azul.com/prime/zst/read-only-images",
  "link" : "https://docs.azul.com/prime/zst/read-only-images#verify-zing-installation-on-the-zst-nodes",
  "content" : "Verify Zing Installation on the ZST Nodes After ZST is installed, configured, and started, and Zing is installed, verify the completed installation. Verify that your Zing license is installed. Check the /etc/zing/ directory for your licensing authorization file, license. If you are running Zing instances on a standalone host, see Installing a Zing License. If you are configuring your Zing host as a member of a Zing licensing pool, see Installing and Using Pool Licensing. Run a simple Java command; for example type:  $ <zing_java_directory>/bin/java -version where <zing_java_directory> is the directory where the Zing /bin/java is located. If you accept the Zing installation defaults, this path is, for example:  $ /opt/zing/zing-<version>/bin/java -version For quicker access, use the fully qualified path. Look for the Zing component reference in the system response, for example:  $ java version \"1.8.0-zing_14.09.0.0\"\nZing Runtime Environment for Java Applications (build 1.8.0-zing_14.09.0.0-b20)\nZing 64-Bit Tiered VM (build 1.8.0-zing_14.09.0.0-b33-product-azlinuxM-X86_64, mixed mode) See Troubleshooting Zing or run man zing-installation to view common installation errors. To launch Zing instances, the Zing Memory must be configured and running, and the license daemon must be running. See also Zing System Requirements and Compatibility References for a complete list of Zing component requirements, including supported CPUs, memory requirements, and operating system versions."
}, {
  "objectID" : "7fbf0f1c-446c-457a-b059-a8f60ffafef3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "zing-ps Command-Line Options",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/zing-ps-options",
  "link" : "https://docs.azul.com/prime/zst/zing-ps-options",
  "content" : "The memory management functions of the Azul Zing System Tools (ZST) are performed automatically when an Azul Zing Builds of OpenJDK (Zing) instance runs a Java application. The zing-ps command returns a snapshot of current Zing memory usage. It displays information about active Zing processes, system behavior, and Zing memory usage. zing-ps is installed automatically when ZST is installed. It is run from the command line. Use this command before you install, update, or restart the ZST or modify the ZST configuration. This tool does not collect history. To collect zing-ps information over time, use a while loop to run the zing-ps command at specified time increments, for example every 10 seconds, and log the data generated. Then use the logged data in a numbers-to-graph tool, such as Excel to generate graphs. For quick reference, at the command line, type:  $ zing-ps --help The zing-ps command usage is:  usage: azps [-s] [-o] [-b] [-m] [-h] [-p pid] [-d] [-e] [-x] [-c] [-n] [-a] [-j] [-l] [--comma] [-partition P] [-f] [-V] [-zpv] Where – Command Description -s Print the memory summary. -o Print the overall upper limit for reserve-at-launch partitions. -o used without -s prints only overall upper limit information. -o used with -s adds overall upper limit to the memory summary. Units: -b Print values in units of bytes. -m Round byte values to megabytes. -h Round byte values to multiples of powers of 1024 and print suffix. Process information: -p [PID] Print info about specific process. -d Suppress printing of per process detail. Best effort account information: -e Print details about best effort account. Select fields, information and format to print: -x Print extended process detail. -c Print only the command. -n Print only the name from the command. -a Print the arguments following the command. -j Print selected portions of the command. -l Print the legend. --comma Comma separated tabular format. Memory information: -partition P Print memory accounting information for Partition P, where P is a partition number between 0 and 15. -f Suppress printing of memory information. Version information: -V Print the ZST version. -zpv Print the zing-ps version. Some options are mutually exclusive. Many options can be used in combination. See Format Command Option Samples for listing of mutually exclusive options."
}, {
  "objectID" : "730212bd-5429-4e9d-90a5-fc62a2f2767e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "zing-ps Command Output",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/command-return-overview",
  "link" : "https://docs.azul.com/prime/zst/command-return-overview",
  "content" : "For the reserve-at-launch memory reservation option, Upper Limits are set to each of the System Azul Zing Builds of OpenJDK (Zing) memory pools used by the JVM. This includes the Java Heap, Contingency and Pause Prevention memory pools. When using reserve-at-launch, the Java Heap’s memory will only be reserved from the Reservable memory pool of System Zing memory when the process is launched. In zing-ps, if no Zing process is running then the Reservable used will be zero. Likewise, for the Contingency and Pause Prevention memory pools, when no Zing process is running the zing-ps will show zero memory use for both pools. When a Zing process is launched, a minimum amount of memory is reserved. This reserved Contingency and Pause Prevention memory is, in most cases, not used by the Zing process when it starts. In zing-ps, this reserved, unused memory is shown as free memory. If the Zing does use Pause Prevention or Contingency memory then the JVM will reserve that amount of memory plus an additional amount equal to the minimum free memory specified when the ZST was configured using system-config-zing-memory."
}, {
  "objectID" : "72a20ffe-e600-446b-81bf-ceb77298fd52",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "zing-ps Command Output",
  "section" : "Memory Use Analysis with zing-ps -s",
  "url" : "https://docs.azul.com/prime/zst/command-return-overview",
  "link" : "https://docs.azul.com/prime/zst/command-return-overview#memory-use-analysis-with-zing-ps-s",
  "content" : "Memory Use Analysis with zing-ps -s The following examples show how to obtain detailed summary information about memory use, both System Linux and System Zing memory. The \"Physical Total\" memory pool refers to the total of the \"Physical Used\" and \"Physical Free\" memory pools, where \"Physical Used\" is equal to the sum of the \"Linux Used\" and \"Zing Used\" memory pools. For monitoring active running processes on a Linux system, the zing-ps -s command reports \"Zing Used\" as the sum of the \"Zing Reservable\", \"Contingency, Free\", and \"Pause Prevention Free\" memory pools."
}, {
  "objectID" : "cccbfd2d-e834-4e99-9695-c450d3769c92",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "zing-ps Command Output",
  "section" : "Summary of Total Memory Usage: Example 1: reserve-at-config",
  "url" : "https://docs.azul.com/prime/zst/command-return-overview",
  "link" : "https://docs.azul.com/prime/zst/command-return-overview#summary-of-total-memory-usage-example-1-reserve-at-config",
  "content" : "Summary of Total Memory Usage: Example 1: reserve-at-config The memory for the Reservable, Contingency and Pause Prevention memory pools is reserved when system-config-zing-memory is run. No Zing processes running System Zing Memory reserved at configuration (reserve-at-config) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 90254 16740 73514 0 0 0 Free: 6430 6430 0 65778 3868 3868 Total: 96684 23170 73514 65778 3868 3868 Found 0 processes. One Zing processes running System Zing Memory reserved at configuration (reserve-at-config) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 90254 16855 73514 9750 0 0 Free: 6366 6366 0 56028 3868 3868 Total: 96735 23221 73514 65778 3868 3868 Found 1 process.  USER PID TIME LRSS ZRSS Xmx CTG PP JSYS CMD\n\njuser 23874 00:00:04 93 1861 9750 0 0 3 java myApplication One Zing process running and using more Java heap memory System Zing Memory reserved at configuration (reserve-at-config) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 90475 16961 73514 9750 0 0 Free: 6260 6260 0 56028 3868 3868 Total: 96735 23221 73514 65778 3868 3868 Found 1 process.  USER PID TIME LRSS ZRSS Xmx CTG PP JSYS CMD\njuser 23874 00:00:29 198 6887 9750 0 0 6 java myApplication One Zing process running and using Contingency memory System Zing Memory reserved at configuration (reserve-at-config) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 90534 17020 73514 9750 3092 0 Free: 6201 6201 0 56028 776 3868 Total: 96735 23221 73514 65778 3868 3868 Found 1 process.  USER PID TIME LRSS ZRSS Xmx CTG PP JSYS CMD\njuser 23874 00:02:34 257 12569 9750 3090 0 9 java myApplication Note \"Zing Used\" refers to the total amount of memory that has been reserved for running Zing. The sum of \"Reservable Used\", \"Contingency Used\", and \"PausePrev Used” is equal to the amount of \"Zing Used.\""
}, {
  "objectID" : "a38d55e5-9649-4833-8835-0bbd970d2b91",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "zing-ps Command Output",
  "section" : "Summary of Total Memory Usage: Example 3 - reserve-at-launch with Upper Limits for Reservable, Contingency and PausePrev",
  "url" : "https://docs.azul.com/prime/zst/command-return-overview",
  "link" : "https://docs.azul.com/prime/zst/command-return-overview#summary-of-total-memory-usage-example-3-reserve-at-launch-with-upper-limits-for-reservable-contingency-and-pauseprev",
  "content" : "Summary of Total Memory Usage: Example 3 - reserve-at-launch with Upper Limits for Reservable, Contingency and PausePrev Sample output of zing-ps –s on a system configured to reserve Zing memory when Java processes are launched, when no Zing processes are running. System Zing Memory reserved at process launch (reserve-at-launch) for Reservable, Contingency and PausePrev Memory withMinimumFreeMemory specified for Contingency and PausePrevention. No Zing processes running System Zing Memory reserved at process launch (reserve-at-launch) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 1231 1231 0 0 0 0 Free: 95504 - - - 0 0 Total: 96735 - 0 0 0 0 UpperLimit - - 72550 65298 3626 3626 Found 0 processes One Zing process running showing used, free and total memory for Zing, Reservable, Contingency and Pause Prevention System Zing Memory reserved at process launch (reserve-at-launch) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 73873 1323 72550 65298 0 0 Free: 22862 - - - 3626 3626 Total: 96735 - 72550 65298 3626 3626 UpperLimit - - 72550 65298 3626 3626 Found 1 process  USER PID TIME LRSS ZRSS Xmx CTG PP JSYS CMD\njuser 9688 00:00:07 103 3606 65298 0 0 2 java -jar myApplication.jar"
}, {
  "objectID" : "e923cc0e-2523-44f5-bc8f-c7fa7ae00361",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "zing-ps Command Output",
  "section" : "Summary of Total Memory Usage: Example 3 - reserve-at-launch with Upper Limits for Reservable, Contingency and PausePrev",
  "url" : "https://docs.azul.com/prime/zst/command-return-overview",
  "link" : "https://docs.azul.com/prime/zst/command-return-overview#summary-of-total-memory-usage-example-3-reserve-at-launch-with-upper-limits-for-reservable-contingency-and-pauseprev-2",
  "content" : "Summary of Total Memory Usage: Example 3 - reserve-at-launch with Upper Limits for Reservable, Contingency and PausePrev No Zing processes running System Zing Memory reserved at process launch (reserve-at-launch) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 1157 1157 0 0 0 0 Free: 95578 - - - 0 0 Total: 96735 - 0 0 0 0 UpperLimit - - 87060 82224 48366 48366 Found 0 processes One Zing process running showing used, free and total memory for Zing, Reservable, Contingency and Pause Prevention System Zing Memory reserved at process launch (reserve-at-launch) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 83945 1321 82624 0 0 0 Free: 12790 - - - 200 200 Total: 96735 - 82624 82224 200 200 UpperLimit - - 87060 82224 48366 48366 Found 1 process  USER PID TIME LRSS ZRSS Xmx CTG PP JSYS CMD\njuser 12216 00:00:06 102 4438 82224 0 0 2 java -jar myApplication.jar One Zing process running and using Contingency memory System Zing Memory reserved at process launch (reserve-at-launch) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 27631 17037 10594 9750 444 0 Free: 69104 - - - 200 200 Total: 96735 - 10594 9750 644 200 UpperLimit - - 87060 82224 48366 48366 Found 1 process  USER PID TIME LRSS ZRSS Xmx CTG PP JSYS CMD\njuser 23539 00:01:13 241 9614 9750 441 0 8 java myApplication One Zing process running and using large amounts of Contingency memory System Zing Memory reserved at process launch (reserve-at-launch) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 29667 17059 12608 9750 2458 0 Free: 67068 - - - 200 200 Total: 96735 - 12608 9750 2658 200 UpperLimit - - 87060 82224 48366 48366 Found 1 process  USER PID TIME LRSS ZRSS Xmx CTG PP JSYS CMD\njuser 23539 00:07:39 260 11635 9750 2462 0 9 java myApplication Note \"Zing UpperLimit\" is the maximum amount of memory allowed for Zing processes, but it is not all reserved. \"Zing UpperLimit\" is OverallUpperLimit. The total reserved memory for Zing, at the time of running the zing-ps command, is equal to the sum of Reservable Total, Contingency Total, and PausePrev Total. The actual Zing memory in use is the sum of Reservable Used, Contingency Used and PausePrev Used. Physical Linux Zing Reservable Contingency PausePrev Used: 144241 113921 30320 19456 1164 0 Free: 651 - - - 4268 5432 Total: 144893 - 30320 19456 5432 5432 Physical Linux Zing Reservable Contingency PausePrev Used: 83601 83601 0 0 0 0 Free: 61292 - - - 0 0 Total: 144893 0 - 0 0 0 UpperLimit - - 108668 97804 5432 5432 Note \"Zing UpperLimit\" is the maximum amount of memory allowed for Zing processes, but it is not all reserved. \"Zing UpperLimit\" is the sum of Reservable UpperLimit, Contingency UpperLimit, and PausePrev UpperLimit. The total reserved memory for Zing, at the time of running the zing-ps command, is equal to the sum of Reservable Total, Contingency Total, and PausePrev Total. The actual Zing memory in use is the sum of Reservable Used, Contingency Used and PausePrev Used."
}, {
  "objectID" : "07f636e8-e6ba-4b1a-b800-3537becde70a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "zing-ps Command Output",
  "section" : "Summary of Total Memory Usage: Example 4",
  "url" : "https://docs.azul.com/prime/zst/command-return-overview",
  "link" : "https://docs.azul.com/prime/zst/command-return-overview#summary-of-total-memory-usage-example-4",
  "content" : "Summary of Total Memory Usage: Example 4 Sample output from a system with multiple zing partitions. Partition 0: Zing Memory reserved at process launch (reserve-at-launch) Partition 0 Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: N/A N/A 23636 14336 0 0 Free: N/A N/A - - 4650 4650 Total: N/A N/A 23636 14336 4650 4650 UpperLimit N/A N/A 93030 83730 4650 4650 Partition 1: Zing Memory reserved at process launch (reserve-at-launch) Partition 1 Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: N/A N/A 0 0 0 0 Free: N/A N/A - - 0 0 Total: N/A N/A 0 0 0 0 UpperLimit N/A N/A 93030 83730 4650 4650 Partition 2: Zing Memory reserved at process launch (reserve-at-launch) Partition 2 Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: N/A N/A 0 0 0 0 Free: N/A N/A - - 0 0 Total: N/A N/A 0 0 0 0 UpperLimit N/A N/A 93030 83730 4650 4650 Consolidated Summary Memory Usage Summary Physical Linux Zing Used: 54167 30531 23636 Free: 462673 - - Total: 516840 - 23636"
}, {
  "objectID" : "dc171445-47db-419f-8506-b22f8891715b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "zing-ps Command Output",
  "section" : "Memory Usage for Each Running Zing Process",
  "url" : "https://docs.azul.com/prime/zst/command-return-overview",
  "link" : "https://docs.azul.com/prime/zst/command-return-overview#memory-usage-for-each-running-zing-process",
  "content" : "Memory Usage for Each Running Zing Process  Found 7 processes\n\n USER   PID   TIME     LRSS  ZRSS  ZCTG  ZXmx CMD\n\n user1 25160  00:00:03  63   434   0     1024 java -cp invokeinstruction MH\n\n user2 21990  00:02:25  203  1152  0     6144 java -jar gcLogAnalyser-99.99.99.99-295.jar\n\n user3 30900  00:01:43  66   472   0     1024 tnameserv -ORBInitialPort 18322\n\n user4 30849  08:26:34  181  452   0     1024 rmid -port 18321 -log Rmid\n\n user5 30337  00:02:44  61   460   0     1024 tnameserv -ORBInitialPort 16848\n\n user6 30043  00:02:30  44   446   0     1024 rmid -port 16847 -log Rmid\n\n user7 4324   00:31:18  47   570   0     1024 tnameserv tnameserv -ORBInitialPort 20735 The default for zing-ps return is the same as zing-ps -j. Including zing-ps command options adds or removes return content relative to the default -j return. To not display the per process detail, add the -d option."
}, {
  "objectID" : "f2a4f1a5-7742-4b48-9d8f-77fa2ddc6da6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Formating Command Sample Options",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/format-options",
  "link" : "https://docs.azul.com/prime/zst/format-options",
  "content" : "The examples in the following subsections provide sample format command options to use with Azul Zing System Tools (ZST). Example 1: No Parameters Used, Returns the Number of Azul Zing Builds of OpenJDK (Zing) Processes. With no parameters, zing-ps returns the number of Zing processes and memory usage for each itemized process. The -j option conditions are used as the default option for formatting the CMD field.  $ zing-ps\nFound 2 processes\nUSER  PID    TIME    LRSS  ZRSS Xmx    CTG   PP JSYS CMD\nuser1 27960 12:19:09 116  4048  10240  0     0   6  java -jar ZingJMM.jar\nuser2 27758 00:00:55 105  564   1024   0     0   2  java -jar be Example 2: Comma Separated. The –comma option includes commas as a separator between table columns. This format can be imported into CSV accepting tool, such as Excel. The option applies to all table formats. Sufficient commas are included to align all columns.  zing-ps -s --comma System Zing Memory reserved at process launch (reserve-at-launch) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 61495 39343 22152 11264 0 0 Free: 83717 - - - 5444 5444 Total: 145212 - 22152 11264 5444 5444 UpperLimit: - - 108908 98020 5444 5444  USER , PID, TIME, LRSS, ZRSS, Xmx, CTG, PP, JSYS, CMD\nuser1 , 27960, 12:19:09, 116, 4048, 10240, 0, 0, 6, java -cp ZingJMM.jar org.openjdk.jmh.runner.ForkedMain 127.0.0.1 39602\nuser2 , 27758, 00:00:55, 105, 564, 1024, 0, 0, 2, java -jar benchmarks.jar -wi 50000 -i 100000 -jvmArgs=-Xmx10g Example 3: CMD Column Options. Select one command (CMD) column display option at a time: -a, -c, -j, or -n. Using the -a option displays all the arguments included in the command used to initiate the process.  $ zing-ps -a\nFound 1 processes\nUSER   PID  TIME    LRSS ZRSS Xmx CTG PP JSYS CMD\nuser2 27758 00:00:56 105 564 1024 0   0   2 <my dir>/jdk7/x86_64/product/bin/java -jar target/benchmarks.jar -wi 50000 -i 100000 -jvmArgs=-Xmx10g -XX:ARTAPort=7890 Using the -c option displays the command used to initiate the process without the command options.  $ zing-ps -c\nFound 1 process\nUSER  PID    TIME    LRSS ZRSS Xmx CTG PP JSYS CMD\nuser2 27758 00:00:57 105  564  1024  0  0   2 <my dir>/jdk7/x86_64/product/bin/java Using the -j option displays pre-defined options from the command used to initiate the process. This is the default zing-ps return.  $ zing-ps -j\nFound 1 processes\nUSER   PID   TIME   LRSS ZRSS Xmx CTG PP JSYS CMD\nuser2 27758 00:00:57 105 564  1024  0  0   2 java -jar benchmarks.jar -wi 50000 -i 100000 -jvmArgs=-Xmx10g\nUsing the -n option displays only the name of the command used to initiate the process.\n$ zing-ps -n\nFound 1 processes\nUSER  PID    TIME   LRSS ZRSS Xmx CTG PP JSYS CMD\nuser2 27758 00:00:57 105 564 1024 0   0   2  java Example 4: Units Displayed Options. Select one unit display option at a time: -b, -h, or -m. Using the -b option displays the memory values in bytes. Fund and per-process account information is in bytes by default, unless otherwise noted.  $ zing-ps -b\nFound 1 processes\nUSER   PID   TIME     LRSS     ZRSS         Xmx       CTG  PP     JSYS     CMD\nuser1 27960 12:19:11 122134528 4244316160 10737418240 0    0      6049792 java -cp ZingJMM.jar org.openjdk.jmh.runner.ForkedMain 127.0.0.1 39602 Using the -h option displays the memory values in human readable values rounded to the units as noted K=Kilo, M=Mega, G=Giga, T=Tera.  $ zing-ps -h\nFound 1 processes\nUSER    PID   TIME   LRSS   ZRSS   Xmx CTG PP JSYS   CMD\nuser1 27960 12:19:11 116 M 4048 M 10 G   0  0 5908 K java -cp ZingJMM.jar org.openjdk.jmh.runner.ForkedMain 127.0.0.1 39602 Using the -m option displays the memory values in megabytes. No suffix is included. This is the default value.  $ zing-ps -m\nFound 2 processes\nUSER   PID     TIME LRSS ZRSS Xmx  CTG PP JSYS CMD\nuser1 27960 12:19:11 116 4048 10240 0  0    6 java -cp ZingJMM.jar org.openjdk.jmh.runner.ForkedMain 127.0.0.1 39602\nuser2 27758 00:00:58 105 564 1024   0  0    2 java -jar benchmarks.jar -wi 50000 -i 100000 -jvmArgs=-Xmx10g Sample using -h with -s options.  zing-ps -s -h Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 60 G 39 G 22 G 11 G 0 0 Free: 82 G - - - 5444 M 5444 M Total: 142 G - 22 G 11 G 5444 M 5444 M  Found 2 processes\nUSER    PID    TIME   LRSS ZRSS    Xmx CTG PP JSYS    CMD\nuser1 27960 12:19:11 116 M 4048 M 10 G   0  0 5908 K java -cp ZingJMM.jar org.openjdk.jmh.runner.ForkedMain 127.0.0.1 39602\nuser2 27758 00:00:58 105 M 564 M 1024 M  0  0 1664 K java -jar benchmarks.jar -wi 50000 -i 100000 -jvmArgs=-Xmx10g Example 5: Details of Specific Process by Process ID (PID). Using the -p [PID] option lists the memory information for the specified process only.  $ zing-ps -p 27960\nFound requested process 27960\nUSER   PID    TIME  LRSS ZRSS Xmx  CTG PP JSYS CMD\nuser1 27960 12:19:11 116 4048 10240 0   0  6   java -cp ZingJMM.jar org.openjdk.jmh.runner.ForkedMain 127.0.0.1 39602 Example 6: Advanced Usage Information for Processes. Using the -x option gives extended information about process zing memory usage, which include peak and limit for contingency, pause prevention and Java system memory.  $ zing-ps –x\n\nFound 2 processes\nUSER   PID    TIME  LRSS ZRSS Xmx  CTG CPK CMX PP PPK PMX JSYS JSPK JSMX CMD\nuser1 27960 12:19:12 116 4048 10240 0   0  5444 0  0  5444 6    6    616 java -cp ZingJMM.jar org.openjdk.jmh.runner.ForkedMain 127.0.0.1 39602\nuser2 27758 00:00:58 105 564 1024   0   0  5444 0   0 5444 2    6    62  java -jar benchmarks.jar -wi 50000 -i 100000 -jvmArgs=-Xmx10g Example 7: Details of Specific Zing Partition. Using the -partition <Partition> option gives memory usage and process information for specified partition. Partition 1: Zing Memory reserved at process launch (reserve-at-launch) Partition 1 Summary Physical Linux Zing Reservable Contingency PausePrev Used: N/A N/A 0 0 0 0 Free: N/A N/A - - 0 0 Total: N/A N/A - 0 0 0 UpperLimit: N/A N/A  Partition 1: Found 1 process\nUSER   PID    TIME   LRSS ZRSS Xmx CTG PP CMD\nuser1 33996 13:56:04 727   904 1024 0   0 java -tiered -jar start.jar Example 8: Details of Best Effort Account. Using the -e option gives memory usage information for best effort account.  zing-ps -s -h -e –x System Zing Memory reserved at process launch (reserve-at-launch) Memory Usage Summary Physical Linux Zing Reservable Contingency PausePrev Used: 41 G 2129 M 39 G 30 G 8668 M 0 Free: 101 G - - - 200 M 200 M Total: 142 G - 39 G 30 G 8868 M 200 M UpperLimit: - - 128 G 121 G 71 G 71 G  Found 1 process\nUSER   PID    TIME   LRSS ZRSS Xmx CTG CPK CMX PP PPK PMX JSYS JSPK JSMX BE BEPK BER BEMX CMD\nroot 27130 00:01:45 140 M  33 G 30 G 0   0 - 0 0 - 3300 K 8192 K 1844 M 8078 M 8078 M 8668 M 51 G java -cp ALF-ALL.jar:. BEE_Test_Runtime 92000 -f zingps.log Where: BEPK = Best Effort Memory peak BER = Best Effort Memory reserved BEMX = Best Effort Memory limit BE = Best Effort contigency"
}, {
  "objectID" : "bac25d91-060e-4acc-ab3d-7664a2970904",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Showing Available Heap Sizes",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/show-heap-sizes",
  "link" : "https://docs.azul.com/prime/zst/show-heap-sizes",
  "content" : "You can use zing-ps and awk commands to show available heap sizes in MB. The output of the zing-ps -acct command is in bytes; you might prefer to think in Megabytes. This technique is based on the zing-ps –acct command and is a one-line script that uses the Linux grep command to search the output combined with the Linux awk command to calculate and format the output. The output from the zing-ps –acct command is searched by grep for the line containing the Committed string. The awk command uses $3 to select the third field which is the available balance in column three of the output with the heading BALANCE. The following one-line script prints the maximum Available Heap size for the JVM command option –Xmx and if other JVMs have already been started this is less than the maximum Reservable value in column four headed MAXIMUM.  echo \"Zing Available Heapsize (MB) is \"`zing-ps --acct|grep Committed|awk '{print int($3/(1024*1024))}' To read the total Reservable value in MB, in this one-line script the awk command is modified to use $4 to select the fourth field which is the MAXIMUM balance echo \"Zing Total Heapsize (MB) is \"`zing-ps --acct|grep Committed|awk '{print int($4/(1024*1024))}"
}, {
  "objectID" : "77f2f154-06c9-4bea-b306-883cc8d614b3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Showing Available Heap Sizes",
  "section" : "Example 1: No JVMs have been started.",
  "url" : "https://docs.azul.com/prime/zst/show-heap-sizes",
  "link" : "https://docs.azul.com/prime/zst/show-heap-sizes#example-1-no-jvms-have-been-started",
  "content" : "Example 1: No JVMs have been started.  [root@localhost bin]# zing-ps --acct  Fund breakdown (total 8)\n\n                           NAME         BALANCE         MAXIMUM\n\n    fund[0]:          Committed      4041211904      4041211904\n\n    fund[1]:          Overdraft       222298112       222298112\n\n    fund[2]:            Unknown               0               0\n\n    fund[3]:    PausePrevention       222298112       222298112\n\n    fund[4]:            Unknown               0               0\n\n    fund[5]:            Unknown               0               0\n\n    fund[6]:            Unknown               0               0\n\n    fund[7]:            Unknown               0               0\n\nFound 0 processes.\n\n[root@localhost bin]# echo \"Zing Available Heapsize (MB) is \"`zing-ps --acct|grep Committed|awk '{print int($3/(1024*1024))}'`\n\nZing Available Heapsize (MB) is 3854\n\n[root@localhost bin]# echo \"Zing Total Heapsize (MB) is \"`zing-ps --acct|grep Committed|awk '{print int($4/(1024*1024))}'`\n\nZing Total Heapsize (MB) is 3854\n\nroot        5785 java\n\n                        NAME   BALANCE  ALLOCATED      MAXIMUM FND ODFND\n\naccount[0]:          default  10485760   2097152      12582912   0    1\n\naccount[1]:     emergency_gc         0         0             0  -1   -1\n\naccount[2]:             heap 555745280  505413632   1283457024   0    1\n\naccount[3]: pause_prevention         0          0 274877906944   3    3\n\naccount[4]:          unknown         0          0            0  -1   -1\n\naccount[5]:          unknown         0          0            0  -1   -1\n\naccount[6]:          unknown         0          0            0  -1   -1\n\naccount[7]:          unknown         0          0            0  -1   -1\n\n\n\n[root@localhost bin]# echo \"Zing Available Heapsize (MB) is \"`zing-ps --acct|grep Committed|awk '{print int($3/(1024*1024))}'`\n\nZing Available Heapsize (MB) is 2830\n\n[root@localhost bin]# echo \"Zing Total Heapsize (MB) is \"`zing-ps --acct|grep Committed|awk '{print int($4/(1024*1024))}'`\n\nZing Total Heapsize (MB) is 3854"
}, {
  "objectID" : "0148b5bc-5fd8-4acf-ad2f-ff302b361fcf",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Showing Available Heap Sizes",
  "section" : "Example 2: An Azul Inspector 1GB JVM has been started.",
  "url" : "https://docs.azul.com/prime/zst/show-heap-sizes",
  "link" : "https://docs.azul.com/prime/zst/show-heap-sizes#example-2-an-azul-inspector-1gb-jvm-has-been-started",
  "content" : "Example 2: An Azul Inspector 1GB JVM has been started. See Azul Systems website to download free Open Source tool Azul Inspector, at https://www.azul.com/products/open-source-tools/azul_inspector.  [root@localhost bin]# zing-ps --acct\n\nFund breakdown (total 8)\n\n                           NAME         BALANCE         MAXIMUM\n\n    fund[0]:          Committed      2967470080      4041211904\n\n    fund[1]:          Overdraft       222298112       222298112\n\n    fund[2]:            Unknown               0               0\n\n    fund[3]:    PausePrevention       222298112       222298112\n\n    fund[4]:            Unknown               0               0\n\n    fund[5]:            Unknown               0               0\n\n    fund[6]:            Unknown               0               0\n\n    fund[7]:            Unknown               0               0\n\nFound 1 processes.\n\nUSER         PID PROCESS\n\nroot        5785 java\n\n                        NAME   BALANCE  ALLOCATED      MAXIMUM FND ODFND\n\naccount[0]:          default  10485760   2097152      12582912   0    1\n\naccount[1]:     emergency_gc         0         0             0  -1   -1\n\naccount[2]:             heap 555745280  505413632   1283457024   0    1\n\naccount[3]: pause_prevention         0          0 274877906944   3    3\n\naccount[4]:          unknown         0          0            0  -1   -1\n\naccount[5]:          unknown         0          0            0  -1   -1\n\naccount[6]:          unknown         0          0            0  -1   -1\n\naccount[7]:          unknown         0          0            0  -1   -1\n\n\n\n[root@localhost bin]# echo \"Zing Available Heapsize (MB) is \"`zing-ps --acct|grep Committed|awk '{print int($3/(1024*1024))}'`\n\nZing Available Heapsize (MB) is 2830\n\n[root@localhost bin]# echo \"Zing Total Heapsize (MB) is \"`zing-ps --acct|grep Committed|awk '{print int($4/(1024*1024))}'`\n\nZing Total Heapsize (MB) is 3854"
}, {
  "objectID" : "ab0381cf-af0b-4b9f-a8db-34ebed0f2b82",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Samples Memory Usage by Account",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/samples-memory-usage-by-account",
  "link" : "https://docs.azul.com/prime/zst/samples-memory-usage-by-account",
  "content" : "Examples 6 through 10 in the following subsections depict methods of using the zing-ps command to list information about Azul Zing Builds of OpenJDK (Zing) processes. Example 1: Monitoring a Test Run. If you run a while loop, logging it into a file every 10 seconds or so, you can then make graphs from the log data, using your favorite raw-number-to-nice-graphs conversion tool.  # while true; do zing-ps -s >> /tmp/zing-ps_log ; sleep 10; done Example 2: Diagnosis of Zing Fault In the rare occurrence of a Zing crash, it can be useful to collect the output of zing-ps –s and zing-ps --acctinternal (debug option) from the system after the crash occurs, but before a system reboot or a ZST restart. If Zing crashed, please contact your Azul representative who might direct you to collect the zing-ps output and upload to the Azul FTP site along with other data, logs and cores. Example 3: Memory statistics with zero Zing processes running. This example shows memory funding with no Zing processes running.  # zing-ps --acct\nFund breakdown (total 8)\n                              NAME         BALANCE         MAXIMUM\n       fund[0]:          Committed     22745710592     22745710592\n       fund[1]:          Overdraft      1262485504      1262485504\n       fund[2]:            Unknown               0               0\n       fund[3]:    PausePrevention      1262485504      1262485504\n       fund[4]:            Unknown               0               0\n       fund[5]:            Unknown               0               0\n       fund[6]:            Unknown               0               0\n       fund[7]:            Unknown               0               0\nFound 0 processes Example 4: Memory account details with 1 Zing process running.  $ zing-ps --acct2\nProcess level Maximum: 0\nNAME                 BALANCE(now/min/max KB)  ALLOCATED(now/min/max KB)     MAXIMUM(KB) ACS_TO_CREDIT       FND  ODFND\nAC[0]:Default        32768/ 30720/ 32768      2048/ 0/ 4096\n32768       0xffffffffffffff00    0     1\nAC[1]:Unknown         0/ 0/ 0                  0/ 0/ 0\n0           0xffffffffffffff01   -1    -1\nAC[2]:JavaHeap        11360/ 911360/ 1873920  2201600/ 1239040/ 2201600         8067072     0xffffffffffff0203    0      1\nAC[3]:PausePrevention 0/ 0/ 0                 0/ 0/ 0\n4954112     0xffffffffffff0203    3      3 Field descriptions: Values are KB bytes. account [0]: The maximum is equal to the Partition. The allocated plus the balance are equal to maximum. account [2]: Java Heap. If the balance is negative, the application is using contingency memory. account [3]: Maximum value allocated for Pause Prevention. The value for account[2] heap ALLOCATED (used) is higher than AC[2] javaHeap ALLOCATED now (used) because the zing-ps --acct (in these examples) was followed by the zing-ps --acct2 and the application continued to allocate objects into the Java heap. Example 5: Memory funding details with 1 Zing process running. This example shows memory funding breakdown for ZST and allocation to the Zing process PID 15479.  $ zing-ps --acct\nFund breakdown (total 8)\nNAME BALANCEMAXIMUM\nfund[0]:Committed 819357286442553311232\nfund[1]:Overdraft 23634903042363490304\nfund[2]:Unknown 00\nfund[3]:PausePrevention23634903042363490304\nfund[4]:Unknown 00\nfund[5]:Unknown 00\nfund[6]:Unknown 00\nfund[7]:Unknown 00\n\nFound 1 processes.\n\nUSER PID PROCESS\nroot 15479 /opt/zing/zing-jdk1.7.0_23-4.2.0.0.beta-14-x86_64/bin/java\nNAMEBALANCEALLOCATEDMAXIMUMFNDODFND\naccount[0]:default341835776209715234393292801\naccount[1]:emergency_gc000-1-1\naccount[2]:heap3122659328027892121603637929574401\naccount[3]:pause_prevention0027487790694433\naccount[4]:unknown000-1-1\naccount[5]:unknown000-1-1\naccount[6]:unknown000-1-1\naccount[7]:unknown000-1-1 Explanation of zing-ps Fund Breakdown The Fund breakdown in Memory funding details with 1 Zing process running, shows the memory funding as set up for the ZST. The output from the command then also shows that the zing-ps acct command has found one Zing Java process PID 15749 and gives the memory breakdown for that Java process. The table below takes a look at the example Fund Breakdown in more detail. The figures have been converted from bytes to megabytes (because it is easier to think about megabytes than large numbers of bytes). NAME BALANCE MAXIMUM fund[0]: Committed 7814 40582 The Committed Maximum is the maximum Reservable Heap The Committed Balance is the maximum Available Heap size for the JVM -Xmx command option; and if other JVMs have already been started this will be less than the maximum Reservable value. Java Process ID 15479 has been started and set a –Xmx of 32768MB reducing the Available heap from 40582MB to 7814MB fund[1]: Overdraft 2254 2254 The Overdraft is the Contingency Memory (using the ZST defaults, this is 5% of the Zing Memory) fund[3]: PausePrevention 2254 2254 The PausePrevention is the Pause prevention memory (using the ZST defaults, this is 5% of the Zing Memory) The sum of the Committed Maximum and the Overdraft and Pause prevention maximums is equal to the size of the Zing Memory (using the ZST defaults this is 75% of the available Operating System memory, leaving 25% for the Linux Memory). In this case 40852 + 2254 + 2254 = 45090MB from which we can infer that if the ZST was configured with a 75/25 allocation then the available Operating System memory at the time the ZST was configured was 60120MB (58.7GB). This can be useful to know; for example, if we made another assumption that this was a 64GB RAM machine, then 5416MB has been allocated away somewhere else before the Operating System was loaded – perhaps some DMA buffers for 10GBe NIC interfaces or some such. Example Memory Fund Allocation for a Process Carrying on with Memory funding details with 1 Zing process running, using Process 15479 for illustration. The table below takes a look at the example Fund allocation in more detail. The figures have been converted from bytes to megabytes (because it is easier to think about megabytes than large numbers of bytes). PID: 15479 /opt/zing/zing-jdk1.7.0_23-4.2.0.0.beta-14-x86_64/bin/java NAME BALANCE ALLOCATED MAXIMUM FND ODFND Account 0 default 326 2 328 0 1 The Account 0 value is in bytes, and it amounts to 328MB. Its max is equal to its funding (that is, the ALLOCATED plus the BALANCE are equal to max). Account 0 is used for some ZST-based memory stuff that is not purely in the heap (such as kernel structures for holding the kernel page tables and such). The JVM assigns 1% of -Xmx to Account 0, and the rest to Account 2 (both draw from Committed memory). Account 1 emergency_gc 0 0 0 -1 -1 Account 2 heap 29780 2660 34694 0 1 Account 2 is the Java Heap. If its BALANCE shows as negative, your application is using contingency memory. The Account 2 funding (BALANCE + ALLOCATED) together with Account 0 funding adds up exactly to the -Xmx value. In this case -Xmx ⇒ 29780 + 2660 + 328 = 32768MB The option flag -XX:JavaMemMax can be used to set the maximum for Account 2 (heap). NOTE: When -XX:JavaMemMax=<val> equals -Xmx<val>, then the Zing instance is not allowed to use any Contingency memory. Account 3 pause_prevention 0 0 262144 3 3 The Account 3 MAXIMUM value for the pause_prevention memory computes to 256GB (exactly). Having a large MAXIMUM value doesn’t mean you have funding for that much. It just means you can draw up to that much total allocation (including dipping into overdraft accounts) if the ZST has resources to give you in the fund you are drawing from. In the case of pause prevention, a max of 256GB just means that this process can draw down the entire pause prevention memory if it wants to (it has zero funding for account 3, so all of that draw shows up in negative balances equal to the allocation level). The MAXIMUM values for each account are not funding numbers. They are just absolute limits on how much can be allocated in that account. This matters a lot when overdraft accounts are involved, as the MAXIMUM caps the total amount of allocation, even after the balance goes negative. The committed funding is always the sum of BALANCE + ALLOCATED, this remains true including times when Zing dips into an overdraft account, such as contingency (the BALANCE will go negative at that point, and even though ALLOCATED is greater than committed funding, the sum is still equal to committed). Zing uses Zing Memory only for the -Xmx (Java heap). So you need to leave enough Linux memory to accommodate not only the other Linux stuff that’s there, but also Zing’s C-heap."
}, {
  "objectID" : "d54cb71f-0fd1-4863-a850-10499d526cfe",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Control Groups",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/using-cgroups",
  "link" : "https://docs.azul.com/prime/zst/using-cgroups",
  "content" : "Control groups (cgroups) is a Linux feature that provides a way of limiting access to system resources for processes when running applications. By using cgroups, you can limit CPU and memory resources. This setting only relates to memory limited cgroups, for example, those used by container environments activated by the --memory parameter to limit a container’s memory. The cgroups behavior regarding CPU resources is always enabled and behaves similar to OpenJDK. For the Azul Zing System Tools (ZST) 5.21.x release line starting with 5.21.7, cgroups support in Azul Platform Prime is automatically enabled when running on RHEL 7. It cannot be enabled or disabled manually. For ZST 5.22.x and beyond, cgroups support is disabled by default but can be enabled for all operating systems with the cgroups enabled line in the file /etc/zing/pmem.conf. After changing this setting, ZST needs to be restarted as follows: systemctl restart zing-memory. This makes cgroups behavior regarding memory limits similar to OpenJDK’s behavior. With cgroups support enabled, the JVM process will behave similarly to an OpenJDK process under cgroups control. If the process exceed the defined cgroups limit, it will be terminated by Linux. The only difference between Azul Platform Prime and OpenJDK is the availability of Contingency Memory and Pause Prevention Memory for Java applications on Azul Zing Builds of OpenJDK (Zing). As soon as one of the two memory pools is used by Zing, the total heap usage exceeds the defined -Xmx limit. ZST memory configuration pmem.conf file defines by how much the memory usage can exceed the -Xmx setting. It is possible to set both memory pools to 0 (% of system RAM) for all Zing processes on that host or configure it individually per process."
}, {
  "objectID" : "8b495100-0176-4dd5-a461-77cc8b61b3b3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime Memory Management",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/memory-management",
  "link" : "https://docs.azul.com/prime/zst/memory-management",
  "content" : "This section provides an overview of Azul Zing Builds of OpenJDK (Zing) memory management processes. It covers the following topics:"
}, {
  "objectID" : "dd5ceb45-13ed-4406-b00b-f498eb06c0e6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime Memory Management",
  "section" : "Zing Garbage Collector",
  "url" : "https://docs.azul.com/prime/zst/memory-management",
  "link" : "https://docs.azul.com/prime/zst/memory-management#zing-garbage-collector",
  "content" : "Zing Garbage Collector The Zing Garbage Collector is an updated generational form of the Azul Pauseless Garbage Collection Algorithm and is the only collector of Zing. Zing’s Garbage Collector differentiates itself from other generational garbage collectors by supporting simultaneous – generational concurrency: the different generations are collected using concurrent (non stop-the-world) mechanisms that can be simultaneously and independently active."
}, {
  "objectID" : "9b1fbd63-8490-473b-9621-b971c643d326",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime Memory Management",
  "section" : "Zing Memory Allocation",
  "url" : "https://docs.azul.com/prime/zst/memory-management",
  "link" : "https://docs.azul.com/prime/zst/memory-management#zing-memory-allocation",
  "content" : "Zing Memory Allocation Azul Platform Prime uses Zing to run Java applications, similar to a typical JVM running a Java application. The significant difference is how memory is handled. Zing uses the Azul Zing System Tools (ZST) for managing the memory of three components: Contingency memory, Pause Prevention memory, and Zing Memory, the memory used for Zing’s Garbage Collector. Using Zing with the Garbage Collector and Contingency memory means that your Java application is no longer limited to the maximum heap size specified on the Java command line when you started your Java application. As an additional resource, Zing’s Garbage Collector might temporarily use Pause Prevention memory to prevent pauses that are caused by lack of available clean pages. See Understanding Zing Memory Use for additional information about how the memory resource is used and assigned in a Azul Platform Prime environment. Adjust the memory you configure to ensure you have sufficient memory to support Zing instances: Java heap use Reserved memory Note Using Azul technology, Java Application Execution uses all available memory without consequences common to tasks such as garbage collection and heap memory compaction. With Azul Platform Prime you can allocate 100 GBs of memory to easily and effectively enhance your enterprise production workloads."
}, {
  "objectID" : "23b2793a-1d06-489f-bb1a-db8fe5322068",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime Memory Management",
  "section" : "Compatibility with HotSpot VM Command Line Options",
  "url" : "https://docs.azul.com/prime/zst/memory-management",
  "link" : "https://docs.azul.com/prime/zst/memory-management#compatibility-with-hotspot-vm-command-line-options",
  "content" : "Compatibility with HotSpot VM Command Line Options Zing recognizes the standard and non-standard command line options for the HotSpot VM that is a core component of Java Platform, Standard Edition (Java SE) 6. See the HotSpot VM Options section in the Oracle developer site for detailed descriptions of the HotSpot VM command line options. HotSpot command line options unsupported by Zing If Zing detects a HotSpot VM native command line option that it does not support, its response can be set with the following option:  -Xnativevmflags:[ignore|error|warn] The default option is ignore. If -Xnativevmflags:error is specified and Zing detects an option that it does not support, it does not launch and generates the following type of message:  HotSpot™ 64-Bit Tiered VM error: Unsupported native VM option ‘+UseParNewGC’ Zing commands not implemented by HotSpot For command line options that are not implemented by the HotSpot VM (including options specific to Zing), the response is determined by the following option:  –Xflags:[ignore|error|warn] The default setting is error. The error setting ensures that unrecognized options are highlighted when Zing is used. For example, if the incorrectly formatted option –XXMaxPermS=128m is detected, Zing does not launch and generates the message:  HotSpot ™ 64-Bit Tiered VM error: Unrecognized VM option ‘MaxPermS=128m’ HotSpot or Open JDK XX:+UseLargePages If you are running Oracle HotSpot or OpenJDK and using XX:+UseLargePages, you must choose one of the following options to run Zing: Disable the hugepages facility on your Linux system when you are running Zing. Ensure there is sufficient memory allocated to each: Zing, hugepages, and Linux memory."
}, {
  "objectID" : "207a2584-2e63-4bed-a97a-df0117725d93",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime Memory Management",
  "section" : "Understanding Memory Allocation",
  "url" : "https://docs.azul.com/prime/zst/memory-management",
  "link" : "https://docs.azul.com/prime/zst/memory-management#understanding-memory-allocation",
  "content" : "Understanding Memory Allocation Azul Platform Prime uses Zing to run Java applications in the same way that other JVMs run Java applications. The significant difference between Zing and other JVMs is the management of memory. Zing uses ZST’s ZMM for managing memory for the three memory types that the JVM uses: Reservable memory, Contingency memory and Pause Prevention memory. This memory, called System Zing Memory, is configured when the ZST’s system-config-zing-memory tool is run. Memory for use by the JVMs running on the machine can be reserved at configuration (when the tool is run) using the reserve-at-config policy or the memory reservation for each JVM can be deferred until the launch of that JVM process using the reserve-at-launch policy. For the reserve-at-launch policy, upper limits are set for the amount of System Zing Memory to use for each of the memory types, Reservable memory, Contingency memory and Pause Prevention memory. For both configuration policies, at the launch of the JVM, the JVM requests the memory to reserve for its exclusive use as the process’s Java Heap. The JVM’s Garbage Collector manages Java objects in this memory. When free memory in the Java Heap is low, the JVM can use memory in the Contingency and Pause Prevention memory. When memory is first low, the JVM uses Pause Prevention memory to prevent pauses that could occur during a garbage collection when a thread tries to allocate an object but no free memory is available. Over the long term, if the JVM requires additional memory on an ongoing basis then memory from Contingency memory is used. This means that your Java application is no longer limited to the maximum heap size specified on the Java command line when you started your Java application. The following figures show the relationship hierarchy of the memory when the system has been configured using the reserve-at-config policy. Note that starting with ZST 5.21.x the default memory configuration has been changed when running the configuration tool In pre-5.21.x versions, the system-config-zing-memory tool configured the system by default with the reserve-at-config policy. When running the memory configuration tool for configuring memory for the 5.21 ZST, you must select which policy you would like to use. Reserve-at-config The Contingency Pool and Pause Prevention Pool are each 5% of the System Zing memory. Note that the configuration tool in the 5.21 version of the ZST uses percentages of the total Host System memory. When a Zing process runs, it reserves some of the Reservable Memory, based on the value of the -Xmx command-line option, as shown in the following graphic: Reserve-at-launch When a system is configured using the reserve-at-launch policy and no JVM instances are running, there is no System Zing Memory reserved on the system. Instead, the system-config-zing-memory tool only configures an upper limit on the amount of memory that can be reserved for System Zing Memory. If that memory in not in use as System Linux Memory then it can be used as System Zing Memory for Reservable memory, Contingency memory and Pause Prevention memory. In pre-5.21 versions of the ZST, only an upper limit is set. When a process is launched, memory is reserved for the Java Heap, the Contingency pool and the Pause Prevention pool. For the pre-5.21 versions of the ZST, all of the Contingency and Pause Prevention memory is reserved from the System Zing Memory. In the 5.21 version of the ZST, the only a small amount of the total upper limit of the Contingency and Pause Prevention memory is reserved from the System Zing Memory. By default, this is 200 MB. The ZMM strives to keep this much free memory available, even when a ZVM process requires some for its own use. When a Zing JVM running in a reserve-at-launch configured ZST partition terminates, the System Zing Memory used by the JVM process for the Java heap is returned to System Linux memory as free memory. Any Pause Prevention or Contingency memory used by the terminating JVM is returned to the corresponding Pause Prevention or Contingency memory pool. If no other Zing JVM is running in the ZST partition following the termination of the JVM then any Pause Prevention or Contingency pool memory reserved in that partition will also be returned to System Linux memory as free memory."
}, {
  "objectID" : "30e52856-39a7-46ef-b02a-b157c6789b77",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime Memory Management",
  "section" : "Reserve-at-config",
  "url" : "https://docs.azul.com/prime/zst/memory-management",
  "link" : "https://docs.azul.com/prime/zst/memory-management#reserve-at-config",
  "content" : "Reserve-at-config The Contingency Pool and Pause Prevention Pool are each 5% of the System Zing memory. Note that the configuration tool in the 5.21 version of the ZST uses percentages of the total Host System memory. When a Zing process runs, it reserves some of the Reservable Memory, based on the value of the -Xmx command-line option, as shown in the following graphic:"
}, {
  "objectID" : "4b38cc8f-6803-4404-846c-2a34754baf3b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime Memory Management",
  "section" : "Reserve-at-launch",
  "url" : "https://docs.azul.com/prime/zst/memory-management",
  "link" : "https://docs.azul.com/prime/zst/memory-management#reserve-at-launch",
  "content" : "Reserve-at-launch When a system is configured using the reserve-at-launch policy and no JVM instances are running, there is no System Zing Memory reserved on the system. Instead, the system-config-zing-memory tool only configures an upper limit on the amount of memory that can be reserved for System Zing Memory. If that memory in not in use as System Linux Memory then it can be used as System Zing Memory for Reservable memory, Contingency memory and Pause Prevention memory. In pre-5.21 versions of the ZST, only an upper limit is set. When a process is launched, memory is reserved for the Java Heap, the Contingency pool and the Pause Prevention pool. For the pre-5.21 versions of the ZST, all of the Contingency and Pause Prevention memory is reserved from the System Zing Memory. In the 5.21 version of the ZST, the only a small amount of the total upper limit of the Contingency and Pause Prevention memory is reserved from the System Zing Memory. By default, this is 200 MB. The ZMM strives to keep this much free memory available, even when a ZVM process requires some for its own use. When a Zing JVM running in a reserve-at-launch configured ZST partition terminates, the System Zing Memory used by the JVM process for the Java heap is returned to System Linux memory as free memory. Any Pause Prevention or Contingency memory used by the terminating JVM is returned to the corresponding Pause Prevention or Contingency memory pool. If no other Zing JVM is running in the ZST partition following the termination of the JVM then any Pause Prevention or Contingency pool memory reserved in that partition will also be returned to System Linux memory as free memory."
}, {
  "objectID" : "2bfe7854-27af-48df-89f6-f62c71ac7310",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Host System Memory",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/host-system-memory",
  "link" : "https://docs.azul.com/prime/zst/host-system-memory",
  "content" : "A Linux system on which the Azul Zing Builds of OpenJDK (Zing) and Azul Zing System Tools (ZST) components are installed has a certain amount of physical memory (RAM). The Host System memory is used by all of the processes running on the machine. This includes memory used by the Linux kernel, Linux processes, and the Zing instances running Java applications. The operating system’s virtual memory system manages the RAM for use as System Linux memory. The ZST’s Zing Memory Module (ZMM) manages the RAM for use as System Zing Memory. The host system memory is used to satisfy requests made for memory when a process is launched and, as necessary, when the process is running."
}, {
  "objectID" : "f9dd25d4-5c1c-4c7a-a222-0278ca4dc2f1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "System Zing Memory",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/system-zing-memory",
  "link" : "https://docs.azul.com/prime/zst/system-zing-memory",
  "content" : "The Azul Zing Builds of OpenJDK (Zing) instance reserves System Zing Memory as the memory for the Java heap. In addition, System Zing Memory provides resiliency in the event of out-of-memory conditions that can occur when a Zing instance running a Java application temporarily requires more memory than it was initially allocated. An example of this requirement might occur when a Java application’s workload spikes in an enterprise environment. The System Zing Memory is divided into three memory types: Reservable memory - The memory for each Zing instance’s Continuously Concurrent Compacting Collector’s Java heap Contingency memory Pause Prevention memory Contingency memory and Pause Prevention memory are each configured to use a percentage of the total System Zing Memory. The total amount of System Zing Memory is the amount assigned during Azul Zing System Tools (ZST) configuration using the system-config-zing-memory command and the reserve-at-config policy. The amount of memory to reserve can be done in one of two ways: As a percentage of the total system memory. The default is 75%. As a specific amount of memory in MB, where the value is the sum of the Java heap sizes for the Java instances you expect to run plus any additional Contingency and Pause Prevention memory you would like to allocate."
}, {
  "objectID" : "cbdf8cfe-4e1f-4b78-a4e0-2f66082e05d2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "System Zing Memory",
  "section" : "Pause Prevention Memory",
  "url" : "https://docs.azul.com/prime/zst/system-zing-memory",
  "link" : "https://docs.azul.com/prime/zst/system-zing-memory#pause-prevention-memory",
  "content" : "Pause Prevention Memory For other types of JVMs, when object allocation rates suddenly increase, the garbage collector can have a difficult time keeping up with the increased rate of object creation. The result is that other JVMs need to pause all work in the process to do a garbage collection. This causes Java application pauses. A common work-around to minimize the length of garbage collection pauses is to specify a small Java heap size – the theory being that a smaller Java heap requires less time to collect. Unfortunately, when the rate of work goes up, more live objects are in the heap when the heap fills up and the amount of time required for the garbage collection is proportional to the number of live objects in the Java heap. The pauses are still long. As part of the configuration of System Zing Memory, the system-config-zing-memory tool sets aside a percentage of the System Zing Memory for Pause Prevention memory. When there is a sudden increase in the object allocation rate, the Zing instance can use the Pause Prevention memory to efficiently keep up with and sustain the throughput during the heavy, unexpected workloads. Using memory from Pause Prevention memory gives the Zing instance’s Continuously Concurrent Compacting Collector additional time to adjust to and keep up with suddenly increased allocation rates. This ensures that the garbage collector does not stop or pause a Zing instance running a Java application. Having Pause Prevention memory ensures that: Zing delivers consistent response times even under sudden high loads. Zing eliminates garbage collection pauses. Note Pause Prevention memory is used seamlessly by the Zing runtime and Continuously Concurrent Compacting Collector algorithm. There are no settings you need to change or adjust. Using Pause Prevention memory is not a warning or error condition, and is not reported to or visible to you or the application."
}, {
  "objectID" : "1a697250-21ac-4611-b260-265d02a2c341",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "System Zing Memory",
  "section" : "Estimating Zing Memory Allocation Example",
  "url" : "https://docs.azul.com/prime/zst/system-zing-memory",
  "link" : "https://docs.azul.com/prime/zst/system-zing-memory#estimating-zing-memory-allocation-example",
  "content" : "Estimating Zing Memory Allocation Example The percentages used in the following example are based on the default values used by the system-config-zing-memory tool. The key relationship to remember is that the amount of Reservable memory in the system must always be greater than or equal to the sum of the –Xmx values of all concurrently running Zing instances on the system. The maximum reservable amount of memory can be found using: reserve-at-config: ReservableMemory = Reservable_Total - Reservable_Used reserve-at-launch: We need to calculate the amount of memory available for System Zing Memory. We start by calculating the amount of System Linux memory left after the System Zing Memory configuration:  SystemLinuxMemory_InitiallyConfigured = HostSystemMemory_Total - Reservable_UpperLimit Find out if the system is using more System Linux memory than initially configured (positive if use is above):  SystemLinuxMemory_UseAboveInitiallyConfigrued =\n\n     SystemLinuxMemory_Used - SystemLinuxMemory_InitiallyConfigured Calculate the ReservableMemory  if (SystemLinuxMemory_UseAboveInitiallyConfigrued <= 0)\n\n   ReservableMemory = Reservable_UpperLimit - Reservable_Used\n\nelse\n\n   We have less memory available than the value of Reservable_UpperLimit\n\n   ReservableMemory = (Reservable_UpperLimit -\n\n      SystemLinuxMemory_UseAboveInitiallyConfigrued) -\n\n         Reservable_Used ReservableMemory The difference between the two formulas arises because the total reservable is fixed and pre-reserved when the reserve-at-config policy is used while there is an upper limit, but no pre-reserved memory, for System Zing Memory when reserve-at-launch policy is used. If using the reserve-at-launch policy, the Host System memory may not be available to use as System Zing Memory because it is already in use as System Linux memory. When estimating the amount of System Zing Memory to allocate, conscider: System Zing Memory = Reservable memory Contingency memory Pause Prevention memory Reservable memory = System Zing Memory – (Contingency memory Pause Prevention memory) Note All this memory can be used by a single Zing instance or multiple Zing instances. Maximum Zing instance heap memory (-Xmx) = System Zing Memory reserved for the Zing process use. Unused Reservable memory = Reservable memory – Sum of Java VM Java Heap memory (-Xmx) values for all currently running Zing instances Generally, to estimate the total amount of System Zing Memory needed, for each Zing instance that will be running concurrently, add the amount of Java heap memory (-Xmx) required; then add the memory required for Pause Prevention and Contingency memory (together, these are 10% of total System Zing Memory). For example: If you typically run 5 Zing instances and each will reserve 20 GB of memory using the –Xmx command line option then you need a minimum of 111 GB of System Zing Memory. 100 GB is used by all the Zing instances and 11 GB is used for the Pause Prevention and Contingency memory. The following is an approximate breakdown of how the system’s memory is used when there is a single Zing instance running. 100% Host System memory is shared between: 25% System Linux memory 75% System Zing Memory 100% of System Zing Memory is shared between: 5% Pause Prevention memory for Continuously Concurrent Compacting Collector 5% Contingency memory 90% Reservable for Zing instances which is shared between: The reserved –Xmx amount of Reservable memory for each Java heap in each Zing instance running For example, if total host system memory is 100 GB: 25 GB is allocated to System Linux memory 75 GB is allocated to System Zing Memory 7.5 GB (10%) is allocated to Pause Prevention and Contingency memory 3.75 GB for Pause Prevention memory 3.75 GB for Contingency memory 67.5 GB is available as Reservable memory Every Zing instance running a Java application reserves memory from Reservable memory based on the value of the -Xmx command line option."
}, {
  "objectID" : "05c312a6-ec50-4c3c-b244-603c183e5460",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Contingency Memory",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/contingency-memory",
  "link" : "https://docs.azul.com/prime/zst/contingency-memory",
  "content" : "The -Xmx command line option on the Java application command line specifies the amount of Java heap memory to be reserved by the Azul Zing Builds of OpenJDK (Zing) running a Java application. Zing instances can require additional Java heap memory for assorted reasons, including unplanned events and incremental memory needs. To help ensure that Zing instances survive unanticipated peak loads and to prevent out of memory errors, the system-config-zing-memory tool sets aside a percentage of the System Zing memory for Contingency memory. Contingency memory is additional memory available to any Zing instance running a Java application. The Zing instance uses Contingency memory to manage memory requests for space in the Zing instance’s Java heap. Memory from Contingency memory is used as needed by Zing, growing and shrinking as the needs of Zing instances fluctuate: Using Contingency memory allows Zing instances to be launched without extensive, up-front JVM or garbage collector tuning. Zing instances are allowed to grow or shrink based on actual needs. If sufficient Contingency memory is available, Zing instances are allocated extra memory, allowing them to continue processing without triggering an out of memory failure. Applications can run with larger heap sizes to improve application performance. The heap size is no longer limited in an attempt to prevent potential garbage collection pauses."
}, {
  "objectID" : "d5216a08-3c41-4e52-962a-10837bb68f32",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Contingency Memory",
  "section" : "Contingency Memory and Generational Pauseless Garbage Collection",
  "url" : "https://docs.azul.com/prime/zst/contingency-memory",
  "link" : "https://docs.azul.com/prime/zst/contingency-memory#contingency-memory-and-generational-pauseless-garbage-collection",
  "content" : "Contingency Memory and Generational Pauseless Garbage Collection Zing’s ability to temporarily increase the Java heap memory available to a process beyond the originally specified -Xmx value is unique to the Zing Java platform. The only limits of Contingency memory use are: How much unused memory remains in the Contingency memory When a Zing instance running a Java application uses memory from the Contingency memory, the Zing instance automatically increases the frequency of garbage collections to ensure Java Heap memory is available for object allocation. If a Zing instance constantly uses Contingency memory, adjust the heap size when you restart the Zing instance. This adjustment can prevent spending excessive time in garbage collection. Limiting the Zing instance’s maximum Java Heap size Use the -XX:JavaMemMax command line option to specify the Java heap memory upper limit. To prevent use of Contingency memory for a Zing instance, set the -XX:JavaMemMax value equal to the -Xmx value."
}, {
  "objectID" : "118e7035-4488-4927-983c-e2cc08614a8d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Contingency Memory",
  "section" : "Sharing Contingency Memory and Memory Leaks",
  "url" : "https://docs.azul.com/prime/zst/contingency-memory",
  "link" : "https://docs.azul.com/prime/zst/contingency-memory#sharing-contingency-memory-and-memory-leaks",
  "content" : "Sharing Contingency Memory and Memory Leaks Contingency memory is reserve memory of memory for use in temporary high load situations. Do not depend on Contingency memory when calculating the -Xmx value for Zing instances running Java applications. Contingency memory is shared among all Java processes on the system. It can only be effective in preventing processes from terminating with an out of memory error if the increases in memory requested by each of the Zing instances are kept to a minimum. Once a Zing instance is using memory from Contingency memory, the application is at some risk because there are no guarantees that additional Contingency memory will be available when needed because Contingency memory is a shared resource."
}, {
  "objectID" : "9b2a1338-96f5-4487-bf14-40c4487dbd41",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Reservable and Reserved Memory",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/reservable-and-reserved-memory",
  "link" : "https://docs.azul.com/prime/zst/reservable-and-reserved-memory",
  "content" : "The Reservable memory is a portion of the System Zing Memory reserved when the reserve-at-config policy is chosen when configuring your system using the system-config-zing-memory tool. In this case, the Reservable memory is available to any Azul Zing Builds of OpenJDK (Zing) instance at launch. Specific requests for memory made by Zing are assigned to that Zing instance running a Java application. Reservable memory is assigned to new Zing instances until the available Reservable memory is insufficient to start another Zing instance. Reservable memory comprises the bulk of the System Zing Memory. Reserved memory is the amount of memory initially allocated to a specific Zing instance when the instance starts. This is the memory the Zing instance uses as Java heap memory. The Reserved memory is reserved for each JVM instance. It guarantees space to store a minimum live set for each Zing instance plus the space to support the object creation required to support the work done in the application. The live set is the set of objects in the Java heap referenced by the Java application. The live set can also be described as the amount of memory remaining in the heap after a simultaneous new and old generation garbage collection. Multiple Zing instances can be started on a system, each being assigned its allocated amount of Reservable memory. When a Zing instance exits, its Reservable memory is released back to the system’s Reservable memory and is available for other Zing instances. The amount of memory allocated to a Zing instance when it starts is determined by the value of the –Xmx Java heap size command line option."
}, {
  "objectID" : "8004dc25-223e-444a-9a01-f8b04b65359b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Reservable and Reserved Memory",
  "section" : "Estimating the Number of Possible Concurrent Zing Instances",
  "url" : "https://docs.azul.com/prime/zst/reservable-and-reserved-memory",
  "link" : "https://docs.azul.com/prime/zst/reservable-and-reserved-memory#estimating-the-number-of-possible-concurrent-zing-instances",
  "content" : "Estimating the Number of Possible Concurrent Zing Instances When estimating the number of Zing instances running Java applications that can run concurrently on a system, determine the amount of System Zing Memory available, subtract the percentage of System Zing Memory allocated to Pause Prevention and Contingency memory, and then divide the remaining amount of System Zing Memory by the typical Java heap (-Xmx) memory that would be set for your Zing instances. For example: The configured System Zing Memory is 100 GB. The amount of memory allocated to Pause Prevention and Contingency memory is 10 GB. The remaining available System Zing Memory, the Reservable memory, is 90 GB. Total the -Xmx values you will use for each of the Java applications you want to run. Remember, in a Zing environment, the -Xmx value can be large because there is no concern for garbage collection pauses So, for this example, in a Zing environment where you want to maximize your Java application performance, set -Xmx to 20 GB for each Zing instance. This enables running 4 concurrent Zing instances (4 Zing instances x 20 GB in -Xmx = 80 GB consumed, with 10 GB left over from the 90 available). Note In addition to the number of concurrent Zing instances, account for the number of available cores. Do not expect multiple busy Zing instances to run well on a limited number of cores. Distribute Zing instances over the available host systems."
}, {
  "objectID" : "5b82201d-f0e4-4b8d-a686-c119df031f79",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Java Heap Memory",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/java-heap-memory",
  "link" : "https://docs.azul.com/prime/zst/java-heap-memory",
  "content" : "Java heap memory is the amount of memory dynamically allocated to an Azul Zing Builds of OpenJDK (Zing) instance running on the system. Objects in Java heap can be shared between threads. Its size is specified using the –Xmx command-line option. It is the amount of memory the Zing instance needs to run the Java application, not including Pause Prevention and Contingency memory. The -XX:JavaMemMax option allows you to set an upper bound on the amount of memory used for the Java heap. If this option is not set, the maximum is unlimited, though, in practice, it is limited by the size of the Contingency Memory. A larger Java heap Allows more objects to be created Takes longer to fill Allows the Zing instance to run longer between garbage collections (GC) Consumes less CPU for garbage collection A smaller Java heap Holds fewer objects Fills more quickly Garbage is collected more frequently May lead to out-of-memory errors Consumes more CPU for garbage collection over time"
}, {
  "objectID" : "dbfc2cf9-f36b-4a02-b39a-ff81e11fb2f3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Java Heap Memory",
  "section" : "Temporary Java Heap Memory",
  "url" : "https://docs.azul.com/prime/zst/java-heap-memory",
  "link" : "https://docs.azul.com/prime/zst/java-heap-memory#temporary-java-heap-memory",
  "content" : "Temporary Java Heap Memory When needed to support the Java application, Zing temporarily allocates memory from Contingency memory and/or Pause Prevention memory. See Contingency Memory and Pause Prevention Memory."
}, {
  "objectID" : "c62f1391-1fa4-4e38-8333-3d06a3b5c583",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Java Heap Memory",
  "section" : "Heap Memory in 32-Bit vs. 64-Bit Systems",
  "url" : "https://docs.azul.com/prime/zst/java-heap-memory",
  "link" : "https://docs.azul.com/prime/zst/java-heap-memory#heap-memory-in-32-bit-vs-64-bit-systems",
  "content" : "Heap Memory in 32-Bit vs. 64-Bit Systems Zing requires 64-bit systems. So, when determining the amount of Java heap memory to allocate, remember there is a difference in memory use in a 32-bit or 64-bit system. Java heap memory requirements for 64-bit systems are generally 1.5 times greater than 32-bit systems. Though primitives such as integers use 32-bit words on either a 32-bit or 64-bit system, Java object headers and pointers use 32-bits on a 32-bit system and 64-bits on a 64-bit system. The result is that proportionally more memory is used to accommodate the same number of objects on a 64-bit system. This applies to all Java environments, whether they are running JVMs from other vendors or a Zing instance. Additionally, the increased efficiency of the garbage collector on a 64-bit system, also requires additional space relative to a 32-bit system. So, when migrating a system from a 32-bit to 64-bit environment, the amount of memory has to be increased to achieve the same performance. An increase of 1.5 times can be used as a guideline, but should be evaluated versus your SLAs."
}, {
  "objectID" : "70eb1773-a17a-4980-a9fe-da0bf160de57",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "content" : "If you completed all the steps in Installing and Configuring Azul Zing System Tools, Zing Memory is configured with default settings. Default configuration sets aside 75% of the physical memory of your machine for use by Azul Zing Builds of OpenJDK (Zing) when you use the reserve-at-config policy and allows up to 90% physical memory use for Zing when you use the reserve-at-launch (elastic) policy. Zing uses Azul Zing System Tools (ZST) ZMM for managing memory for the three memory types that Zing uses: Reservable memory – Memory than can be reserved by a Zing instance for its Java Heap. Contingency memory – Temporary memory to use when Java Heap memory is low – a shared system-wide pool of memory that any Zing can use when the original value of –Xmxunderestimates the actual Java heap use. Pause Prevention memory – A pool of System Zing Memory used to provide memory to Zing when there is a sudden increase in allocation rates, The use of the additional memory ensures the application threads can continue to allocate objects while the Continuously Concurrent Compacting Collector (C4) completes its work to free no objects that are no longer reachable. The memory for these pools, collectively called System Zing Memory is configured when the ZST’s system-config-zing-memory tool is run. Memory can be reserved at configuration when the tool is run by using the reserve-at-config policy. Alternatively, just an upper limit can be set and no System Zing Memory reserved when the tool is run by using the reserve-at-launch policy. In this case, the allocation of System Zing Memory is postponed until the launch of a Zing process For both configuration policies, at the launch of Zing, Zing requests that memory be reserved for its exclusive use as the process’s Java Heap – Zing’s Reserved memory. The C4 collector manages Java objects in the Java Heap. When free memory in the Java Heap is low, Zing can use memory in the Contingency and Pause Prevention memory. When memory available for object allocation is first low, Zing uses Pause Prevention memory to prevent pauses that would normally occur when a thread tries to allocate an object but no memory is available. If Zing requires additional memory on an ongoing basis then memory from Contingency memory is used. This means that your Java application is no longer limited to the maximum heap size specified on the Java command line when you started your Java application."
}, {
  "objectID" : "8c514b7e-7f1e-4677-9cb0-a35d9231ba55",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "Using the System Method to Allocate Zing Memory",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration#using-the-system-method-to-allocate-zing-memory",
  "content" : "Using the System Method to Allocate Zing Memory To select the System method for allocating Zing Fund memory: From the system-config-zing-memory tool, specify System method, type: S  ** Enter (s)ystem or (j)ava heap size [default 's']: s The system responds.  [ Current task: Sizing Zing Memory / Choosing system sizing method ]\n\nDo you want to allocate a percentage of your total host system memory to Zing, or would you prefer to specify an exact amount?\n\n** Enter (p)ercentage or (e)xact [default 'p']: Select a memory allocation method: Percentage – allocate a percentage of the total host system memory. To use this method, continue to Use Percentage of System Memory for Zing Memory. Exact – allocate a specific amount of memory in MB. This is based on the sum of all of the Xmx values for all of the Zing instances that will be running concurrently. To use this method, continue to Use Exact Amount of System Memory for Zing Memory."
}, {
  "objectID" : "ba0e0b9d-2eee-405e-b2e0-48dae09f0bb3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "Use Percentage of System Memory for Zing Memory",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration#use-percentage-of-system-memory-for-zing-memory",
  "content" : "Use Percentage of System Memory for Zing Memory To specify the amount of memory to allocate as a percentage of the total host system memory. In the system-config-zing-memory tool, specify the allocation method, type P  ** Enter (p)ercentage or (e)xact [default 'p']: p The system responds with the next required configuration prompt. Specify the percentage value to use, type a numeric value that represents the percentage. The default is 75% of Host System memory.  ** Enter percentage of total memory to dedicate to Zing [default '75']: The system responds with the next configuration prompt. Continue to Specify Contingency Memory."
}, {
  "objectID" : "aa72cded-dd8e-4add-a9c7-1fea88557af7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "Use Exact Amount of System Memory for Zing Memory",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration#use-exact-amount-of-system-memory-for-zing-memory",
  "content" : "Use Exact Amount of System Memory for Zing Memory To specify allocation amount as an exact value: From the system-config-zing-memory tool, specify the exact method, type: e  ** Enter (p)ercentage or (e)xact [default 'p']: e The system responds.  [ Current task:  Sizing Zing Memory / Choosing specific size ]\n\nPlease specify the amount of memory for Zing to use. (Note:  your system has a total of 15g.)\n\nexamples:  16384m, 16g\n\n** Enter memory to dedicate to Zing: Specify the exact KB, MB, or GB value to allocate to Zing Memory. For example:  ** Enter memory to dedicate to Zing: 12g The system responds with the next configuration prompt. Continue to Specify Contingency Memory."
}, {
  "objectID" : "d1568ace-f1b7-4a52-9aad-d68a1a15d3e2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "Use Java Method to Allocate Zing Memory",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration#use-java-method-to-allocate-zing-memory",
  "content" : "Use Java Method to Allocate Zing Memory To select the Java method for allocating Zing Memory. From the system-config-zing-memory tool, specify the exact method, type: e  ** Enter (p)ercentage or (e)xact [default 'p']: e The system responds.  [[ Current task: Sizing Zing Memory / Deriving size from Xmx ]\n\nWhat is the sum of the Xmx values of all the Java processes you plan to run concurrently?\n\n** Enter sum of Xmx: Respond with a size that is the maximum value for the sum of the Xmx values for all of the Zing instances that will run concurrently. For example (k=kB, m=MB, g=GB):  ** Enter sum of Xmx: 2g The system responds with the next configuration prompt."
}, {
  "objectID" : "f5e4181c-55cb-4a7b-b3c5-c199b4c995b4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "Specify Memory Reservation Policy",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration#specify-memory-reservation-policy",
  "content" : "Specify Memory Reservation Policy In pre-5.21.x ZST versions, you You can specify the policy that you want to use for memory reservation, type c or l the system-config-zing-memory tool. See the following example:  [ Current task: Choose memory reservation policy ]\n\nYou can reserve all of the requested System Zing Memory now using the\n\nreserve-at-config policy or you can reserve the System Zing Memory for\n\neach Zing VM process at process launch using the reserve-at-launch policy.\n\nIf you choose reserve-at-launch then the amount of memory reserved in the\n\nprevious step will be the upper limit available for all Zing VM\\'s to use.\n\nWhich reservation policy do you want to use?\n\n** Enter reserve-at-(c)onfig or reserve-at-(l)aunch [default 'c']:"
}, {
  "objectID" : "c5120f44-af04-4fd3-ae1f-39deaea35564",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "Specify Contingency Memory",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration#specify-contingency-memory",
  "content" : "Specify Contingency Memory To specify the memory allocation for the Zing Contingency memory: From the system-config-zing-memory tool, type the desired percentage. For example: 75  [ Current task: Sizing Zing Memory / Sizing Contingency memory pool ]\n\nPart of Zing Memory is set aside in a common contingency memory pool for all Azul Java processes to share.  The contingency memory pool exists as an insurance policy to allow a JVM instance to temporarily avoid OOM behavior and grow beyond -Xmx.\n\nWhat percentage of Zing Memory would you like to dedicate to the contingency memory pool?\n\n** Enter percentage of Zing Memory to be used for contingency memory [default '5']:"
}, {
  "objectID" : "4336336f-4648-4b19-8244-391ab86b4f5a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "Verify that the Memory Reservation is What You Expected",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration#verify-that-the-memory-reservation-is-what-you-expected",
  "content" : "Verify that the Memory Reservation is What You Expected Verify that Zing Memory is restarted. View the output after the last step and locate the following lines. If you do not see them, see Starting or Stopping the Zing System Tools Services.  [ Current task:  Saving configuration and initializing Zing Memory module ]\n\nzing-memory: INFO: Restarting...\n\nzing-memory: INFO: Stopping...\n\nzing-memory: INFO: stop successful\n\nzing-memory: INFO: Starting...\n\nInfo: azulPmemPages: 54454.\n\nInfo: Zing Memory reserved using reserve-at-config policy.\n\nINFO: az_pmem_reserve_pages (num2mPages 54454) succeeded\n\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 114198315008) succeeded\n\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 5708447744) succeeded\n\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 5708447744) succeeded\n\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 102781419520) succeeded\n\nInfo: You can now run Java processes up to -Xmx98020m or -Xmx95g.\n\nInfo: Azul pmem initialized successfully.\n\nzing-memory: INFO: start successful\n\nzing-memory: INFO: restart successful"
}, {
  "objectID" : "e1b78413-6b87-46e5-a673-0651bc1f8eac",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "Memory Configuration with 5.21.0 ZST and Later Versions",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration#memory-configuration-with-5-21-0-zst-and-later-versions",
  "content" : "Memory Configuration with 5.21.0 ZST and Later Versions The system-config-zing-memory tool’s workflow is changed in the 5.21.0 ZST to support reserve-at-launch for all of the memory pools used by Zing, Reservable, Contingency, and Pause Prevention. The workflow starts with a question that asks whether you want to configure memory as reserve-at-config (immediately as the tool is running) or reserve-at-launch (when the Zing process starts). Here is an example of the workflow: The first section is a description of what the tool does – configure your use of System Zing Memory and create a file with that configuration as: /etc/zing/pmem.conf.0  Welcome to the Zing Memory configuration wizard by Azul Systems.\n\nThis wizard sets up the Zing Memory configuration file\n\n/etc/zing/pmem.conf.0\n\nand initializes System Zing Memory. Read the man pages for zing, zing-zst, and zing-pmem-conf for more information about this configuration file.\n\nUse of System Zing Memory by Java processes running on the Zing VM requires you to configure memory in advance. This is analogous to reservation of memory for Linux hugepages, although System Zing Memory pages are not interchangeable with hugepages.\n\nFor most environments running Java applications on the Zing VM, Azul recommends setting up your system with an overall upper limit of 90% Zing Memory when using reserve-at-launch and a maximum of 75% when using reserve-at-config. The second section starts the collection of the configuration information. The first step is determining which memory reservation policy you want to use, reserve-at-config or reserve-at-launch. There is no default value, you must select one or the other. Here is the explanation:  Current task: Memory reservation policy ]\n\nYou can reserve all of the requested System Zing Memory during this\n\nconfiguration using the reserve-at-config policy or you can delay\n\nreserving the System Zing Memory for each Zing VM process until process\n\nlaunch using the reserve-at-launch policy. If you choose reserve-at-launch\n\nthen the amount of memory reserved in a subsequent step will be the overall\n\nupper limit available for all Zing VMs to use. The reserve-at-config policy will reserve the amount of memory you specify. The reserve-at-launch policy will prompt you for the UpperLimit for the amount of memory for each memory pool, Reservable, Contingency and Pause Prevention. You will also be prompted for an OverallUpperLimit. The following table highlights the four major configuration types for 5.21.0 ZSTs and later versions: Configuration Policy Specify Percentage of System Memory Specify Specific Amount reserve-at-config Must select percentage Default reserve-at-launch Default Must select specific Reserve-at-config with percentage of host system memory:  Which reservation policy do you want to use?\n\n** Enter reserve-at-(c)onfig or reserve-at-(l)aunch: c\n\n** Enter (s)pecific amount or (p)ercentage of system memory [default 's']: p\n\n** Enter Reservable memory as percent of system memory [default '68']:\n\n** Enter amount of Contingency memory as % of system memory [default '4']:\n\n** Enter amount of Pause Prevention memory as % of system memory [default '4']: Reserve-at-config with specific amount of host system memory:  Which reservation policy do you want to use?\n\n** Enter reserve-at-(c)onfig or reserve-at-(l)aunch: c\n\n** Enter (s)pecific amount or (p)ercentage of system memory [default 's']:\n\n** Enter amount of Reservable memory [default '<calc 68%>']:\n\n** Enter amount of Contingency memory [default '<calc 4%>']:\n\n** Enter amount of Pause Prevention memory [default '<calc 4%>']: Reserve-at-launch percentage of host system memory:  Which reservation policy do you want to use?\n\n** Enter reserve-at-(c)onfig or reserve-at-(l)aunch: l\n\n** Enter (s)pecific amount or (p)ercentage of system memory [default 'p']:\n\n** Enter upper limit for Overall Zing Memory use as % of system memory [default '90']:\n\n** Enter upper limit for Reservable memory as % of system memory [default '85']:\n\n** Enter upper limit for Contingency memory as % of system memory [default '50']:\n\n** Enter upper limit for Pause Prevention memory as % of system memory [default '50']: Reserve-at-launch specific amount of host system memory:  Which reservation policy do you want to use?\n\n** Enter reserve-at-(c)onfig or reserve-at-(l)aunch: l\n\n** Enter (s)pecific amount or (p)ercentage of system memory [default 'p']: s\n\n** Enter upper limit for Overall Zing Memory use [default '<calc 90%>']:\n\n** Enter upper limit for Reservable memory [default '<calc 85%>']:\n\n** Enter upper limit for Contingency memory [default '<calc 50%>']:\n\n** Enter upper limit for Pause Prevention memory [default '<calc 50%>']: As with the pre-5.21.0 ZST system-config-zing-memory, the tool will output a description of the actions that it has taken on your behalf. Check the results to make certain that you have created the configuration you wanted."
}, {
  "objectID" : "f8392a65-0fb5-498c-be16-1c9e1a4866a4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Modifying Zing Memory Configuration",
  "section" : "Reservation Policies",
  "url" : "https://docs.azul.com/prime/zst/modifying-memory-configuration",
  "link" : "https://docs.azul.com/prime/zst/modifying-memory-configuration#reservation-policies",
  "content" : "Reservation Policies When you run system-config-zing-memory on systems where you can use the reserve-at-launch policy, you have the choice to reserve all of the requested System Zing Memory immediately or just set an upper limit on the amount of Total System Memory to use as System Zing Memory. The following table compares these two policies that you can use to configure the System Zing Memory. Reservation Policy Reserve System Zing Memory when system-config-zing-memory is run Easy to estimate free System Zing Memory available to Zing at Zing launch reserve-at-config Yes Yes reserve-at-launch No No When run on a system (or partition) configured by using the reserve-at-config policy, the amount of memory available can be easily estimated with the command zing-ps -s. When you run on a system (or partition) by using the reserve-at-launch policy, you must use both the zing-ps -s command and the information in /proc/meminfo to determine the amount of free Total System Memory available. Once calculated, use the output of zing-ps -s to determine the value for the upper limit configured for the maximum amount of Total System Memory available to use as System Zing Memory. The amount of Total System Memory in use will be influenced by the size of the page cache and the “Buffers:” and \"Cached:” values, visible in /proc/meminfo, as shown below: Buffers: 117772 kB Cached: 2442412 kB SwapCached: 0 kB Active: 749576 kB Inactive: 1830156 kB If free memory is not available to launch a Zing when using reserve-at-launch, you can reclaim some of the memory used by the page cache by running the following:  free Should print something similar to:  total used free shared buffers cached\n\nMem: 99056712 1556188 97500524 0 214464 341124\n\n-/+ buffers/cache: 1000600 98056112\n\nSwap: 4194296 0 4194296 Then run:  sync\n\n/bin/echo 3 > /proc/sys/vm/drop_caches Check free again to see whether you’ve reclaimed sufficient space."
}, {
  "objectID" : "ca39f4a8-50ee-4708-a4e1-d0426b741e94",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Reservable Memory",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/setting-reservable-memory",
  "link" : "https://docs.azul.com/prime/zst/setting-reservable-memory",
  "content" : "Before setting reservable memory familiarize yourself with the memory structures that are allocated by the Azul Zing Builds of OpenJDK (Zing) in the Heap. When you are configuring Azul Platform Prime to run your Zing instances, you can use the default options or modify memory allocation. The following is a list of considerations when you modify the memory allocation from default values. See Modifying Zing Memory Configuration for information on how to change the default memory configuration."
}, {
  "objectID" : "a0b9ad5a-ccb9-4e70-bcf0-87d70b8de508",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Reservable Memory",
  "section" : "Zing Allocation",
  "url" : "https://docs.azul.com/prime/zst/setting-reservable-memory",
  "link" : "https://docs.azul.com/prime/zst/setting-reservable-memory#zing-allocation",
  "content" : "Zing Allocation Apart from Reservable memory for the Zing instances, consider the memory required for Pause Prevention and Contingency memory. These typically constitute 10% of the total memory available for the Java heaps of Zing instances. These percentages can be modified. Refer to Modifying Zing Memory Configuration for information on how to configure and modify these percentages."
}, {
  "objectID" : "2be11691-1537-4c35-8540-e31768a25609",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Reservable Memory",
  "section" : "Configuring -Xmx<val>",
  "url" : "https://docs.azul.com/prime/zst/setting-reservable-memory",
  "link" : "https://docs.azul.com/prime/zst/setting-reservable-memory#configuring-xmxval",
  "content" : "Configuring -Xmx<val> As described in the previous section, Heap Memory in 32-Bit vs. 64-Bit Systems, running Java applications on 64-bit machines requires more Java heap. Concurrent garbage collectors need marginally larger heaps than stop-the-world garbage collectors because concurrent garbage collectors allow application threads to actively allocate objects while the garbage collector is reclaiming pages. In general, specifying a 50% higher value used with other garbage collectors is a good starting point, walking down from there to find the appropriate heap size for your application. Using Zing, you no longer need to worry about GC pauses that result from garbage collecting very large Java heaps. Zing supports Java heap sizes from 512 MB to 20 TB when used with ZST. When used without ZST, the supported heap size ranges from 512 MB to 2.5 TB."
}, {
  "objectID" : "c6a5277e-b46c-4450-950b-38b14e1a6d9e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Setting Reservable Memory",
  "section" : "Configuring -XX:JavaMemMax=<val>",
  "url" : "https://docs.azul.com/prime/zst/setting-reservable-memory",
  "link" : "https://docs.azul.com/prime/zst/setting-reservable-memory#configuring-xxjavamemmaxval",
  "content" : "Configuring -XX:JavaMemMax=<val> -XX:JavaMemMax controls the maximum amount of java heap memory that can be allocated to a process from Reservable, Contingency, and Pause Prevention memory pools. Use the` -XX:GPGCPausePreventionMemory=<val>` parameter, to limit allocation from Pause Prevention memory pool alone. If both GPGCPausePreventionMemory and JavaMemMax are specified on the command line, GPGCPausePreventionMemory controls allocation from Pause Prevention memory pool, and JavaMemMax controls allocations from Reservable and Contingency pools. Note When -XX:JavaMemMax=<val> is set to the same value as Xmx, then the Zing instance is not allowed to use any Contingency or Pause Prevention memory."
}, {
  "objectID" : "f65cced5-f419-4f7b-b88f-d50f986edb53",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Starting and Stopping Zing Memory",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/starting-and-stopping-zing-memory",
  "link" : "https://docs.azul.com/prime/zst/starting-and-stopping-zing-memory",
  "content" : "This page describes how to start and stop Zing Memory with Azul Zing Builds of OpenJDK (Zing)."
}, {
  "objectID" : "84c68130-348e-4aae-88cc-a58076719622",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Starting and Stopping Zing Memory",
  "section" : "Starting Zing Memory",
  "url" : "https://docs.azul.com/prime/zst/starting-and-stopping-zing-memory",
  "link" : "https://docs.azul.com/prime/zst/starting-and-stopping-zing-memory#starting-zing-memory",
  "content" : "Starting Zing Memory To start Zing Memory: Login to your system as root. Ensure there are no running processes using Zing Memory, type:  $ zing-ps On the Zing system, at the system prompt or through scripts, as root, execute the command: For RHEL, SLES, or Ubuntu:  # service zing-memory start If you receive an error indicating the service does not exist, run the following command. For RHEL, SLES:  # /etc/init.d/zing-memory start For Ubuntu:  # initctl start zing-memory"
}, {
  "objectID" : "238ee75d-61bf-4874-90e8-fe232224e6e0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Starting and Stopping Zing Memory",
  "section" : "Stopping Zing Memory",
  "url" : "https://docs.azul.com/prime/zst/starting-and-stopping-zing-memory",
  "link" : "https://docs.azul.com/prime/zst/starting-and-stopping-zing-memory#stopping-zing-memory",
  "content" : "Stopping Zing Memory To stop Zing Memory: Login to your system as root. Ensure there are no running processes using Zing Memory, type:  zing-ps On the Zing system, at the system prompt or through scripts, as root, execute the command: For RHEL, SLES, or Ubuntu:  # service zing-memory stop"
}, {
  "objectID" : "829b2234-2e09-42d4-9304-e9b697a421e3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "content" : "This document describes how to configure and use Azul Zing Builds of OpenJDK (Zing) memory partitions on a non-uniform memory access (NUMA) server. A Zing memory partition is constructed using system memory from a single node or set of nodes. A Zing memory partition provides a JVM instance with the memory used for the JVM’s Java heap. Zing Memory Partitions for the Java Heap Overview Azul Zing System Tools (ZST) implements a feature to support deployment of Java applications that require the performance and lower latency benefits provided by using a subset of the nodes (processor sockets and their associated memory) on a NUMA server. The Zing Memory Partitions feature enables the creation of a single Zing Memory Partition or multiple Zing Memory Partitions one of which supplies the system memory for a Zing instance’s Java heap. Together with the CPU and non-Java heap partitioning controlled by Linux command line arguments, you can now configure your entire Java process to use processing and memory resources local to a single processor socket or set of processor sockets. Zing memory partitions may span multiple nodes. A NUMA architecture server consists of two or more processor sockets where each processor socket is directly connected to its own physical memory. Each socket is interconnected with one or more sockets in a NUMA configuration and the server BIOS and Operating System (OS) are configured to support NUMA. NUMA Support must be enabled in the server BIOS and the Operating System (OS) for Zing Memory Partitions to work. In a multi-socket system, the memory connected directly to a processor socket is referred to as local node memory. From that same socket, memory connected to a different processor socket is referred to as remote node memory. There is higher memory-access latency and lower memory access speeds for a core accessing memory on a remote node compared to accessing memory on a local node."
}, {
  "objectID" : "e9bee968-4073-460c-8cb2-b4aa3e086cc6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Using ZST to Configure the System to use Zing Memory Partitions for the Java Heap",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#using-zst-to-configure-the-system-to-use-zing-memory-partitions-for-the-java-heap",
  "content" : "Using ZST to Configure the System to use Zing Memory Partitions for the Java Heap Zing Memory Partitions are configured with respect to your server’s nodes. You can select nodes for use by specific memory partitions by using nodemasks when you configure your Zing Memory Partition using ZST commands. You can also subdivide the memory in a single node so that the memory in that single node can be used by multiple Zing Memory Partitions. For examples, see pmem.conf.example."
}, {
  "objectID" : "98b3129d-d843-4c96-a230-8cd043747060",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Running Zing Using Zing Memory Partitions for the Java Heap",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#running-zing-using-zing-memory-partitions-for-the-java-heap",
  "content" : "Running Zing Using Zing Memory Partitions for the Java Heap Use the -XX:AzMemPartition=partition-number command-line argument to specify that Zing should use the memory from Memory Partition partition-number for the Java heap memory. The origin of the non-Java heap memory and CPUs to use will still need to be configured using the Linux command line options to complete the association of all the computational resources with a specific node or set of nodes."
}, {
  "objectID" : "8adba929-1fde-4c9d-89be-2ada42eb8404",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Zing Memory Partitions Default Command Configuration",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#zing-memory-partitions-default-command-configuration",
  "content" : "Zing Memory Partitions Default Command Configuration Zing memory partitions are configured with the command:  system-config-zing-memory Accepting the defaults for the command configures the system as follows: Creates a single Zing Memory Partition across all nodes. By default, this is Zing Memory Partition 0, as depicted as Zing Memory Partition 0 shown in the One Zing Memory Partition Configured on Two Nodes figure below. On start-up of Zing, without use of the -XX:AzMemPartition command line option, a Zing instance’s Java heap will use memory from Zing Memory Partition 0 which, with this configuration includes memory from all nodes. Because Zing’s Java Heap uses memory from all of the nodes, the overall memory access times and data throughput will be an average of the access times and data throughput you would obtain if accessing local or remote node memory exclusively. Default settings for the ZST Zing Memory configuration command allocate a default Zing Memory Partition with 75% of the available system memory (where the system memory is all of RAM on the machine). Example: A single Zing Memory Partition allocated across two nodes. 64 GB system memory with two 32 GB nodes, node 0 with 32 GB of memory connected to socket 0 and node 1 with 32 GB memory connected to socket 1 Command: Run the system-config-zing-memory command and accept all defaults. Result: Zing Memory Partition 0 is allocated across Node 0 and Node 1 as illustrated below. The GC log files present metrics in the text format. See the following examples:"
}, {
  "objectID" : "dff91888-c251-45cb-bcdc-0371bbcd4bde",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Actively Configuring Zing Memory Partitions",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#actively-configuring-zing-memory-partitions",
  "content" : "Actively Configuring Zing Memory Partitions Configuring Two Zing Memory Partitions When configuring partitions, you are required to have a Zing Memory Partition named Zing Memory Partition 0. In some cases, you may want to consider creating Zing Memory Partition 0 as a small partition to run Java commands. Allocating 2 GB allows Java tools like jstat and jmap to run with Zing’s default Java Heap size of 1 GB. Example: Two Zing Memory Partitions, one on a single node and one across two nodes. 64 GB system memory with two 32 GB nodes, node 0 with 32 GB of memory connected to socket 0 and node 1 with 32 GB memory connected to socket 1 Zing Memory Partitions: two Zing Memory Partitions each with 16 GB total. One Zing Memory Partition uses memory from each of the two nodes One Zing Memory Partition uses memory from only one node This corresponds to the following two partitions and is depicted in the figure below: Zing Memory Partition 0 8 GB from Node 0 and 8 GB from Node 1 Zing Memory Partition 1 16 GB from Node 1 (the local node for the cores in socket 1) The number used for the name of the node and the number used for the Zing Memory Partition are independently specified. The node numbering is defined in the Linux OS. The Zing Memory Partition numbers are assigned by you when you run the system-config-zing-memory command. Therefore, in the above example, it is possible that Zing Memory Partition 1 could be defined to use memory exclusively from node 0. Or in a four-socket server, Zing Memory Partition 2 could be set up to use memory exclusively from node 3, if that showed the best performance when the application was benchmarked. Setting up Zing Memory Partition 0 To reconfigure a system that has already been configured using the default configuration, first reconfigure Zing Memory Partition 0. Run the system-config-zing-memory command and make the following choices.  # system-config-zing-memory --add-partition 0\n\nWelcome to the Zing memory configuration wizard by Azul Systems.\n\nThis wizard sets up the Zing memory configuration file\n\n/etc/zing/pmem.conf.0\n\nand initializes System Zing memory. Read the man pages for zing, zing-zst,\n\nand zing-pmem-conf for more information about this configuration file.)\n\nUse of System Zing Memory by Java processes running on the Zing requires\n\nyou to configure memory in advance. This is analogous to reservation of memory\n\nfor Linux hugepages, although System Zing Memory pages are not interchangeable\n\nwith hugepages.\n\nFor most environments running Java applications on the Zing, Azul recommends\n\nconfiguring your system with 25% System Linux Memory and 75% System Zing Memory.\n\nChoose yes to accept this default, or no to enter the wizard expert flow.\n\n** accept default configuration\n\n** (y)es or (n)o [default 'y']: n\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Choosing sizing method ]\n\nZing requires you to partition memory up front for exclusive use by\n\nJava. (This is analogous to Linux hugepages, although Zing pages\n\nare not interchangeable with hugepages.)\n\nWould you like to decide how much memory to allocate to Zing based\n\non the total size of your system, or based on the total size of the\n\nJava instances you expect to run?\n\n** Enter (s)ystem or (j)ava heap size [default 's']: s\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Choosing system sizing method ]\n\nDo you want to allocate a percentage of your total system memory to\n\nZing, or would you prefer to specify an exact amount?\n\n** Enter (p)ercentage or (e)xact [default 'p']: p\n\n** Enter percentage of total memory to dedicate to Zing [default '75']: 30\n\n---------------------------------------------------------------------------\n\n[ Current task: Choose memory reservation policy ]\n\nYou can reserve all of the requested System Zing Memory now using the\n\nreserve-at-config policy or you can reserve the System Zing Memory for\n\neach Zing process at process launch using the reserve-at-launch policy.\n\nIf you choose reserve-at-launch then the amount of memory reserved in the\n\nprevious step will be the upper limit available for all Zing\\'s to use.\n\nWhich reservation policy do you want to use?\n\n** Enter reserve-at-(c)onfig or reserve-at-(l)aunch [default 'c']: c\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Sizing Contingency memory ]\n\nPart of Zing memory is set aside in a common contingency memory pool for all Azul\n\nJava processes to share. The contingency memory pool exists as an insurance\n\npolicy to allow a JVM instance to temporarily avoid OOM behavior and\n\ngrow beyond -Xmx.\n\nWhat percentage of Zing memory would you like to dedicate to the\n\ncontingency memory pool?\n\n** Enter percentage of Zing memory to be used for contingency memory [default '5']:\n\n---------------------------------------------------------------------------\n\n[ Current task: Saving configuration and initializing Zing memory ]\n\nInfo: Zing Memory reserved using reserve-at-config policy.\n\nInfo: azulPmemPages: 21802.\n\nINFO: az_pmem_reserve_pages (num2mPages 21802) succeeded\n\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 45722107904) succeeded\n\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 2285895680) succeeded\n\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 2285895680) succeeded\n\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 41150316544) succeeded\n\nInfo: You can now run Java processes up to -Xmx39244m or -Xmx38g.\n\nInfo: Azul pmem initialized successfully. The default Nodemask ‘ALL’ in the example above causes the ZST to create Zing Memory Partition 0 using memory from both node 0 and node 1. Specifying 0x1 as the Nodemask would cause the ZST to create Zing Memory Partition 0 using system memory from only node 0. Setting up Zing Memory Partition 1 To continue the example, configure the second Zing Memory Partition, Zing Memory Partition 1, by running the system-config-zing-memory command again and make the following choices.  # system-config-zing-memory --add-partition 1\n\nWelcome to the Zing memory configuration wizard by Azul Systems.\n\nThis wizard sets up the Zing memory configuration file\n\n/etc/zing/pmem.conf.1\n\nand initializes System Zing memory. Read the man pages for zing, zing-zst,\n\nand zing-pmem-conf for more information about this configuration file.)\n\nUse of System Zing Memory by Java processes running on the Zing requires\n\nyou to configure memory in advance. This is analogous to reservation of memory\n\nfor Linux hugepages, although System Zing Memory pages are not interchangeable\n\nwith hugepages.\n\nFor most environments running Java applications on the Zing, Azul recommends\n\nconfiguring your system with 25% System Linux Memory and 75% System Zing Memory.\n\nChoose yes to accept this default, or no to enter the wizard expert flow.\n\n** accept default configuration\n\n** (y)es or (n)o [default 'y']: n\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Choosing sizing method ]\n\nZing requires you to partition memory up front for exclusive use by\n\nJava. (This is analogous to Linux hugepages, although Zing pages\n\nare not interchangeable with hugepages.)\n\nWould you like to decide how much memory to allocate to Zing based\n\non the total size of your system, or based on the total size of the\n\nJava instances you expect to run?\n\n** Enter (s)ystem or (j)ava heap size [default 's']: s\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Choosing system sizing method ]\n\nDo you want to allocate a percentage of your total system memory to\n\nZing, or would you prefer to specify an exact amount?\n\n** Enter (p)ercentage or (e)xact [default 'p']: p\n\n** Enter percentage of total memory to dedicate to Zing [default '75']: 30\n\n---------------------------------------------------------------------------\n\n[ Current task: Choose memory reservation policy ]\n\nYou can reserve all of the requested System Zing Memory now using the\n\nreserve-at-config policy or you can reserve the System Zing Memory for\n\neach Zing process at process launch using the reserve-at-launch policy.\n\nIf you choose reserve-at-launch then the amount of memory reserved in the\n\nprevious step will be the upper limit available for all Zing\\'s to use.\n\nWhich reservation policy do you want to use?\n\n** Enter reserve-at-(c)onfig or reserve-at-(l)aunch [default 'c']: c\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Sizing Contingency memory ]\n\nPart of Zing memory is set aside in a common contingency memory pool for all Azul\n\nJava processes to share. The contingency memory pool exists as an insurance\n\npolicy to allow a JVM instance to temporarily avoid OOM behavior and\n\ngrow beyond -Xmx.\n\nWhat percentage of Zing memory would you like to dedicate to the\n\ncontingency memory pool?\n\n** Enter percentage of Zing memory to be used for contingency memory [default '5']:\n\n---------------------------------------------------------------------------\n\n[ Current task: Configuring Zing memory / Configuring MemoryUseNodemask ]\n\nYou can configure Zing to use memory from a specific node (socket) or set of\n\nnodes (sockets) on the system.\n\nEnter the number in hexadecimal format.\n\nFor Example, 0x1 == node 0, 0x2 == node 1, 0x3 == node 0 and 1.\n\nOn which nodes do you want to reserve Zing memory ?\n\n** Enter MemoryUseNodemask [default 'ALL']:\n\n---------------------------------------------------------------------------\n\n[ Current task: Saving configuration and initializing Zing memory ]\n\nInfo: Zing Memory reserved using reserve-at-config policy.\n\nInfo: azulPmemPages: 21802.\n\nINFO: az_pmem_reserve_pages (num2mPages 21802) succeeded\n\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 45722107904) succeeded\n\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 2285895680) succeeded\n\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 2285895680) succeeded\n\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 41150316544) succeeded\n\nInfo: You can now run Java processes up to -Xmx39244m or -Xmx38g on partition 1.\n\nInfo: Azul pmem initialized successfully. Also, unless you specify a Nodemask to select the nodes that you want to use, then, the Zing Memory Partition will use the default value 'ALL' and use memory from all of the nodes. Setting Nodemask for a Zing Memory Partition The Nodemask is a hexadecimal value that corresponds to a binary value used as a bit mask to select a corresponding node or set of nodes to use as the source of the memory for the Zing Memory Partition. The default Nodemask is ALL. The default directs the ZST to create the Zing Memory Partition to use memory from all nodes. For example, for a four-socket server, using the default Nodemask, ALL will be interpreted by system-config-zing-memory as the hexadecimal value 0xF, binary value 1111, and will create the Zing Memory Partition with one quarter of the total memory request for the Zing Memory Partition coming from each node across all four nodes, 0-3. For an eight-core server, a Nodemask of ALL is interpreted as hexadecimal 0xFF, binary value 11111111. The following table provides examples of the mapping of hexadecimal to binary values; and binary values to the corresponding set of nodes. Hexadecimal Binary Nodes specified by Nodemask nodemask 0x1 1 Node 0 only nodemask 0x2 10 Node 1 only nodemask 0x3 11 Nodes 0 and node 1 nodemask 0x9 1001 Nodes 0 and 3 nodemask 0xC 1100 Nodes 2 and 3 nodemask 0xE 1110 Nodes 1, 2 and 3 nodemask 0xF 1111 Nodes 0, 1, 2 and 3 nodemask 0xFF 11111111 Nodes 0 thru node 7 Viewing stdout After Configuring and Restarting the Zing Memory Service When you complete configuring Zing Memory Partitions, restart the Zing memory service. The following is the report after configuring Zing Memory Partitions 0 and 1.  Zing Memory Partition 0 has 2GB and Zing Memory Partition 1 has 100GB\n\n# service zing-memory restart\n\nzing-memory: INFO: Restarting...\n\nzing-memory: INFO: Stopping...\n\nzing-memory: INFO: stop successful zing-memory: INFO: Starting...\n\nInfo: azulPmemPages: 1136.\n\nINFO: az_pmem_reserve_pages (num2mPages 1136) succeeded\n\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 2382364672) succeeded\n\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 117440512) succeeded\n\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 117440512) succeeded\n\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 2147483648) succeeded\n\nInfo: You can now run Java processes up to -Xmx2048m or -Xmx2g on partition 0.\n\nInfo: azulPmemPages: 56888. INFO: az_pmem_reserve_pages (num2mPages 56888) succeeded\n\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 119302782976) succeeded\n\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 5964300288) succeeded\n\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 5964300288) succeeded\n\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 107374182400) succeeded\n\nInfo: You can now run Java processes up to -Xmx102400m or -Xmx100g on partition 1.\n\nInfo: Azul pmem initialized successfully.\n\nzing-memory: INFO: start successful\n\nzing-memory: INFO: restart successful Running Zing JVMs using Zing Memory Partitions Zing does not support the -XX:+UseNUMA option yet. Adding this option can even reduce performance, see Zing Virtual Machine Release Notes for details. -XX:AzMemPartition Specifies Which Zing Memory Partition to Use for the Java Heap Use the Zing Java command line option, -XX:AzMemPartition, to specify Zing JVM which Zing Memory Partition should be used as the source of memory for the Java Heap. -XXAzMemPartition=<num> - Where <num> is the number of a Zing Memory Partition that was configured using the ZST memory configuration commands. Memory Partition 0, which, when using the default configuration, uses memory from all nodes. A Zing Memory Partition uses memory from specific nodes. To make this memory be local node memory, you will need to start Zing such that it uses the cores on that node. One way to do this is to use the Linux numactl command. If your Zing Memory Partition spans more than one node, then Zing can be started to use the cores on all of the nodes that will be used for the Zing Partition Memory. numactl Specifies Processor Socket and Node for the Zing Process If you specify that a process should use Zing Memory from a specific node or set of nodes then it makes sense to use the cores on those same nodes so that the memory will be the memory from local nodes. Using memory from local nodes for Zing’s and Linux’s Memory will lower memory access overhead and improve application performance. One way to do this is to use the numactl command with the --cpunodebind and` --membind` command line arguments. Zing runs on Linux as a process. To run Zing as a process on the cores on processor socket 1 (node 1 in the numactl nomenclature) and to use the Linux memory only from node 1:  $ numactl --cpunodebind=1 --membind=1 java -XX:AzMemPartition=1 {javacommand-line-options} This numactl command uses: --cpunodebind=1 - To use only the cores in node 1. --membind=1 - To use Zing memory from Zing Memory Partition 1 where we have previously configured Zing Memory Partition 1 to use memory from node 1. The numactl command runs java with this Zing command line option: -XX:AzMemPartition=1 - To use only the cores in node 1. Assuming that the machine is configured as in Configuring Two Zing Memory Partitions, if the -XX:AzMemPartition Java command line option is not specified then Zing’s Java Heap memory will come from both node 0 and node 1 because Zing hasn’t been instructed to create the Java Heap using memory only from node 1. Example: Run on Zing Memory Partition 0 (Default Configuration) Zing Memory Partition 0, when using the default configuration, uses memory from all of the nodes, so we do not need to use the operating system numactl command or the -XX:AzMemPartition command line option to specify that the JVM should use memory from Zing Memory Partition 0:  java {java-command-line-options} Note that this is equivalent to:  numactl --cpunodebind=0,1 --membind=0,1 java -XX:AzMemPartition=0 {javacommand-line-options} Example: Run on Zing Memory Partition 1 using numactl Assume that you have created a Zing Memory Partition named 1 that has been configured to only use memory from node 1. In this case, Zing Memory Partition 1 needs to be specified by using the -XX:AzMemPartition=1 command line option; and because Zing Memory Partition 1 uses the memory in node 1 then we need to use the numactl Linux command in order for Zing’s process to run on cores in node 1 so that the Java Heap memory will be local memory. Likewise, we also want to use the numactl Linux command to use local memory in node 1 for Zing’s Linux memory. To do both of these, we specify that we should use the cores in node 1 with the option --cpunodebind=1 and specify that the memory in node 1 should be used for Linux memory with the option --membind=1:  numactl --cpunodebind=1 --membind=1 java -XX:AzMemPartition=1 {java-commandline-options} Checking the Java Application After Startup Always check your Zing application after startup to ensure that it is behaving as you expected: Use top to be certain that it is running on the cores that you think it should be using. To view the individual cores in use and the threads executing, type in these options in the window running top: z 1 H Use zing-ps –s to be certain that it is running using the Zing Partition Memory that you think it should be using. Run numactl --hardware to view the “free” memory for the node that the Zing Memory Partition is using; the free memory for that node should have been reduced by the same amount as the memory used on that node by the Zing Memory Partitions."
}, {
  "objectID" : "91ccc82f-91dd-439b-b211-9a21fde4fa35",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Configuring Two Zing Memory Partitions",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#configuring-two-zing-memory-partitions",
  "content" : "Configuring Two Zing Memory Partitions When configuring partitions, you are required to have a Zing Memory Partition named Zing Memory Partition 0. In some cases, you may want to consider creating Zing Memory Partition 0 as a small partition to run Java commands. Allocating 2 GB allows Java tools like jstat and jmap to run with Zing’s default Java Heap size of 1 GB. Example: Two Zing Memory Partitions, one on a single node and one across two nodes. 64 GB system memory with two 32 GB nodes, node 0 with 32 GB of memory connected to socket 0 and node 1 with 32 GB memory connected to socket 1 Zing Memory Partitions: two Zing Memory Partitions each with 16 GB total. One Zing Memory Partition uses memory from each of the two nodes One Zing Memory Partition uses memory from only one node This corresponds to the following two partitions and is depicted in the figure below: Zing Memory Partition 0 8 GB from Node 0 and 8 GB from Node 1 Zing Memory Partition 1 16 GB from Node 1 (the local node for the cores in socket 1) The number used for the name of the node and the number used for the Zing Memory Partition are independently specified. The node numbering is defined in the Linux OS. The Zing Memory Partition numbers are assigned by you when you run the system-config-zing-memory command. Therefore, in the above example, it is possible that Zing Memory Partition 1 could be defined to use memory exclusively from node 0. Or in a four-socket server, Zing Memory Partition 2 could be set up to use memory exclusively from node 3, if that showed the best performance when the application was benchmarked. Setting up Zing Memory Partition 0 To reconfigure a system that has already been configured using the default configuration, first reconfigure Zing Memory Partition 0. Run the system-config-zing-memory command and make the following choices.  # system-config-zing-memory --add-partition 0\n\nWelcome to the Zing memory configuration wizard by Azul Systems.\n\nThis wizard sets up the Zing memory configuration file\n\n/etc/zing/pmem.conf.0\n\nand initializes System Zing memory. Read the man pages for zing, zing-zst,\n\nand zing-pmem-conf for more information about this configuration file.)\n\nUse of System Zing Memory by Java processes running on the Zing requires\n\nyou to configure memory in advance. This is analogous to reservation of memory\n\nfor Linux hugepages, although System Zing Memory pages are not interchangeable\n\nwith hugepages.\n\nFor most environments running Java applications on the Zing, Azul recommends\n\nconfiguring your system with 25% System Linux Memory and 75% System Zing Memory.\n\nChoose yes to accept this default, or no to enter the wizard expert flow.\n\n** accept default configuration\n\n** (y)es or (n)o [default 'y']: n\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Choosing sizing method ]\n\nZing requires you to partition memory up front for exclusive use by\n\nJava. (This is analogous to Linux hugepages, although Zing pages\n\nare not interchangeable with hugepages.)\n\nWould you like to decide how much memory to allocate to Zing based\n\non the total size of your system, or based on the total size of the\n\nJava instances you expect to run?\n\n** Enter (s)ystem or (j)ava heap size [default 's']: s\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Choosing system sizing method ]\n\nDo you want to allocate a percentage of your total system memory to\n\nZing, or would you prefer to specify an exact amount?\n\n** Enter (p)ercentage or (e)xact [default 'p']: p\n\n** Enter percentage of total memory to dedicate to Zing [default '75']: 30\n\n---------------------------------------------------------------------------\n\n[ Current task: Choose memory reservation policy ]\n\nYou can reserve all of the requested System Zing Memory now using the\n\nreserve-at-config policy or you can reserve the System Zing Memory for\n\neach Zing process at process launch using the reserve-at-launch policy.\n\nIf you choose reserve-at-launch then the amount of memory reserved in the\n\nprevious step will be the upper limit available for all Zing\\'s to use.\n\nWhich reservation policy do you want to use?\n\n** Enter reserve-at-(c)onfig or reserve-at-(l)aunch [default 'c']: c\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Sizing Contingency memory ]\n\nPart of Zing memory is set aside in a common contingency memory pool for all Azul\n\nJava processes to share. The contingency memory pool exists as an insurance\n\npolicy to allow a JVM instance to temporarily avoid OOM behavior and\n\ngrow beyond -Xmx.\n\nWhat percentage of Zing memory would you like to dedicate to the\n\ncontingency memory pool?\n\n** Enter percentage of Zing memory to be used for contingency memory [default '5']:\n\n---------------------------------------------------------------------------\n\n[ Current task: Saving configuration and initializing Zing memory ]\n\nInfo: Zing Memory reserved using reserve-at-config policy.\n\nInfo: azulPmemPages: 21802.\n\nINFO: az_pmem_reserve_pages (num2mPages 21802) succeeded\n\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 45722107904) succeeded\n\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 2285895680) succeeded\n\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 2285895680) succeeded\n\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 41150316544) succeeded\n\nInfo: You can now run Java processes up to -Xmx39244m or -Xmx38g.\n\nInfo: Azul pmem initialized successfully. The default Nodemask ‘ALL’ in the example above causes the ZST to create Zing Memory Partition 0 using memory from both node 0 and node 1. Specifying 0x1 as the Nodemask would cause the ZST to create Zing Memory Partition 0 using system memory from only node 0. Setting up Zing Memory Partition 1 To continue the example, configure the second Zing Memory Partition, Zing Memory Partition 1, by running the system-config-zing-memory command again and make the following choices.  # system-config-zing-memory --add-partition 1\n\nWelcome to the Zing memory configuration wizard by Azul Systems.\n\nThis wizard sets up the Zing memory configuration file\n\n/etc/zing/pmem.conf.1\n\nand initializes System Zing memory. Read the man pages for zing, zing-zst,\n\nand zing-pmem-conf for more information about this configuration file.)\n\nUse of System Zing Memory by Java processes running on the Zing requires\n\nyou to configure memory in advance. This is analogous to reservation of memory\n\nfor Linux hugepages, although System Zing Memory pages are not interchangeable\n\nwith hugepages.\n\nFor most environments running Java applications on the Zing, Azul recommends\n\nconfiguring your system with 25% System Linux Memory and 75% System Zing Memory.\n\nChoose yes to accept this default, or no to enter the wizard expert flow.\n\n** accept default configuration\n\n** (y)es or (n)o [default 'y']: n\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Choosing sizing method ]\n\nZing requires you to partition memory up front for exclusive use by\n\nJava. (This is analogous to Linux hugepages, although Zing pages\n\nare not interchangeable with hugepages.)\n\nWould you like to decide how much memory to allocate to Zing based\n\non the total size of your system, or based on the total size of the\n\nJava instances you expect to run?\n\n** Enter (s)ystem or (j)ava heap size [default 's']: s\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Choosing system sizing method ]\n\nDo you want to allocate a percentage of your total system memory to\n\nZing, or would you prefer to specify an exact amount?\n\n** Enter (p)ercentage or (e)xact [default 'p']: p\n\n** Enter percentage of total memory to dedicate to Zing [default '75']: 30\n\n---------------------------------------------------------------------------\n\n[ Current task: Choose memory reservation policy ]\n\nYou can reserve all of the requested System Zing Memory now using the\n\nreserve-at-config policy or you can reserve the System Zing Memory for\n\neach Zing process at process launch using the reserve-at-launch policy.\n\nIf you choose reserve-at-launch then the amount of memory reserved in the\n\nprevious step will be the upper limit available for all Zing\\'s to use.\n\nWhich reservation policy do you want to use?\n\n** Enter reserve-at-(c)onfig or reserve-at-(l)aunch [default 'c']: c\n\n---------------------------------------------------------------------------\n\n[ Current task: Sizing Zing memory / Sizing Contingency memory ]\n\nPart of Zing memory is set aside in a common contingency memory pool for all Azul\n\nJava processes to share. The contingency memory pool exists as an insurance\n\npolicy to allow a JVM instance to temporarily avoid OOM behavior and\n\ngrow beyond -Xmx.\n\nWhat percentage of Zing memory would you like to dedicate to the\n\ncontingency memory pool?\n\n** Enter percentage of Zing memory to be used for contingency memory [default '5']:\n\n---------------------------------------------------------------------------\n\n[ Current task: Configuring Zing memory / Configuring MemoryUseNodemask ]\n\nYou can configure Zing to use memory from a specific node (socket) or set of\n\nnodes (sockets) on the system.\n\nEnter the number in hexadecimal format.\n\nFor Example, 0x1 == node 0, 0x2 == node 1, 0x3 == node 0 and 1.\n\nOn which nodes do you want to reserve Zing memory ?\n\n** Enter MemoryUseNodemask [default 'ALL']:\n\n---------------------------------------------------------------------------\n\n[ Current task: Saving configuration and initializing Zing memory ]\n\nInfo: Zing Memory reserved using reserve-at-config policy.\n\nInfo: azulPmemPages: 21802.\n\nINFO: az_pmem_reserve_pages (num2mPages 21802) succeeded\n\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 45722107904) succeeded\n\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 2285895680) succeeded\n\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 2285895680) succeeded\n\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 41150316544) succeeded\n\nInfo: You can now run Java processes up to -Xmx39244m or -Xmx38g on partition 1.\n\nInfo: Azul pmem initialized successfully. Also, unless you specify a Nodemask to select the nodes that you want to use, then, the Zing Memory Partition will use the default value 'ALL' and use memory from all of the nodes."
}, {
  "objectID" : "7ef93f0a-a487-4256-a46e-975cf57af138",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Setting Nodemask for a Zing Memory Partition",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#setting-nodemask-for-a-zing-memory-partition",
  "content" : "Setting Nodemask for a Zing Memory Partition The Nodemask is a hexadecimal value that corresponds to a binary value used as a bit mask to select a corresponding node or set of nodes to use as the source of the memory for the Zing Memory Partition. The default Nodemask is ALL. The default directs the ZST to create the Zing Memory Partition to use memory from all nodes. For example, for a four-socket server, using the default Nodemask, ALL will be interpreted by system-config-zing-memory as the hexadecimal value 0xF, binary value 1111, and will create the Zing Memory Partition with one quarter of the total memory request for the Zing Memory Partition coming from each node across all four nodes, 0-3. For an eight-core server, a Nodemask of ALL is interpreted as hexadecimal 0xFF, binary value 11111111. The following table provides examples of the mapping of hexadecimal to binary values; and binary values to the corresponding set of nodes. Hexadecimal Binary Nodes specified by Nodemask nodemask 0x1 1 Node 0 only nodemask 0x2 10 Node 1 only nodemask 0x3 11 Nodes 0 and node 1 nodemask 0x9 1001 Nodes 0 and 3 nodemask 0xC 1100 Nodes 2 and 3 nodemask 0xE 1110 Nodes 1, 2 and 3 nodemask 0xF 1111 Nodes 0, 1, 2 and 3 nodemask 0xFF 11111111 Nodes 0 thru node 7"
}, {
  "objectID" : "ffd74b0b-407e-4453-ad71-238376b40970",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Viewing stdout After Configuring and Restarting the Zing Memory Service",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#viewing-stdout-after-configuring-and-restarting-the-zing-memory-service",
  "content" : "Viewing stdout After Configuring and Restarting the Zing Memory Service When you complete configuring Zing Memory Partitions, restart the Zing memory service. The following is the report after configuring Zing Memory Partitions 0 and 1.  Zing Memory Partition 0 has 2GB and Zing Memory Partition 1 has 100GB\n\n# service zing-memory restart\n\nzing-memory: INFO: Restarting...\n\nzing-memory: INFO: Stopping...\n\nzing-memory: INFO: stop successful zing-memory: INFO: Starting...\n\nInfo: azulPmemPages: 1136.\n\nINFO: az_pmem_reserve_pages (num2mPages 1136) succeeded\n\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 2382364672) succeeded\n\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 117440512) succeeded\n\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 117440512) succeeded\n\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 2147483648) succeeded\n\nInfo: You can now run Java processes up to -Xmx2048m or -Xmx2g on partition 0.\n\nInfo: azulPmemPages: 56888. INFO: az_pmem_reserve_pages (num2mPages 56888) succeeded\n\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 119302782976) succeeded\n\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 5964300288) succeeded\n\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 5964300288) succeeded\n\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 107374182400) succeeded\n\nInfo: You can now run Java processes up to -Xmx102400m or -Xmx100g on partition 1.\n\nInfo: Azul pmem initialized successfully.\n\nzing-memory: INFO: start successful\n\nzing-memory: INFO: restart successful"
}, {
  "objectID" : "5954dca9-45c7-4fa3-8411-60a3077cf14d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Running Zing JVMs using Zing Memory Partitions",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#running-zing-jvms-using-zing-memory-partitions",
  "content" : "Running Zing JVMs using Zing Memory Partitions Zing does not support the -XX:+UseNUMA option yet. Adding this option can even reduce performance, see Zing Virtual Machine Release Notes for details. -XX:AzMemPartition Specifies Which Zing Memory Partition to Use for the Java Heap Use the Zing Java command line option, -XX:AzMemPartition, to specify Zing JVM which Zing Memory Partition should be used as the source of memory for the Java Heap. -XXAzMemPartition=<num> - Where <num> is the number of a Zing Memory Partition that was configured using the ZST memory configuration commands. Memory Partition 0, which, when using the default configuration, uses memory from all nodes. A Zing Memory Partition uses memory from specific nodes. To make this memory be local node memory, you will need to start Zing such that it uses the cores on that node. One way to do this is to use the Linux numactl command. If your Zing Memory Partition spans more than one node, then Zing can be started to use the cores on all of the nodes that will be used for the Zing Partition Memory. numactl Specifies Processor Socket and Node for the Zing Process If you specify that a process should use Zing Memory from a specific node or set of nodes then it makes sense to use the cores on those same nodes so that the memory will be the memory from local nodes. Using memory from local nodes for Zing’s and Linux’s Memory will lower memory access overhead and improve application performance. One way to do this is to use the numactl command with the --cpunodebind and` --membind` command line arguments. Zing runs on Linux as a process. To run Zing as a process on the cores on processor socket 1 (node 1 in the numactl nomenclature) and to use the Linux memory only from node 1:  $ numactl --cpunodebind=1 --membind=1 java -XX:AzMemPartition=1 {javacommand-line-options} This numactl command uses: --cpunodebind=1 - To use only the cores in node 1. --membind=1 - To use Zing memory from Zing Memory Partition 1 where we have previously configured Zing Memory Partition 1 to use memory from node 1. The numactl command runs java with this Zing command line option: -XX:AzMemPartition=1 - To use only the cores in node 1. Assuming that the machine is configured as in Configuring Two Zing Memory Partitions, if the -XX:AzMemPartition Java command line option is not specified then Zing’s Java Heap memory will come from both node 0 and node 1 because Zing hasn’t been instructed to create the Java Heap using memory only from node 1. Example: Run on Zing Memory Partition 0 (Default Configuration) Zing Memory Partition 0, when using the default configuration, uses memory from all of the nodes, so we do not need to use the operating system numactl command or the -XX:AzMemPartition command line option to specify that the JVM should use memory from Zing Memory Partition 0:  java {java-command-line-options} Note that this is equivalent to:  numactl --cpunodebind=0,1 --membind=0,1 java -XX:AzMemPartition=0 {javacommand-line-options} Example: Run on Zing Memory Partition 1 using numactl Assume that you have created a Zing Memory Partition named 1 that has been configured to only use memory from node 1. In this case, Zing Memory Partition 1 needs to be specified by using the -XX:AzMemPartition=1 command line option; and because Zing Memory Partition 1 uses the memory in node 1 then we need to use the numactl Linux command in order for Zing’s process to run on cores in node 1 so that the Java Heap memory will be local memory. Likewise, we also want to use the numactl Linux command to use local memory in node 1 for Zing’s Linux memory. To do both of these, we specify that we should use the cores in node 1 with the option --cpunodebind=1 and specify that the memory in node 1 should be used for Linux memory with the option --membind=1:  numactl --cpunodebind=1 --membind=1 java -XX:AzMemPartition=1 {java-commandline-options}"
}, {
  "objectID" : "d095ed5c-bf42-4b75-92e2-457eea661402",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Checking the Java Application After Startup",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#checking-the-java-application-after-startup",
  "content" : "Checking the Java Application After Startup Always check your Zing application after startup to ensure that it is behaving as you expected: Use top to be certain that it is running on the cores that you think it should be using. To view the individual cores in use and the threads executing, type in these options in the window running top: z 1 H Use zing-ps –s to be certain that it is running using the Zing Partition Memory that you think it should be using. Run numactl --hardware to view the “free” memory for the node that the Zing Memory Partition is using; the free memory for that node should have been reduced by the same amount as the memory used on that node by the Zing Memory Partitions."
}, {
  "objectID" : "213a500a-b14c-422d-b3f2-2970d7e2215e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Configuring ZST Partitions and Running Zing instances on Specific Nodes",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#configuring-zst-partitions-and-running-zing-instances-on-specific-nodes",
  "content" : "Configuring ZST Partitions and Running Zing instances on Specific Nodes Viewing the Partition pmem.conf File Every Zing Memory Partition has a pmem.conf.N file, where N is the Zing Memory Partition number. The files are in the /etc/zing directory. Do not manually edit these files. The default Zing Memory Partition is Partition 0 and the pmem.conf file is symlinked to pmem.conf.0 file. The nodemask value that specifies the node or nodes used when configuring the Zing Memory Partition is in the partition’s pmem.conf.N file. When you configured the Partitions, you had the option to specify a hexadecimal number to select the nodes to use for each Partition. See Setting Nodemask for a Zing Memory Partition. Managing Partitions Using the system-config-zing-memory Command The system-config-zing-memory command options that apply to Zing Memory Partitions are listed below. Usage:  system-config-zing-memory [OPTIONS] Option Where N is a partition number between 0 – 15 --add-partition N INFO: Add Zing Memory Partition N --stop-partition N Stop all running applications on the partition before stopping the partition. \\# system-config-zing-memory --stop-partition 1 INFO: az_pmem_unreserve_pages (num2mPages 18151) succeeded Info: Partition 1 successfully stopped. --start-partition N Info: azulPmemPages: 18151. INFO: az_pmem_reserve_pages (num2mPages 18151) succeeded INFO: az_pmem_fund_transfer (to 7, from 0, bytes 38065405952) succeeded INFO: az_pmem_fund_transfer (to 1, from 7, bytes 1902116864) succeeded INFO: az_pmem_fund_transfer (to 3, from 7, bytes 1902116864) succeeded INFO: az_pmem_fund_transfer (to 0, from 7, bytes 34261172224) succeeded Info: You can now run Java processes up to -Xmx32674m or -Xmx31g on partition 1. Info: Azul pmem initialized successfully. Info: Partition 1 successfully started. --restart-partition N Info: Partition 1 successfully stopped. Info: azulPmemPages: 18151. INFO: az_pmem_reserve_pages (num2mPages 18151) succeeded INFO: az_pmem_fund_transfer (to 7, from 0, bytes 38065405952) succeeded INFO: az_pmem_fund_transfer (to 1, from 7, bytes 1902116864) succeeded INFO: az_pmem_fund_transfer (to 3, from 7, bytes 1902116864) succeeded INFO: az_pmem_fund_transfer (to 0, from 7, bytes 34261172224) succeeded Info: You can now run Java processes up to -Xmx32674m or -Xmx31g on partition 1. Info: Azul pmem initialized successfully. Info: Partition 1 successfully started. Info: Partition 1 successfully restarted. --delete-partition N Info: Partition 1 successfully deleted. Viewing Partition Status Using the zing-ps Command The zing-ps command options that apply to Zing Memory Partitions are listed below: -p <pid> – Specific process PID to print info about. -s – Prints the memory summary. -partition P – Prints memory accounting information for Partition P. Where P is the partition number between 0 – 15."
}, {
  "objectID" : "85ccbd24-e155-47f1-ae3b-80a678b5d8f3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Viewing the Partition pmem.conf File",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#viewing-the-partition-pmem-conf-file",
  "content" : "Viewing the Partition pmem.conf File Every Zing Memory Partition has a pmem.conf.N file, where N is the Zing Memory Partition number. The files are in the /etc/zing directory. Do not manually edit these files. The default Zing Memory Partition is Partition 0 and the pmem.conf file is symlinked to pmem.conf.0 file. The nodemask value that specifies the node or nodes used when configuring the Zing Memory Partition is in the partition’s pmem.conf.N file. When you configured the Partitions, you had the option to specify a hexadecimal number to select the nodes to use for each Partition. See Setting Nodemask for a Zing Memory Partition."
}, {
  "objectID" : "39ebf62d-204d-46f6-87ac-c8ac9a42322a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Managing Partitions Using the system-config-zing-memory Command",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#managing-partitions-using-the-system-config-zing-memory-command",
  "content" : "Managing Partitions Using the system-config-zing-memory Command The system-config-zing-memory command options that apply to Zing Memory Partitions are listed below. Usage:  system-config-zing-memory [OPTIONS] Option Where N is a partition number between 0 – 15 --add-partition N INFO: Add Zing Memory Partition N --stop-partition N Stop all running applications on the partition before stopping the partition. \\# system-config-zing-memory --stop-partition 1 INFO: az_pmem_unreserve_pages (num2mPages 18151) succeeded Info: Partition 1 successfully stopped. --start-partition N Info: azulPmemPages: 18151. INFO: az_pmem_reserve_pages (num2mPages 18151) succeeded INFO: az_pmem_fund_transfer (to 7, from 0, bytes 38065405952) succeeded INFO: az_pmem_fund_transfer (to 1, from 7, bytes 1902116864) succeeded INFO: az_pmem_fund_transfer (to 3, from 7, bytes 1902116864) succeeded INFO: az_pmem_fund_transfer (to 0, from 7, bytes 34261172224) succeeded Info: You can now run Java processes up to -Xmx32674m or -Xmx31g on partition 1. Info: Azul pmem initialized successfully. Info: Partition 1 successfully started. --restart-partition N Info: Partition 1 successfully stopped. Info: azulPmemPages: 18151. INFO: az_pmem_reserve_pages (num2mPages 18151) succeeded INFO: az_pmem_fund_transfer (to 7, from 0, bytes 38065405952) succeeded INFO: az_pmem_fund_transfer (to 1, from 7, bytes 1902116864) succeeded INFO: az_pmem_fund_transfer (to 3, from 7, bytes 1902116864) succeeded INFO: az_pmem_fund_transfer (to 0, from 7, bytes 34261172224) succeeded Info: You can now run Java processes up to -Xmx32674m or -Xmx31g on partition 1. Info: Azul pmem initialized successfully. Info: Partition 1 successfully started. Info: Partition 1 successfully restarted. --delete-partition N Info: Partition 1 successfully deleted."
}, {
  "objectID" : "efc158ba-dedd-4ef8-90c7-8cd5613e464e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Viewing Partition Status Using the zing-ps Command",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#viewing-partition-status-using-the-zing-ps-command",
  "content" : "Viewing Partition Status Using the zing-ps Command The zing-ps command options that apply to Zing Memory Partitions are listed below: -p <pid> – Specific process PID to print info about. -s – Prints the memory summary. -partition P – Prints memory accounting information for Partition P. Where P is the partition number between 0 – 15."
}, {
  "objectID" : "5c611ed6-a40a-4253-ad00-a802ce4916da",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Setting up Performance Testing",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#setting-up-performance-testing",
  "content" : "Setting up Performance Testing This section describes an example performance testing scenario with a desired testing environment and how to configure Zing memory partitions within the testing environment. To run the system-config-zing-memory command you need root access permission on the server. Performance Testing Environment In this example, set up a system with three Zing Memory Partitions so that you can compare the benchmark results for running Zing when the memory for the Java Heap comes from node 0, node 1, or from both nodes. The scenario assumes that you will want to switch between the different memory configurations, trying different combinations of nodes, without needing to reconfigure the machine. Configuring the Zing Memory Partitions To accomplish this, create three different partitions on a system where 192 GB of system memory (RAM) are available on the machine. Overall, the machine will use 144 GB for Zing Memory (75% of system memory) and 48 GB for Linux Memory (25% of system memory). To make the various configurations easier to compare, create three equally sized Zing Memory Partitions, so each will be 48 GB. Test the following three configurations in which Zing’s Java Heap memory uses memory from: Environment Partition name Memory to use for Java heap 1 Zing Memory Partition 0 node 0 and node 1 2 Zing Memory Partition 1 node 0 exclusively 3 Zing Memory Partition 2 node 1 exclusively The illustration below depicts three Zing Memory Partitions configured on a server with 192GB of system memory: Running using the Configured Zing Memory Partition Following a reboot of your system, so that you can start each run with a known configuration, you can run Zing using the memory from Zing Memory Partition 0 for the Java Heap and using the cores on processor sockets 0 and 1 and the Linux memory on nodes 0 and 1 with the following command:  $ java -Xmx40g {java-command-line-options} This is equivalent to the command:  $ numactl --cpunodebind=0,1 --membind=0,1 java -XX:AzMemPartition=0 -Xmx40g {javacommand-line-options} To run Zing using the memory from Zing Memory Partition 1 for the Java Heap and using the cores on node 0 and the Linux memory on node 0 use the following command:  $ numactl --cpunodebind=0 --membind=0 java -XX:AzMemPartition=1 -Xmx40g {javacommand-line-options} To run Zing using the memory from Zing Memory Partition 2 for the Java Heap and using the cores on node 1 and the Linux memory on node 1 use the following command:  $ numactl --cpunodebind=1 --membind=1 java -XX:AzMemPartition=2 -Xmx40g {javacommand-line-options}"
}, {
  "objectID" : "69ffb96d-0fe5-4970-bd9c-61e022b55f38",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Performance Testing Environment",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#performance-testing-environment",
  "content" : "Performance Testing Environment In this example, set up a system with three Zing Memory Partitions so that you can compare the benchmark results for running Zing when the memory for the Java Heap comes from node 0, node 1, or from both nodes. The scenario assumes that you will want to switch between the different memory configurations, trying different combinations of nodes, without needing to reconfigure the machine."
}, {
  "objectID" : "fe42c0b4-f295-46fe-8829-42101f84f914",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Configuring the Zing Memory Partitions",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#configuring-the-zing-memory-partitions",
  "content" : "Configuring the Zing Memory Partitions To accomplish this, create three different partitions on a system where 192 GB of system memory (RAM) are available on the machine. Overall, the machine will use 144 GB for Zing Memory (75% of system memory) and 48 GB for Linux Memory (25% of system memory). To make the various configurations easier to compare, create three equally sized Zing Memory Partitions, so each will be 48 GB. Test the following three configurations in which Zing’s Java Heap memory uses memory from: Environment Partition name Memory to use for Java heap 1 Zing Memory Partition 0 node 0 and node 1 2 Zing Memory Partition 1 node 0 exclusively 3 Zing Memory Partition 2 node 1 exclusively The illustration below depicts three Zing Memory Partitions configured on a server with 192GB of system memory:"
}, {
  "objectID" : "d29018d6-2bc3-4046-994a-05a6da21a7a6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Running using the Configured Zing Memory Partition",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#running-using-the-configured-zing-memory-partition",
  "content" : "Running using the Configured Zing Memory Partition Following a reboot of your system, so that you can start each run with a known configuration, you can run Zing using the memory from Zing Memory Partition 0 for the Java Heap and using the cores on processor sockets 0 and 1 and the Linux memory on nodes 0 and 1 with the following command:  $ java -Xmx40g {java-command-line-options} This is equivalent to the command:  $ numactl --cpunodebind=0,1 --membind=0,1 java -XX:AzMemPartition=0 -Xmx40g {javacommand-line-options} To run Zing using the memory from Zing Memory Partition 1 for the Java Heap and using the cores on node 0 and the Linux memory on node 0 use the following command:  $ numactl --cpunodebind=0 --membind=0 java -XX:AzMemPartition=1 -Xmx40g {javacommand-line-options} To run Zing using the memory from Zing Memory Partition 2 for the Java Heap and using the cores on node 1 and the Linux memory on node 1 use the following command:  $ numactl --cpunodebind=1 --membind=1 java -XX:AzMemPartition=2 -Xmx40g {javacommand-line-options}"
}, {
  "objectID" : "08d9bd7b-a411-403a-a4a0-31f7c2e89d52",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "NUMA Viewing and Commands",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#numa-viewing-and-commands",
  "content" : "NUMA Viewing and Commands Viewing Node and CPU Numbers To view the node and CPU numbers seen by the operating system:  # cd /sys/devices/system/node\n\n# ls\n\nnode0 node1\n\n# ls node1\n\ncpu1 cpu13 cpu15 cpu3 cpu5 cpu7 cpu9 cpu11 cpumap distance meminfo numastat Using the numactl Hardware Command Depending on operating system, kernel, and BIOS settings, the numactl command can provide the node and CPU numbers. Example: A Dell box with Hyper-Threading Disabled  [root@system ~]# numactl --hardware\n\navailable: 2 nodes (0-1)\n\nnode 0 cpus: 0 2 4 6 8 10 12 14\n\nnode 0 size: 65490 MB\n\nnode 0 free: 63290 MB\n\nnode 1 cpus: 1 3 5 7 9 11 13 15\n\nnode 1 size: 65536 MB\n\nnode 1 free: 63289 MB\n\nnode distances:\n\nnode 0 1\n\n0: 10 20\n\n1: 20 10 Example: An HP DL380 G8  dl380 G8\n\ndl380> numactl --hardware\n\navailable: 2 nodes (0-1)\n\nnode 0 cpus: 0 1 2 3 4 5 6 7\n\nnode 0 size: 8157 MB\n\nnode 0 free: 7326 MB\n\nnode 1 cpus: 8 9 10 11 12 13 14 15\n\nnode 1 size: 8191 MB\n\nnode 1 free: 7746 MB\n\nnode distances:\n\nnode 0 1\n\n0: 10 20\n\n1: 20 10 Example: A two-socket Dell PowerEdge R710 with NUMA Disabled Using an E5645 with 24 CPUs. and Node Interleave set in the BIOS.  Dell PowerEdge R710/00NH4P, BIOS 6.2.3 04/26/2012\n\nnumactl –-hardware\n\n[29] available: 1 nodes (0)\n\n[29] node 0 size: 48446 MB\n\n[29] node 0 free: 11800 MB\n\n[29] node distances:\n\n[29] node 0\n\n[29] 0: 10\n\n[29] 0 Note This output only shows a single node even though there are two-sockets. This server has the BIOS setting Node Interleave enabled so there is no NUMA being presented to the kernel. Example: A two socket X5660 numactl Without Node Details  numactl –-hardware\n\n[29] available: 2 nodes (0-1)\n\n[29] node 0 size: 18157 MB\n\n[29] node 0 free: 16253 MB\n\n[29] node 1 size: 18180 MB\n\n[29] node 1 free: 17039 MB\n\n[29] node distances:\n\n[29] node 0 1\n\n[29] 0: 10 20\n\n[29] 1: 20 10\n\n[29] 0 More Detailed View of CPUs Using lscpu Command  # lscpu\n\nArchitecture: x86_64\n\nCPU op-mode(s): 32-bit, 64-bit\n\nByte Order: Little Endian\n\nCPU(s): 40\n\nOn-line CPU(s) list: 0-39\n\nThread(s) per core: 1\n\nCore(s) per socket: 10\n\nCPU socket(s): 4\n\nNUMA node(s): 4\n\n. . . . . . . .\n\nL1d cache: 32K\n\nL1i cache: 32K\n\nL2 cache: 256K\n\nL3 cache: 30720K\n\nNUMA node0 CPU(s): 0,4,8,12,16,20,24,28,32,36\n\nNUMA node1 CPU(s): 2,6,10,14,18,22,26,30,34,38\n\nNUMA node2 CPU(s): 1,5,9,13,17,21,25,29,33,37\n\nNUMA node3 CPU(s): 3,7,11,15,19,23,27,31,35,39 Determining the Location of Task’s Memory Allocation To determine a task’s memory allocation location, examine the /proc/<pid>/numa_maps file; this displays each memory object for a particular task. The following example shows the entries for the current shell’s heap and stack:  [root@tux ~]# grep –e heap –e stack /proc/$$/numa_maps\n\n0245f000 default heap anon=65 dirty=65 active=60 N1=65\n\n7fff23318000 default stack anon=7 dirty=7 N1=7 The first field of row is start of the virtual memory address (VMA) range (for example, 0245f000 or 7fff23318000) The second field is memory allocation policy (for example, default is equal to the system default policy)  Third field is the path to the mapped file or the use of the shared memory segment (in this example, heap or stack) The anon= and dirty= show the number of pages The N<node>= shows the number of pages allocated from each <node> Show NUMA Policy Settings of the Current Process The numactl –-show command option displays the current memory allocation policy and preferred node. The command needs to be run in the process for which you want to display information. You can confirm the list of valid CPUs and node numbers for other numactl flags such as --physcpubind, --cpubind, and --membind. For example, the following command binds a shell, its children processes and associated memory objects to node 1, and the numactl --show command displays the policy settings:  [root@tux ~]# numactl --membind=1 --cpunodebind=1 bash\n\n[root@tux ~]# numactl --show\n\npolicy: bind\n\npreferred node: 1\n\nphyscpubind: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31\n\ncpubind: 1\n\nnodebind: 1\n\nmembind: 1"
}, {
  "objectID" : "ffc50c0c-80f3-4670-8e44-feefbcde776d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Viewing Node and CPU Numbers",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#viewing-node-and-cpu-numbers",
  "content" : "Viewing Node and CPU Numbers To view the node and CPU numbers seen by the operating system:  # cd /sys/devices/system/node\n\n# ls\n\nnode0 node1\n\n# ls node1\n\ncpu1 cpu13 cpu15 cpu3 cpu5 cpu7 cpu9 cpu11 cpumap distance meminfo numastat"
}, {
  "objectID" : "a00e7086-720e-47fa-ac9f-dae1fb0108b2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Using the numactl Hardware Command",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#using-the-numactl-hardware-command",
  "content" : "Using the numactl Hardware Command Depending on operating system, kernel, and BIOS settings, the numactl command can provide the node and CPU numbers. Example: A Dell box with Hyper-Threading Disabled  [root@system ~]# numactl --hardware\n\navailable: 2 nodes (0-1)\n\nnode 0 cpus: 0 2 4 6 8 10 12 14\n\nnode 0 size: 65490 MB\n\nnode 0 free: 63290 MB\n\nnode 1 cpus: 1 3 5 7 9 11 13 15\n\nnode 1 size: 65536 MB\n\nnode 1 free: 63289 MB\n\nnode distances:\n\nnode 0 1\n\n0: 10 20\n\n1: 20 10 Example: An HP DL380 G8  dl380 G8\n\ndl380> numactl --hardware\n\navailable: 2 nodes (0-1)\n\nnode 0 cpus: 0 1 2 3 4 5 6 7\n\nnode 0 size: 8157 MB\n\nnode 0 free: 7326 MB\n\nnode 1 cpus: 8 9 10 11 12 13 14 15\n\nnode 1 size: 8191 MB\n\nnode 1 free: 7746 MB\n\nnode distances:\n\nnode 0 1\n\n0: 10 20\n\n1: 20 10 Example: A two-socket Dell PowerEdge R710 with NUMA Disabled Using an E5645 with 24 CPUs. and Node Interleave set in the BIOS.  Dell PowerEdge R710/00NH4P, BIOS 6.2.3 04/26/2012\n\nnumactl –-hardware\n\n[29] available: 1 nodes (0)\n\n[29] node 0 size: 48446 MB\n\n[29] node 0 free: 11800 MB\n\n[29] node distances:\n\n[29] node 0\n\n[29] 0: 10\n\n[29] 0 Note This output only shows a single node even though there are two-sockets. This server has the BIOS setting Node Interleave enabled so there is no NUMA being presented to the kernel. Example: A two socket X5660 numactl Without Node Details  numactl –-hardware\n\n[29] available: 2 nodes (0-1)\n\n[29] node 0 size: 18157 MB\n\n[29] node 0 free: 16253 MB\n\n[29] node 1 size: 18180 MB\n\n[29] node 1 free: 17039 MB\n\n[29] node distances:\n\n[29] node 0 1\n\n[29] 0: 10 20\n\n[29] 1: 20 10\n\n[29] 0"
}, {
  "objectID" : "6bfa45de-7677-4925-9cd7-7b4af70ef0d5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "More Detailed View of CPUs Using lscpu Command",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#more-detailed-view-of-cpus-using-lscpu-command",
  "content" : "More Detailed View of CPUs Using lscpu Command  # lscpu\n\nArchitecture: x86_64\n\nCPU op-mode(s): 32-bit, 64-bit\n\nByte Order: Little Endian\n\nCPU(s): 40\n\nOn-line CPU(s) list: 0-39\n\nThread(s) per core: 1\n\nCore(s) per socket: 10\n\nCPU socket(s): 4\n\nNUMA node(s): 4\n\n. . . . . . . .\n\nL1d cache: 32K\n\nL1i cache: 32K\n\nL2 cache: 256K\n\nL3 cache: 30720K\n\nNUMA node0 CPU(s): 0,4,8,12,16,20,24,28,32,36\n\nNUMA node1 CPU(s): 2,6,10,14,18,22,26,30,34,38\n\nNUMA node2 CPU(s): 1,5,9,13,17,21,25,29,33,37\n\nNUMA node3 CPU(s): 3,7,11,15,19,23,27,31,35,39"
}, {
  "objectID" : "7a9f9345-6f96-49f5-b720-1bed47501473",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Determining the Location of Task’s Memory Allocation",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#determining-the-location-of-tasks-memory-allocation",
  "content" : "Determining the Location of Task’s Memory Allocation To determine a task’s memory allocation location, examine the /proc/<pid>/numa_maps file; this displays each memory object for a particular task. The following example shows the entries for the current shell’s heap and stack:  [root@tux ~]# grep –e heap –e stack /proc/$$/numa_maps\n\n0245f000 default heap anon=65 dirty=65 active=60 N1=65\n\n7fff23318000 default stack anon=7 dirty=7 N1=7 The first field of row is start of the virtual memory address (VMA) range (for example, 0245f000 or 7fff23318000) The second field is memory allocation policy (for example, default is equal to the system default policy)  Third field is the path to the mapped file or the use of the shared memory segment (in this example, heap or stack) The anon= and dirty= show the number of pages The N<node>= shows the number of pages allocated from each <node>"
}, {
  "objectID" : "dbbeabde-ee8f-4934-9219-5c52ed13c855",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Memory Partitions and NUMA Configuration Options",
  "section" : "Show NUMA Policy Settings of the Current Process",
  "url" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config",
  "link" : "https://docs.azul.com/prime/zst/memory-partitions-and-numa-config#show-numa-policy-settings-of-the-current-process",
  "content" : "Show NUMA Policy Settings of the Current Process The numactl –-show command option displays the current memory allocation policy and preferred node. The command needs to be run in the process for which you want to display information. You can confirm the list of valid CPUs and node numbers for other numactl flags such as --physcpubind, --cpubind, and --membind. For example, the following command binds a shell, its children processes and associated memory objects to node 1, and the numactl --show command displays the policy settings:  [root@tux ~]# numactl --membind=1 --cpunodebind=1 bash\n\n[root@tux ~]# numactl --show\n\npolicy: bind\n\npreferred node: 1\n\nphyscpubind: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31\n\ncpubind: 1\n\nnodebind: 1\n\nmembind: 1"
}, {
  "objectID" : "56160a19-812d-43b9-a46f-dca6ba4022e9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Enhanced Linux Memory Defragmentation",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/enhanced-linux-memory-defragmentation",
  "link" : "https://docs.azul.com/prime/zst/enhanced-linux-memory-defragmentation",
  "content" : "This section addresses the situation when Azul Zing Builds of OpenJDK (Zing) fails with one of the following error messages: Memory management: unable to fund java heap account ERROR: perror: az_pmem_reserve_pages (num2mPages … As these errors can occur when not enough free memory is available, i.e. other large processes are already running, first check with the command zing-ps -s and top if other Zing or other large processes are already running. If enough free memory is available as indicated by the Linux free command, then the cause of these error messages is often memory fragmentation. Zing needs large Linux pages of at least 2 MB page size and those might be too fragmented. If rebooting the system is not an acceptable solution in this case, upgrade to at least Azul Zing System Tools (ZST) 5.21.7 and add the following line to the file /etc/zing/drop.conf:  RESERVE2MB=true With this setting Zing’s enhanced Linux memory defragmentation is enabled to be able to operate under situations of high fragmentation. Note Do not enable the RESERVE2MB=true setting when running on Linux kernels older than 2.6.32-431. Due to a bug in those older Linux kernels, the system can crash (see CentOS bug 6660). Setting RESERVE2MB=true enables Linux memory defragmentation. This Linux function causes all processes on the host to stop for a few ms to seconds depending on the RAM size if defragmentation is triggered. When using this setting with the ZST mode reserve-at-config, the memory initialization and potential triggering of the defragmentation happens only during the start of the ZST system service zing-memory. It is safe to enable this setting there if you do not restart the zing-memory system service during the operation of other business applications on your host. Alternatively, you can run Zing without ZST (possible since Azul Platform Prime 19.07.0.0) or update your operating system to a version with Linux kernel 4.4 or newer, where the RESERVE2MB setting is not needed anymore. When enabling the RESERVE2MB setting in combination with the ZST mode reserve-at-launch, it can trigger the defragmentation potentially on each start of a Java process. Depending on the application use case, it is often acceptable, for example, if Java process starts occur during non-business hours only. With reserve-at-launch and the RESERVE2MB setting, there exists an additional small risk of triggering the defragmentation even during runtime of a Java process when it consumed all the available contingency or pause prevention memory and is requesting more. To prevent triggering the defragmentation during runtime, set the pause prevention and contingency memory pools to a static value, for example, each to 3% of the system RAM in the file/etc/zing/pmem.conf and restart the zing-memory system service:       ContingencyUpperLimit 3%\n     ContingencyMinimumFreeMemory 3%\n     PausePreventionUpperLimit 3%\n     PausePreventionMinimumFreeMemory 3%"
}, {
  "objectID" : "9cb85d8a-64a4-4adc-9ae7-bea970c8da01",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "vm.min_free Settings",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/vm.min-free-settings",
  "link" : "https://docs.azul.com/prime/zst/vm.min-free-settings",
  "content" : "Set your vm.min_free_kbytes memory value to 1 GB or more. Best practice sets this value greater than 1 GB. A common method used to change the parameter value is to edit /etc/sysctl.conf then use the sysctl command to write the changes into the kernel. This ensures the swap setting is persistent across reboots. The following steps apply to RHEL, SUSE, and Ubuntu systems. Persistent change: This is the recommended method for changing your vm.min_free_kbytes settings. It takes effect immediately and is persistent across reboots. Verify the limit of the vm.min_free_kbytes parameter and the effects of changing it on your system. Edit the /etc/sysctl.conf file. Add the following entry:  vm.min_free_kbytes=1048576 Ensure that you do not have duplicate entries for vm.min_free_kbytes in the file. Load the sysctl setting from the default file /etc/sysctl.conf. Run sysctl as follows:  # sysctl -p Non-persistent change: This method changes your vm.min_free_kbytes settings temporarily. It is not persistent across reboots. Verify the limit of the vm.min_free_kbytes parameter and the effects of changing it on your system. Run the sysctl command with the -w option from the command line:  # sysctl -w vm.min_free_kbytes=1048576"
}, {
  "objectID" : "14f98b76-3f4f-44dc-9fef-8338ef4b5395",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools Installed Files",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/installed-files",
  "link" : "https://docs.azul.com/prime/zst/installed-files",
  "content" : "Azul Zing System Tools (ZST) software consists of a kernel loadable module, and licensing daemon. and supporting scripts and tools. This section contains a list of all the files included with the driver software installation. The following files are installed as part of the ZST software package: Users Tools /usr/bin/zing-ps List Azul Zing Builds of OpenJDK (Zing) system and process memory usage. Administrator Tools /usr/sbin/zing-llpmem Low-level Zing memory and account manipulation. Not meant to be invoked directly by the user. /usr/sbin/zing-configure-pmem High-level Zing memory manipulation. Only expert users should consider running this directly. Normally, this tool is called automatically by higher-level tools. Reads pmem.conf configuration file. Invokes zing-llpmem to do low-level work. Called by zing-memory init script. /usr/sbin/system-config-zing-memory Zing memory configuration wizard. Users who want to quickly get started with Zing should run this tool. Creates pmem.conf file. See Configure Zing Memory. /usr/sbin/system-config-zing-core-pattern Zing core bundling configuration wizard. For automatically generating Zing core bundles, see Troubleshooting Zing. Configuration Files /etc/zing/pmem.conf.default Default Zing physical memory configuration file. Software relies on this file to be in a pristine state. Do not modify this file. /etc/zing/pmem.conf Active Zing physical memory configuration file. Created by system-config-zing-memory, or manually by the user. See the zing-pmem-conf man page for more information about this file. /etc/zing/pmem.conf.*example Various example configuration files. Man Pages /usr/share/man/man7/zing-*.7.gz /usr/share/man/man1/zing-*.1.gz /usr/share/man/man5/zing-*.5.gz Title Content zing (7) Top-level description of Azul Platform Prime components and high level installation instructions. zing-installation (7) Basic description of how to install Azul Platform Prime components including ZST and Zing. zing-zst (7) Description of ZST components. zing-pmem-conf (5) Describes how to configure, replace, and load Zing physical memory configuration file. zing-ps (1) Report a snapshot of current Zing usage. ZST Configuration File Relationships The following flow diagram shows how the configuration files and tools relate to one another:  /usr/sbin/system-config-zing-memory\n--> /etc/init.d/zing-memory start\n--> /sbin/insmod .../zing_mm.ko\n--> /usr/sbin/zing-configure-pmem\n--> /usr/sbin/zing-llpmem ZST Boot Sequence File Relationships After installation and configuration, on bootup, the zing-memory init script loads the kernel module and partition memory. The following flow diagram shows how the boot sequence files and tools relate to one another:  /etc/init.d/zing-memory start\n--> /sbin/insmod .../zing_mm.ko\n--> /usr/sbin/zing-configure-pmem\n--> /usr/sbin/zing-llpmem ZST Update Software File Relationships The following flow diagram shows how the update files and tools relate to one another:  /usr/sbin/system-config-zing-memory\n--> /etc/init.d/zing-memory start\n--> /sbin/insmod .../zing_mm.ko\n--> /usr/sbin/zing-configure-pmem\n--> /usr/sbin/zing-llpmem"
}, {
  "objectID" : "f9e9914f-c0bc-43c3-964a-b5581481300d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "SWAP Settings",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/swap-settings",
  "link" : "https://docs.azul.com/prime/zst/swap-settings",
  "content" : "Ensure your SWAP is either turned off or set to 0. Add the required parameter to the sysctl.conf file. A common method used to change the parameter value is to edit /etc/sysctl.conf then use the sysctl command to write the changes into the kernel. This ensures the swap setting is persistent across reboots. The following steps apply to RHEL, SUSE, and Ubuntu systems."
}, {
  "objectID" : "844031df-32c9-4886-aa7c-ec033317ee77",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "SWAP Settings",
  "section" : "Persistent Change",
  "url" : "https://docs.azul.com/prime/zst/swap-settings",
  "link" : "https://docs.azul.com/prime/zst/swap-settings#persistent-change",
  "content" : "Persistent Change This is the recommended method for changing your SWAP settings. It takes effect immediately and is persistent across reboots. Verify the limit of the swappiness parameter and the effects of changing it on your system. Edit the /etc/sysctl.conf file. Add the following entry:  vm.swappiness=0 Ensure that you do not have duplicate entries for vm.swappiness in the file. Load the sysctl setting from the default file /etc/sysctl.conf. Run sysctl as follows:  # sysctl -p"
}, {
  "objectID" : "1b5b50a0-afb4-4405-a79c-1606dba6d86b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "SWAP Settings",
  "section" : "Non-persistent change:",
  "url" : "https://docs.azul.com/prime/zst/swap-settings",
  "link" : "https://docs.azul.com/prime/zst/swap-settings#non-persistent-change",
  "content" : "Non-persistent change: This method changes your SWAP settings temporarily. It is not persistent across reboots. Verify the limit of the swappiness parameter and the effects of changing it on your system. Run the sysctl command with the -w option from the command line:  # sysctl -w vm.swappiness=0"
}, {
  "objectID" : "01357c4a-5729-4e4a-87bc-441b1863a20f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "vm.zone_reclaim_mode Settings",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/vm.zone-settings",
  "link" : "https://docs.azul.com/prime/zst/vm.zone-settings",
  "content" : "Set your vm.zone_reclaim_mode memory value to 0. A common method used to change the parameter value is to edit /etc/sysctl.conf then use the sysctl command to write the changes into the kernel. This ensures the swap setting is persistent across reboots. The following steps apply to RHEL, SUSE, and Ubuntu systems."
}, {
  "objectID" : "5c22639a-e1f6-417f-afa9-291effbfe126",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "vm.zone_reclaim_mode Settings",
  "section" : "Persistent change:",
  "url" : "https://docs.azul.com/prime/zst/vm.zone-settings",
  "link" : "https://docs.azul.com/prime/zst/vm.zone-settings#persistent-change",
  "content" : "Persistent change: This is the recommended method for changing your vm.zone_reclaim_mode settings. It takes effect immediately and is persistent across reboots. Verify the limit of the vm.zone_reclaim_mode parameter and the effects of changing it on your system. Edit the /etc/sysctl.conf file. Add the following entry:  vm.zone_reclaim_mode=0 Ensure that you do not have duplicate entries for vm.zone_reclaim_mode in the file. Load the sysctl setting from the default file /etc/sysctl.conf. Run sysctl as follows:  # sysctl -p"
}, {
  "objectID" : "41870ff7-f4ee-4bb2-8688-5786aab94d3e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "vm.zone_reclaim_mode Settings",
  "section" : "Non-persistent change:",
  "url" : "https://docs.azul.com/prime/zst/vm.zone-settings",
  "link" : "https://docs.azul.com/prime/zst/vm.zone-settings#non-persistent-change",
  "content" : "Non-persistent change: This method changes your vm.zone_reclaim_mode settings temporarily. It is not persistent across reboots. Verify the limit of the vm.zone_reclaim_mode parameter and the effects of changing it on your system. Run the sysctl command with the -w option from the command line:  # sysctl -w vm.zone_reclaim_mode=0"
}, {
  "objectID" : "77c35f6b-44cb-4fd8-bc6f-90bc16093255",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "content" : "The Garbage Collector Log Analyzer (GC Log Analyzer) is a tool to view and interpret Java heap, pause time, and operating system metrics gathered while running the Azul Zing Builds of OpenJDK (Zing). The GC Log Analyzer offers significantly reduced memory usage and faster loading of large Garbage Collector log files. In addition, it offers graphs to give an insight into the JIT compilation activity, which is recorded in the gc.log file since Zing 18.01.0.0. The GC Log Analyzer runs with JRE (version 7 or older) or JDK (version 7 or older) on any platform, Zing is not required to run it. GCLogAnalyzer2.jar is self-contained and has no external dependencies."
}, {
  "objectID" : "bd261743-1078-4018-85cf-a88643617eef",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "How to Enable GC Logging",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#how-to-enable-gc-logging",
  "content" : "How to Enable GC Logging In order to use GC Log Analyzer, it is necessary to first have a GC log to analyze. To collect a GC log with basic information into a file, use: -Xlog:gc:/path/to/file.log To enable more detailed logging, use -Xlog:gc*, such as: -Xlog:gc*:/path/to/file.log For more information, such as how to enable safepoint info and other fine-grained information, see Unified Garbage Collection Logging Recommendations."
}, {
  "objectID" : "f5e2b1c6-8aaa-45c4-a15a-41dcf40085f2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Download New GC Log Analyzer",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#download-new-gc-log-analyzer",
  "content" : "Download New GC Log Analyzer Download the latest version of the GC Log Analyzer."
}, {
  "objectID" : "555b2a4a-3c52-4db3-a861-0f43e20ae3e2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Run GC Log Analyzer",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#run-gc-log-analyzer",
  "content" : "Run GC Log Analyzer No installation is required to start the GC Log Analyzer. You can start the GC Log Analyzer either directly from the /etc directory of the Zing installation or copy it from the Zing installation directory to your desktop system. To run the GC Log Analyzer, use the following command:  java -Xmx4g -jar GCLogAnalyzer2.jar gc.log To run GC Log Analyzer in a non-GUI mode and create an HTML output, use the following as an example:  java -jar GCLogAnalyzer2.jar --generate-html ./output-html ./gc.log This generates ./output-html/all-graphs.html. If you need a batch of json files with data from your <logfile>, use:  java -jar GCLogAnalyzer2.jar [--generate-html <dir> [--resize WxH]] [--dump-raw-data <dir>] gc.log Starting with Zing 19.08.0.0 the SYSINFO line in the GC log is enhanced to include information about cgroup limits and usage, where applicable."
}, {
  "objectID" : "b996f2a0-02c9-4c04-bcc9-ff53495fef34",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "GC Log Analyzer Command-Line Options",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#gc-log-analyzer-command-line-options",
  "content" : "GC Log Analyzer Command-Line Options To display the list of command-line options available in the new GC Log Analyzer (for example, for batch usage), run:  java -jar GCLogAnalyzer2.jar --help"
}, {
  "objectID" : "d78b1905-49ea-4bc0-9d19-8382c75bd150",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Usage Recommendations",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#usage-recommendations",
  "content" : "Usage Recommendations For big log files, consider increasing the size of the Java heap twice as much as the log file size. For example, if you have a 3 GB file, use -Xmx6g to start the GC Log Analyzer. To open gc.log directly from the command line, run:  java -jar GCLogAnalyzer2.jar gc.log"
}, {
  "objectID" : "d32626c6-f0da-4f2b-937f-85c66325aabe",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Working with Graphs",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#working-with-graphs",
  "content" : "Working with Graphs The Garbage Collector Log Analyzer (GC Log Analyzer) offers more than 70 different graphs of log file data that provide insight into the behavior and performance of your application, Zing, and the runtime environment. Most of the time, you need to quickly know whether the overall system is performing well. To accomplish this task, you can consult the required group of graphs that helps you visualize the GC activity and detect performance anomalies. Opening a GC Log File To open a GC Log file, specify the path to your GC Log file as an argument when starting the GC Log Analyzer (e.g., java -jar ./GCLogAnalyzer2.jar ./gc.log). Alternatively, run the GC Log Analyzer and use any of the following options to open your GC Log file: Select File > Open File from the main menu. In the dialog box that opens, browse for your log file and click Open. Drag your GC Log file and drop it in the GC Log Analyzer window. Choose Open Recent Files from the File menu to view files you’ve recently opened. Your GC Log summary displays. In the VM Process Info part of the log summary, hover your mouse over a JVM argument to view either the description of the option (highlighted with blue) or the note that the argument is ignored (highlighted with orange and crossed). Using the Graphs Window The Graphs window has groups that you can expand to view subgroups of graphs. To quickly search for a graph, start typing the graph name in the Graphs window. This expands all the groups, displays the search field and the graph. Use the Up and Down keyboard arrow keys to navigate through the graphs. To add a graph to your Favorite Graphs, navigate to the graph you want as a favorite and click the star in the top right corner of the graph. Select View > Graphs > Favorite Graphs from the main menu, to display your favorite graphs only. Using the Table View You can use the table view located below the Graphs window for displaying GC Log data in the tabular format for analysis. Selecting a line in the table displays the following: A red vertical line connecting related points on the graph below the table The data for the selected line under the minimized graph To display detailed information about each value at the bottom of the window, hover your mouse over the value. Using the Toolbar The toolbar at the top of the GC Log Analyzer window contains a set of buttons you can use to perform common tasks for every selected graph. Time selection (sec.): Allows to specify a time-based range in seconds to display in the graph window. View GC Log Summary: Provides a cumulative and structured summary of the data collected in your GC log. View GC Log: Displays a GC log in the text format, a graph in the pane below, as well as the selected line of a log at the bottom of the GC Log Analyzer window. Select Previous Item: Displays the previous element in the same series in your GC log. This option becomes available after you have chosen a highlighted line in the log or a dot on a graph. Select Next Item: Displays the following element in the same series in your GC log. This option becomes available after you have chosen a highlighted line in the log or a dot on a graph. Select Data Series: Allows to choose what data series to display on the current graph. Add Mark/Delete Mark: Allows to add or delete labeled marks applied to a log line or graph element. This option becomes available after you have chosen a log line or a graph element. Select Visible Marklines: Displays or hides all labeled marks you made in the log line or graph element. Export Current Graph to PNG: Saves a snapshot of the currently selected graph as a PNG image. Switching Between the Graph and Log Views You can switch between the Graph and Log views to work with your data. From Graph to Log To switch from the Graph to Log view, do either of the following: select a point on the graph and click the View GC Log button in the toolbar double-click on a point on the graph This displays the Log view with a highlighted GC log line that corresponds to the point selected in the Graph view. From Log to Graph To switch from the Log to Graph view, select a graph in the graphs tree on the left. Selecting Items on a Graph or in a Log When you click on a dot of a graph to select a corresponding event, an associated GC log line displays in the bottom window, and the numerical field that the selected dot is plotted from is highlighted. While viewing a GC log, you can click a GC log line to select it. This displays a thin red vertical bar on a preview chart to help identify the location of the selected line in the run. If the selected line is colored (i.e., it is one of the lines that chart data is extracted from), it is replicated in the bottom window that fits the entire line for easier analysis. Hovering a mouse over a numerical field in either presentations of the line reveals a descriptive tooltip. Zooming In and Out Rubber-Band Selection Position the pointer inside a chart, click and drag it in the direction from the top-left to the bottom-right edge of the chart. This enlarges the area selected with your pointer. Double-click inside the enlarged area of the chart to automatically adjust the Y-axis so that all dots of all currently visible lines within the currently visible time frame display. To reset zooming, click and drag your pointer in any other direction on the chart or double-click inside the selected portion of the timeline in the sliding bar. Range Selection To zoom in a specific time range of your graph, use a range slider below each chart to change a visible time frame. Dragging either of the slider handles represented by gray dots alters the beginning or the end of the visible time frame. You can drag the center of the selected portion of the time line to the left or right to change the position of the enlarged time frame and keep the width of your selection. Time Selection To precisely set a specific time frame for viewing in a chart, specify the start and end seconds in the Time selection (sec.) fields of the toolbar. Displaying Data in a Graph A legend at the bottom of every graph describes the names and colors of each series of data included in the graph. To display or hide a particular data series in the graph, toggle the items in the legend or use the Select Data Series button in the toolbar. To display your preferred units for the time when a GC event started or time elapsed since the beginning of a GC log in the chart, select View > Time Units from the main menu or click a little upside-down black triangle above the graph legend. The GC Log Analyzer uses seconds as default time units."
}, {
  "objectID" : "9b780bbe-68ad-4288-9e55-d5a695f33672",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Opening a GC Log File",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#opening-a-gc-log-file",
  "content" : "Opening a GC Log File To open a GC Log file, specify the path to your GC Log file as an argument when starting the GC Log Analyzer (e.g., java -jar ./GCLogAnalyzer2.jar ./gc.log). Alternatively, run the GC Log Analyzer and use any of the following options to open your GC Log file: Select File > Open File from the main menu. In the dialog box that opens, browse for your log file and click Open. Drag your GC Log file and drop it in the GC Log Analyzer window. Choose Open Recent Files from the File menu to view files you’ve recently opened. Your GC Log summary displays. In the VM Process Info part of the log summary, hover your mouse over a JVM argument to view either the description of the option (highlighted with blue) or the note that the argument is ignored (highlighted with orange and crossed)."
}, {
  "objectID" : "59552a4b-c078-4fcf-863e-92c81626c5fb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Using the Graphs Window",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#using-the-graphs-window",
  "content" : "Using the Graphs Window The Graphs window has groups that you can expand to view subgroups of graphs. To quickly search for a graph, start typing the graph name in the Graphs window. This expands all the groups, displays the search field and the graph. Use the Up and Down keyboard arrow keys to navigate through the graphs. To add a graph to your Favorite Graphs, navigate to the graph you want as a favorite and click the star in the top right corner of the graph. Select View > Graphs > Favorite Graphs from the main menu, to display your favorite graphs only."
}, {
  "objectID" : "a1d4934e-8a0b-4ac2-903a-72616b54a041",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Using the Table View",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#using-the-table-view",
  "content" : "Using the Table View You can use the table view located below the Graphs window for displaying GC Log data in the tabular format for analysis. Selecting a line in the table displays the following: A red vertical line connecting related points on the graph below the table The data for the selected line under the minimized graph To display detailed information about each value at the bottom of the window, hover your mouse over the value."
}, {
  "objectID" : "200d8733-cdb6-4590-802d-28feffbb726e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Using the Toolbar",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#using-the-toolbar",
  "content" : "Using the Toolbar The toolbar at the top of the GC Log Analyzer window contains a set of buttons you can use to perform common tasks for every selected graph. Time selection (sec.): Allows to specify a time-based range in seconds to display in the graph window. View GC Log Summary: Provides a cumulative and structured summary of the data collected in your GC log. View GC Log: Displays a GC log in the text format, a graph in the pane below, as well as the selected line of a log at the bottom of the GC Log Analyzer window. Select Previous Item: Displays the previous element in the same series in your GC log. This option becomes available after you have chosen a highlighted line in the log or a dot on a graph. Select Next Item: Displays the following element in the same series in your GC log. This option becomes available after you have chosen a highlighted line in the log or a dot on a graph. Select Data Series: Allows to choose what data series to display on the current graph. Add Mark/Delete Mark: Allows to add or delete labeled marks applied to a log line or graph element. This option becomes available after you have chosen a log line or a graph element. Select Visible Marklines: Displays or hides all labeled marks you made in the log line or graph element. Export Current Graph to PNG: Saves a snapshot of the currently selected graph as a PNG image."
}, {
  "objectID" : "0d6fe7be-3182-4a98-9346-944adc8ff929",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Switching Between the Graph and Log Views",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#switching-between-the-graph-and-log-views",
  "content" : "Switching Between the Graph and Log Views You can switch between the Graph and Log views to work with your data. From Graph to Log To switch from the Graph to Log view, do either of the following: select a point on the graph and click the View GC Log button in the toolbar double-click on a point on the graph This displays the Log view with a highlighted GC log line that corresponds to the point selected in the Graph view. From Log to Graph To switch from the Log to Graph view, select a graph in the graphs tree on the left."
}, {
  "objectID" : "ff989c97-ff61-4e38-8ef0-f22666e1aa2d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Selecting Items on a Graph or in a Log",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#selecting-items-on-a-graph-or-in-a-log",
  "content" : "Selecting Items on a Graph or in a Log When you click on a dot of a graph to select a corresponding event, an associated GC log line displays in the bottom window, and the numerical field that the selected dot is plotted from is highlighted. While viewing a GC log, you can click a GC log line to select it. This displays a thin red vertical bar on a preview chart to help identify the location of the selected line in the run. If the selected line is colored (i.e., it is one of the lines that chart data is extracted from), it is replicated in the bottom window that fits the entire line for easier analysis. Hovering a mouse over a numerical field in either presentations of the line reveals a descriptive tooltip."
}, {
  "objectID" : "45787e66-4078-46d9-af17-399c507dd668",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Zooming In and Out",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#zooming-in-and-out",
  "content" : "Zooming In and Out Rubber-Band Selection Position the pointer inside a chart, click and drag it in the direction from the top-left to the bottom-right edge of the chart. This enlarges the area selected with your pointer. Double-click inside the enlarged area of the chart to automatically adjust the Y-axis so that all dots of all currently visible lines within the currently visible time frame display. To reset zooming, click and drag your pointer in any other direction on the chart or double-click inside the selected portion of the timeline in the sliding bar. Range Selection To zoom in a specific time range of your graph, use a range slider below each chart to change a visible time frame. Dragging either of the slider handles represented by gray dots alters the beginning or the end of the visible time frame. You can drag the center of the selected portion of the time line to the left or right to change the position of the enlarged time frame and keep the width of your selection. Time Selection To precisely set a specific time frame for viewing in a chart, specify the start and end seconds in the Time selection (sec.) fields of the toolbar."
}, {
  "objectID" : "ab756c55-134d-4816-883f-5874ba1cb4f0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Displaying Data in a Graph",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#displaying-data-in-a-graph",
  "content" : "Displaying Data in a Graph A legend at the bottom of every graph describes the names and colors of each series of data included in the graph. To display or hide a particular data series in the graph, toggle the items in the legend or use the Select Data Series button in the toolbar. To display your preferred units for the time when a GC event started or time elapsed since the beginning of a GC log in the chart, select View > Time Units from the main menu or click a little upside-down black triangle above the graph legend. The GC Log Analyzer uses seconds as default time units."
}, {
  "objectID" : "569fe6fc-52f3-4d74-a108-99679af76cb7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Understanding a Garbage Collection Log Format",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#understanding-a-garbage-collection-log-format",
  "content" : "Understanding a Garbage Collection Log Format A garbage collection (GC) log is a text file with the collected and written metrics of the garbage collector’s work produced by the Java Virtual Machine (JVM). The GC Log Analyzer extracts various JVM and system metrics from GC logs. Unlike logs produced by other JVMs, Zing GC logs contain detailed information not only about the GC process but about the system state as a whole. GC logs can be very helpful in diagnosing CPU and memory-related issues, as well as in optimizing application performance. GC log contents depend on the command-line options used to start Zing. Some details are available only when explicitly enabled with specific flags (see Garbage Collector Options in Using Zing Command-Line Options). Zing uses an efficient, extendable text-based format to log events. Detailed GC Logging If detailed logging is enabled with -XX:+PrintGCDetails, very detailed and verbose information is printed to the log in a human-readable format that is NOT documented and can change at any time without notice. A detailed GC log reading requires a deep understanding of Zing GC internals and is mostly intended for Azul engineers to use. Regular GC Logging The most common practice is to enable non-detailed GC logging with -XX:+PrintGC -XX:+PrintGCTimeStamps to minimize GC log file size, yet to get a lot of valuable information. Zing writes GC logs very efficiently, so logging can be safely enabled even for low-latency production applications. GC Log Format The format of a GC log is universal. You do not need to know the whole range of possible fields to parse a log if you are familiar with the format. Example 1. Zing GC log line format  <date>: <rel_time>: [<ID> <value> … ] Where: (optional) <date> is an absolute time stamp of the logged event, enabled with -XX:+PrintGCDateStamps (optional) <rel_time> is the time passed since the start of Zing in seconds, enabled with -XX:+PrintGCTimeStamps <ID> is the identifier of a line type, it defines how to interpret data that follows <value> is a set of data fields, separated with a space, colon, or both Example 2. A GC log line  1.816: [OBJCREAT 33892 26764 18432 : 1.815713 ] The meaning of fields can vary in different releases of Zing. To associate a field with its meaning, read a header line for a particular type of the line. Header lines are printed close to the beginning of the log and get replicated under some conditions (e.g., when GC log rotation is in use). The format of the header line is very similar to the data line, except that <ID> is appended with the H letter followed by textual field names. Example 3. A GC log header line  0.074: [OBJCREATH newGen(kB) permGen(kB) oldGen(kB) : end(s)] Some headers consist of two consequent lines. Example 4. A GC log two-line header  0.074: [TAGH Group 1 Group 2 : AnotherGroup]\n0.074: [TAGH field data data : data ] In case of two header lines, the first line denotes groups and the second line denotes names. A combination of group + name is guaranteed to be unique within the same line type. Unlike names, groups can contain spaces. Groups are divided by either a colon or two (or more) spaces. Example 4 above defines the following three groups and four fields:  Group 1/field\nGroup 1/data\nGroup 2/data\nAnotherGroup/data Although names of the fields can repeat (as shown in the example above), they are unique within the same line type in most cases. Names of the groups are guaranteed to be unique within the same line type. Note how Group 2 is aligned with the second data field. Below is a general rule for searching the index of a named field in a two-line header: Find the group part of an ID in the first line. Find the name part of an ID in the second line, starting from the position found in the first step. Example 5. Matching groups and fields  [ USEH memory disk ]\n[ USEH min max min max ]\n...\n[ USE 10 20 30 40 ] In Example 5, memory/min is the first data field (10), and disk/max is the fourth data field (40). Many fields, but not all of them, are named so that it is clear what units they are reported in (e.g., cgMem_max_usage_bytes or oldGen(kB)). Per-Thread CPU Utilization in GC Log The per-thread CPU utilization tracking feature (available from Azul Platform Prime 23.06.0.0) allows the collection and charting of per-thread CPU core usage statistics. This gives the ability to view the CPU usage of an application and JVM internal threads of the process over time. JVM internal threads are grouped into known categories (for example compiler or GC group) to make analysis of threads simpler. There is also an option to include CPU usage from other processes on the system. Per-thread CPU utilization is turned on using the option -XX:+PrintCPUUtilization, which is disabled by default due to the potential overhead from data collection. For options related to this feature, see Command Line Options. Parsing GC Log Data Please note that if you want to programmatically extract data from a Zing GC log, you cannot just grep for the line-type identifier and extract the N-th field. The order and position of line fields can vary in different releases of Zing (e.g., a new field can be added to the middle of a log line). To retrieve particular log data, check out GC log headers to find the position of a required field and retrieve data from a GC log line based on the field index in the particular log. A script named gcLogScraper is provided along with the Zing installation (see Using Zing GC Log Scraper for details). The gcLogScraper script can be used to extract fields provided you know the fields names from a given log file."
}, {
  "objectID" : "bba7827c-ed35-44c0-8dc3-906723ef5785",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Detailed GC Logging",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#detailed-gc-logging",
  "content" : "Detailed GC Logging If detailed logging is enabled with -XX:+PrintGCDetails, very detailed and verbose information is printed to the log in a human-readable format that is NOT documented and can change at any time without notice. A detailed GC log reading requires a deep understanding of Zing GC internals and is mostly intended for Azul engineers to use."
}, {
  "objectID" : "8c0678dc-65b1-4f01-acb4-20cbf0345cd8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Regular GC Logging",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#regular-gc-logging",
  "content" : "Regular GC Logging The most common practice is to enable non-detailed GC logging with -XX:+PrintGC -XX:+PrintGCTimeStamps to minimize GC log file size, yet to get a lot of valuable information. Zing writes GC logs very efficiently, so logging can be safely enabled even for low-latency production applications."
}, {
  "objectID" : "657bd4f9-6269-4190-998b-81084210ad14",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "GC Log Format",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#gc-log-format",
  "content" : "GC Log Format The format of a GC log is universal. You do not need to know the whole range of possible fields to parse a log if you are familiar with the format. Example 1. Zing GC log line format  <date>: <rel_time>: [<ID> <value> … ] Where: (optional) <date> is an absolute time stamp of the logged event, enabled with -XX:+PrintGCDateStamps (optional) <rel_time> is the time passed since the start of Zing in seconds, enabled with -XX:+PrintGCTimeStamps <ID> is the identifier of a line type, it defines how to interpret data that follows <value> is a set of data fields, separated with a space, colon, or both Example 2. A GC log line  1.816: [OBJCREAT 33892 26764 18432 : 1.815713 ] The meaning of fields can vary in different releases of Zing. To associate a field with its meaning, read a header line for a particular type of the line. Header lines are printed close to the beginning of the log and get replicated under some conditions (e.g., when GC log rotation is in use). The format of the header line is very similar to the data line, except that <ID> is appended with the H letter followed by textual field names. Example 3. A GC log header line  0.074: [OBJCREATH newGen(kB) permGen(kB) oldGen(kB) : end(s)] Some headers consist of two consequent lines. Example 4. A GC log two-line header  0.074: [TAGH Group 1 Group 2 : AnotherGroup]\n0.074: [TAGH field data data : data ] In case of two header lines, the first line denotes groups and the second line denotes names. A combination of group + name is guaranteed to be unique within the same line type. Unlike names, groups can contain spaces. Groups are divided by either a colon or two (or more) spaces. Example 4 above defines the following three groups and four fields:  Group 1/field\nGroup 1/data\nGroup 2/data\nAnotherGroup/data Although names of the fields can repeat (as shown in the example above), they are unique within the same line type in most cases. Names of the groups are guaranteed to be unique within the same line type. Note how Group 2 is aligned with the second data field. Below is a general rule for searching the index of a named field in a two-line header: Find the group part of an ID in the first line. Find the name part of an ID in the second line, starting from the position found in the first step. Example 5. Matching groups and fields  [ USEH memory disk ]\n[ USEH min max min max ]\n...\n[ USE 10 20 30 40 ] In Example 5, memory/min is the first data field (10), and disk/max is the fourth data field (40). Many fields, but not all of them, are named so that it is clear what units they are reported in (e.g., cgMem_max_usage_bytes or oldGen(kB))."
}, {
  "objectID" : "d380b055-0d79-460a-ad76-66226869c7b8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Per-Thread CPU Utilization in GC Log",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#per-thread-cpu-utilization-in-gc-log",
  "content" : "Per-Thread CPU Utilization in GC Log The per-thread CPU utilization tracking feature (available from Azul Platform Prime 23.06.0.0) allows the collection and charting of per-thread CPU core usage statistics. This gives the ability to view the CPU usage of an application and JVM internal threads of the process over time. JVM internal threads are grouped into known categories (for example compiler or GC group) to make analysis of threads simpler. There is also an option to include CPU usage from other processes on the system. Per-thread CPU utilization is turned on using the option -XX:+PrintCPUUtilization, which is disabled by default due to the potential overhead from data collection. For options related to this feature, see Command Line Options."
}, {
  "objectID" : "26437648-0cb8-40fa-86c7-405749b92cb2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Analyzer",
  "section" : "Parsing GC Log Data",
  "url" : "https://docs.azul.com/prime/GC-Log-Analyzer",
  "link" : "https://docs.azul.com/prime/GC-Log-Analyzer#parsing-gc-log-data",
  "content" : "Parsing GC Log Data Please note that if you want to programmatically extract data from a Zing GC log, you cannot just grep for the line-type identifier and extract the N-th field. The order and position of line fields can vary in different releases of Zing (e.g., a new field can be added to the middle of a log line). To retrieve particular log data, check out GC log headers to find the position of a required field and retrieve data from a GC log line based on the field index in the particular log. A script named gcLogScraper is provided along with the Zing installation (see Using Zing GC Log Scraper for details). The gcLogScraper script can be used to extract fields provided you know the fields names from a given log file."
}, {
  "objectID" : "8df09d5e-d9c1-47be-852b-8eee207f68a6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using the GC Log Scraper",
  "section" : "",
  "url" : "https://docs.azul.com/prime/GC-Log-Scraper",
  "link" : "https://docs.azul.com/prime/GC-Log-Scraper",
  "content" : "Azul Zing Builds of OpenJDK (Zing) Garbage Collector (GC) Log Scraper is a script that enables parsing of data from a GC log. The script is located in <zing_directory>/etc/gcLogScraper. To quickly get started with GC Log Scraper and see examples of extracting data, run gcLogScraper -h:  $ ./gcLogScraper -h\nSample script that can be used to extract data from ZingVM GC log files\n\nUsage: gcLogScraper -h\ngcLogScraper -l <label> [-c <fmt_string>] < zing.gclog\n\n-h - show this help and exit\n\n-l <label> - gclog line marker (GC, GPGC-H, SYSINFO, OBJCREAT, COMPSTATS, SPS ...)\n\n-c <fmt_string> - specifies what fields to print out\nif fmt_string is not specified, the script prints the header line and exits\n\nfmt_string may contain any text. Fields in the form of %{spec} will be replaced with the corresponding field\nvalues extracted from the log\n\nspec is the name of a field as it appears in the header line. For records that have two-line headers spec can be\nspecified in the form %{h1#h2}, where h1 unambiguously defines the group from the first header line and h2 specifies\na field from the second line within that group.\n\nExamples:\n\n$ cat ${LOG} | gcLogScraper -l GC -c \"%{end#end}: Type: %{type}; Mode: %{gc#md}; Pause 2: start=%{pause 2#start} dur=%{pause 2#dur}\"\n$ cat ${LOG} | gcLogScraper -l GPGC-H -c \"%{Time} %{Model#NewGen};%{KID};%{ReasonString}\"\n$ cat ${LOG} | gcLogScraper -l OBJCREAT -c \"%{end} %{newGen} %{permGen}\" You can utilize the gcLogScraper script to write your own script to parse GC log files. You may want to use the tail command to continuously extract metrics from a running Zing process, for example:  tail -c +0 -f gc.log | gcLogScraper -l GC -c '%{end}: %{rss}'"
}, {
  "objectID" : "63dbfb95-9071-4949-bed9-6e4aaaafce60",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Unified Garbage Collection Logging Recommendations",
  "section" : "Understanding -Xlog:gc Format",
  "url" : "https://docs.azul.com/prime/Unified-GC-Logging",
  "link" : "https://docs.azul.com/prime/Unified-GC-Logging#understanding-xloggc-format",
  "content" : "Understanding -Xlog:gc Format -Xlog:gc is a command-line option to perform unified GC logging using the Azul Platform Prime unified logging framework. Syntax of the -Xlog option  -Xlog:gc:<output>:<decorators>:<output_options> Where: gc is a tag to log GC related information. <output> specifies the target location for GC log messages. <decorators> are used to define information that log messages include. <output_options> are varied output options for logging additional information. Unified logging is performed at six different levels that correspond to the amount of details included. You can choose messages to log based on the preferred level. The levels are listed in increasing order of verbosity: off error warning info debug trace"
}, {
  "objectID" : "8150084e-2fe0-45cd-b899-b958c9c8bb3f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Unified Garbage Collection Logging Recommendations",
  "section" : "Enabling Unified GC Logging",
  "url" : "https://docs.azul.com/prime/Unified-GC-Logging",
  "link" : "https://docs.azul.com/prime/Unified-GC-Logging#enabling-unified-gc-logging",
  "content" : "Enabling Unified GC Logging -XX:[+/-]UseGCUnifiedLogging toggles unified GC logging. By default, unified GC logging is enabled in Azul Platform Prime. To collect a GC log with basic information into a file, use: -Xlog:gc:/path/to/file.log To enable more detailed logging, use -Xlog:gc*, such as: -Xlog:gc*:/path/to/file.log The following example logs messages tagged with the gc and safepoint tags using info level to gc.log. By default, a GC log is written to stdout.  -Xlog:gc,safepoint:gc.log To get more detailed information, use:  -Xlog:gc*,safepoint:gc.log A sample unified GC log entry  [2.308s][info][gc] [Safepoint max times: safepoint 21.697 ms, time to safepoint 14.273 ms] Where: [2.308s] is the time since the start of the Azul Platform Prime [info] is a default logging level [gc] is the name of the GC-specific tag [Safepoint max times: safepoint 21.697 ms, time to safepoint 14.273 ms] is a log message Azul Platform Prime supports the following three output types: stdout stderr text file To log GC messages to a file rather than to a console, use:  -Xlog:gc:file=<filename> Where file= is optional and can be omitted."
}, {
  "objectID" : "a09f5427-ebe4-4b2a-a02d-26398e754c58",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Unified Garbage Collection Logging Recommendations",
  "section" : "Configuring Rotation of Large Log Files",
  "url" : "https://docs.azul.com/prime/Unified-GC-Logging",
  "link" : "https://docs.azul.com/prime/Unified-GC-Logging#configuring-rotation-of-large-log-files",
  "content" : "Configuring Rotation of Large Log Files Log rotation is enabled by default since JDK 11. In addition to the current log file, 5 rotated logs will be created. All files are limited to 20 MBytes size each. Log file rotation based on file size and number of files is configured using the following command: Change the number of rotated files and increase each file size:  -Xlog:gc,safepoint:gc.log::filecount=1,filesize=100M Where: gc,safepoint tags to specify which information to log :: empty decorators section, using the default uptime,level,tags gc.log the output file filecount=1 specifies the number of files in the rotating set (current log + 1 archive file) filesize=100M size of each file in the log file rotation set Disable log rotation and use an unlimited filesize:  -Xlog:gc,safepoint:gc.log::filecount=0 Note: :: (double colon) is set here for the log line decorators to use the defaults. Example with non-default log line decorators, adding the local time and date to each log line and changed amount and size of rotated files:  -Xlog:gc,safepoint:gc.log:time,uptime,level,tags:filecount=1,filesize=100M On Prime, adding the local time and date is not needed as Prime writes time/date info into each file header and each log line is prepended by the seconds since JVM start. The external Azul Platform Prime GCLogAnalyzer tool automatically derives local time and date from that information."
}, {
  "objectID" : "8c699b31-0cc9-4de6-99ce-44165d5269fc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Unified Garbage Collection Logging Recommendations",
  "section" : "Concatenating Tags",
  "url" : "https://docs.azul.com/prime/Unified-GC-Logging",
  "link" : "https://docs.azul.com/prime/Unified-GC-Logging#concatenating-tags",
  "content" : "Concatenating Tags To include messages tagged with different tags in your GC log output, you can concatenate the tags with + as shown below. A sample -Xlog:gc command for concatenating tags  -Xlog:gc+phases:gc.log The resulting GC log contains all messages that feature the gc and phases tags:  [2.299s][info][gc] [SPS 0.000 0.000 0.001 0.178 0.005 0.000 0.008 0.087 0.142 0.420 NewGC_pause2 2.299078\n[2.299s][info][gc, phases] [New GC cycle 3-2: concurrent ref processing] Additionally, you can specify a logging level by adding =<level> after the set of tags as follows:  -Xlog:gc+task+stats=debug:gc.log This includes all messages with the gc, task, and stats tags at the debug logging level."
}, {
  "objectID" : "bc0e026a-e83b-4394-93f5-3833627544e9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Unified Garbage Collection Logging Recommendations",
  "section" : "Configuring Multiple Logs",
  "url" : "https://docs.azul.com/prime/Unified-GC-Logging",
  "link" : "https://docs.azul.com/prime/Unified-GC-Logging#configuring-multiple-logs",
  "content" : "Configuring Multiple Logs To simultaneously log messages from different subsystems to separate files, specify particular tags (or a combination of tags) and file names in the command line, for example:  -Xlog:gc:gc.log::filesize=1M -Xlog:gc+details:gcdetails.log::filesize=5M This creates a gc.log file with GC related messages and a gcdetails.log file with detailed GC related messages. A sample log entry with a gc tag  [5.010s][info][gc] [VM has exited gracefully] A sample log entry with gc and details tags  [5.009s][info][gc,details] [Unmapping heap memory, 0 millis]"
}, {
  "objectID" : "700dd961-2afb-4ac7-a484-5621bde6a9e3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Unified Garbage Collection Logging Recommendations",
  "section" : "Inspecting GC Performance",
  "url" : "https://docs.azul.com/prime/Unified-GC-Logging",
  "link" : "https://docs.azul.com/prime/Unified-GC-Logging#inspecting-gc-performance",
  "content" : "Inspecting GC Performance With the safepoint tag, you can compare the performance of GC implementations over different JVMs as it produces similar log lines on all JVMs for pauses affecting application performance. The highest performance regarding latency is achieved when pauses are as short as possible. A sample output on Azul Platform Prime  [105.482s][info][safepoint] Total time for which application threads were stopped: 0.0003760 seconds, Stopping threads took: 0.0000014 seconds The snippet above shows -Xlog:gc,safepoint:gc.log output on Azul Platform Prime with a pause of 0.376 ms at 105 seconds after application start. A sample output on OpenJDK  [55.350s][info][safepoint] Safepoint \"CollectForAllocation\", Time since last: 553327366 ns, Reaching safepoint: 188921 ns, At safepoint: 94660058 ns, Total: 94848979 ns The log entry above shows -Xlog:gc,safepoint:gc.log output on OpenJDK with a pause of 94.848 ms at 55 seconds after application start. To extract the application stopped time from the gc.log written by OpenJDK or Azul Platform Prime, you can use the following shell command:  grep safepoint.*Total gc.log | sed -E 's/.*\\[([0-9\\.]+)s\\].*Total[a-z ]*: ([0-9\\.]+ [a-z]+).*/\\1 \\2/' Example output, with the 1st column showing the JVM uptime in seconds, the 2nd column the application stopped time:  76.810 0.0001696 seconds\n78.695 0.0001152 seconds\n82.780 0.0002665 seconds\n84.587 0.0002310 seconds This list of timestamps and stopped times can be loaded into a spreadsheet tool to create a graph. Alternatively you can feed it through a statistical analysis, as most often the percentiles are more interesting regarding application performance SLAs. Here an example to collect the P50, P99, P99.9 and maximum and skipping the first 60 seconds of warmup time:  grep safepoint.*Total gc.log \\\n| sed -E 's/.*\\[([0-9\\.]+)s\\].*Total[a-z ]*: ([0-9\\.]+ [a-z]+).*/\\1 \\2/' \\\n| awk '$1 > 60 { print $1,$2,$3 }' \\\n| datamash -t' ' perc:50 2 perc:99 2 perc:99.9 2 max 2 Output example:  0.0002 0.0034 0.0035 0.0160 Interpretation: 50% of all GC pauses are below 0.2ms, 90% below 3.4ms, 99% below 3.5ms and all are below 16ms. For Azul Platform Prime GC logs, you can also use Azul Platform Prime GCLogAnalyzer which displays performance-related metrics as graphs."
}, {
  "objectID" : "33e645c3-4259-4fb2-8427-c40fce50a8d4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Unified Garbage Collection Logging Recommendations",
  "section" : "Mapping Old and Unified GC Logging Options",
  "url" : "https://docs.azul.com/prime/Unified-GC-Logging",
  "link" : "https://docs.azul.com/prime/Unified-GC-Logging#mapping-old-and-unified-gc-logging-options",
  "content" : "Mapping Old and Unified GC Logging Options The table below contains a list of old GC logging command-line options and their unified GC logging equivalents. Old GC Logging Option Unified GC Logging Configuration PrintGC -Xlog:gc PrintGCDetails -Xlog:gc* PrintGCTimeStamps -Xlog:gc PrintGCDateStamps -Xlog:gc:time,uptime,level,tags PrintGCApplicationConcurrentTime -Xlog:safepoint PrintGCApplicationStoppedTime -Xlog:safepoint"
}, {
  "objectID" : "869357df-d974-40fd-a357-9eee6b40ed8d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Java Flight Recorder",
  "section" : "Collect a JFR Recording with jcmd",
  "url" : "https://docs.azul.com/prime/Java-Flight-Recorder",
  "link" : "https://docs.azul.com/prime/Java-Flight-Recorder#collect-a-jfr-recording-with-jcmd",
  "content" : "Collect a JFR Recording with jcmd On the same host and userid as the java process under analysis, run the following command to start a recording:  jcmd JVMID JFR.start filename=rec.jfr Where JVMID is either the process ID or the classname assigned with the java process as shown when running jcmd without parameters. To stop a recording, use:  jcmd JVMID JFR.stop name=1 To start a recording with more detailed metrics, use the following instead:  jcmd JVMID JFR.start filename=rec.jfr settings=profile See the JFR options table below for a comprehensive list of options."
}, {
  "objectID" : "65e568c0-1366-47f7-8b7c-7884e163ce47",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Java Flight Recorder",
  "section" : "Collect a JFR Recording using Azul Mission Control",
  "url" : "https://docs.azul.com/prime/Java-Flight-Recorder",
  "link" : "https://docs.azul.com/prime/Java-Flight-Recorder#collect-a-jfr-recording-using-azul-mission-control",
  "content" : "Collect a JFR Recording using Azul Mission Control You can directly collect the JFR in Azul mission Control without using the command line or terminal. Collecting a JFR recording in Azul Mission Control requires establishing a connection between Azul Mission Control and the running JVM. Azul Mission Control allows either local or remote connections to the JVM. Remote connections require enabling the JVM’s JMX connector first. More details can be found in the Azul Mission Control documentation, Connecting to a Remote JVM. After the connection is established, you can start collecting the JFR using the steps outlined in the Azul Mission Control documentation, Starting a JFR Recording in Azul Mission Control."
}, {
  "objectID" : "745f2847-2ca1-40a1-b618-1f4cc5b75865",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Java Flight Recorder",
  "section" : "Collect a JFR Recording from JVM Startup",
  "url" : "https://docs.azul.com/prime/Java-Flight-Recorder",
  "link" : "https://docs.azul.com/prime/Java-Flight-Recorder#collect-a-jfr-recording-from-jvm-startup",
  "content" : "Collect a JFR Recording from JVM Startup For detailed performance analysis, you might prefer to start a JFR recording directly when launching a java process. To start recording from JVM startup, add -XX:StartFlightRecording to the application’s java command line. Use a comma \",\" for separation when using multiple options. For example:  java -XX:StartFlightRecording=disk=false,duration=30s,filename=myrecording.jfr TestRecorder See the JFR options table below for a comprehensive list of options."
}, {
  "objectID" : "da41f4f3-8a92-4d2c-84bc-599c6566f388",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Java Flight Recorder",
  "section" : "Analyzing a JFR Recording",
  "url" : "https://docs.azul.com/prime/Java-Flight-Recorder",
  "link" : "https://docs.azul.com/prime/Java-Flight-Recorder#analyzing-a-jfr-recording",
  "content" : "Analyzing a JFR Recording It is recommended to use Azul Mission Control to view JFR recordings. Alternatively, a Java Flight recording can be viewed using the jfr command-line option. Using Azul Mission Control for JFR Analysis In Azul Mission Control, You can either drag and drop a JFR recording from any host into Azul Mission Control, or directly collect the JFR using Azul Mission Control. Azul Mission Control has more uses than just recording and viewing JFR recordings, such as actively monitoring JVM resource usage through MBeans. More info about Azul Mission Control can be found in the Azul Mission Control Documentation. Using jfr Command Line Option for JFR Analysis If you prefer to analyze JFR recordings from the command line or terminal, you can use the jfr option. Example usage of the jfr command:  $JAVA_HOME/bin/jfr print rec.jfr > file.txt"
}, {
  "objectID" : "0c0f77b7-cf14-4d22-9b19-69cdd6b1128f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Java Flight Recorder",
  "section" : "Using Azul Mission Control for JFR Analysis",
  "url" : "https://docs.azul.com/prime/Java-Flight-Recorder",
  "link" : "https://docs.azul.com/prime/Java-Flight-Recorder#using-azul-mission-control-for-jfr-analysis",
  "content" : "Using Azul Mission Control for JFR Analysis In Azul Mission Control, You can either drag and drop a JFR recording from any host into Azul Mission Control, or directly collect the JFR using Azul Mission Control. Azul Mission Control has more uses than just recording and viewing JFR recordings, such as actively monitoring JVM resource usage through MBeans. More info about Azul Mission Control can be found in the Azul Mission Control Documentation."
}, {
  "objectID" : "e6332997-f439-4fdb-bdb1-96ce171dd374",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Java Flight Recorder",
  "section" : "Using jfr Command Line Option for JFR Analysis",
  "url" : "https://docs.azul.com/prime/Java-Flight-Recorder",
  "link" : "https://docs.azul.com/prime/Java-Flight-Recorder#using-jfr-command-line-option-for-jfr-analysis",
  "content" : "Using jfr Command Line Option for JFR Analysis If you prefer to analyze JFR recordings from the command line or terminal, you can use the jfr option. Example usage of the jfr command:  $JAVA_HOME/bin/jfr print rec.jfr > file.txt"
}, {
  "objectID" : "0bde8761-e6fe-4e3e-96aa-54d7544c63a6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Java Flight Recorder",
  "section" : "Using Zing Live Objects",
  "url" : "https://docs.azul.com/prime/Java-Flight-Recorder",
  "link" : "https://docs.azul.com/prime/Java-Flight-Recorder#using-zing-live-objects",
  "content" : "Using Zing Live Objects Zing Live Objects help determine the type of objects that are leaking while troubleshooting memory leaks. To identify and address a memory leak using information gathered in a Zing flight recording, complete the following steps. To create a Zing flight recording for inspection, use the following arguments:  java -XX:StartFlightRecording=disk=false,duration=<recording_time_duration>,settings=profile,filename=<recording_filename>.jfr The Flight Recorder has two configuration files: default and profile. To enable the Live Objects feature, you need to enable ZingOldObjectSample in the configuration file. By default, ZingOldObjectSample is enabled only in the profile configuration file in versions of Zing prior to 19.12.0.0. Starting with ZVM 19.12.0.0, ZingOldObjectEvent is disabled by default in all configurations. Note The JVMInformation, GarbageCollection, and OldGarbageCollection events must be enabled in your configuration file in order to analyze Live Objects in Azul Mission Control. The listed events are enabled in the default and profile configuration files by default. The profile settings may increase performance overhead due to collecting more data by the Java Flight Recorder. Customizing any settings file, either default or profile, may incur increased performance overhead. By default, the amount of live set events recorded by Java Flight Recorder is set to 99%. To decrease the recording file size, you can set the value of the JFRDescribeLiveSetPercentage command-line option to a number less than 99:  java -XX:JFRDescribeLiveSetPercentage=90 -XX:StartFlightRecording=disk=false,duration=<recording_time_duration>,settings=profile,filename=<recording_filename>.jfr When a recording is started, the output should look similar to the snippet below:  $ /home/username/<JDK_installation_path>/bin/java -XX:StartFlightRecording=disk=false,settings=profile,filename=myrecording.jfr\nStarted recording 1.\nUse jcmd 32747 JFR.dump name=1 to copy recording data to file. If just a filename without a path is specified (i.e., filename=<recording_filename>.jfr), the flight recording is saved to the directory from which you ran the command. To specify the path of your choice, use:  filename=<path>/<recording_filename>.jfr Once you create a Zing Flight recording, start the Azul Mission Control tool and open your Zing Flight recording from the File menu. If you do not have Azul Mission Control on your machine, download the installer file from Download Azul Mission Control and see Downloading and Starting Azul Mission Control for installation instructions if needed. In the Outline navigation tree, select Memory > Zing Live Objects to display the set of live objects captured in the recording. Study and compare GC cycles in the table with garbage collection identifiers (GC ID) for a live set suddenly increasing in size which indicates a memory leak. Live objects types marked during each selected GC cycle display in the table to the right when a specific GC cycle is chosen. Sort out live objects in a GC cycle by the total size to track the live object type with the biggest size and select a potentially leaking object type in the Referent column. All items that refer to a potentially leaking object type display in the Referrer column in the bottom table. The latter helps identify the source of the leaking object by reference count. (Optional) To retrieve more information, repeat step 5 if needed. When a potentially leaking class is identified on the Zing Live Objects sub-tab, use the Memory tab to get information about the allocation site. The Memory tab contains allocation sites, which lead to allocation in a new thread local allocation buffer (TLAB) or allocation outside a TLAB, sorted by type. Checking stack traces for a potentially leaking class can help to stop the real place in code where the leak occurs. In case the Memory tab does not help to find the leak, but the leak is still suspected, the Method Profiling tab might be used for this purpose. It is less convenient compared to the Memory tab, as it shows method calls of concrete types, not allocation sites. Usually, the Zing Live Objects sub-tab and the Memory tab are all you need to find a leak. Inspect the Stack Trace of your candidates to track where most memory allocation pressure comes from."
}, {
  "objectID" : "88dc2bfe-5269-4041-8947-96d50b0285fc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Java Flight Recorder",
  "section" : "Using TTSP JFR Events",
  "url" : "https://docs.azul.com/prime/Java-Flight-Recorder",
  "link" : "https://docs.azul.com/prime/Java-Flight-Recorder#using-ttsp-jfr-events",
  "content" : "Using TTSP JFR Events Azul Platform Prime 20.07.0.0 introduces support for profiling Time To Safepoint (TTSP) issues based on data about Zing events collected in a Java Flight Recording (JFR). To profile an existing TTSP issue using information gathered in a flight recording, complete the following steps: Create a flight recording for inspection using the following arguments:  java -XX:StartFlightRecording=name=<recording_name>,filename=<recording_filename>.jfr,settings=profile The Flight Recorder has default and profile configuration files. By default, the TimeToSafepointIssue event, which activates TTSP issue profiling, is enabled in all configurations. Use the following options to configure the event settings file for the Java Flight Recorder: Configuring Option Description Default -XX:[+/-]SafepointWaitTimeProfiler Generates asynchronous signals to log safepoint issues. true -XX:SafepointProfilerRealTimeSignalNumber=<number> Specifies the number of real time signals used for safepoint profiling. 4 -XX:SafepointProfilerThresholdMS=<number> Specifies the number of milliseconds to start safepoint profiling. 0 -XX:SafepointProfilerThreshold=<number> Specifies the threshold percentage value to start safepoint profiling. 2 -XX:SafepointProfilerInterval=<number> Specifies the interval percentage value for safepoint profiling. 10 -XX:SafepointProfilerMaxBuffers=<number> Specifies the number of safepoint profiler buffers to track. 100 -XX:SafepointWaitTimeProfilerLog=<log file> Specifies the log file to write safepoint profiling data to. stderr Note The profile settings may increase performance overhead due to collecting more data by the Java Flight Recorder. Customizing any settings file, either default or profile, may incur increased performance overhead. Once you create a Zing Flight recording, start the Azul Mission Control tool and open your Zing Flight recording from the File menu. If you do not have Azul Mission Control on your machine, download the installer file from Download Azul Mission Control and see the Installation Guidelines if needed. In the Outline navigation tree, choose Event Browser. In the Event Types Tree, select Java Virtual Machine > Runtime > Safepoint to display the set of Safepoint event types captured in the recording. In case of a TTSP issue, check the Event Browser table. The contents of the Stack Trace window may help you understand the cause of the issue."
}, {
  "objectID" : "efdb78a6-6349-4394-9788-16e52c9bc589",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using Java Flight Recorder",
  "section" : "JFR Options",
  "url" : "https://docs.azul.com/prime/Java-Flight-Recorder",
  "link" : "https://docs.azul.com/prime/Java-Flight-Recorder#jfr-options",
  "content" : "JFR Options Option Description Default settings=<path/to/settings/file> Specifies the configuration file to be used. In case of a custom configuration file, use the full path to the .jfc file. Otherwise, use one of the following presets: default - Collects less data than profile but is more appropriate for runs where the JFR recording is continuously running side by side with the application. profile - Collects more data than default but adds more performance overhead. default disk=<true, false> Controls whether to create a temporary recording file under the path set in the repository option. Temporary recording means that a file is written to the system temporary directory during the time of the recording and is deleted afterwards. This recording file is populated gradually, unlike the file generated using the filename option, which is only populated once the recording finishes. true repository=<path/to/temp/recording> Specifies the path for a temporary recording if the disk option is enabled. /tmp/ filename=<filename.jfr> Specifies the file name of the generated recording. You can add a path to the recording filename to change the file location. The recording file stays empty and only gets populated once the recording finishes. hotspot-pid-%p-%t.jfr duration=<time in specified unit> Specifies the recording length. Used time units: ns/ms/s/m/h/d. For example, 1800s or 30m. 0, unlimited delay=<time in specified unit> Specifies the amount of time that the recorder must wait before starting to record. Used time units: ns/ms/s/m/h/d. For example, 1800s or 30m. 0 dumponexit=<true, false> Controls whether to generate a recording file (dump a recording) if the JVM shuts down and the filename option has not been specified. The dumped recording filename is hotspot-pid-%p-%t.jfr false name=<identifier> Specifies a name identifier for the recording. This is useful when working from jcmd and operating multiple recordings running at the same time. 1,2,3,4,…"
}, {
  "objectID" : "e5b3399d-d1aa-4509-b8e9-4dcad32eaa9a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime MXBeans",
  "section" : "Introduction",
  "url" : "https://docs.azul.com/prime/MXBeans",
  "link" : "https://docs.azul.com/prime/MXBeans#introduction",
  "content" : "Introduction Azul Platform Prime MXBeans provide an interface to answer detailed questions about the behavior of your application and the Azul Zing Builds of OpenJDK (Zing). The MXBeans are designed for both monitoring performance and extracting the low level details to discover the root causes of problems. To use Azul Platform Prime MXBeans, you will need to use the command-line option:  -XX:+UseZingMXBeans In order to compile code that relies on the use of Azul Platform Prime MXBeans, you will need to add the command line option to Zing javac command:  -J-XX:+UseZingMXBeans You can compile code that relies on Azul Platform Prime MXBeans with a javac from another vendor. However, you will need to add the ZingJMM.jar file to the classpath. For example:  javac -cp $(ZINGMXBEANSJMMJARFULLPATH) $(JAVA_SOURCE_FILES) Where the ZingJMM.jar file is at the following location, but can be copied to any convenient location for building your application:  $JAVA_HOME/etc/extensions/mxbeans/agents/ZingJMM.jar Note that Azul Platform Prime MXBeans .jar file should not be added to the CLASSPATH variable. Otherwise, ZingMXBeans methods return an exception when called. A program that is able to access the MXBeans and graph the collected metrics, such as JConsole, will aid in your ability to quickly understand the interfaces and their use. The available MXBean operations provide control of both the data collection and the JVM behavior. See ZingGCReporter for details of using Azul Platform Prime MXBeans when running on Zing. Note that you might get an error message when permissions are insufficient to access the MBean server. If that’s the case, you will need to create or update a ~/.java.policy file and add the required permissions to it (see table below). When using a .java.policy file, ensure that you have an entry policy.url.2=file:${user.home}/.java.policy in the $JAVA_HOME/jre/lib/security/java.security file. Azul Platform Prime MXBeans provide the interfaces that enable you to get the answers you need to understand your application’s performance. Flexibility in the management of the values stored as peak values and those available in accumulators makes it easy to tailor the collection of the data for efficiency and effectiveness."
}, {
  "objectID" : "1c502434-690f-4b9e-878c-06b013633a18",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime MXBeans",
  "section" : "Azul Platform Prime MXBeans Interfaces",
  "url" : "https://docs.azul.com/prime/MXBeans",
  "link" : "https://docs.azul.com/prime/MXBeans#azul-platform-prime-mxbeans-interfaces",
  "content" : "Azul Platform Prime MXBeans Interfaces The Azul Platform Prime MXBeans in the table below are classified by their interface functionality. Interface Summary Interface Description GarbageCollectorMXBean GarbageCollectorMXBean is an interface used by the management system to access garbage collector properties and reset the values of associated counter and accumulator properties. MemoryManagerMXBean MemoryManagerMXBean is an interface used by the management system to access memory manager properties. MemoryMXBean MemoryMXBean is an interface used by the management system to access memory-related properties. The MemoryMXBean interface is the easiest to use to answer your questions about Java heap use and performance. MemoryPoolMXBean MemoryPoolMXBean is an interface used by the management system to access memory pool properties. PersistentProfileMXBean PersistentProfileMXBean provides access to the reporting capabilities of ReadyNow profile logs. TimeMXBean Time provides the elapsed time since the launch of Zing and the clock time in milliseconds at the launch of Zing."
}, {
  "objectID" : "7508a341-aea6-4677-b8a0-f2398c4f4c0f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime MXBeans",
  "section" : "Azul Platform Prime MXBeans Classes",
  "url" : "https://docs.azul.com/prime/MXBeans",
  "link" : "https://docs.azul.com/prime/MXBeans#azul-platform-prime-mxbeans-classes",
  "content" : "Azul Platform Prime MXBeans Classes The Azul Platform Prime MXBeans classes are listed in the table below. Class Summary Class Description GarbageCollectorNotificationInfo Garbage collector notification information. GCDetails A snapshot of the details of the JVM environment before and after a garbage collection. ManagementFactory The factory for retrieving all managed objects for the JVM as well as the JVM’s MBean server. ManagementPermission A SecurityPermission for use with the management system. MemoryNotificationInfo Memory notification information. MemoryPoolNotificationInfo Memory pool notification information. MemoryUsage A memory pool usage snapshot with sizes and the time the snapshot was taken. PauseDetails A PauseDetails object represents a pause event impacting all the threads in a running Java virtual machine and includes a timestamp specifying the time since the launch of the Java virtual machine process, the duration of the pause, and the reason for the pause (plus additional, optional, very detailed information)."
}, {
  "objectID" : "f0df4e43-60d1-4a97-9e63-370028f8ae55",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime MXBeans",
  "section" : "Azul Platform Prime MXBeans Enums",
  "url" : "https://docs.azul.com/prime/MXBeans",
  "link" : "https://docs.azul.com/prime/MXBeans#azul-platform-prime-mxbeans-enums",
  "content" : "Azul Platform Prime MXBeans Enums The Azul Platform Prime MXBeans enumerations are listed in the table below. Class Summary Class Description MemoryPoolSizeType For each memory pool: Characteristic of its size: FIXED or ELASTIC; otherwise: UNINITIALIZED. MemoryType For each memory pool: in the Zing process: JAVA_HEAP or NON_JAVA_HEAP; for system memory: SYSTEM. Refer to the Azul Platform Prime MXBeans javadoc for more information about the MXBeans APIs."
}, {
  "objectID" : "9a772d58-caa0-4ada-89b0-7fa5c7bc752e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime MXBeans",
  "section" : "Monitoring the Zing Using JMX and Azul Platform Prime MXBeans",
  "url" : "https://docs.azul.com/prime/MXBeans",
  "link" : "https://docs.azul.com/prime/MXBeans#monitoring-the-zing-using-jmx-and-azul-platform-prime-mxbeans",
  "content" : "Monitoring the Zing Using JMX and Azul Platform Prime MXBeans For those cases where you want to monitor Zing in addition to monitoring the application, use Azul Platform Prime MXBeans. Primarily, the following are of interest for Zing monitoring: Java heap memory use Garbage collector activity: concurrent GC time and application stopped time For accessing the values for each of these attributes over time, use any JMX-capable systems monitoring tool or $JAVA_HOME/bin/jconsole. In JConsole, use the entries in its MBeans tab to access the Azul Platform Prime MXBeans and get a quick overview. Java Heap Memory Use Monitoring memory use is helpful to detect memory leaks or to collect statistics about the general memory use by an application. The latter can be used to correctly size the Java heap to be consistent with the application’s memory requirements. MXBean: com.azul.zing → Memory → Attributes: PercentJavaHeapOccupiedAfterCollection: The percentage of the heap in use after each garbage collection. The returned value is equivalent to the application’s current minimum memory requirement. It can also be used to detect memory leaks because consistently increasing values after full garbage collections create an easily seen pattern. It’s useful to set a warning threshold that triggers an alarm if the value exceeds 70% over a 5-minute interval, (though this threshold value depends on the live set size in use by your application). The value includes the memory in use for the Permanent Generation, a memory pool in Zing’s Java heap. ApplicationObjectHeapUse and ApplicationObjectHeapUsableMemory: The process’s current memory use and the total size of the application object area of the Java heap. The returned heap use value represents the current memory use of the New (also called Young) Generation together with the current memory use of the Old Generation. This metric is a refinement of the PercentJavaHeapOccupiedAfterCollection that removes some of the guesswork about the contributions of the other memory pools in Zing’s Java heap to the application’s Java heap memory use. MXBean: java.lang → Memory → Attributes: HeapMemoryUsage (init, used, committed, max). Used for monitoring memory use by JVMs. For JVMs other than Zing, setting notification * thresholds can help monitor the JVM and application’s use of system resources. When using Zing, the Java heap use between collections varies between a minimum of the live set size and 100% (or more). In other words, Zing attempts to use a much of the Java heap as possible. Doing so extends the time between collections and lowers the Zing garbage collector’s overhead. Using a maximum use notification threshold value when running an application with Zing that is less than 100% will result in spurious notifications. Garbage Collector Activity Monitoring garbage collector activity is useful for capacity planning. For instance, the activity level can be used to determine the CPU resources required to process varying application object allocation rates. Because that object allocation rate is proportional to the amount of work done by the application, the garbage collector activity can be used to determine maximum application workloads. Naturally, the Java heap size is related to garbage collector activity. Increasing the Java heap size can reduce the impact of sudden high garbage collector activity and the underlying high workloads. The latter are also seen as allocation rate spikes. MXBean: com.azul.zing → GarbageCollector → GPGC New → Attributes: PercentageOfTimeCollectorIsRunning: The ratio of the \"garbage collection time\" to the \"interval between end times of two consecutive collections.” The value is based on the most recent garbage collection and is not cumulative. The percentages are calculated separately for the New Generation collector and the Old Generation collector. A warning threshold of 30% over 5 minutes should be set to warn about over-use of available CPU resources by the garbage collector. This is most important metric for monitoring Zing’s garbage collector behavior because this metric is the first to increase in situations when the system’s capacity is nearing its limits. MXBean: com.azul.zing → GarbageCollector → GPGC Old → Attributes: PercentageOfTimeCollectorIsRunning: The same recommendations as for the New Generation collector, but for the Old Generation collector. Use the same threshold to monitor. The time for processing Permanent Generation objects is included in this metric. If you need more fine-granular monitoring, the following additional attributes provide more precise information about the garbage collectors’ behavior: CollectorCumulativePauseTimeSec: Cumulative garbage collector pause time. The typical length of time for each of these Zing pauses is in the range of single digit milliseconds or less. CollectorCumulativeRunningTimeSec: Cumulative wall clock time Zing’s garbage collector has been running in parallel with the application’s threads. During this time, more CPU resources are used because the garbage collector is running its own set of threads. The number of running garbage collector threads (for each of the New Generation collector and Old Generation collector) is based on the number of CPU threads (hyper-threads or just physical cores if the machine is configured with hyper-threading off). CollectionCount: Cumulative number of garbage collections since Zing start. MXBean: com.azul.zing → Time → Attributes: ElapsedTimeSinceJVMStartSec: Seconds since Zing start. Useful for time-base calculations with CollectorCumulativePauseTimeSec and CollectorCumulativeRunningTimeSec. Code Cache Memory Use MXBean: com.azul.zing > MemoryPool > CodeCache → Attributes: CurrentUse: Use of the memory pool where JIT-compiled code is stored. Useful to decide whether increasing the size of the code cache using -XX:ReservedCodeCacheSize=N (the default value is 10% of Xmx) is needed. CurrentSize: Value returned is the maximum size of the code cache. The value can be set by using -XX:ReservedCodeCacheSize=N (the default value is 10% of Xmx). Configuration To activate the JMX connector on Zing and enable the Azul Platform Prime specific MXBeans, add the following command line parameters and configure them according to your system’s requirements (port and security options):  -XX:+UseZingMXBeans\n-Dcom.sun.management.jmxremote\n-Dcom.sun.management.jmxremote.port=9001\n-Dcom.sun.management.jmxremote.local.only=false\n-Dcom.sun.management.jmxremote.authenticate=true\n-Dcom.sun.management.jmxremote.password.file=passwordFile\n-Dcom.sun.management.jmxremote.ssl=false The passwordFile contains two lines with username and associated password for read only access to attributes (monitorRole) and read/write access to methods and user functions (controlRole). Only change the passwords, not the usernames! Example:  monitorRole password1 controlRole password2 File permission to the passwordFile needs to be limited:  chmod og-rwx passwordFile To avoid connection failures over the JMX protocol on systems with multiple network interfaces or to connect to a container system, it is often needed to specify the RMI hostname and RMI port:  -Djava.rmi.server.hostname=HOSTNAME\n-Dcom.sun.management.jmxremote.rmi.port=9001 Where: for the RMI port, the same number as for the JMX port can be used for HOSTNAME, enter the IP address or hostname you would later use on the client side to connect to To improve security, please enable com.sun.management.jmxremote.ssl=true."
}, {
  "objectID" : "8c96d1a2-b4b8-4ec4-82ec-7d6d1c4da81d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT",
  "content" : "Native Memory Tracking (NMT) allows you to investigate internal memory usage of Java applications. Use NMT to monitor and diagnose memory-related issues within the JVM as it helps you to understand how the JVM allocates memory for various internal structures and other areas."
}, {
  "objectID" : "b1cf5f92-5bb4-4b3c-9e9f-60b6cdaf8943",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Enable Native Memory Tracking",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#enable-native-memory-tracking",
  "content" : "Enable Native Memory Tracking Command-line Options To enable Native Memory Tracking, use the command-line option -XX:NativeMemoryTracking with summary or detail:  java -XX:NativeMemoryTracking=summary To print out the statistics to stdout at the end of the run, add -XX:+PrintNMTStatistics:  java -XX:+PrintNMTStatistics -XX:NativeMemoryTracking=summary Extended Mode By enabling NMT, most of the allocations inside libjvm.so are covered. As of version 23.02.0.0 of Azul Prime Builds of OpenJDK, extended NMT is available. Compared to OpenJDK that only provides HotSpot allocation coverage (inside libjvm.so), Prime provides full coverage of the malloc allocations in the process. We strongly encourage using this extended mode where possible. The performance impact is negligible, especially in summary mode. NMT has no impact on the Falcon compile time. Note As of Azul Platform Prime 23.06.0.0, the libnmt_hooks.so library is linked by default and so it is no longer necessary to use LD_PRELOAD to enable extended NMT, and this section can be skipped. To enable extended NMT in Azul Platform Prime versions 23.02.0.0 through 23.05.0.0, export LD_PRELOAD in addition to the regular NMT flags as shown above.  export LD_PRELOAD=$JAVA_HOME/etc/zing/lib/libnmt_hooks.so Note The output formats and command line flags are identical for normal and extended NMT. When the LD_PRELOAD variable is exported, all Java processes run with extended NMT. As jcmd is also a Java process, jcmd gives the following output:  Detected libnmt_hooks.so in LD_PRELOAD. Adding implicit flag\n  -XX:NativeMemoryTracking=summary for consistency. To avoid\n  this warning enable NMT explicitly or remove libnmt_hooks.so\n  from LD_PRELOAD. This means jcmd itself is running with NMT-summary and this can be misleading. Note Only applications should be launched with LD_PRELOAD, not jcmd. Use the following command to remove the exported 'LD_PRELOAD`:  unset LD_PRELOAD"
}, {
  "objectID" : "2cedbe3e-e8b5-45da-8319-ca0b7bce1e86",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Command-line Options",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#command-line-options",
  "content" : "Command-line Options To enable Native Memory Tracking, use the command-line option -XX:NativeMemoryTracking with summary or detail:  java -XX:NativeMemoryTracking=summary To print out the statistics to stdout at the end of the run, add -XX:+PrintNMTStatistics:  java -XX:+PrintNMTStatistics -XX:NativeMemoryTracking=summary"
}, {
  "objectID" : "a56e4d04-5cdb-42a1-9b45-759d2d4ca8d0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Extended Mode",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#extended-mode",
  "content" : "Extended Mode By enabling NMT, most of the allocations inside libjvm.so are covered. As of version 23.02.0.0 of Azul Prime Builds of OpenJDK, extended NMT is available. Compared to OpenJDK that only provides HotSpot allocation coverage (inside libjvm.so), Prime provides full coverage of the malloc allocations in the process. We strongly encourage using this extended mode where possible. The performance impact is negligible, especially in summary mode. NMT has no impact on the Falcon compile time. Note As of Azul Platform Prime 23.06.0.0, the libnmt_hooks.so library is linked by default and so it is no longer necessary to use LD_PRELOAD to enable extended NMT, and this section can be skipped. To enable extended NMT in Azul Platform Prime versions 23.02.0.0 through 23.05.0.0, export LD_PRELOAD in addition to the regular NMT flags as shown above.  export LD_PRELOAD=$JAVA_HOME/etc/zing/lib/libnmt_hooks.so Note The output formats and command line flags are identical for normal and extended NMT. When the LD_PRELOAD variable is exported, all Java processes run with extended NMT. As jcmd is also a Java process, jcmd gives the following output:  Detected libnmt_hooks.so in LD_PRELOAD. Adding implicit flag\n  -XX:NativeMemoryTracking=summary for consistency. To avoid\n  this warning enable NMT explicitly or remove libnmt_hooks.so\n  from LD_PRELOAD. This means jcmd itself is running with NMT-summary and this can be misleading. Note Only applications should be launched with LD_PRELOAD, not jcmd. Use the following command to remove the exported 'LD_PRELOAD`:  unset LD_PRELOAD"
}, {
  "objectID" : "ea75caa6-6eab-493f-bba4-2c42f7774fb4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Native Memory Tracking Pre-Header",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#native-memory-tracking-pre-header",
  "content" : "Native Memory Tracking Pre-Header For tracking purposes, NMT puts 16 extra bytes before and 2 after every allocation. This is used for metadata and buffer overrun/underrun checks.  +-----------+---------....---------+--------+\n|  header   |         user         |   can  |\n|           |      allocation      |   ary  |\n+-----------+---------....---------+--------+\n| 16 bytes  |       user size      | 2 byte |"
}, {
  "objectID" : "520a215b-ed1d-49fb-a097-5c3606c0da88",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Results of Native Memory Tracking",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#results-of-native-memory-tracking",
  "content" : "Results of Native Memory Tracking The NMT summary report appears in several places: In stdout of jcmd. In stdout of the jvm, once at the end of the run in case if you passed -XX:+PrintNMTStatistics. Periodically written in gclog if -Xlog:gc is used to start the application. For more information, check Unified Garbage Collection Logging Recommendations. An example of such gclog data is available in Analyzing in GCLogAnalyzer. Summary Information Provided by Native Memory Tracking The summary level of tracking provides basic information about the following native memory allocations: Category Amount of the native memory allocated for Java Heap Java Heap The committed portion displays the Xmx value. Class Application classes Thread Application threads Code Code being executed GC Garbage Collector Compiler Compiler operations Compiler Runtime Code profiles Internal Internal allocations Other Unsafe API without LD_PRELOAD It also contains all allocations from the process intercepted by the LD_PRELOADE library (except Falcon allocations going to Compiler). Symbol Table of symbols Native Memory Tracking Native Memory Tracking overhead Arena Chunk Arena-managed chunk Tracing Profilers (like TickProfiler and JFR) Logging Unified and other logging Arguments Processing arguments Module Managing Java modules Synchronization Synchronization primitives inside VM (like semaphores, monitors, mutexes) Unknown Unspecified allocations Note If a given category has no allocations during the run, it is not listed in the report. Example Summary Report Note When the LD_PRELOAD variable is exported, more info is provided in the Compiler and Other category, resulting in bigger numbers.  Native Memory Tracking:\n\nTotal: reserved=7635375131517, committed=2925190013\n    malloc: 699526013 #11264\n    mmap:  reserved=7634675605504, committed=2225664000\n\n-         Java Heap (reserved=2199023255552, committed=2147483648)\n              (mmap: reserved=2199023255552, committed=2147483648)\n\n-           Class (reserved=320262745, committed=320262745)\n              (classes #458)\n              ( instance classes #393, array classes #65)\n              (malloc=320262745 #27)\n\n-          Thread (reserved=207835992, committed=4649816)\n              (thread #98)\n              (stack: reserved=207622144, committed=4435968)\n              (malloc=44600 #497)\n              (arena=169248 #172)\n\n-           Code (reserved=51113238, committed=51113238)\n              (malloc=4975894 #1178)\n              (mmap: reserved=46137344, committed=46137344)\n\n-            GC (reserved=5418130183790, committed=29210222)\n              (malloc=28939886 #582)\n              (mmap: reserved=5418101243904, committed=270336)\n\n-                  Compiler (reserved=14765901, committed=14765901)\n                            (malloc=14477349 #395)\n                            (arena=288552 #27)\n\n-          Compiler Runtime (reserved=89196, committed=89196)\n                            (malloc=89196 #72)\n\n-                  Internal (reserved=17305170130, committed=35160274)\n                            (malloc=7823570 #5286)\n                            (mmap: reserved=17297346560, committed=27336704)\n\n-                     Other (reserved=378983, committed=378983)\n                            (malloc=378983 #1337)\n\n-                    Symbol (reserved=320939304, committed=320939304)\n                            (malloc=320939304 #45)\n\n-    Native Memory Tracking (reserved=202216, committed=202216)\n                            (malloc=21976 #171)\n                            (tracking overhead=180240)\n\n-               Arena Chunk (reserved=794136, committed=794136)\n                            (malloc=794136)\n\n-                   Tracing (reserved=2408, committed=2408)\n                            (malloc=2408 #7)\n\n-                   Logging (reserved=6788, committed=6788)\n                            (malloc=6788 #214)\n\n-                 Arguments (reserved=6930, committed=6930)\n                            (malloc=6930 #125)\n\n-                    Module (reserved=25424, committed=25424)\n                            (malloc=25424 #3)\n\n-           Synchronization (reserved=98784, committed=98784)\n                            (malloc=98784 #1108) When the LD_PRELOAD variable is not exported, this report starts with the following message:  Info: To make this report more precise add\n  \"export LD_PRELOAD=$JAVA_HOME/etc/zing/lib/libnmt_hooks.so\"\n  to the environment of Azul Prime JVM. Detail Information Provided by Native Memory Tracking The detail level of tracking provides the same output as the summary level, but adds a per-call site report with stack traces and info about mmaps (reserved regions and committed memory inside them). Example Detail Report  Native Memory Tracking:\n\nTotal: reserved=7635374862574, committed=2924921070\n       malloc: 699257070 #11168\n       mmap:   reserved=7634675605504, committed=2225664000\n\n-                 Java Heap (reserved=2199023255552, committed=2147483648)\n                            (mmap: reserved=2199023255552, committed=2147483648)\n\n# ... other categories identical to summary report\n\nVirtual memory map:\n\n[0x0000691d00000000 - 0x00006e0000000000] reserved 5373004087296 for GC from\n[0x00007ff717f4b053] GPGC_Heap::setup_memory_for_java_heap_structures()+0x53\n[0x00007ff717f4f63f] GPGC_Heap::initialize()+0x7bf\n[0x00007ff7186dd57a] Universe::initialize_heap()+0x3a\n[0x00007ff7186dd702] universe_init()+0x102\n\n[0x00007ff49717b000 - 0x00007ff49737b000] reserved 2097152 for Thread Stack from\n[0x00007ff718a712e5] JavaThread::run()+0x25\n[0x00007ff718c69300] _start_thread+0x100\n[0x00007ff71b236cd6] preRun+0x4f\n[0x00007ff71ac36ea5] start_thread+0xc5\n\n\t[0x00007ff49717b000 - 0x00007ff497194000] committed 102400 from\n            [0x00007ff718c7d01c] os::create_stack_guard_pages(char*, unsigned long)+0x5c\n            [0x00007ff718a51991] Thread::create_stack_guard_pages()+0x91\n            [0x00007ff718a712fe] JavaThread::run()+0x3e\n            [0x00007ff718c69300] _start_thread+0x100\n\n\t[0x00007ff497379000 - 0x00007ff49737b000] committed 8192\n\n[0x00007ff717dc4e86] debuginfo::builder::ScopeBuilder::make_compressed(CommonAsm*, GrowableArray<long>*)+0x3c6\n[0x00007ff717dc9f5a] debuginfo::builder::DebugMapBuilder::build_debugMap(CommonAsm*)+0xf5a\n[0x00007ff717dca3c6] CommonAsm::bake_into_codeOop(methodHandle, int, CodeProfile const*, bool, osr_bci_list&&, Thread*)+0x206\n[0x00007ff718248927] ciEnv::register_method(ciMethod*, MacroAssembler*, CodeProfile**, ByteSize, Label&, bool, GrowableArray<int> const&)+0x267\n                             (malloc=10440 type=Code #145)\n\n[0x00007ff718b6d9b0] BasicHashtable<(MEMFLAGS)1>::new_entry(unsigned int)+0x70\n[0x00007ff718b6e111] Hashtable<klassOopDesc*, (MEMFLAGS)1>::new_entry(unsigned int, klassOopDesc*)+0x11\n[0x00007ff7182fde23] Dictionary::new_entry(unsigned int, klassOopDesc*, oopDesc*)+0x23\n[0x00007ff7182fe2ea] Dictionary::add_klass(symbolHandle, Handle, KlassHandle)+0x12a\n                             (malloc=44000 type=Class #1)\n\n[0x00007ff717f24551] GPGC_GCManagerNewStrong::initialize()+0x351\n[0x00007ff717f48c05] GPGC_Heap::post_initialize()+0x45\n[0x00007ff7186e1d15] universe_post_init()+0x1c15\n[0x00007ff7189a2a15] init_globals()+0xd5\n                             (malloc=6912 type=GC #18)\n... Analyzing in GCLogAnalyzer Use the GCLogAnalyzer tool to visualize and plot the NMT results for both normal and extended mode."
}, {
  "objectID" : "d3ac17ce-4ae7-41ae-946f-608c9e14b414",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Summary Information Provided by Native Memory Tracking",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#nmt-summary",
  "content" : "Summary Information Provided by Native Memory Tracking The summary level of tracking provides basic information about the following native memory allocations: Category Amount of the native memory allocated for Java Heap Java Heap The committed portion displays the Xmx value. Class Application classes Thread Application threads Code Code being executed GC Garbage Collector Compiler Compiler operations Compiler Runtime Code profiles Internal Internal allocations Other Unsafe API without LD_PRELOAD It also contains all allocations from the process intercepted by the LD_PRELOADE library (except Falcon allocations going to Compiler). Symbol Table of symbols Native Memory Tracking Native Memory Tracking overhead Arena Chunk Arena-managed chunk Tracing Profilers (like TickProfiler and JFR) Logging Unified and other logging Arguments Processing arguments Module Managing Java modules Synchronization Synchronization primitives inside VM (like semaphores, monitors, mutexes) Unknown Unspecified allocations Note If a given category has no allocations during the run, it is not listed in the report. Example Summary Report Note When the LD_PRELOAD variable is exported, more info is provided in the Compiler and Other category, resulting in bigger numbers.  Native Memory Tracking:\n\nTotal: reserved=7635375131517, committed=2925190013\n    malloc: 699526013 #11264\n    mmap:  reserved=7634675605504, committed=2225664000\n\n-         Java Heap (reserved=2199023255552, committed=2147483648)\n              (mmap: reserved=2199023255552, committed=2147483648)\n\n-           Class (reserved=320262745, committed=320262745)\n              (classes #458)\n              ( instance classes #393, array classes #65)\n              (malloc=320262745 #27)\n\n-          Thread (reserved=207835992, committed=4649816)\n              (thread #98)\n              (stack: reserved=207622144, committed=4435968)\n              (malloc=44600 #497)\n              (arena=169248 #172)\n\n-           Code (reserved=51113238, committed=51113238)\n              (malloc=4975894 #1178)\n              (mmap: reserved=46137344, committed=46137344)\n\n-            GC (reserved=5418130183790, committed=29210222)\n              (malloc=28939886 #582)\n              (mmap: reserved=5418101243904, committed=270336)\n\n-                  Compiler (reserved=14765901, committed=14765901)\n                            (malloc=14477349 #395)\n                            (arena=288552 #27)\n\n-          Compiler Runtime (reserved=89196, committed=89196)\n                            (malloc=89196 #72)\n\n-                  Internal (reserved=17305170130, committed=35160274)\n                            (malloc=7823570 #5286)\n                            (mmap: reserved=17297346560, committed=27336704)\n\n-                     Other (reserved=378983, committed=378983)\n                            (malloc=378983 #1337)\n\n-                    Symbol (reserved=320939304, committed=320939304)\n                            (malloc=320939304 #45)\n\n-    Native Memory Tracking (reserved=202216, committed=202216)\n                            (malloc=21976 #171)\n                            (tracking overhead=180240)\n\n-               Arena Chunk (reserved=794136, committed=794136)\n                            (malloc=794136)\n\n-                   Tracing (reserved=2408, committed=2408)\n                            (malloc=2408 #7)\n\n-                   Logging (reserved=6788, committed=6788)\n                            (malloc=6788 #214)\n\n-                 Arguments (reserved=6930, committed=6930)\n                            (malloc=6930 #125)\n\n-                    Module (reserved=25424, committed=25424)\n                            (malloc=25424 #3)\n\n-           Synchronization (reserved=98784, committed=98784)\n                            (malloc=98784 #1108) When the LD_PRELOAD variable is not exported, this report starts with the following message:  Info: To make this report more precise add\n  \"export LD_PRELOAD=$JAVA_HOME/etc/zing/lib/libnmt_hooks.so\"\n  to the environment of Azul Prime JVM."
}, {
  "objectID" : "72790967-5296-4aae-9411-14e003ef7b9e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Example Summary Report",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#example-summary-report",
  "content" : "Example Summary Report Note When the LD_PRELOAD variable is exported, more info is provided in the Compiler and Other category, resulting in bigger numbers.  Native Memory Tracking:\n\nTotal: reserved=7635375131517, committed=2925190013\n    malloc: 699526013 #11264\n    mmap:  reserved=7634675605504, committed=2225664000\n\n-         Java Heap (reserved=2199023255552, committed=2147483648)\n              (mmap: reserved=2199023255552, committed=2147483648)\n\n-           Class (reserved=320262745, committed=320262745)\n              (classes #458)\n              ( instance classes #393, array classes #65)\n              (malloc=320262745 #27)\n\n-          Thread (reserved=207835992, committed=4649816)\n              (thread #98)\n              (stack: reserved=207622144, committed=4435968)\n              (malloc=44600 #497)\n              (arena=169248 #172)\n\n-           Code (reserved=51113238, committed=51113238)\n              (malloc=4975894 #1178)\n              (mmap: reserved=46137344, committed=46137344)\n\n-            GC (reserved=5418130183790, committed=29210222)\n              (malloc=28939886 #582)\n              (mmap: reserved=5418101243904, committed=270336)\n\n-                  Compiler (reserved=14765901, committed=14765901)\n                            (malloc=14477349 #395)\n                            (arena=288552 #27)\n\n-          Compiler Runtime (reserved=89196, committed=89196)\n                            (malloc=89196 #72)\n\n-                  Internal (reserved=17305170130, committed=35160274)\n                            (malloc=7823570 #5286)\n                            (mmap: reserved=17297346560, committed=27336704)\n\n-                     Other (reserved=378983, committed=378983)\n                            (malloc=378983 #1337)\n\n-                    Symbol (reserved=320939304, committed=320939304)\n                            (malloc=320939304 #45)\n\n-    Native Memory Tracking (reserved=202216, committed=202216)\n                            (malloc=21976 #171)\n                            (tracking overhead=180240)\n\n-               Arena Chunk (reserved=794136, committed=794136)\n                            (malloc=794136)\n\n-                   Tracing (reserved=2408, committed=2408)\n                            (malloc=2408 #7)\n\n-                   Logging (reserved=6788, committed=6788)\n                            (malloc=6788 #214)\n\n-                 Arguments (reserved=6930, committed=6930)\n                            (malloc=6930 #125)\n\n-                    Module (reserved=25424, committed=25424)\n                            (malloc=25424 #3)\n\n-           Synchronization (reserved=98784, committed=98784)\n                            (malloc=98784 #1108) When the LD_PRELOAD variable is not exported, this report starts with the following message:  Info: To make this report more precise add\n  \"export LD_PRELOAD=$JAVA_HOME/etc/zing/lib/libnmt_hooks.so\"\n  to the environment of Azul Prime JVM."
}, {
  "objectID" : "3c305828-3d95-4114-a9ec-49ffb9c46b7b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Detail Information Provided by Native Memory Tracking",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#nmt-detail",
  "content" : "Detail Information Provided by Native Memory Tracking The detail level of tracking provides the same output as the summary level, but adds a per-call site report with stack traces and info about mmaps (reserved regions and committed memory inside them). Example Detail Report  Native Memory Tracking:\n\nTotal: reserved=7635374862574, committed=2924921070\n       malloc: 699257070 #11168\n       mmap:   reserved=7634675605504, committed=2225664000\n\n-                 Java Heap (reserved=2199023255552, committed=2147483648)\n                            (mmap: reserved=2199023255552, committed=2147483648)\n\n# ... other categories identical to summary report\n\nVirtual memory map:\n\n[0x0000691d00000000 - 0x00006e0000000000] reserved 5373004087296 for GC from\n[0x00007ff717f4b053] GPGC_Heap::setup_memory_for_java_heap_structures()+0x53\n[0x00007ff717f4f63f] GPGC_Heap::initialize()+0x7bf\n[0x00007ff7186dd57a] Universe::initialize_heap()+0x3a\n[0x00007ff7186dd702] universe_init()+0x102\n\n[0x00007ff49717b000 - 0x00007ff49737b000] reserved 2097152 for Thread Stack from\n[0x00007ff718a712e5] JavaThread::run()+0x25\n[0x00007ff718c69300] _start_thread+0x100\n[0x00007ff71b236cd6] preRun+0x4f\n[0x00007ff71ac36ea5] start_thread+0xc5\n\n\t[0x00007ff49717b000 - 0x00007ff497194000] committed 102400 from\n            [0x00007ff718c7d01c] os::create_stack_guard_pages(char*, unsigned long)+0x5c\n            [0x00007ff718a51991] Thread::create_stack_guard_pages()+0x91\n            [0x00007ff718a712fe] JavaThread::run()+0x3e\n            [0x00007ff718c69300] _start_thread+0x100\n\n\t[0x00007ff497379000 - 0x00007ff49737b000] committed 8192\n\n[0x00007ff717dc4e86] debuginfo::builder::ScopeBuilder::make_compressed(CommonAsm*, GrowableArray<long>*)+0x3c6\n[0x00007ff717dc9f5a] debuginfo::builder::DebugMapBuilder::build_debugMap(CommonAsm*)+0xf5a\n[0x00007ff717dca3c6] CommonAsm::bake_into_codeOop(methodHandle, int, CodeProfile const*, bool, osr_bci_list&&, Thread*)+0x206\n[0x00007ff718248927] ciEnv::register_method(ciMethod*, MacroAssembler*, CodeProfile**, ByteSize, Label&, bool, GrowableArray<int> const&)+0x267\n                             (malloc=10440 type=Code #145)\n\n[0x00007ff718b6d9b0] BasicHashtable<(MEMFLAGS)1>::new_entry(unsigned int)+0x70\n[0x00007ff718b6e111] Hashtable<klassOopDesc*, (MEMFLAGS)1>::new_entry(unsigned int, klassOopDesc*)+0x11\n[0x00007ff7182fde23] Dictionary::new_entry(unsigned int, klassOopDesc*, oopDesc*)+0x23\n[0x00007ff7182fe2ea] Dictionary::add_klass(symbolHandle, Handle, KlassHandle)+0x12a\n                             (malloc=44000 type=Class #1)\n\n[0x00007ff717f24551] GPGC_GCManagerNewStrong::initialize()+0x351\n[0x00007ff717f48c05] GPGC_Heap::post_initialize()+0x45\n[0x00007ff7186e1d15] universe_post_init()+0x1c15\n[0x00007ff7189a2a15] init_globals()+0xd5\n                             (malloc=6912 type=GC #18)\n..."
}, {
  "objectID" : "f24e45b8-a706-437f-a1f4-d97992b9a1ee",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Example Detail Report",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#example-detail-report",
  "content" : "Example Detail Report  Native Memory Tracking:\n\nTotal: reserved=7635374862574, committed=2924921070\n       malloc: 699257070 #11168\n       mmap:   reserved=7634675605504, committed=2225664000\n\n-                 Java Heap (reserved=2199023255552, committed=2147483648)\n                            (mmap: reserved=2199023255552, committed=2147483648)\n\n# ... other categories identical to summary report\n\nVirtual memory map:\n\n[0x0000691d00000000 - 0x00006e0000000000] reserved 5373004087296 for GC from\n[0x00007ff717f4b053] GPGC_Heap::setup_memory_for_java_heap_structures()+0x53\n[0x00007ff717f4f63f] GPGC_Heap::initialize()+0x7bf\n[0x00007ff7186dd57a] Universe::initialize_heap()+0x3a\n[0x00007ff7186dd702] universe_init()+0x102\n\n[0x00007ff49717b000 - 0x00007ff49737b000] reserved 2097152 for Thread Stack from\n[0x00007ff718a712e5] JavaThread::run()+0x25\n[0x00007ff718c69300] _start_thread+0x100\n[0x00007ff71b236cd6] preRun+0x4f\n[0x00007ff71ac36ea5] start_thread+0xc5\n\n\t[0x00007ff49717b000 - 0x00007ff497194000] committed 102400 from\n            [0x00007ff718c7d01c] os::create_stack_guard_pages(char*, unsigned long)+0x5c\n            [0x00007ff718a51991] Thread::create_stack_guard_pages()+0x91\n            [0x00007ff718a712fe] JavaThread::run()+0x3e\n            [0x00007ff718c69300] _start_thread+0x100\n\n\t[0x00007ff497379000 - 0x00007ff49737b000] committed 8192\n\n[0x00007ff717dc4e86] debuginfo::builder::ScopeBuilder::make_compressed(CommonAsm*, GrowableArray<long>*)+0x3c6\n[0x00007ff717dc9f5a] debuginfo::builder::DebugMapBuilder::build_debugMap(CommonAsm*)+0xf5a\n[0x00007ff717dca3c6] CommonAsm::bake_into_codeOop(methodHandle, int, CodeProfile const*, bool, osr_bci_list&&, Thread*)+0x206\n[0x00007ff718248927] ciEnv::register_method(ciMethod*, MacroAssembler*, CodeProfile**, ByteSize, Label&, bool, GrowableArray<int> const&)+0x267\n                             (malloc=10440 type=Code #145)\n\n[0x00007ff718b6d9b0] BasicHashtable<(MEMFLAGS)1>::new_entry(unsigned int)+0x70\n[0x00007ff718b6e111] Hashtable<klassOopDesc*, (MEMFLAGS)1>::new_entry(unsigned int, klassOopDesc*)+0x11\n[0x00007ff7182fde23] Dictionary::new_entry(unsigned int, klassOopDesc*, oopDesc*)+0x23\n[0x00007ff7182fe2ea] Dictionary::add_klass(symbolHandle, Handle, KlassHandle)+0x12a\n                             (malloc=44000 type=Class #1)\n\n[0x00007ff717f24551] GPGC_GCManagerNewStrong::initialize()+0x351\n[0x00007ff717f48c05] GPGC_Heap::post_initialize()+0x45\n[0x00007ff7186e1d15] universe_post_init()+0x1c15\n[0x00007ff7189a2a15] init_globals()+0xd5\n                             (malloc=6912 type=GC #18)\n..."
}, {
  "objectID" : "1ae694d7-9ad6-48c0-91c9-186be73dbc2f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Memory Tracking",
  "section" : "Analyzing in GCLogAnalyzer",
  "url" : "https://docs.azul.com/prime/NMT",
  "link" : "https://docs.azul.com/prime/NMT#analyzing-in-gcloganalyzer",
  "content" : "Analyzing in GCLogAnalyzer Use the GCLogAnalyzer tool to visualize and plot the NMT results for both normal and extended mode."
}, {
  "objectID" : "979ce00d-c64b-4e5b-8847-75f8fac27e62",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Monitoring Thread CPU Time Use",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Thread-Opt",
  "link" : "https://docs.azul.com/prime/Thread-Opt",
  "content" : "With the Azul Zing Builds of OpenJDK (Zing) ThreadOpt functionality you can collect an application thread CPU time use data in one of two ways: Single CPU Time Use Snapshot Analysis of each of the process’s application thread’s CPU time use is done at a specific time followed immediately by setting the PU thread affinities of each application thread. The analysis can be repeated and affinities reset. The CPU time use collected for ach hread is cumulative. Monitor CPU Time Use - continuous process CPU time use snapshots + Continuous monitoring of each thread’s CPU time use and use of the data over a configurable, immediately previous interval to st the CPU thread affinities of each application thread. The analysis and setting of affinities can be continuous. ThreadOpt it disabled by default. You can enable it by using the -XX:+UseThreadOpt command-line option. ThreadOpt comes with a set of options to control its behavior:  -XX:ThreadOptOptions=<list of options> ThreadOpt requires 1 gigabyte of free Zing System Memory to run jstack to collect thread name information."
}, {
  "objectID" : "a925a645-4879-4ce2-a778-ade150f9b168",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Monitoring Thread CPU Time Use",
  "section" : "ThreadOpt monitoring and control in jConsole",
  "url" : "https://docs.azul.com/prime/Thread-Opt",
  "link" : "https://docs.azul.com/prime/Thread-Opt#threadopt-monitoring-and-control-in-jconsole",
  "content" : "ThreadOpt monitoring and control in jConsole You can both monitor and control ThreadOpt from jConsole. To do so, Start the Zing process with options that enable use of jConsole. For example:  -Dcom.sun.management.jmxremote\n-Dcom.sun.management.jmxremote.port=3030\n-Dcom.sun.management.jmxremote.authenticate=false\n-Dcom.sun.management.jmxremote.ssl=false Start jConsole and connect to the process:  $JAVA_HOME/bin/jconsole Switch to the MXBeans tab. Click on the com.azul.threadopt entry to access ThreadOpt MXBeans."
}, {
  "objectID" : "549fb0dc-feb8-42b5-83b5-677291c0ad4b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Monitoring Thread CPU Time Use",
  "section" : "List of options to control the behavior of ThreadOpt",
  "url" : "https://docs.azul.com/prime/Thread-Opt",
  "link" : "https://docs.azul.com/prime/Thread-Opt#list-of-options-to-control-the-behavior-of-threadopt",
  "content" : "List of options to control the behavior of ThreadOpt Partitioning the running threads in the Java process between low and high CPU time consuming sets of application threads.  affinityToHighCPUThreadSet Default affinity setting behavior and no option required for this setting. Set the affinity for each of the application threads that are in the set of high CPU time-consuming application threads to the entire set of CPU threads designated for running the high CPU time-consuming application threads. affinityPer * options Only one of the affinityPer* options should be specified. The last specified affinityPer * option overrides any other specified affinityPer* option. No \"low=\" or \"high=\" option can be specified with an affinityPer * option.  affinityPerCPUThread Set the affinity for each of the application threads that are in the set of high CPU time-consuming application threads to a SINGLE CPU THREAD in the set of CPU threads designated for running the high CPU time-consuming application threads. This option is false by default.  affinityPerCore Set the affinity for each of the application threads that are in the set of high CPU time-consuming application threads to a SINGLE PHYSICAL CORE in the set of physical cores designated for running the high CPU time-consuming application threads. This option is false by default.  affinityPerCPUThreadsOnPhysicalCore Set the affinity for each of the application threads that are in the set of high CPU time-consuming application threads to ALL OF THE CPU THREADS RUNNING ON A SINGLE PHYSICAL CORE in the set of all physical cores designated for running the high CPU time-consuming application threads. This option is false by default."
}, {
  "objectID" : "914737d7-bdbd-4237-83c7-c85590bfe75e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Monitoring Thread CPU Time Use",
  "section" : "low= and high= CPU thread list options",
  "url" : "https://docs.azul.com/prime/Thread-Opt",
  "link" : "https://docs.azul.com/prime/Thread-Opt#low-and-high-cpu-thread-list-options",
  "content" : "low= and high= CPU thread list options Use to specify a set of CPU threads to use for each of the two sets of threads, one for use by the low CPU time-consuming application threads and the other for the high CPU time-consuming. The numbers specified in the comma-separated lists must be valid CPU thread identifiers on the box where the application is running. If either \"low=\" or \"high=\" is used then both options must be used. No \"low=\" or \"high=\" option can be specified with anyaffinityPer* option.  low=<list of CPU threads> Override the automatically generated set of CPU threads to use for the low CPU time-consuming application threads. The format for the list is comma-separated numerical values. The \"high=\" option must also be specified if you are using the \"low=\" option.  high=<list of CPU threads> Override the automatically generated set of CPU threads to use for the high CPU time-consuming application threads. The format for the list is comma-separated numerical values. The \"low=\" option must also be specified if you are using the \"high=\" option."
}, {
  "objectID" : "6f15f8b3-7d60-4e42-a9b6-505f8ea662c9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Monitoring Thread CPU Time Use",
  "section" : "Controlling the setting of affinities using the threads name",
  "url" : "https://docs.azul.com/prime/Thread-Opt",
  "link" : "https://docs.azul.com/prime/Thread-Opt#controlling-the-setting-of-affinities-using-the-threads-name",
  "content" : "Controlling the setting of affinities using the threads name  threadRegExpLow Use the regular expression that follows to match the name of the application threads that are to have their affinity set to the set of LOW CPU consuming CPU threads. Threads with no name are not considered to be in the set of named threads to which the regular expression applies. Example: threadRegExpLow=.C1Compiler.  threadRegExpHigh Use the regular expression that follows to match the name of the application threads that are to have their affinity set to the set of HIGH CPU consuming CPU threads. Threads with no name are not considered to be in the set of named threads to which the regular expression applies. Example: threadRegExpHigh=.C1Compiler.  useThreadNames=<true|false> Display thread name where relevant in list of threads. Value is true by default. A value of false will be overridden if threadRegExpLow and/or threadRegExpHigh are used. To delay application analysis and application thread/CPU thread affinity time until a time after the start time of the application:  delaySecs=<float> Seconds to wait before setting affinity (default value is 12 seconds). Example of 10 minutes: delaySecs=600  dhms=<HH:mm:ss> Hours format: <24 hours>:<minutes>:<seconds>. Example of 10 minutes: dhms=00:10:00  dtodate=<yyyy-MM-dd-HH:mm:ss> Future date format: <year>-<month>-<day>-<24 hours>:<minutes>:<seconds> Example of 10 minutes:  Now: 2016-10-20-12:00:00\nFuture: 2016-10-20-12:10:00"
}, {
  "objectID" : "820a4202-2e0f-462d-b38a-248dd29f2009",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Monitoring Thread CPU Time Use",
  "section" : "Number of times to set the thread affinities",
  "url" : "https://docs.azul.com/prime/Thread-Opt",
  "link" : "https://docs.azul.com/prime/Thread-Opt#number-of-times-to-set-the-thread-affinities",
  "content" : "Number of times to set the thread affinities Repeat the evaluation and resetting of the affinity of the application threads when specified on the command line. Default value is false.  i=<int> Number of iterations to repeat. Default value is 1.  tibas=<int> Time interval between affinity settings, updating each application threads CPU thread affinity. Units are in seconds. Default value is 60 seconds.  skipFirstAffinitySetting Skip the first affinity setting - enables the skipping of the first affinity setting so that more time can be devoted to completing the applications initialization. An alternative strategy is to use the MXBean interface to trigger the affinity setting when the conditions are optimal for affinity setting. Default value is false.  threshSecs=<int> CPU time threshold in seconds for the Single CPU Time Use Snapshot mode only. Default value is 20 seconds. Example: threshSecs=30. Threshold for CPU consumption by a thread in the Java process. If the CPU consumption is lower than the threshold then the threads affinity is set to the low CPU time-consuming set of CPU threads. If the CPU consumption is higher than the threshold then the thread''s affinity is set to the high CPU time-consuming set of CPU threads."
}, {
  "objectID" : "9b20e3c0-6963-45f2-ac89-1627a1904dc0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Monitoring Thread CPU Time Use",
  "section" : "Java process application thread CPU monitoring",
  "url" : "https://docs.azul.com/prime/Thread-Opt",
  "link" : "https://docs.azul.com/prime/Thread-Opt#java-process-application-thread-cpu-monitoring",
  "content" : "Java process application thread CPU monitoring  monCPUUse Enables the periodic monitoring system that collects snapshots of the CPU time use of each thread in the Java process. Enables Monitor CPU Time Use mode. Default value is false which will cause ThreadOpt to use Single CPU Time Use Snapshot mode.  monPercentCPUTimeUseThresh=<int> Threshold value that represents the percent of the CPU time consumed by a thread, at or above which the application thread is added to the set of application threads in the high CPU time-consuming set of application threads. Threshold value when using the Monitor CPU Time Use mode only. In the default case, any application thread that uses 20 percent or more of the CPU time available to that thread in a monitoring interval is added to the set of high CPU time-consuming application threads. Default value is 20.  monCPUHistSize=<int> Number of historical snapshots to save for consulting when making decisions about a thread’s CPU time consumption. For each thread, the difference between the CPU time use in the most recent snapshot and the oldest is used to compare against the CPU time threshold. If the CPU time consumption for that thread is greater than or equal to the threshold value then the thread is in the set of high CPU time-consuming threads for that interval. Default value is 6. Minimum value is 2 to provide better comparisons over a specified interval for long-running applications.  montibs=<int> Time interval between taking snapshots of the CPU use of the threads in the Java process in seconds. Together with the value of CPUHistSize, determines the time interval over which each threads CPU time consumption is calculated. Default value is 60 seconds.  montibwtn=<int> Monitoring time interval between writing application threads names to the log file, in units of seconds. Requires montibs value to be less than montibwtn value to trigger printing of montibwtn at regular intervals. (Writing to the log file is determined by the montibs time interval. If the time since last writing the application threads names has been exceeded then that information will also be written.) Minimum value is 10 seconds. If not specified, value (seconds): 60, 240, 300, 600, 600, …  montibwttca=<int> Monitorings time interval between writing application thread CPU set affinity setting to the log file, in units of seconds. Requires montibs value to be less than montibwttca value to trigger printing of montibwttca at regular intervals. (Writing to the log file is determined by the montibs time interval. If the time since last writing the thread CPU set affinity has been exceeded then that information will also be written.) Minimum value is 10 seconds. Default value is 300 seconds.  monDelaySecs=<float> Delay time between the start of the program and taking the first snapshot of the CPU time use by the application threads. Accuracy is in milliseconds. Default value is 12 seconds.  monDelayHMS=<HH:mm:ss> Monitor start delay time in hours, minutes, seconds format: <24 hours>:<minutes>:<seconds>  monDelayToDate=<yyyy-MM-dd-HH:mm:ss> Monitor start time in future date format: <year>-<month>-<day>-<24 hours>:<minutes>:<seconds>  monSavePerfData As each performance snapshot is collected, append the snapshot to the end of a file that has the name that follows the format: YearMoDa HrMnSc Ms. Example:  /tmp/zing_threadopt_monitor_20160904_153750_097_pid_27746.log\n[source, shell] Default is to not create or write to the log file."
}, {
  "objectID" : "ed7baf8a-a135-4323-b8c6-9b2c3b7bbe11",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Monitoring Thread CPU Time Use",
  "section" : "Usage Examples:",
  "url" : "https://docs.azul.com/prime/Thread-Opt",
  "link" : "https://docs.azul.com/prime/Thread-Opt#usage-examples",
  "content" : "Usage Examples:  $JAVA_HOME/bin/java -XX:+UseThreadOpt \\\n-XX:ThreadOptOptions='i=2 affinityPerCore tibas=120' \\\nThreadOptTest -tset 2 0 0 60 3600 0,2,4,6,8,10,10,8,6,4,2,0 UpAndDown  $JAVA_HOME/bin/java -XX:+UseThreadOpt \\\n-XX:ThreadOptOptions='monCPUUse delayMS=20000 r affinityPerCore tibas=120' \\\nThreadOptTest -tset 2 0 0 10 3600 0,0,0,10,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,10,6,4,2,0,0,0,0 spiky"
}, {
  "objectID" : "cd0aa4b2-b70b-4a1a-8df1-40c15079ca1f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "Will I still be able to use ZVision after 24.02.0.0?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#will-i-still-be-able-to-use-zvision-after-24-02-0-0",
  "content" : "Will I still be able to use ZVision after 24.02.0.0? No, ZVision will be removed from the codebase, meaning that ZVision will not be usable with Azul Platform Prime 24.02.0.0"
}, {
  "objectID" : "c123d919-f13c-4f5f-8e82-ecd2f3d04bd5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "Why is ZVision being discontinued?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#why-is-zvision-being-discontinued",
  "content" : "Why is ZVision being discontinued? A security vulnerability has been identified with jQuery 1.4.3, which is used in building the ZVision and ZVRobot utilities. At this time, Azul is not aware of any vulnerability in ZVision itself. But, as a precautionary measure, we have decided to discontinue support for ZVision and eventually remove it from our codebase altogether."
}, {
  "objectID" : "46700ce8-9e69-4a50-b610-18265f55d4f9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "How do I install JFR?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#how-do-i-install-jfr",
  "content" : "How do I install JFR? Java Flight Recorder is readily available in Azul Zing Builds of OpenJDK (Zing) without the need for command-line options to enable it."
}, {
  "objectID" : "627ce87d-8b46-483f-a38a-cbc54e74515e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "How do I remove ZVision?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#how-do-i-remove-zvision",
  "content" : "How do I remove ZVision? When updating to Azul Platform Prime 24.02.0.0 or later, ZVision will be removed from your system automatically. If you do not update Azul Platform Prime and wish to remove ZVision manually, the ZVision binary file should be removed from JAVA_HOME/bin/zvision and its assets removed from `JAVA_HOME/etc/art`a. If you are using the command line options -XX:ARTAPort and/or -XX:+UseTickProfiler, remove them from your options. -XX:ARTAPort is ZVision-specific and -XX:+UseTickProfiler is automatically enabled during a JFR recording."
}, {
  "objectID" : "a18bad66-899e-4ca6-bc1b-f4791d7b1e05",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "Will I see any performance impacts when using JFR?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#will-i-see-any-performance-impacts-when-using-jfr",
  "content" : "Will I see any performance impacts when using JFR? According to our extensive measurements, Prime’s JFR overhead is exactly the same as vanilla OpenJDK’s. We saw up to 5% overhead with the default JFR configuration. However, the default JFR configuration collects much more information than is usually needed. With some configuration (reducing the amount of collected events), JFR overhead can be dramatically reduced depending on your requirements."
}, {
  "objectID" : "bc2e26b7-19cc-4013-82e7-6540822ccc41",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "How do I make a JFR Recording?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#how-do-i-make-a-jfr-recording",
  "content" : "How do I make a JFR Recording? There are 3 ways to make a JFR recording: Using jcmd in the command line: This looks like jcmd JVMID JFR.start filename=rec.jfr. See Recording a Running Application for more info. Using Azul Mission Control. See Recording with Azul Mission Control for more info. Using the JVM flag -XX:StartFlightRecording. See Configuring JFR File Recording at Startup of the Application for more info. All of these methods are outlined in the Azul Platform Prime, Java Flight Recorder documentation."
}, {
  "objectID" : "3ee031e6-cd8e-44ad-8833-0ad9bcc1fdf1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "How do I view JFR recordings?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#how-do-i-view-jfr-recordings",
  "content" : "How do I view JFR recordings? Azul provides Azul Mission Control for viewing JFR recordings. Refer to the Azul Mission Control documentation if you are unfamiliar with this tool."
}, {
  "objectID" : "d59d7cda-7183-4f3b-8e5a-2ac676202cdc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "Does JFR have CPU Profiling (Method Profiling)?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#does-jfr-have-cpu-profiling-method-profiling",
  "content" : "Does JFR have CPU Profiling (Method Profiling)? Yes. CPU Profiling is enabled using either settings=default or settings=profile. These settings are defined when making a JFR recording (via jcmd or Azul Mission Control’s Flight Recorder)."
}, {
  "objectID" : "a76329b5-b7ea-4e4d-b0de-9f1adf399322",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "Does JFR have Memory Allocation Profiling?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#does-jfr-have-memory-allocation-profiling",
  "content" : "Does JFR have Memory Allocation Profiling? On Prime Java 8, Memory Allocation Profiling is available using settings=profile since 23.02.0.0. On Prime Java 11 and 17, Memory Allocation Profiling is available using settings=profile since 23.06.0.0 and on Prime Java 21 since 23.10.0.0 (21-GA). In older Prime Java 11 and 17 versions, you have to enable the following configuration details and create a custom settings .jfc file first: In Azul Mission Control → Window → Flight Recording Template Manager → Import Files load the /opt/zing/zing-jdk/lib/jfr/default.jfc file. Change setting for Garbage Collector to: All, incl. Heap Statistics. Export File to memalloc.jfc. Copy the file to a location where it is accessible by the Java process under analysis. Start the recording with the custom settings: jcmd JVMID JFR.start duration=60s filename=/DIR/myrecording.jfr settings=/DIR/memalloc.jfc."
}, {
  "objectID" : "9a290885-4d48-4b78-b4ff-3ca89e3b4c37",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "ZVision to JFR Migration FAQ",
  "section" : "How do I make a JFR recording without Command Line / Terminal access to the machine?",
  "url" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq",
  "link" : "https://docs.azul.com/prime/zvision-to-jfr-migration-faq#how-do-i-make-a-jfr-recording-without-command-line-terminal-access-to-the-machine",
  "content" : "How do I make a JFR recording without Command Line / Terminal access to the machine? Azul Mission Control provides a Flight Recorder which does not require command line / terminal access. See our documentation for Recording with Azul Mission Control. Haven’t found what you’re looking for? Reach out to us and contact Azul Technical Support at [email protected]."
}, {
  "objectID" : "bcf1f573-8d7c-468f-9845-f7e65ea9001f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "ZVision Overview",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#zvision-overview",
  "content" : "ZVision Overview ZVision provides programmers and deployment engineers with information about both a running application and the underlying Zing JVM. It also helps users tune command line options and code to optimize performance using the following capabilities: Complete internal and environment settings inventory Statistical, flat profiling of processor core usage from the thread level to run-time tasks down to the method level Take two data samples within a period of time (for example, in a 20 sec. interval) to calculate performance counter increments. ZVision requires: JVM host IP address and JVM host ARTA port The Azul Run Time Analysis (ARTA) port is the application host port specified with the -XX:ARTAPort command line. ZVision host IP address and ZVision browser listening port ZVision is automatically installed on the same machine as JVM when JVM is installed. You can connect a ZVision installed on one machine to a JVM on another machine. The ZVision listening port must be configured. ZVision is accessible from supported Web browsers with access to the application host running the JVM instance. The supported browsers include: Microsoft® Internet Explorer 6 (or later) on Windows 2000, Windows XP, Windows Vista, or Windows 7 Mozilla Firefox 1.0.3 (or later) on all supported operating systems Apple Safari™ 2.0 (or later) for macOS Statistical Tick Profiler The statistical tick profiler displays how processor core time is spent between various software execution units (for example, threads, methods, and run-time tasks). The Azul Platform Prime tick profiler differs from other profilers as follows: It is a statistical, flat (not tree-based) profiler. It does not capture every processor core cycle. Instead, for every n processor core cycles, it records where in the JVM the processor core was running (this is the program counter). It then uses this data to build a flat, non-nested profile. The captured data represents a specific time period. It profiles both within and outside the Java code. Most Java profilers use byte code instrumentation for Java code. It does not profile when threads are blocked on locks. To retrieve information on monitors, go to the Monitors window. The statistical tick profiler is displayed in the Tick profile window accessed from the CPU tab. Enable or Disable Tick Profiler The Tick Profiler is enabled and disabled by using the Java command line option, UseTickProfiler. The default value for UseTickProfiler is false, which means the Tick Profiler will not collect profiling information. To enable the Tick Profiler, use -XX:+UseTickProfiler (set to true) To disable the Tick Profiler, use -XX:-UseTickProfiler (default, set to false) Sorting Tables Variable size tables can be sorted by column. Click the column head to sort in ascending order. Click the column head again to resort in descending order. Fixed tables (for example, the GC Summary Window) cannot be sorted."
}, {
  "objectID" : "5ed06d14-7616-4678-ae1d-a622fedcafb7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Statistical Tick Profiler",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#statistical-tick-profiler",
  "content" : "Statistical Tick Profiler The statistical tick profiler displays how processor core time is spent between various software execution units (for example, threads, methods, and run-time tasks). The Azul Platform Prime tick profiler differs from other profilers as follows: It is a statistical, flat (not tree-based) profiler. It does not capture every processor core cycle. Instead, for every n processor core cycles, it records where in the JVM the processor core was running (this is the program counter). It then uses this data to build a flat, non-nested profile. The captured data represents a specific time period. It profiles both within and outside the Java code. Most Java profilers use byte code instrumentation for Java code. It does not profile when threads are blocked on locks. To retrieve information on monitors, go to the Monitors window. The statistical tick profiler is displayed in the Tick profile window accessed from the CPU tab."
}, {
  "objectID" : "0b2188be-c2c3-43c6-ba12-7f253d332906",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Enable or Disable Tick Profiler",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#enable-or-disable-tick-profiler",
  "content" : "Enable or Disable Tick Profiler The Tick Profiler is enabled and disabled by using the Java command line option, UseTickProfiler. The default value for UseTickProfiler is false, which means the Tick Profiler will not collect profiling information. To enable the Tick Profiler, use -XX:+UseTickProfiler (set to true) To disable the Tick Profiler, use -XX:-UseTickProfiler (default, set to false)"
}, {
  "objectID" : "f11ecc7c-8a2b-4157-848c-f291162f6cda",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Sorting Tables",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#sorting-tables",
  "content" : "Sorting Tables Variable size tables can be sorted by column. Click the column head to sort in ascending order. Click the column head again to resort in descending order. Fixed tables (for example, the GC Summary Window) cannot be sorted."
}, {
  "objectID" : "bd8142f4-55ac-4221-985b-65c075b98c40",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Running ZVision",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#running-zvision",
  "content" : "Running ZVision Before you can use ZVision to view JVM data, you need to familiarize yourself with the specific Zing option, configure the JVM host port and ZVision server. Zing Command Line Options Zing command line options listed in the table below are used to configure ZVision to provide profiling and diagnostics information when running a Java application on a Zing application host. Java Command Option Description -XX:ARTAPort={off|<port>|any} Enables ZVision and allows the ZVision server to listen on the specified port of the host where the JVM is running. Valid options include: off – disables ZVision (default). <port> – port number for ZVision to use on the host. The value should be greater than or equal to 1025 and less than or equal to 65535. any – ZVision uses any free port. This setting is useful when starting multiple instances of ZVision for multiple VMs. Supply a port number or set this option to any to enable ZVision. The ARTA (Azul Run Time Analysis) port provides internal API communication between ZVision and JVM. -XX:PrintGCHistory=<number of historical PGC cycle reports> Set the number of historical PGC cycle reports to save for display in ZVision (default =50). -XX:GCWarningHistory=<number of historical PGC warnings> Set the number of historical PGC warnings to save for display in ZVision (default =50). Configuring the JVM Host Port To configure ZVision on a JVM application host: Log on to the JVM application host where the Java workload will be run. Add the following Java command line option to your Java application launch command: -XX:ARTAPort=<port> where: <port> is the port ZVision server will use to connect on the JVM. The Azul Real Time Analysis port (ARTA port) provides internal communication between ZVision and the JVM. Download ZVTools From Azul Platform Prime 23.07.0.0, ZVTools is not included in the Azul Platform Prime package and must be downloaded separately. ZVTools distribution can be found here: https://ftp.azul.com/releases/Zing/ZVision/ZVTools.zip Configuring the ZVision Server The ZVision server is found within ZVTools.zip. The ZVision server does not need to be run on the same host where the application is running, it only requires a network connection to the host where the application is running. To set up the ZVision server: Locate the ZVision folder within ZVTools.zip Log in to a host where the ZVision server will run. Set the JAVA_HOME variable (or equivalent) so that the Java call points to the parent directory of the JVM software. For example: JAVA_HOME=<JVM install location>/<JVM top-level directory> Copy the contents of ZVision/bin and ZVision/etc to JAVA_HOME/bin/ and JAVA_HOME/etc/ on the host where the ZVision server will run. Type the following Java command line: $JAVA_HOME/bin/zvision -p <port> where: <port> is port number that is used by a browser to connect to ZVision (default: 8088) When the ZVision server starts successfully, the port number that is used by the browser to connect to ZVision is displayed on the command line. For example:  ZVision server listening on port 8088 Advanced Configuration Options The ZVision server can be invoked from the command line as follows: `zvision [options] ` The following command line options are supported: Command Line Option Description -h or --help Display a list of supported command line options -p PORT, --port=PORT Specify the port number port number that browsers listen to the ZVision server -i INTERFACE, --interface=INTERFACE Specify the network interface that the JVM accepts HTTP connections. -t ARTA_TIMEOUT, -arta_timeout=ARTA_ TIMEOUT Specify the timeout interval (in seconds) when communicating with the JVM. -1 DEBUG_LEVEL—logging=DEBUG_LEVEL Specify the debug logging level: debug, info, warning, error, or critical --document_root=DOCUMENT_ ROOT Specify the path to static HTML files used by the ZVision server."
}, {
  "objectID" : "464273e1-a610-4878-bddf-40cc8885c860",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Zing Command Line Options",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#zing-command-line-options",
  "content" : "Zing Command Line Options Zing command line options listed in the table below are used to configure ZVision to provide profiling and diagnostics information when running a Java application on a Zing application host. Java Command Option Description -XX:ARTAPort={off|<port>|any} Enables ZVision and allows the ZVision server to listen on the specified port of the host where the JVM is running. Valid options include: off – disables ZVision (default). <port> – port number for ZVision to use on the host. The value should be greater than or equal to 1025 and less than or equal to 65535. any – ZVision uses any free port. This setting is useful when starting multiple instances of ZVision for multiple VMs. Supply a port number or set this option to any to enable ZVision. The ARTA (Azul Run Time Analysis) port provides internal API communication between ZVision and JVM. -XX:PrintGCHistory=<number of historical PGC cycle reports> Set the number of historical PGC cycle reports to save for display in ZVision (default =50). -XX:GCWarningHistory=<number of historical PGC warnings> Set the number of historical PGC warnings to save for display in ZVision (default =50)."
}, {
  "objectID" : "65a82159-b81e-4ddd-914f-1629059561bb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Configuring the JVM Host Port",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#configuring-the-jvm-host-port",
  "content" : "Configuring the JVM Host Port To configure ZVision on a JVM application host: Log on to the JVM application host where the Java workload will be run. Add the following Java command line option to your Java application launch command: -XX:ARTAPort=<port> where: <port> is the port ZVision server will use to connect on the JVM. The Azul Real Time Analysis port (ARTA port) provides internal communication between ZVision and the JVM."
}, {
  "objectID" : "698480b0-6192-44d7-b644-a2b26e096cdb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Download ZVTools",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#download-zvtools",
  "content" : "Download ZVTools From Azul Platform Prime 23.07.0.0, ZVTools is not included in the Azul Platform Prime package and must be downloaded separately. ZVTools distribution can be found here: https://ftp.azul.com/releases/Zing/ZVision/ZVTools.zip"
}, {
  "objectID" : "052a5330-b900-44e3-8efe-196ad352ba51",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Configuring the ZVision Server",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#configuring-the-zvision-server",
  "content" : "Configuring the ZVision Server The ZVision server is found within ZVTools.zip. The ZVision server does not need to be run on the same host where the application is running, it only requires a network connection to the host where the application is running. To set up the ZVision server: Locate the ZVision folder within ZVTools.zip Log in to a host where the ZVision server will run. Set the JAVA_HOME variable (or equivalent) so that the Java call points to the parent directory of the JVM software. For example: JAVA_HOME=<JVM install location>/<JVM top-level directory> Copy the contents of ZVision/bin and ZVision/etc to JAVA_HOME/bin/ and JAVA_HOME/etc/ on the host where the ZVision server will run. Type the following Java command line: $JAVA_HOME/bin/zvision -p <port> where: <port> is port number that is used by a browser to connect to ZVision (default: 8088) When the ZVision server starts successfully, the port number that is used by the browser to connect to ZVision is displayed on the command line. For example:  ZVision server listening on port 8088"
}, {
  "objectID" : "24459bc6-2927-4432-ba87-003285d63f18",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Advanced Configuration Options",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#advanced-configuration-options",
  "content" : "Advanced Configuration Options The ZVision server can be invoked from the command line as follows: `zvision [options] ` The following command line options are supported: Command Line Option Description -h or --help Display a list of supported command line options -p PORT, --port=PORT Specify the port number port number that browsers listen to the ZVision server -i INTERFACE, --interface=INTERFACE Specify the network interface that the JVM accepts HTTP connections. -t ARTA_TIMEOUT, -arta_timeout=ARTA_ TIMEOUT Specify the timeout interval (in seconds) when communicating with the JVM. -1 DEBUG_LEVEL—logging=DEBUG_LEVEL Specify the debug logging level: debug, info, warning, error, or critical --document_root=DOCUMENT_ ROOT Specify the path to static HTML files used by the ZVision server."
}, {
  "objectID" : "3041eebe-6ca0-433e-9631-2119f529b854",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Accessing ZVision",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#accessing-zvision",
  "content" : "Accessing ZVision To access ZVision: Start a browser session and enter the URL of the ZVision server:  http://<ZVisionserver>:<port> where: <ZVision_server_IP_address> is the host name or IP address of the ZVision server <port> is the ZVision server port number that accepts connections from a Web browser For example: http://host123:8088 On successful connection to the ZVision server, the ZVision login window appears. Enter the following information: ARTA host – JVM server host name or IP address ARTA port – JVM application host port specified with the -XX:ARTAPort command line A ZVision session window is displayed."
}, {
  "objectID" : "1fde05fc-c0db-4244-a369-e397b790a8fd",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "ZVision Interface",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#zvision-interface",
  "content" : "ZVision Interface The ZVision interface consists of a series of tabbed pages and corresponding windows. Select a tab to access additional windows for a given component. Overview Tab Configuration Window Displays information for all process settings for the JVM. The following table describes the Configuration window elements. Element Description Version The JVM version. Command line The list of classes and command line options used to launch a Java application. Java Home The Java Home path. Class path The path to the class. Boot class path The path to the boot class. Extensions directories The directories for extensions. Endorsed directories The directories for classes implementing newer versions of endorsed standards. Library path The native library path. Boot library path The boot library path. ARTA Version The version of the instrumentation in the JVM that provides data to the ZVision server. Open file descriptors The limit in bytes for open file descriptors for the JVM front end. Core file size limit The maximum size in bytes for a core dump file. Environment Variables Window The Environment Variables window provides a detailed view of all environmental variables set by the shell that launched the JVM. The Environment Variables window is displayed only if it is enabled in the Features window. The following table describes the Environment Variables window elements. Element Description Name Name of the environment variable. Value Current setting or value for the environment variable. HotSpot Flags Window The HotSpot Flags window displays all -XX flags that the JVM uses, their description, and current values. This screen is for advanced diagnostics and is not intended for beginning users. Azul customer support may instruct users to look up flag values in this window. The following table describes the HotSpot Flags window elements. Element Description Type The type of flag. Possible values are: * Boolean – the flag requires a Boolean value of true (+) or false (-). * Integer or Unsigned Integer – the flag requires an integer value. * String – the flag requires a string. Name The name of the flag. Value The value configured for the flag. Description The description of the flag. Statistics Window The Statistics window displays information about running applications. The following table describes the Statistics window elements: Element Description SystemDictionary Stats Displays the number of Java classes loaded in the JVM. Thread Count Stats Displays the number of running threads. Settings Window The Settings window provides controls for enabling GC logging, choosing the level of detail logged, and whether the output is sent to standard out or saved to a new or existing file. The following table describes the Settings window elements. Element Description Off Disables GC logging for this JVM instance. This is the default setting. Print GC Enables GC logging with summarized output. Output is equivalent to using the command line option -XX:+PrintGC. Print GC details Enables GC logging with detailed output. Output is equivalent to using the command line option -XX:+PrintGCDetails. Options: File name Type a file name to send GC log output instead of sending it to standard out. Select the check box and type an existing file name to append the output to the end of an existing file. Groups Window This feature is not supported. Login Window This feature is not supported. Features Window The Features window is displayed to enable user access to certain ZVision features for the currently running JVM. Note Enabling user access to any of these features may interfere with the JVM, cause system delays, or expose sensitive information. The following table describes the Features window elements. Element Description Azul Support Enables user access to Azul Customer Support Options. Use at your risk, as some of these diagnostic features can interfere with the proper functioning of the JVM, or cause the system to crash. Browse Instance Enables users to browse a class instance. Turning this feature on could expose sensitive data within the object. Browse Class Enables users to browse the static class data. Turning this feature on could expose sensitive data within the object. Browse Method Enables users to browse a class method. Turning this feature on could expose sensitive data within the object. Environment variables Enables users to view the Environment Variables. Turning this feature on could expose sensitive data. Stack trace Enables users to use the Stack Trace window. Turning this feature on could expose sensitive data. MetaTicks Enables users to view metaticks. Turning this feature on could interfere with the proper functioning of the VM and cause the system to crash. This tab should ONLY be enabled if advised by Azul Support. Polling Opportunities Enables users to view the Polling Opportunities entries. Turning this feature on could interfere with the proper functioning of the VM and cause the system to crash. This tab should ONLY be enabled if advised by Azul Support. Weblogic Muxer Enables users to use the Web Logic Muxer Application. Turning this feature on could interfere with the proper functioning of the VM and cause the system to crash. This tab should ONLY be enabled if advised by Azul Support."
}, {
  "objectID" : "b7e79888-d0ec-4a80-8988-cd9b800c0e40",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Overview Tab",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#overview-tab",
  "content" : "Overview Tab Configuration Window Displays information for all process settings for the JVM. The following table describes the Configuration window elements. Element Description Version The JVM version. Command line The list of classes and command line options used to launch a Java application. Java Home The Java Home path. Class path The path to the class. Boot class path The path to the boot class. Extensions directories The directories for extensions. Endorsed directories The directories for classes implementing newer versions of endorsed standards. Library path The native library path. Boot library path The boot library path. ARTA Version The version of the instrumentation in the JVM that provides data to the ZVision server. Open file descriptors The limit in bytes for open file descriptors for the JVM front end. Core file size limit The maximum size in bytes for a core dump file. Environment Variables Window The Environment Variables window provides a detailed view of all environmental variables set by the shell that launched the JVM. The Environment Variables window is displayed only if it is enabled in the Features window. The following table describes the Environment Variables window elements. Element Description Name Name of the environment variable. Value Current setting or value for the environment variable. HotSpot Flags Window The HotSpot Flags window displays all -XX flags that the JVM uses, their description, and current values. This screen is for advanced diagnostics and is not intended for beginning users. Azul customer support may instruct users to look up flag values in this window. The following table describes the HotSpot Flags window elements. Element Description Type The type of flag. Possible values are: * Boolean – the flag requires a Boolean value of true (+) or false (-). * Integer or Unsigned Integer – the flag requires an integer value. * String – the flag requires a string. Name The name of the flag. Value The value configured for the flag. Description The description of the flag. Statistics Window The Statistics window displays information about running applications. The following table describes the Statistics window elements: Element Description SystemDictionary Stats Displays the number of Java classes loaded in the JVM. Thread Count Stats Displays the number of running threads. Settings Window The Settings window provides controls for enabling GC logging, choosing the level of detail logged, and whether the output is sent to standard out or saved to a new or existing file. The following table describes the Settings window elements. Element Description Off Disables GC logging for this JVM instance. This is the default setting. Print GC Enables GC logging with summarized output. Output is equivalent to using the command line option -XX:+PrintGC. Print GC details Enables GC logging with detailed output. Output is equivalent to using the command line option -XX:+PrintGCDetails. Options: File name Type a file name to send GC log output instead of sending it to standard out. Select the check box and type an existing file name to append the output to the end of an existing file. Groups Window This feature is not supported. Login Window This feature is not supported. Features Window The Features window is displayed to enable user access to certain ZVision features for the currently running JVM. Note Enabling user access to any of these features may interfere with the JVM, cause system delays, or expose sensitive information. The following table describes the Features window elements. Element Description Azul Support Enables user access to Azul Customer Support Options. Use at your risk, as some of these diagnostic features can interfere with the proper functioning of the JVM, or cause the system to crash. Browse Instance Enables users to browse a class instance. Turning this feature on could expose sensitive data within the object. Browse Class Enables users to browse the static class data. Turning this feature on could expose sensitive data within the object. Browse Method Enables users to browse a class method. Turning this feature on could expose sensitive data within the object. Environment variables Enables users to view the Environment Variables. Turning this feature on could expose sensitive data. Stack trace Enables users to use the Stack Trace window. Turning this feature on could expose sensitive data. MetaTicks Enables users to view metaticks. Turning this feature on could interfere with the proper functioning of the VM and cause the system to crash. This tab should ONLY be enabled if advised by Azul Support. Polling Opportunities Enables users to view the Polling Opportunities entries. Turning this feature on could interfere with the proper functioning of the VM and cause the system to crash. This tab should ONLY be enabled if advised by Azul Support. Weblogic Muxer Enables users to use the Web Logic Muxer Application. Turning this feature on could interfere with the proper functioning of the VM and cause the system to crash. This tab should ONLY be enabled if advised by Azul Support."
}, {
  "objectID" : "2a708adb-4369-49a0-a546-ae7535ed8d58",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Threads Tab",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#threads-tab",
  "content" : "Threads Tab Threads List Window The Threads List window displays all threads, status of each thread, and links to detailed information about a thread. View and action options include: Refresh this window to view thread progress. Click the Name and State column titles to sort the table. Click the Details link item display the status of a thread and where it is blocked. Refer to Stack Trace Window. Set values in the Name, State, Group, and/or Per page fields to filter the displayed list The following table describes the Threads List window elements. Elements Description Name Lists the name of the thread as assigned by the application. State The most common states for threads are: running – the thread is executing on a processor core. I/O wait – the thread is waiting for socket or file I/O. waiting on monitor – the thread is blocked in java.lang.Object.wait() awaiting notification. low memory detection – acquiring monitor – the thread is waiting to acquire a synchronization monitor. acquiring and releasing monitor – the thread a requires and releases a synchronization monitor. This typically happens when the critical section of the monitor is extremely small. sleeping – the thread executed java.lang.Thread.sleep(). Other states, such as idle, semaphore wait, waiting on JVM monitor Threads_lock, or Waiting on Monitor SLT lock indicate threads that are internal to the JVM. These states are not normally useful for analysis of application performance. Also, during start up, compiler threads may be running. The time (in seconds) that the thread has spent since entering the state is provided in parenthesis after the waiting state indicators. Details Provides links to a stack trace, tick profile, and object profile for the selected thread. These functions are the same as the regular tick and profile features, except that only information on the selected thread displays. The following links appear inline with threads listed in this window: Stack – displays a thread execution details window. Displays the page Threads > Stack Trace. Ticks – displays a per-thread profile. Displays the page CPU > Tick Profiler. System calls, RPC out, RPC in, FDC, and Transport are not supported at this time. Stack Trace Window The Stack Trace window lists all threads and displays whether a thread is executing or is blocked. This can help to determine changes to make in the application code. To perform a search by thread name, type a string in the Name field to display all thread names that include that text string (case sensitive). Click the thread links in the Stack Trace window to display a thread execution details window. Use the State drop-down menu to only display threads in a certain state (for example, running, I/O wait, acquiring monitor, and so on). Use the Group drop-down menu to select whether to list system, non-system, or all group types. Use the Per Page drop-down menu to determine the number of items to display on this page. Toggle between low or high display of detailed information. Refresh this screen to view the progress of the thread. Relevant information displays at the top of the window: Address Priority Object blocked Object wait CPU wait I/O wait The Stack Trace window is displayed only if it is enabled in the Features window. Deadlocks Window The Deadlocks window lists detected deadlock cycles. Threads involved for each cycle of locks are listed with the monitor type the thread is trying to acquire and the thread that is the current owner. Click the thread links to view additional information. Contention Window The Contention window provides statistical information for each monitor and sorts monitors by total acquire time. The following types of monitors appear in the Contention window: Java-level monitors – identified by their class name. Internal JVM monitors – identified with the extension _lock. If there are a high number of internal JVM monitors, examine the verbose garbage collection (GC) logs. Observe if there are a large number of GC pauses. Contact Azul customer support if this becomes a problem. The total acquire time parameter is the time, in milliseconds, for acquires to occur for a given internal or Java-level monitor. The following table describes the Contention window elements. Click column titles to sort by relevance. Elements Description Name The name of the monitor. Acquire Time (ms) Total – the time, in milliseconds, for acquires to occur for a given internal or Java-level monitor (not tracked for lightly contended “thin” monitors). Max (ms) – the maximum time, in milliseconds, to perform an acquire. Blocking acquires Count – the number of blocking acquires. Waits Count – the number of wait cycles on the thread. Max (ms) – the maximum time, in milliseconds, of wait cycles that are allowed. Total (ms) – Cumulative wait cycle in milliseconds Contention Details Window The Contention Detail window provides additional information about the selected monitor in contention. Detail information is displayed through the Azul Support tab. Note If Azul Support is enabled, links to related Monitor details are displayed. Only enable and use the Azul Support tab as directed by Azul Support team members. CPU Tab The CPU tab provides information about how much CPU time is being used by threads. This is measured by recording the length of time it takes a thread to complete a tick, how often a thread accesses sensitive areas of the application code, and the length of time a thread takes to achieve a safepoint. Note Method names in the tick profiler are compiled methods and are no longer being interpreted. All time spent by methods being interpreted is summed as one entry named “Interpreter.” Check the Tick Profile window for functions such as VM_C2 Compiler or Interpreter after launching an application. If these functions are high on the list, then the application is still starting up (a warning message may also appear in the Compiler tab). To determine if the application is warmed up, wait a few seconds, click Reset Tick Profile, then refresh the Web browser until these two threads are not high in the list. The following table describes the Tick Profile window elements. Element Description Pause/Resume the Tick Collection Click Pause The Tick Collection to stop refreshing the list of ticks. This is useful when you need to locate a specific item in a rapidly changing list. Click Resume The Tick Collection and refresh the screen to continue updating the list of ticks. Reset Tick Profile Clears the existing list of ticks and restarts tick collection. Cutoff Filters the list of ticks to list only those values that are greater than or equal to the set cutoff value. Enter value. Click Submit. Below Cutoff At the bottom of the list of ticks, it lists the percentage and number of ticks that are not included in the displayed list as defined by the Cutoff percent value and Threads value. Threads Display the ticks for only the threads listed in this field. Enter value. Click Submit. None, JVM, All The three radio buttons filter the tick data by a tag assigned to it. Whenever a thread is running, it has a current tag assigned to it. That value can change at any time, as the thread does different things. For instance, if you have a thread that is a garbage collection thread, it’s tag might be \"garbage collection\" most of the time, but when that thread was running some specific subtask of GC, it might say GC marking phase. This feature allows collates and displays the data from the aspect of the tag value instead of the method name. The options are: None – don’t filter the list by tags. JVM — group all the JVM compiler ticks into one entry, so that everything is lumped together. Useful if you are trying to get a sense of what overhead the compiler is having. All - only display ticks by tag type for all threads. Instead of showing ticks entries by their method name, group and display them by their tag type. To apply tag filter, click a radio button. Click Submit. Percent The percentage of CPU resources (% of the total number of ticks collected during the collection period) the function used during the time interval. Ticks The number of program counters (“ticks”) collected in the time interval. This includes: Timer ticks – collect for each tick, the thread ID, CPU, stack trace and last eight calling functions when the tick occurs. The time reported, in milliseconds, is thread time, not clock time. Time to safe point ticks – collect the time required to complete a save point process. Source A description of the function being counted. The following are definitions for specific functions: VM_GC Task – the garbage collector for the JVM. ARTA_Performance_Monitor – the function that collects and displays ZVision data. VM_C2 Compiler – the JVM JIT compiler compiling methods indicating that an application is still warming up . generate_monitor enter – the amount of time spent busy-waiting to acquire monitors. Event Profiling Tick Buffer Statistics Statistical information about the total list of ticks. This includes: Ticks within a Buffer – number of ticks a standard tick buffer can hold. There is a fixed maximum of 2K. Available Buffers – number of buffers the user has allocated, as determined by the -XX:EventTickBufferDataBufferMargin=N value, plus the high water mark number of active threads. For example, if you specify 100, and the application has 400 threads simultaneously active, then there are 500 available buffers. This total value is dynamic, but only grows. If suddenly the application drops 300 threads, there continues to be 500 buffers. Theoretical Maximum Ticks (Available Buffer * Ticks/Buffer) – per the listed formula, for example using Ticks within a Buffer maximum (2000) X Available Buffers (500) = 1,000,000. Count of Ticks processed – not all buffers are completely filled at any moment in time. The tick buffers are collecting ticks. Some have not been used yet. This value is the count of all ticks that are in buffers, which is some value less than the theoretical maximum. Profiler Ticks applicable (matched filter criteria) – number of ticks that match the search criteria Other Ticks not applicable (Failed filter criteria) – number of ticks that do not match the search criteria. Profiler Ticks and Other Ticks equal the total number of ticks processed. Meta Ticks Window Meta Ticks measure how long it takes to perform a function. This is not a measure of each thread. Meta Ticks are like timer ticks in nature. They are a discreet packet of information about the state of a thread, but unlike the Profile Ticks, which are created based on some periodic timer, Meta Ticks are created as the thread enters certain specific code paths. The following table describes the Meta Ticks window elements. Element Description Pause/Resume the Tick Collection Click Pause The Tick Collection to stop refreshing the list of ticks. This is useful when you need to locate a specific item in a rapidly changing list. Click Resume The Tick Collection and refresh the screen to continue updating the list of ticks. Reset Tick Profile Clears the existing list of ticks and restarts tick collection. Search Criteria: Single Value Entries Entries Displayed – number of entries displayed on a given page. Tick Start – a search field which determines the earliest tick that is included in the display, based on the elapsed tick counter. Tick End – a search field which determines the latest tick that is included in the display, based on the elapsed tick counter. Search Criteria: Comma Separated Lists These items are all search criteria for metaticks. The five fields in this row can all use comma separated lists as a search criteria. That is, you can search for more than one term simultaneously, by listing those terms with commas separating them. For example, CPU field could contain \"2,5,9\", which would list all metaticks that came from CPU 2, 5 or 9. MetaTick # – value that can be used for searches. The values are preassigned by Azul. User Info # – value assigned dynamically by the application that can be searched on. Tag # – The current Virtual Machine Process Tag of the thread when the metatick occurred. This is a pre-defined value we assign to a thread that can be changed dynamically, to indicate what kind of work the thread is doing. The values are preassigned by Azul. CPU # – the CPU that the thread was executing on when the metatick occurred. Thread # – thread ID for Azul internal use. Data Table List of actual metatick data. See below listed field descriptions. Line item – last 100 meta ticks recorded. Tick Counter – elapsed ticks since startup. Thread ID – thread ID for Azul internal use. CPU – CPU that the thread was executing on when the metatick occurred. MetaTick Type – value for Azul internal use. Value indicates the tag value at the time the tick occurred. MetaTick Type # – string translation of the stored bit value to the metatick type. Tag Name – string human readable translation of the tag number. Tag # – the VM Tag currently assigned when the metatick occurred Stack Frame Address – address of the stack frame at the time the tick occurred. Event Profiling Tick Buffer Statistics The following are diagnostics related to capturing tick statistics. Ticks within a Buffer – number of ticks a standard tick buffer can hold. There is a fixed maximum of 2K. Available Buffers – number of buffers the user has allocated, as determined by the -XX:EventTickBufferDataBufferMargin=N value, plus the high water mark number of active threads. For example, if you specify 100, and the application has 400 threads simultaneously active, then there are 500 available buffers. This total value is dynamic, but only grows. If suddenly the application drops 300 threads, there continues to be 500 buffers. Theoretical Maximum Ticks (Available Buffer * Ticks/Buf) – per the listed formula, for example using Ticks within a Buffer maximum (2000) X Available Buffers (500) = 1,000,000. Count of Ticks processed – not all buffers are completely filled at any moment in time. The tick buffers are collecting ticks. Some have not been used yet. This value is the count of all ticks that are in buffers, which is some value less than the theoretical maximum. Profiler Ticks applicable (matched filter criteria) – number of ticks that match the search criteria Other Ticks not applicable (Failed filter criteria) – number of ticks that do not match the search criteria. Profiler Ticks and Other Ticks equal the total number of ticks processed. Event Tracker This feature is not supported. Memory Tab The Memory Summary window provides a summary of total memory usage and Contingency memory usage. The following tables describe the Memory Summary window elements. Memory Summary Window Elements – Java Heap Usage Element Description Used The amount of memory currently used by the JVM. Capacity The amount of memory allocated for use by the JVM. Requested capacity The maximum amount of memory requested for use by the JVM (-Xmx). GC cycle count The number of garbage collection cycles. Memory Summary Window Elements – Memory Accounts Element Description VM internal Shows allocated, balance, Reserved, and Contingency memory usage for the JVM Java heap Shows allocated, balance, Reserved, and Contingency memory usage for the Java heap. Java Pause Prevention Shows allocated, balance, Reserved, and Contingency memory usage for the Java Pause Prevention memory. GC Summary Window The GC Summary window provides a cumulative summary of the recent GC cycle history. The following table lists the GC Summary window elements. The screen lists the garbage collection information for both New generation and Old generation cycles in two parallel tables. Element Description Header Category – element being measured Statistic – aspect of the element being measured Mean – statistical calculation of collected values Stddev – standard deviation calculated for collected values Min – minimum value in collected sample Max – maximum value in collected sample Cycle Interval (sec) – elapsed time between successive GC cycle starts. Pause ratio – ratio of time application spent in safepoint pauses during the cycle to cycle interval time Reserved Peak used (MB) – the peak size of the Java heap recorded during the GC cycle Pause These values are used for internal Azul Platform Prime diagnostic purposes only. Generations New used (MB) – the amount of memory used by all young objects not known to be dead during the GC cycle. Old used (MB) – the amount of memory used by all old objects not known to be dead during the GC cycle. Perm used (MB) – the amount of memory used by all permanent objects not known to be dead during the GC cycle. Live (MB) – the live memory in the generation(s) being collected. Fragmentation (MB) – the fragmentation in the generation(s) being collected. Garbage Found (MB) – the garbage found in the generation(s) being collected. Collected (MB) – the garbage freed in the generation(s) being collected. Sideband limited (MB) – used for internal Azul Platform Prime diagnostics purposes only. Pages These values are used for internal Azul Platform Prime diagnostic purposes only. Pauses Pause 1 duration (ms) – the duration time of the pause 1 safepoint. Pause 2 duration (ms) – the duration of the pause 2 safepoint Pause 3 duration (ms) – the duration of the pause 3 safepoint Pause 4 duration (ms) – the total duration of all pause 4 safepoints for this GC cycle. Intercycle Duration (sec.) – the elapsed time from the end of the last GC cycle to the start of this GC cycle. Allocation rate (MB/s) – the object allocation rate in the generation being collected in the period between the last GC cycle to the start of this GC cycle. Perm allocation rate (MB/s) – the object allocation rate in the permanent generation during this GC cycle. Intracycle Duration (sec.) – the GC cycle elapsed time; the duration of time from the beginning to the end of this GC cycle. Allocation rate (MB/s) – the object allocation rate in the generation being collected during this GC cycle. Perm allocation rate (MB/s) – the object allocation rate in the permanent generation during this GC cycle. App threads Total threads – the total count of Java threads in the JVM. Threads delayed – the number of threads blocked trying to allocate memory during the GC cycle. When the number of delayed threads is greater than 0, application performance is affected due to lack of available memory. Average thread delay (sec) – the average delay for threads blocked trying to allocate during the GC cycle. Max thread delay (sec) – the maximum delay for threads blocked trying to allocate. GC History Window The GC History window provides a detailed summary of the recent GC cycle history with a row per cycle. Click column titles to sort by relevance. The following table lists the GC History window elements. Element Description Cycle Type Indicates GC cycle, as follows: Old – old generation cycle New – new generation cycle NTO – new generation cycle that immediately precedes an Old Gen cycle Cycle # For each New or Old Gen cycle, the number of that collection in the sequence of all collections of that type (New or Old Gen). Mode p – indicates if allocation from pause memory is enabled g – indicates if allocation from Contingency memory is enabled. Memory Heap Max – maximum amount of heap memory guaranteed to the application. This is generally set by Xmx option. Memory Reserved Peak – the peak size of the Java heap recorded during the GC cycle. Used – the amount of memory used by all objects not known to be dead during the GC cycle. Memory Pause These values are used for internal Azul Platform Prime diagnostic purposes only. Memory Generations New – the amount of memory used by all young objects not known to be dead during the GC cycle. Old – the amount of memory used by all old objects not known to be dead during the GC cycle. Perm – the amount of memory used by all permanent objects not known to be dead during the GC cycle. Live – the live memory in the generation(s) being collected. Frag – the fragmentation in the generation(s) being collected. Memory Garbage Found – the garbage found in the generation(s) being collected. Freed – the garbage freed in the generation(s) being collected. Sideband limited – used for internal Azul Platform Prime diagnostics purposes only. Memory Pages These values are used for internal Azul Platform Prime diagnostic purposes only. Intercycle Dur (sec.) – the elapsed time from the end of the last GC cycle to the start of this GC cycle. Alloc rate (MB/s) – the object allocation rate in the generation being collected in the period between the last GC cycle to the start of this GC cycle. Perm alloc rate (MB/s) – the object allocation rate in the permanent generation during this GC cycle. Intracycle Dur (sec.) – the GC cycle elapsed time; the duration of time from the beginning to the end of this GC cycle. Alloc rate (MB/s) – the object allocation rate in the generation being collected during this GC cycle. Perm alloc rate (MB/s) – the object allocation rate in the permanent generation during this GC cycle. App threads # # – the total count of Java threads in the JVM. App threads Delay # – the number of threads blocked trying to allocate memory during the GC cycle. When the number of delayed threads is greater than 0, application performance is affected due to lack of available memory. Ave (sec) – the average delay for threads blocked trying to allocate during the GC cycle. Max (sec) – the maximum delay for threads blocked trying to allocate. Browse Object Window Do not select this page directly, instead select a highlighted object, instance, method or class. The following table describes the Browse Object tab window elements. Element Description Class Property and Value If applicable, list of class properties associated with the selected object. Includes values for the listed properties. Static Fields If applicable, list of static information associated with the selected object. This includes descriptive information: Access Name Type Value Methods If applicable, list of methods associated with the selected object. Transitive Interfaces If applicable, list of transitive interfaces associated with the selected object. Allocated Objects Window Data collected for allocated objects only when the -XX:ProfileAllocatedObjects option is included in the JVM command. This feature is not supported. Live Objects Window The Live Objects window displays a current list of classes in the old generation heap that are being kept alive. Use this information to identify possible memory leaks in your Java application. Each listed row [with a plus (+)] is a referent class. Expanded rows show a list of referrer classes to the referent class. A class is listed as a referrer, when all the following conditions are met: An object of that class directly points to an object of the referent class. The referent object was seen by the GC through the referrer object. Only the first referrer seen by the GC is counted. This means that there could be other referrer objects that point to the referent objects, but they are not included. To display Live Object data, include the -XX:+ProfileLiveObjects option in the JVM command. To view current data, refresh the screen. If a GC has not occurred yet, a message to refresh is displayed. The following table describes the Live Object tab window elements. Note, all the descriptions are about the old generation heap. Element Description Total Total number of old generation live objects. Class Name Name of classes whose objects reside in old generation memory. Click the plus (+) to see referring classes. Count The number of objects of this class that are alive in the old generation heap. Size (bytes) The total amount of memory used by objects of this class. Avg Size (bytes) The average amount of memory used by objects of this class. Percentage of Live Set The percentage of the live set memory consumed by object of this class. For referrer rows this is a percentage of referrer count. Type Velocity Window The Type Velocity window displays a current list of classes in the old generation heap and their rate of memory growth. Where velocity for a class is the rate of heap growth in bytes over a selected time interval. Use this information to identify possible memory leaks in your Java application. To gather Type Velocity data, include the -XX:+ProfileLiveObjects option in the JVM command and allocate extra memory. To view current data, refresh the screen. All time listings are in format: [dd] hr:min:sec. Number of days are listed only if it is non-zero. Only the top 1000 classes, sorted by Growth Rate, are shown. The following table describes the Type Velocity tab window elements. Element Description Interval Options in increments ranging: 1 – 45 mins, 1-18 hrs, 1-7 days Requested time interval Selected time interval by the user. Best available match interval Time interval starting from the last GC cycle that most closely matches the selected interval. For example, if GC occurred at 10 minutes, 15 minutes, 20 minutes, and 45 minutes from the start of the VM, and the selected interval is 10, then the data from the GC at 20 minutes (interval-start) and 45 minutes (interval-end) are used for calculating the type velocity. Interval-start Interval-end The starting time and ending time of the best available match interval. Time is not clock time. It is time from start of VM. VM uptime Amount of time passed since the start of the VM. Class Name Name of classes whose objects reside in old generation memory. Latest Count The number of objects of this class that are alive at interval-end time. Latest Size (bytes) The total amount of memory used by objects of this class that are alive at interval-end time. Prior Count The number of objects of this class that are alive at interval-start time. Prior Size (bytes) The total amount of memory used by objects of this class that are alive at interval-start time. Delta Count The difference between the number of objects of this class that are alive between interval-start and interval-end time. Delta Size (bytes) The difference between the memory used by objects of this class between interval-start and interval-end time. Growth Rate (bytes/min) The rate of heap growth for a class over Best available match interval. Growth Rate = Delta Size / Best available match interval. Compilers Tab The Compiler tab of ZVision displays the status of Server and Client compiler tasks. The following table describes the Compiler tab window elements. Element Description Compiling Status of threads being compiled. Waiting Status of threads waiting to be compiled Applications Tab The Application tab displays a list of application classes and Java class libraries that are loaded in the JVM. If the Browse Class feature is enabled for a user in the Features tab, the hyperlink for a specific class can be selected to browse the static class data in the Browse Object window."
}, {
  "objectID" : "283ab83d-7fad-4555-a453-094f23fed2af",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "CPU Tab",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#cpu-tab",
  "content" : "CPU Tab The CPU tab provides information about how much CPU time is being used by threads. This is measured by recording the length of time it takes a thread to complete a tick, how often a thread accesses sensitive areas of the application code, and the length of time a thread takes to achieve a safepoint. Note Method names in the tick profiler are compiled methods and are no longer being interpreted. All time spent by methods being interpreted is summed as one entry named “Interpreter.” Check the Tick Profile window for functions such as VM_C2 Compiler or Interpreter after launching an application. If these functions are high on the list, then the application is still starting up (a warning message may also appear in the Compiler tab). To determine if the application is warmed up, wait a few seconds, click Reset Tick Profile, then refresh the Web browser until these two threads are not high in the list. The following table describes the Tick Profile window elements. Element Description Pause/Resume the Tick Collection Click Pause The Tick Collection to stop refreshing the list of ticks. This is useful when you need to locate a specific item in a rapidly changing list. Click Resume The Tick Collection and refresh the screen to continue updating the list of ticks. Reset Tick Profile Clears the existing list of ticks and restarts tick collection. Cutoff Filters the list of ticks to list only those values that are greater than or equal to the set cutoff value. Enter value. Click Submit. Below Cutoff At the bottom of the list of ticks, it lists the percentage and number of ticks that are not included in the displayed list as defined by the Cutoff percent value and Threads value. Threads Display the ticks for only the threads listed in this field. Enter value. Click Submit. None, JVM, All The three radio buttons filter the tick data by a tag assigned to it. Whenever a thread is running, it has a current tag assigned to it. That value can change at any time, as the thread does different things. For instance, if you have a thread that is a garbage collection thread, it’s tag might be \"garbage collection\" most of the time, but when that thread was running some specific subtask of GC, it might say GC marking phase. This feature allows collates and displays the data from the aspect of the tag value instead of the method name. The options are: None – don’t filter the list by tags. JVM — group all the JVM compiler ticks into one entry, so that everything is lumped together. Useful if you are trying to get a sense of what overhead the compiler is having. All - only display ticks by tag type for all threads. Instead of showing ticks entries by their method name, group and display them by their tag type. To apply tag filter, click a radio button. Click Submit. Percent The percentage of CPU resources (% of the total number of ticks collected during the collection period) the function used during the time interval. Ticks The number of program counters (“ticks”) collected in the time interval. This includes: Timer ticks – collect for each tick, the thread ID, CPU, stack trace and last eight calling functions when the tick occurs. The time reported, in milliseconds, is thread time, not clock time. Time to safe point ticks – collect the time required to complete a save point process. Source A description of the function being counted. The following are definitions for specific functions: VM_GC Task – the garbage collector for the JVM. ARTA_Performance_Monitor – the function that collects and displays ZVision data. VM_C2 Compiler – the JVM JIT compiler compiling methods indicating that an application is still warming up . generate_monitor enter – the amount of time spent busy-waiting to acquire monitors. Event Profiling Tick Buffer Statistics Statistical information about the total list of ticks. This includes: Ticks within a Buffer – number of ticks a standard tick buffer can hold. There is a fixed maximum of 2K. Available Buffers – number of buffers the user has allocated, as determined by the -XX:EventTickBufferDataBufferMargin=N value, plus the high water mark number of active threads. For example, if you specify 100, and the application has 400 threads simultaneously active, then there are 500 available buffers. This total value is dynamic, but only grows. If suddenly the application drops 300 threads, there continues to be 500 buffers. Theoretical Maximum Ticks (Available Buffer * Ticks/Buffer) – per the listed formula, for example using Ticks within a Buffer maximum (2000) X Available Buffers (500) = 1,000,000. Count of Ticks processed – not all buffers are completely filled at any moment in time. The tick buffers are collecting ticks. Some have not been used yet. This value is the count of all ticks that are in buffers, which is some value less than the theoretical maximum. Profiler Ticks applicable (matched filter criteria) – number of ticks that match the search criteria Other Ticks not applicable (Failed filter criteria) – number of ticks that do not match the search criteria. Profiler Ticks and Other Ticks equal the total number of ticks processed. Meta Ticks Window Meta Ticks measure how long it takes to perform a function. This is not a measure of each thread. Meta Ticks are like timer ticks in nature. They are a discreet packet of information about the state of a thread, but unlike the Profile Ticks, which are created based on some periodic timer, Meta Ticks are created as the thread enters certain specific code paths. The following table describes the Meta Ticks window elements. Element Description Pause/Resume the Tick Collection Click Pause The Tick Collection to stop refreshing the list of ticks. This is useful when you need to locate a specific item in a rapidly changing list. Click Resume The Tick Collection and refresh the screen to continue updating the list of ticks. Reset Tick Profile Clears the existing list of ticks and restarts tick collection. Search Criteria: Single Value Entries Entries Displayed – number of entries displayed on a given page. Tick Start – a search field which determines the earliest tick that is included in the display, based on the elapsed tick counter. Tick End – a search field which determines the latest tick that is included in the display, based on the elapsed tick counter. Search Criteria: Comma Separated Lists These items are all search criteria for metaticks. The five fields in this row can all use comma separated lists as a search criteria. That is, you can search for more than one term simultaneously, by listing those terms with commas separating them. For example, CPU field could contain \"2,5,9\", which would list all metaticks that came from CPU 2, 5 or 9. MetaTick # – value that can be used for searches. The values are preassigned by Azul. User Info # – value assigned dynamically by the application that can be searched on. Tag # – The current Virtual Machine Process Tag of the thread when the metatick occurred. This is a pre-defined value we assign to a thread that can be changed dynamically, to indicate what kind of work the thread is doing. The values are preassigned by Azul. CPU # – the CPU that the thread was executing on when the metatick occurred. Thread # – thread ID for Azul internal use. Data Table List of actual metatick data. See below listed field descriptions. Line item – last 100 meta ticks recorded. Tick Counter – elapsed ticks since startup. Thread ID – thread ID for Azul internal use. CPU – CPU that the thread was executing on when the metatick occurred. MetaTick Type – value for Azul internal use. Value indicates the tag value at the time the tick occurred. MetaTick Type # – string translation of the stored bit value to the metatick type. Tag Name – string human readable translation of the tag number. Tag # – the VM Tag currently assigned when the metatick occurred Stack Frame Address – address of the stack frame at the time the tick occurred. Event Profiling Tick Buffer Statistics The following are diagnostics related to capturing tick statistics. Ticks within a Buffer – number of ticks a standard tick buffer can hold. There is a fixed maximum of 2K. Available Buffers – number of buffers the user has allocated, as determined by the -XX:EventTickBufferDataBufferMargin=N value, plus the high water mark number of active threads. For example, if you specify 100, and the application has 400 threads simultaneously active, then there are 500 available buffers. This total value is dynamic, but only grows. If suddenly the application drops 300 threads, there continues to be 500 buffers. Theoretical Maximum Ticks (Available Buffer * Ticks/Buf) – per the listed formula, for example using Ticks within a Buffer maximum (2000) X Available Buffers (500) = 1,000,000. Count of Ticks processed – not all buffers are completely filled at any moment in time. The tick buffers are collecting ticks. Some have not been used yet. This value is the count of all ticks that are in buffers, which is some value less than the theoretical maximum. Profiler Ticks applicable (matched filter criteria) – number of ticks that match the search criteria Other Ticks not applicable (Failed filter criteria) – number of ticks that do not match the search criteria. Profiler Ticks and Other Ticks equal the total number of ticks processed. Event Tracker This feature is not supported."
}, {
  "objectID" : "a26ad00c-0e00-432d-9af3-16ad307475b9",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision",
  "section" : "Memory Tab",
  "url" : "https://docs.azul.com/prime/ZVision",
  "link" : "https://docs.azul.com/prime/ZVision#memory-tab",
  "content" : "Memory Tab The Memory Summary window provides a summary of total memory usage and Contingency memory usage. The following tables describe the Memory Summary window elements. Memory Summary Window Elements – Java Heap Usage Element Description Used The amount of memory currently used by the JVM. Capacity The amount of memory allocated for use by the JVM. Requested capacity The maximum amount of memory requested for use by the JVM (-Xmx). GC cycle count The number of garbage collection cycles. Memory Summary Window Elements – Memory Accounts Element Description VM internal Shows allocated, balance, Reserved, and Contingency memory usage for the JVM Java heap Shows allocated, balance, Reserved, and Contingency memory usage for the Java heap. Java Pause Prevention Shows allocated, balance, Reserved, and Contingency memory usage for the Java Pause Prevention memory. GC Summary Window The GC Summary window provides a cumulative summary of the recent GC cycle history. The following table lists the GC Summary window elements. The screen lists the garbage collection information for both New generation and Old generation cycles in two parallel tables. Element Description Header Category – element being measured Statistic – aspect of the element being measured Mean – statistical calculation of collected values Stddev – standard deviation calculated for collected values Min – minimum value in collected sample Max – maximum value in collected sample Cycle Interval (sec) – elapsed time between successive GC cycle starts. Pause ratio – ratio of time application spent in safepoint pauses during the cycle to cycle interval time Reserved Peak used (MB) – the peak size of the Java heap recorded during the GC cycle Pause These values are used for internal Azul Platform Prime diagnostic purposes only. Generations New used (MB) – the amount of memory used by all young objects not known to be dead during the GC cycle. Old used (MB) – the amount of memory used by all old objects not known to be dead during the GC cycle. Perm used (MB) – the amount of memory used by all permanent objects not known to be dead during the GC cycle. Live (MB) – the live memory in the generation(s) being collected. Fragmentation (MB) – the fragmentation in the generation(s) being collected. Garbage Found (MB) – the garbage found in the generation(s) being collected. Collected (MB) – the garbage freed in the generation(s) being collected. Sideband limited (MB) – used for internal Azul Platform Prime diagnostics purposes only. Pages These values are used for internal Azul Platform Prime diagnostic purposes only. Pauses Pause 1 duration (ms) – the duration time of the pause 1 safepoint. Pause 2 duration (ms) – the duration of the pause 2 safepoint Pause 3 duration (ms) – the duration of the pause 3 safepoint Pause 4 duration (ms) – the total duration of all pause 4 safepoints for this GC cycle. Intercycle Duration (sec.) – the elapsed time from the end of the last GC cycle to the start of this GC cycle. Allocation rate (MB/s) – the object allocation rate in the generation being collected in the period between the last GC cycle to the start of this GC cycle. Perm allocation rate (MB/s) – the object allocation rate in the permanent generation during this GC cycle. Intracycle Duration (sec.) – the GC cycle elapsed time; the duration of time from the beginning to the end of this GC cycle. Allocation rate (MB/s) – the object allocation rate in the generation being collected during this GC cycle. Perm allocation rate (MB/s) – the object allocation rate in the permanent generation during this GC cycle. App threads Total threads – the total count of Java threads in the JVM. Threads delayed – the number of threads blocked trying to allocate memory during the GC cycle. When the number of delayed threads is greater than 0, application performance is affected due to lack of available memory. Average thread delay (sec) – the average delay for threads blocked trying to allocate during the GC cycle. Max thread delay (sec) – the maximum delay for threads blocked trying to allocate. GC History Window The GC History window provides a detailed summary of the recent GC cycle history with a row per cycle. Click column titles to sort by relevance. The following table lists the GC History window elements. Element Description Cycle Type Indicates GC cycle, as follows: Old – old generation cycle New – new generation cycle NTO – new generation cycle that immediately precedes an Old Gen cycle Cycle # For each New or Old Gen cycle, the number of that collection in the sequence of all collections of that type (New or Old Gen). Mode p – indicates if allocation from pause memory is enabled g – indicates if allocation from Contingency memory is enabled. Memory Heap Max – maximum amount of heap memory guaranteed to the application. This is generally set by Xmx option. Memory Reserved Peak – the peak size of the Java heap recorded during the GC cycle. Used – the amount of memory used by all objects not known to be dead during the GC cycle. Memory Pause These values are used for internal Azul Platform Prime diagnostic purposes only. Memory Generations New – the amount of memory used by all young objects not known to be dead during the GC cycle. Old – the amount of memory used by all old objects not known to be dead during the GC cycle. Perm – the amount of memory used by all permanent objects not known to be dead during the GC cycle. Live – the live memory in the generation(s) being collected. Frag – the fragmentation in the generation(s) being collected. Memory Garbage Found – the garbage found in the generation(s) being collected. Freed – the garbage freed in the generation(s) being collected. Sideband limited – used for internal Azul Platform Prime diagnostics purposes only. Memory Pages These values are used for internal Azul Platform Prime diagnostic purposes only. Intercycle Dur (sec.) – the elapsed time from the end of the last GC cycle to the start of this GC cycle. Alloc rate (MB/s) – the object allocation rate in the generation being collected in the period between the last GC cycle to the start of this GC cycle. Perm alloc rate (MB/s) – the object allocation rate in the permanent generation during this GC cycle. Intracycle Dur (sec.) – the GC cycle elapsed time; the duration of time from the beginning to the end of this GC cycle. Alloc rate (MB/s) – the object allocation rate in the generation being collected during this GC cycle. Perm alloc rate (MB/s) – the object allocation rate in the permanent generation during this GC cycle. App threads # # – the total count of Java threads in the JVM. App threads Delay # – the number of threads blocked trying to allocate memory during the GC cycle. When the number of delayed threads is greater than 0, application performance is affected due to lack of available memory. Ave (sec) – the average delay for threads blocked trying to allocate during the GC cycle. Max (sec) – the maximum delay for threads blocked trying to allocate. Browse Object Window Do not select this page directly, instead select a highlighted object, instance, method or class. The following table describes the Browse Object tab window elements. Element Description Class Property and Value If applicable, list of class properties associated with the selected object. Includes values for the listed properties. Static Fields If applicable, list of static information associated with the selected object. This includes descriptive information: Access Name Type Value Methods If applicable, list of methods associated with the selected object. Transitive Interfaces If applicable, list of transitive interfaces associated with the selected object. Allocated Objects Window Data collected for allocated objects only when the -XX:ProfileAllocatedObjects option is included in the JVM command. This feature is not supported. Live Objects Window The Live Objects window displays a current list of classes in the old generation heap that are being kept alive. Use this information to identify possible memory leaks in your Java application. Each listed row [with a plus (+)] is a referent class. Expanded rows show a list of referrer classes to the referent class. A class is listed as a referrer, when all the following conditions are met: An object of that class directly points to an object of the referent class. The referent object was seen by the GC through the referrer object. Only the first referrer seen by the GC is counted. This means that there could be other referrer objects that point to the referent objects, but they are not included. To display Live Object data, include the -XX:+ProfileLiveObjects option in the JVM command. To view current data, refresh the screen. If a GC has not occurred yet, a message to refresh is displayed. The following table describes the Live Object tab window elements. Note, all the descriptions are about the old generation heap. Element Description Total Total number of old generation live objects. Class Name Name of classes whose objects reside in old generation memory. Click the plus (+) to see referring classes. Count The number of objects of this class that are alive in the old generation heap. Size (bytes) The total amount of memory used by objects of this class. Avg Size (bytes) The average amount of memory used by objects of this class. Percentage of Live Set The percentage of the live set memory consumed by object of this class. For referrer rows this is a percentage of referrer count. Type Velocity Window The Type Velocity window displays a current list of classes in the old generation heap and their rate of memory growth. Where velocity for a class is the rate of heap growth in bytes over a selected time interval. Use this information to identify possible memory leaks in your Java application. To gather Type Velocity data, include the -XX:+ProfileLiveObjects option in the JVM command and allocate extra memory. To view current data, refresh the screen. All time listings are in format: [dd] hr:min:sec. Number of days are listed only if it is non-zero. Only the top 1000 classes, sorted by Growth Rate, are shown. The following table describes the Type Velocity tab window elements. Element Description Interval Options in increments ranging: 1 – 45 mins, 1-18 hrs, 1-7 days Requested time interval Selected time interval by the user. Best available match interval Time interval starting from the last GC cycle that most closely matches the selected interval. For example, if GC occurred at 10 minutes, 15 minutes, 20 minutes, and 45 minutes from the start of the VM, and the selected interval is 10, then the data from the GC at 20 minutes (interval-start) and 45 minutes (interval-end) are used for calculating the type velocity. Interval-start Interval-end The starting time and ending time of the best available match interval. Time is not clock time. It is time from start of VM. VM uptime Amount of time passed since the start of the VM. Class Name Name of classes whose objects reside in old generation memory. Latest Count The number of objects of this class that are alive at interval-end time. Latest Size (bytes) The total amount of memory used by objects of this class that are alive at interval-end time. Prior Count The number of objects of this class that are alive at interval-start time. Prior Size (bytes) The total amount of memory used by objects of this class that are alive at interval-start time. Delta Count The difference between the number of objects of this class that are alive between interval-start and interval-end time. Delta Size (bytes) The difference between the memory used by objects of this class between interval-start and interval-end time. Growth Rate (bytes/min) The rate of heap growth for a class over Best available match interval. Growth Rate = Delta Size / Best available match interval. Compilers Tab The Compiler tab of ZVision displays the status of Server and Client compiler tasks. The following table describes the Compiler tab window elements. Element Description Compiling Status of threads being compiled. Waiting Status of threads waiting to be compiled Applications Tab The Application tab displays a list of application classes and Java class libraries that are loaded in the JVM. If the Browse Class feature is enabled for a user in the Features tab, the hyperlink for a specific class can be selected to browse the static class data in the Browse Object window."
}, {
  "objectID" : "f32d4d92-b6cc-467a-bed9-0c145a0137c0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "ZVRobot Overview",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#zvrobot-overview",
  "content" : "ZVRobot Overview ZVRobot provides a method to collect metrics about the state of a running application and the underlying JVM. It uses the same data collection mechanisms as ZVision but stores each data snapshot persistently to a file. ZVRobot automates collecting and persistently storing the data displayed with a manual ZVision page refresh. The data stored in the files can be viewed through a browser, simulating the ZVision environment. You can set which ZVision pages to collect and, how often and how many times you want to capture the page data. Use the ZVRobot data to help you determine how to tune command line options and optimize your code performance. ZVRobot data includes: Complete internal and environment settings inventory Sample-based method profiling JVM internal subsystem behavior, including GC and the runtime compiler Lock and monitor usage metrics Thread behavior ZVRobot is a simple http client that collects ZVision data from the ARTAPort according to the criteria specified in the ZVRobot.prop file and outputs it to a specified directory as a set of time stamped XML files. It has a very low impact on performance. The ZVRobot client can be started and stopped at any time during a JVM session. ZVRobot requires JVM host connection information: JVM host IP address and JVM host ARTA port The Azul Run Time Analysis (ARTA) port is the application host port specified with the -XX:ARTAPort command line. ZVRobot output is viewable from supported Web browsers with network access to the file system where the ZVRobot files are located. The supported browsers include: Microsoft® Internet Explorer 6 (or later) on Windows 2000, Windows XP, Windows Vista, or Windows 7 Mozilla Firefox 1.0.3 (or later) on all supported operating systems Apple Safari™ 2.0 (or later) for macOS"
}, {
  "objectID" : "b48c9a2e-2bb0-40d5-97e9-16fc208670b1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Azul Customer Support",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#azul-customer-support",
  "content" : "Azul Customer Support If you are providing data for problem resolution for a case with Azul customer support: Capture the requested data in its entirety using ZVRobot. Compress the data into zip or gzipped tar file. Send it by e-mail to [email protected] or FTP upload for analysis."
}, {
  "objectID" : "58f95b89-c7fb-4ec3-8266-0519effab16a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "ZVRobot Benefits",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#zvrobot-benefits",
  "content" : "ZVRobot Benefits ZVRobot can be used in a few ways, think of ZVRobot as a flight recorder, persisting away data that can be reviewed later for offline analysis. ZVRobot data includes: Complete internal and environment settings inventory Sample-based method profiling JVM internal subsystem behaviour, including GC and the runtime compiler Lock and monitor usage metrics Thread behavior"
}, {
  "objectID" : "b7d906ba-3c5a-415a-854a-0f88124abff1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Use ZVRobot",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#use-zvrobot",
  "content" : "Use ZVRobot In development, use the ZVRobot data to help you optimize your code performance by monitoring locking behavior, finding hot methods, and monitoring other behaviors such as: per thread stack trace; tick profile; I/O wait; object size and count profile; live objects type velocity; deadlocks; monitor contention; memory usage; GC; Compilation; etc. In the Operations Center, when an alert is triggered, use a script in the management tool to start an instance of ZVRobot to record what is going on for a set period (controllable in the ZVRobot.prop file). This ensures that ZVRobot has data from when the incident occurred. In preproduction, use ZVRobot to take samples of the application before implementing major changes or code changes. Compare the ZVRobot data with samples taken with previous application code versions. This helps to identify if code changes have changes the code profile, locking or allocation rates. Periodically (weekly) take a few minutes of samples as a reference point, these reference points can be used to compare peak request loads as well as be used for long term capacity planning with your other tools."
}, {
  "objectID" : "d1eb6e48-21b4-4b3b-94fe-3d1bca7eb9f3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Configuring the Azul Platform Prime Virtual Machine to Use ZVRobot",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#configuring-the-azul-platform-prime-virtual-machine-to-use-zvrobot",
  "content" : "Configuring the Azul Platform Prime Virtual Machine to Use ZVRobot ZVRobot must be connected to the JVM you are monitoring. The following command enables ZVRobot to communicate with the JVM on the specified port of the host where the JVM is running. Add the following command line option to your Java command string that starts the JVM and your Java application.  -XX:ARTAPort={off|<port>|any} Supply a port number or set this option to any to enable the communication between JVM and ZVRobot. The ARTA (Azul Run Time Analysis) port provides internal API communication between ZVision, ZVRobot, and JVM. Valid options include: off: Default. JVM does not open a communication port and ZVRobot cannot communicate. <port>: port number for ZVRobot to use on the host. any: ZVRobot uses any free port. The port number opened by the JVM is echoed to stderr at startup. This setting is useful when starting multiple JVMs on the same host."
}, {
  "objectID" : "320a0cde-ccad-465b-a3b3-32176b33874a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Download ZVTools",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#download-zvtools",
  "content" : "Download ZVTools From Azul Platform Prime 23.07.0.0, ZVTools is not included in the Azul Platform Prime package and must be downloaded separately. ZVTools distribution can be found here: https://ftp.azul.com/releases/Zing/ZVision/ZVTools.zip"
}, {
  "objectID" : "6e75b416-f60c-409d-9b86-c954732d8027",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Installing and Configuring ZVRobot",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#installing-and-configuring-zvrobot",
  "content" : "Installing and Configuring ZVRobot Install ZVRobot and modify the ZVRobot properties file to specify the connection to the JVM and select the type of data to collect. Locate the ZVRobot directory within ZVTools.zip. Copy the ZVRobot directory to a host machine where either a Java Development Kit (JDK) or Java Runtime Environment (JRE) is installed. Note For efficient use, move the ZVRobot files to a different machine than the JVM host or Java application you are monitoring. The ZVRobot machine must be networked to the JVM host machine it is monitoring. Locate and open the ZVRobot.prop file. The file is in the top level ZVRobot directory. The file has two sections: Configuration – contains required information you must provide for ZVRobot to communicate with the JVM and options that control collection behavior. See Step 4. Page Types to Collect – contains a list of ZVision pages. Some pages are already configured to be collected. You can turn on or off the collection of any ZVision page. Provide the configuration information. In the top section of the file, enter appropriate values for the following variables: ZVRobotVars.HOST: IP address of the application host where the JVM is running. ZVRobotVars.PORT: Port on the host machine that was specified with the -XX::ARTAPort command line option when the JVM was started. ZVRobotVars.THSIZE: The number of top-level items to request for display in a page. For example, for: IO_OPEN_SOCKETS, this is the number of sockets. THREADS_LIST and THREADS_STACK_TRACE, this is the number of threads to list in a single page. LEAK_SITES, this is the per page number of location in the code identified as sites where memory is being leaked. ZVRobotVars.SECONDS: The interval in seconds between sequential requests by ZVRobot to the JVM. ZVRobotVars.COUNT: The number of snapshots to gather. A negative number is interpreted as a request for an infinite number of snapshots. If you use this option, stop the ZVRobot process with CTRL-C from the command line. Select the metrics to collect. In the third section of the file, remove or add the pound (#) character to enable or disable, respectively, collecting a page’s data. For example: To enable a <metric_name> metric, the line in the file should be:  <metric_name>=http://${HOST}:${PORT} ${SECONDS} ${COUNT} To disable the <metric_name> metric, comment out the line by adding the pound sign (#) in the line. The line in the file should be:  # <metric_name>=http://${HOST}:${PORT} ${SECONDS} ${COUNT}"
}, {
  "objectID" : "2e5b7ca9-b439-404f-b7d4-2736b7da3919",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Running ZVRobot and Collecting Data",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#running-zvrobot-and-collecting-data",
  "content" : "Running ZVRobot and Collecting Data ZVRobot communicates with the JVM using the host:port combination specified in the ZVRobot.prop file. The collected metric snapshots are written to a directory suffixed with the date and time when ZVRobot starts. In the command line for the machine where ZVRobot is installed, type the following command to run ZVRobot:  java -jar ZVRobot-<version>.jar <directory> ZVRobot.prop where: ZVRobot-<version>.jar is the JAR file that contains the ZVRobot classes <directory> is the directory in which ZVRobot creates the metric collection directory. You must have write permission for this top level directory. Use any as the directory and ZVRobot creates the metric collection directory in the current working directory. ZVRobot.prop is the edited ZVRobot property file A directory is created that contains the XML-formatted metric snapshot files as well as manifest files that contain a list of hyperlinks to these metric files. Note A sample start up script startsample.sh is provided to run ZVRobot. The script uses the provided sample ZVRobot.prop file that has a set of default metrics selected. To run this test script, modify the configuration variables in the sample ZVRobot.prop file, particularly the host and port name. Enable or Disable Tick Profiler The Tick Profiler is enabled and disabled using the Java command line option, UseTickProfiler. Default for UseTickProfiler is false, which means the Tick Profiler will not collect profiling information. To enable the Tick Profiler, use -XX:+UseTickProfiler. (set to true) To disable the Tick Profiler, use -XX:-UseTickProfiler. (default, set to false) Viewing ZVRobot Snapshot Data ZVRobot outputs two sets of files: manifest .html files and page .xml files. View the files through a browser. Navigate through your directories to the ZVRobot directory. Select a date/time stamp directory Select a manifest or page file to view. Select Open with a browser. ZVRobot Snapshot Data The ZVRobot interface consists of a series of windows that format the collected information for a given metric in the same manner as the equivalent metric that is collected in ZVision. The rest of the section describes the ZVRobot windows. Sample AzulZVRobotIndex.html file The ZVRobot manifest, AzulZVRobotIndex.html, lists hyperlinks to the manifest files specified by the appropriate metric for the corresponding ZVision window in the ZVRobot properties file, ZVRobot.prop. Click a hyperlink to display the manifest file for a specific ZVRobot metric. The following table describes: ZVRobot metric. Click the associated hyperlink to display a description of the metric. Name of the corresponding ZVRobot metric specified in ZVRobot.prop. Name of the corresponding manifest file listed in AzulZVRobotIndex.html. See Section Metric Page Name File Created ZVRobot Snapshot Data (this section) ZVProperties.prop Metric AzulZVRobotIndex.html Manifest File Name Configuration Window ZVRobotPage.CONFIG_ PROCESS Manifest.Frame.CONFIG_PROCESS.html Environment Variables Window ZVRobotPage. ENVIRONMENT_VARIABLES Manifest.Frame.ENVIRONMENT_ VARIABLES.html HotSpot Flags Window ZVRobotPage.HOTSPOT_ FLAGS Manifest.Frame.HOTSPOT_FLAGS.html Statistics Window ZVRobotPage.RUNTIME_ STATISTICS Manifest.Frame.RUNTIME_ STATISTICS.html Settings Window ZVRobotPage.SETTINGS_ GC_LOG Manifest.Frame.SETTINGS_ GC_LOG.html Features Window ZVRobotPage.FEATURES Manifest.Frame.FEATURES.html Threads List Window ZVRobotPage.THREADS_ LIST Manifest.Frame.THREADS_ LIST.html Stack Trace Window ZVRobotPage.THREADS_ STACK_TRACE Manifest.Frame.THREADS_STACK_TRACE.html Deadlocks Window ZVRobotPage.THREADS_ DEADLOCKS Manifest.Frame.THREADS_ DEADLOCKS.html Contention Window ZVRobotPage.THREADS_ MONITOR_CONTENTION Manifest.Frame.THREADS_ MONITOR_CONTENTION.html Tick Profile Window ZVRobotPage.TICKS_ PROFILE_TAG Manifest.Frame.TICKS_PROFILE_TAG.html Tick Profile Window ZVRobotPage.TICKS_ PROFILE_FLAG Manifest.Frame.TICKS_PROFILE_LOG.html Memory Summary Window ZVRobotPage.MEMORY_ SUMMARY Manifest.Frame.MEMORY_SUMMARY.html GC Summary Window ZVRobotPage.MEMORY_GC_ SUMMARY Manifest.Frame.MEMORY_GC_ SUMMARY.html GC History Window ZVRobotPage.MEMORY_GC_ HISTORY Manifest.Frame.MEMORY_GC_ HISTORY.html Compilers – Task Window ZVRobotPage.COMPILER_ TASKS Manifest.Frame.COMPILER_ TASKS.html Class List Window ZVRobotPage. APPLICATIONS_CLASS_ LIST Manifest.Frame.APPLICATIONS_ CLASS_LIST.html Configuration Window The Configuration window provides a detailed view of all the process settings for the JVM. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Configuration window elements. Element Description Version JVM version. Command line List of classes and command line options used to launch the Java application. Prepended flags / filename List of option flags from the identified file that were inserted into the front of the Java command line. Appended flags / filename List of option flags from the identified file that were appended to the end of the Java command line. Current working directory Current working directory. Java Home Path to the location of the JVM’s files on disk - location of the bin directory that contains the java executable. Class path Paths to the location of the classes and/or jar files. Boot class path Paths to the location of the classes and/or jar files on the boot class path. Extensions directories Directories for extensions. Endorsed directories Directories for classes implementing newer versions of endorsed standards. Library path Native library path. Boot library path Boot library path. ARTA Version Version of the instrumentation in the JVM that provides data to the ZVRobot server. Open descriptor count limit Limit in bytes for open file descriptors for the JVM front end. Core file size limit Maximum size in bytes for a core dump file. Environment Variables Window The Environment variables window provides a detailed view of all environmental variables set by the shell that launched the JVM. Since the information in this window does not change over time, set the ZVRobotVars.COUNT variable in the ZVRobot.prop file to 1. This tells ZVRobot to collect only one snapshot. By default, this one snapshot is displayed in work area of the page. HotSpot Flags Window The HotSpot flags window displays all -XX flags that the JVM uses, their description, and current values. This screen is for advanced diagnostics and is not intended for beginning users. Azul customer support might instruct users to look up flag values in this window. Since the information in this window does not change over time, set the ZVRobotVars.COUNT variable in the ZVRobot.prop file to 1. This tells ZVRobot to collect only one snapshot. By default, this one snapshot is displayed in work area of the page. Element Description Type The type of flag. Possible values are: Boolean: the flag requires a boolean value of true (+) or false (-). Integer or Unsigned Integer: the flag requires an integer value. String: the flag requires a string. Name The name of the flag. Value The value configured for the flag. Description The description of the flag. Statistics Window The Statistics window displays information about running applications. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Statistics window elements. Element Description SystemDictionary Stats Displays the number of Java classes loaded in the JVM. Thread Count Stats Displays the number of running threads. Settings Window The Settings window provides controls for enabling GC logging, choosing the level of detail logged, and whether the output is sent to standard out or saved to a new or existing file. ZVRobot captures the state of this window’s settings. Since the information in this window does not change over time, set the ZVRobotVars.COUNT variable in the ZVRobot.prop file to 1. This tells ZVRobot to collect only one snapshot. By default, this one snapshot is displayed in work area of the page. The following table describes the Settings window elements. Element Description Off Disables GC logging for this JVM instance. This is the default setting. Print GC Enables GC logging with summarized output. Output is equivalent to using the command line option -XX:+PrintGC. Print GC details Enables GC logging with detailed output. Output is equivalent to using the command line option -XX:+PrintGCDetails. Options: File name Type a file name to send GC log output instead of sending it to standard out. Select the check box and type an existing file name to append the output to the end of an existing file. Features Window The Features window provides controls for user access to certain ZVision and ZVRobot features in a running JVM. ZVRobot captures the state of his window’s settings. Since the information in this window does not change over time, set the ZVRobotVars.COUNT variable in the ZVRobot.prop file to 1. This tells ZVRobot to collect only one snapshot. By default, this one snapshot is displayed in work area of the page. Element Description Azul Support Enables user access to Azul Customer Support Options. Use of this feature is at your risk because some of these diagnostic features can interfere with the proper functioning of the JVM, or cause the system to crash. Browse Instance Enables users to browse a class instance, potentially exposing sensitive data within the object. Browse Class Enables users to browse the static class data, potentially exposing sensitive data within the class. Browse Method Enables users to browse a class method, potentially exposing sensitive sensitive data within the method. Environment variables Enables users to view the Environment Variables, potentially exposing sensitive sensitive data. Stack trace Enables users to use the Stack Trace window, potentially exposing sensitive sensitive data. Threads List Window The Threads List window displays all threads, status of each thread, and links to detailed information about a thread. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Threads List window elements. Element Description Name Lists the name of the thread as assigned by the application. State The most common states for threads are: running: the thread is executing on a processor core. I/O wait: the thread is waiting for socket or file I/O. acquiring monitor: the thread is waiting to acquire a synchronization monitor. acquiring and releasing monitor: the thread a requires and releases a synchronization monitor. This typically happens when the critical section of the monitor is extremely small. sleeping: the thread executed java.lang.Thread.sleep(). Other states, such as idle, semaphore wait, waiting on JVM monitor Threads lock, or Waiting on Monitor SLT lock indicate threads that are internal to the JVM. These states are not normally useful for analysis of application performance. Also, during start up, compiler threads might be running. The time (in seconds) that the thread has spent since entering the state is provided in parenthesis after the waiting state indicators. Details Provides links to a stack trace, tick profile, and object profile for the selected thread. These functions are the same as the regular tick and profile features, except that only information on the selected thread displays. The following links appear inline with threads listed in this window: *Stack: displays a thread execution details window. *Ticks: displays a per-thread profile. *Allocations: displays a thread-level Object profile. This window displays real-time counters for allocated bytes, allocated count, and average object size per object type allocated by the thread since the most recent GC cycle start. Stack Trace Window The Stack Trace window lists all threads and displays whether a thread is executing or is blocked. This can help to determine changes to make in the application code. CPU time displays for each thread. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. Deadlocks Window The Deadlocks window lists detected deadlock cycles. Threads involved for each cycle of locks are listed with the monitor type the thread is trying to acquire and the thread that is the current owner. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. Contention Window The Contention window provides statistical information for each monitor and sorts monitors by total acquire time. To sort by field, click on the column heading. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following types of monitors appear in the Contention window: Java-level monitors: identified by their class name. Internal JVM monitors: identified with the extension _lock. If there are a high number of internal JVM monitors, examine the verbose garbage collection (GC) logs. Observe if there are a large number of GC pauses. Contact Azul customer support if this becomes a problem. The total acquire time parameter is the time, in milliseconds, for acquires to occur for a given internal or Java-level monitor. The following table describes the Contention List window elements. Element Description Name The name of the monitor. Acquire Time (ms) Total: the time, in milliseconds, for acquires to occur for a given internal or Java-level monitor. This is not tracked for lightly contended thin monitors. Max (ms): the maximum time, in milliseconds, to perform an acquire. Blocking acquires Count: the number of blocking acquires. Waits Count: the number of wait cycles for the thread. Max : the maximum time, in milliseconds, of wait cycles that have occurred. Total: Cumulative wait time in milliseconds Tick Profile Window The Tick Profile window provides information to allow calculation of how processor resources are used for a recorded period of time. The time interval over which the shown ticks are collected depends on the number and activity of the threads in the Java process. The busier the threads, the faster the data is collected into the fixed-size structures that hold the data. Note Method names in the tick profiler represent compiled methods, those no longer being interpreted. All time spent by methods being interpreted is summed as one entry named Interpreter. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Tick Profile window elements. Element Description Percent The percentage of CPU resources (% of the total number of ticks collected) the method or function used. Ticks The number of (ticks) attributed to the function or method. Source A description of the function being counted. The following are definitions for specific functions: VM_GC Task: the garbage collector for the JVM. ARTA_Performance_Monitor: the function that collects and displays ZVRobot data. VM_C2 Compiler: the JVM JIT compiler compiling methods indicating that an application is still warming up. generate_monitorenter: the amount of time spent busy-waiting to acquire monitors. Memory Summary Window The Memory Summary window provides a summary of total memory usage and Contingency memory usage. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following tables describe the Memory Summary window elements. Memory Summary Window Elements – Java Heap Usage Element Description Used The amount of memory currently used by the JVM. Capacity The amount of memory allocated for use by the JVM. Requested capacity The maximum amount of memory requested for use by the JVM (-Xmx). GC cycle count The number of garbage collection cycles. Memory Summary Window Elements – Memory Accounts Element Description VM internal Shows allocated, balance, Reserved, and Contingency memory usage for the JVM. Java heap Shows allocated, balance, Reserved, and Contingency memory usage for the Java heap. Java Pause Prevention Shows allocated, balance, Reserved, and Contingency memory usage for the Java Pause Prevention memory. GC Summary Window The GC Summary window provides a cumulative summary of the recent GC cycle history. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Memory Summary window elements. Element Description New generation cycles Lists the summary values for memory usage during current cycle. Old generation cycle Lists the summary values for memory usage during generational cycle. GC History Window The GC history window provides a detailed summary of the recent GC cycle history with a row per cycle. Click column titles to sort by relevance. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the GC Memory History window elements. Element Description Cycle Interval (sec): elapsed time between successive GC cycle starts. Pause ratio: ratio of time application spent in safe point pauses during the cycle to cycle interval time. Mode p: indicates if allocation from pause memory is enabled g: indicates if allocation from Contingency memory is enabled. Heap Live (MB): the amount of Java memory used by all application objects currently not known to be dead. Peak (MB): the peak size of the Java heap recorded during the GC cycle. Peak (pgs): the peak size of the Java heap recorded during the GC cycle (in MB by page increments). Max (MB): maximum amount of heap memory guaranteed to the application. This is generally set by –Xmx option. Reserved Peak (MB): the peak size of the memory Reserved during the GC cycle. Used (MB): the amount of Reserved memory used during the GC cycle. Pause These values are used for internal Azul Platform Prime diagnostic purposes only. Generations Total fragmentation (MB): the total fragmentation in the heap. New used (MB): the amount of memory used by all young objects not known to be dead during the GC cycle. Old used (MB): the amount of memory used by all old objects not known to be dead during the GC cycle. Perm used (MB): the amount of memory used by all permanent objects not known to be dead during the GC cycle. Live (MB): the live memory in the generation(s) being collected. Fragmentation (MB): the fragmentation in the generation(s) being collected. Garbage Found (MB): the garbage found in the generation(s) being collected. Freed (MB): the garbage freed in the generation(s) being collected. Sideband limited (MB): used for internal Azul Platform Prime diagnostics purposes only. Pages These values are used for internal Azul Platform Prime diagnostics purposes only. Pauses Pause 1 start (sec): the start time of the pause 1 safepoint. Pause 1 duration (ms): the duration time of the pause 1 safepoint. Pause 2 start (sec): the start time of the pause 2 safepoint. Pause 2 duration (ms): the duration of the pause 2 safepoint Pause 3 duration (ms): the total duration of all pause 3 safepoints for this GC cycle. Pauses (garbage collector only) Pause 3 start (sec): the start time of the pause 3 safepoint. Pause 3 count: the number of pause 3 safepoints. Pause 3 max: the maximum duration of any one pause 3 safepoint. Intercycle Duration (sec.): the elapsed time from the end of the last GC cycle to the start of this GC cycle. Allocation rate (MB/s): the object allocation rate in the generation being collected in the period between the last GC cycle to the start of this GC cycle. Intercycle (garbage collector only) Perm allocation rate (MB/s): the object allocation rate in the permanent generation during this GC cycle. Intracycle Duration (sec.): the GC cycle elapsed time; the duration of time from the beginning to the end of this GC cycle. Allocation rate (MB/s): the object allocation rate in the generation being collected during this GC cycle. Intracycle (garbage collector only) Perm allocation rate (MB/s): the object allocation rate in the permanent generation during this GC cycle. App threads Total threads: the total count of Java threads in the JVM. Threads delayed: the number of threads blocked trying to allocate memory during the GC cycle. When the number of delayed threads is greater than 0, application performance is affected due to lack of available memory. Average thread delay (sec): the average delay for threads blocked trying to allocate during the GC cycle. Max thread delay (sec): the maximum delay for threads blocked trying to allocate. Compilers – Task Window The Compilers Task window of ZVRobot displays the status of Server and Client compiler tasks. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Compilers Tab window elements. Element Description Compiling Status of threads compiling. Waiting Status of threads waiting compiling. Class List Window The Class List window displays a list of application and Java class library classes that are loaded in the JVM. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file."
}, {
  "objectID" : "97683112-4066-4374-9486-e58074112533",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Enable or Disable Tick Profiler",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#enable-or-disable-tick-profiler",
  "content" : "Enable or Disable Tick Profiler The Tick Profiler is enabled and disabled using the Java command line option, UseTickProfiler. Default for UseTickProfiler is false, which means the Tick Profiler will not collect profiling information. To enable the Tick Profiler, use -XX:+UseTickProfiler. (set to true) To disable the Tick Profiler, use -XX:-UseTickProfiler. (default, set to false)"
}, {
  "objectID" : "f1cc9dd0-87e7-4625-8b74-c95065035bdb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Viewing ZVRobot Snapshot Data",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#viewing-zvrobot-snapshot-data",
  "content" : "Viewing ZVRobot Snapshot Data ZVRobot outputs two sets of files: manifest .html files and page .xml files. View the files through a browser. Navigate through your directories to the ZVRobot directory. Select a date/time stamp directory Select a manifest or page file to view. Select Open with a browser."
}, {
  "objectID" : "82846268-cd55-4c78-b1c0-9ef580f47fdb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "ZVRobot Snapshot Data",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#zvrobot-snapshot-data",
  "content" : "ZVRobot Snapshot Data The ZVRobot interface consists of a series of windows that format the collected information for a given metric in the same manner as the equivalent metric that is collected in ZVision. The rest of the section describes the ZVRobot windows. Sample AzulZVRobotIndex.html file The ZVRobot manifest, AzulZVRobotIndex.html, lists hyperlinks to the manifest files specified by the appropriate metric for the corresponding ZVision window in the ZVRobot properties file, ZVRobot.prop. Click a hyperlink to display the manifest file for a specific ZVRobot metric. The following table describes: ZVRobot metric. Click the associated hyperlink to display a description of the metric. Name of the corresponding ZVRobot metric specified in ZVRobot.prop. Name of the corresponding manifest file listed in AzulZVRobotIndex.html. See Section Metric Page Name File Created ZVRobot Snapshot Data (this section) ZVProperties.prop Metric AzulZVRobotIndex.html Manifest File Name Configuration Window ZVRobotPage.CONFIG_ PROCESS Manifest.Frame.CONFIG_PROCESS.html Environment Variables Window ZVRobotPage. ENVIRONMENT_VARIABLES Manifest.Frame.ENVIRONMENT_ VARIABLES.html HotSpot Flags Window ZVRobotPage.HOTSPOT_ FLAGS Manifest.Frame.HOTSPOT_FLAGS.html Statistics Window ZVRobotPage.RUNTIME_ STATISTICS Manifest.Frame.RUNTIME_ STATISTICS.html Settings Window ZVRobotPage.SETTINGS_ GC_LOG Manifest.Frame.SETTINGS_ GC_LOG.html Features Window ZVRobotPage.FEATURES Manifest.Frame.FEATURES.html Threads List Window ZVRobotPage.THREADS_ LIST Manifest.Frame.THREADS_ LIST.html Stack Trace Window ZVRobotPage.THREADS_ STACK_TRACE Manifest.Frame.THREADS_STACK_TRACE.html Deadlocks Window ZVRobotPage.THREADS_ DEADLOCKS Manifest.Frame.THREADS_ DEADLOCKS.html Contention Window ZVRobotPage.THREADS_ MONITOR_CONTENTION Manifest.Frame.THREADS_ MONITOR_CONTENTION.html Tick Profile Window ZVRobotPage.TICKS_ PROFILE_TAG Manifest.Frame.TICKS_PROFILE_TAG.html Tick Profile Window ZVRobotPage.TICKS_ PROFILE_FLAG Manifest.Frame.TICKS_PROFILE_LOG.html Memory Summary Window ZVRobotPage.MEMORY_ SUMMARY Manifest.Frame.MEMORY_SUMMARY.html GC Summary Window ZVRobotPage.MEMORY_GC_ SUMMARY Manifest.Frame.MEMORY_GC_ SUMMARY.html GC History Window ZVRobotPage.MEMORY_GC_ HISTORY Manifest.Frame.MEMORY_GC_ HISTORY.html Compilers – Task Window ZVRobotPage.COMPILER_ TASKS Manifest.Frame.COMPILER_ TASKS.html Class List Window ZVRobotPage. APPLICATIONS_CLASS_ LIST Manifest.Frame.APPLICATIONS_ CLASS_LIST.html"
}, {
  "objectID" : "33647ade-8802-4df3-a883-2dafe0ce748b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Configuration Window",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#configuration-window",
  "content" : "Configuration Window The Configuration window provides a detailed view of all the process settings for the JVM. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Configuration window elements. Element Description Version JVM version. Command line List of classes and command line options used to launch the Java application. Prepended flags / filename List of option flags from the identified file that were inserted into the front of the Java command line. Appended flags / filename List of option flags from the identified file that were appended to the end of the Java command line. Current working directory Current working directory. Java Home Path to the location of the JVM’s files on disk - location of the bin directory that contains the java executable. Class path Paths to the location of the classes and/or jar files. Boot class path Paths to the location of the classes and/or jar files on the boot class path. Extensions directories Directories for extensions. Endorsed directories Directories for classes implementing newer versions of endorsed standards. Library path Native library path. Boot library path Boot library path. ARTA Version Version of the instrumentation in the JVM that provides data to the ZVRobot server. Open descriptor count limit Limit in bytes for open file descriptors for the JVM front end. Core file size limit Maximum size in bytes for a core dump file. Environment Variables Window The Environment variables window provides a detailed view of all environmental variables set by the shell that launched the JVM. Since the information in this window does not change over time, set the ZVRobotVars.COUNT variable in the ZVRobot.prop file to 1. This tells ZVRobot to collect only one snapshot. By default, this one snapshot is displayed in work area of the page. HotSpot Flags Window The HotSpot flags window displays all -XX flags that the JVM uses, their description, and current values. This screen is for advanced diagnostics and is not intended for beginning users. Azul customer support might instruct users to look up flag values in this window. Since the information in this window does not change over time, set the ZVRobotVars.COUNT variable in the ZVRobot.prop file to 1. This tells ZVRobot to collect only one snapshot. By default, this one snapshot is displayed in work area of the page. Element Description Type The type of flag. Possible values are: Boolean: the flag requires a boolean value of true (+) or false (-). Integer or Unsigned Integer: the flag requires an integer value. String: the flag requires a string. Name The name of the flag. Value The value configured for the flag. Description The description of the flag. Statistics Window The Statistics window displays information about running applications. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Statistics window elements. Element Description SystemDictionary Stats Displays the number of Java classes loaded in the JVM. Thread Count Stats Displays the number of running threads. Settings Window The Settings window provides controls for enabling GC logging, choosing the level of detail logged, and whether the output is sent to standard out or saved to a new or existing file. ZVRobot captures the state of this window’s settings. Since the information in this window does not change over time, set the ZVRobotVars.COUNT variable in the ZVRobot.prop file to 1. This tells ZVRobot to collect only one snapshot. By default, this one snapshot is displayed in work area of the page. The following table describes the Settings window elements. Element Description Off Disables GC logging for this JVM instance. This is the default setting. Print GC Enables GC logging with summarized output. Output is equivalent to using the command line option -XX:+PrintGC. Print GC details Enables GC logging with detailed output. Output is equivalent to using the command line option -XX:+PrintGCDetails. Options: File name Type a file name to send GC log output instead of sending it to standard out. Select the check box and type an existing file name to append the output to the end of an existing file. Features Window The Features window provides controls for user access to certain ZVision and ZVRobot features in a running JVM. ZVRobot captures the state of his window’s settings. Since the information in this window does not change over time, set the ZVRobotVars.COUNT variable in the ZVRobot.prop file to 1. This tells ZVRobot to collect only one snapshot. By default, this one snapshot is displayed in work area of the page. Element Description Azul Support Enables user access to Azul Customer Support Options. Use of this feature is at your risk because some of these diagnostic features can interfere with the proper functioning of the JVM, or cause the system to crash. Browse Instance Enables users to browse a class instance, potentially exposing sensitive data within the object. Browse Class Enables users to browse the static class data, potentially exposing sensitive data within the class. Browse Method Enables users to browse a class method, potentially exposing sensitive sensitive data within the method. Environment variables Enables users to view the Environment Variables, potentially exposing sensitive sensitive data. Stack trace Enables users to use the Stack Trace window, potentially exposing sensitive sensitive data. Threads List Window The Threads List window displays all threads, status of each thread, and links to detailed information about a thread. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Threads List window elements. Element Description Name Lists the name of the thread as assigned by the application. State The most common states for threads are: running: the thread is executing on a processor core. I/O wait: the thread is waiting for socket or file I/O. acquiring monitor: the thread is waiting to acquire a synchronization monitor. acquiring and releasing monitor: the thread a requires and releases a synchronization monitor. This typically happens when the critical section of the monitor is extremely small. sleeping: the thread executed java.lang.Thread.sleep(). Other states, such as idle, semaphore wait, waiting on JVM monitor Threads lock, or Waiting on Monitor SLT lock indicate threads that are internal to the JVM. These states are not normally useful for analysis of application performance. Also, during start up, compiler threads might be running. The time (in seconds) that the thread has spent since entering the state is provided in parenthesis after the waiting state indicators. Details Provides links to a stack trace, tick profile, and object profile for the selected thread. These functions are the same as the regular tick and profile features, except that only information on the selected thread displays. The following links appear inline with threads listed in this window: *Stack: displays a thread execution details window. *Ticks: displays a per-thread profile. *Allocations: displays a thread-level Object profile. This window displays real-time counters for allocated bytes, allocated count, and average object size per object type allocated by the thread since the most recent GC cycle start."
}, {
  "objectID" : "d69c11f4-85b2-4542-8424-e979e0cb326e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Stack Trace Window",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#stack-trace-window",
  "content" : "Stack Trace Window The Stack Trace window lists all threads and displays whether a thread is executing or is blocked. This can help to determine changes to make in the application code. CPU time displays for each thread. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file."
}, {
  "objectID" : "e4d0abb3-fa73-4bf7-a0dc-e37bf1facb8c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Deadlocks Window",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#deadlocks-window",
  "content" : "Deadlocks Window The Deadlocks window lists detected deadlock cycles. Threads involved for each cycle of locks are listed with the monitor type the thread is trying to acquire and the thread that is the current owner. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file."
}, {
  "objectID" : "b49fc7bd-3aad-4e46-9e7c-094c3c2cf787",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Contention Window",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#contention-window",
  "content" : "Contention Window The Contention window provides statistical information for each monitor and sorts monitors by total acquire time. To sort by field, click on the column heading. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following types of monitors appear in the Contention window: Java-level monitors: identified by their class name. Internal JVM monitors: identified with the extension _lock. If there are a high number of internal JVM monitors, examine the verbose garbage collection (GC) logs. Observe if there are a large number of GC pauses. Contact Azul customer support if this becomes a problem. The total acquire time parameter is the time, in milliseconds, for acquires to occur for a given internal or Java-level monitor. The following table describes the Contention List window elements. Element Description Name The name of the monitor. Acquire Time (ms) Total: the time, in milliseconds, for acquires to occur for a given internal or Java-level monitor. This is not tracked for lightly contended thin monitors. Max (ms): the maximum time, in milliseconds, to perform an acquire. Blocking acquires Count: the number of blocking acquires. Waits Count: the number of wait cycles for the thread. Max : the maximum time, in milliseconds, of wait cycles that have occurred. Total: Cumulative wait time in milliseconds Tick Profile Window The Tick Profile window provides information to allow calculation of how processor resources are used for a recorded period of time. The time interval over which the shown ticks are collected depends on the number and activity of the threads in the Java process. The busier the threads, the faster the data is collected into the fixed-size structures that hold the data. Note Method names in the tick profiler represent compiled methods, those no longer being interpreted. All time spent by methods being interpreted is summed as one entry named Interpreter. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Tick Profile window elements. Element Description Percent The percentage of CPU resources (% of the total number of ticks collected) the method or function used. Ticks The number of (ticks) attributed to the function or method. Source A description of the function being counted. The following are definitions for specific functions: VM_GC Task: the garbage collector for the JVM. ARTA_Performance_Monitor: the function that collects and displays ZVRobot data. VM_C2 Compiler: the JVM JIT compiler compiling methods indicating that an application is still warming up. generate_monitorenter: the amount of time spent busy-waiting to acquire monitors."
}, {
  "objectID" : "19f954f2-4055-437f-90c9-f2f63325fcbc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Memory Summary Window",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#memory-summary-window",
  "content" : "Memory Summary Window The Memory Summary window provides a summary of total memory usage and Contingency memory usage. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following tables describe the Memory Summary window elements. Memory Summary Window Elements – Java Heap Usage Element Description Used The amount of memory currently used by the JVM. Capacity The amount of memory allocated for use by the JVM. Requested capacity The maximum amount of memory requested for use by the JVM (-Xmx). GC cycle count The number of garbage collection cycles. Memory Summary Window Elements – Memory Accounts Element Description VM internal Shows allocated, balance, Reserved, and Contingency memory usage for the JVM. Java heap Shows allocated, balance, Reserved, and Contingency memory usage for the Java heap. Java Pause Prevention Shows allocated, balance, Reserved, and Contingency memory usage for the Java Pause Prevention memory."
}, {
  "objectID" : "647cba03-90f7-45de-bedc-5d5e201f8053",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "GC Summary Window",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#gc-summary-window",
  "content" : "GC Summary Window The GC Summary window provides a cumulative summary of the recent GC cycle history. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Memory Summary window elements. Element Description New generation cycles Lists the summary values for memory usage during current cycle. Old generation cycle Lists the summary values for memory usage during generational cycle."
}, {
  "objectID" : "4036083a-1b06-43b6-8e62-e199c16fcb55",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "GC History Window",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#gc-history-window",
  "content" : "GC History Window The GC history window provides a detailed summary of the recent GC cycle history with a row per cycle. Click column titles to sort by relevance. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the GC Memory History window elements. Element Description Cycle Interval (sec): elapsed time between successive GC cycle starts. Pause ratio: ratio of time application spent in safe point pauses during the cycle to cycle interval time. Mode p: indicates if allocation from pause memory is enabled g: indicates if allocation from Contingency memory is enabled. Heap Live (MB): the amount of Java memory used by all application objects currently not known to be dead. Peak (MB): the peak size of the Java heap recorded during the GC cycle. Peak (pgs): the peak size of the Java heap recorded during the GC cycle (in MB by page increments). Max (MB): maximum amount of heap memory guaranteed to the application. This is generally set by –Xmx option. Reserved Peak (MB): the peak size of the memory Reserved during the GC cycle. Used (MB): the amount of Reserved memory used during the GC cycle. Pause These values are used for internal Azul Platform Prime diagnostic purposes only. Generations Total fragmentation (MB): the total fragmentation in the heap. New used (MB): the amount of memory used by all young objects not known to be dead during the GC cycle. Old used (MB): the amount of memory used by all old objects not known to be dead during the GC cycle. Perm used (MB): the amount of memory used by all permanent objects not known to be dead during the GC cycle. Live (MB): the live memory in the generation(s) being collected. Fragmentation (MB): the fragmentation in the generation(s) being collected. Garbage Found (MB): the garbage found in the generation(s) being collected. Freed (MB): the garbage freed in the generation(s) being collected. Sideband limited (MB): used for internal Azul Platform Prime diagnostics purposes only. Pages These values are used for internal Azul Platform Prime diagnostics purposes only. Pauses Pause 1 start (sec): the start time of the pause 1 safepoint. Pause 1 duration (ms): the duration time of the pause 1 safepoint. Pause 2 start (sec): the start time of the pause 2 safepoint. Pause 2 duration (ms): the duration of the pause 2 safepoint Pause 3 duration (ms): the total duration of all pause 3 safepoints for this GC cycle. Pauses (garbage collector only) Pause 3 start (sec): the start time of the pause 3 safepoint. Pause 3 count: the number of pause 3 safepoints. Pause 3 max: the maximum duration of any one pause 3 safepoint. Intercycle Duration (sec.): the elapsed time from the end of the last GC cycle to the start of this GC cycle. Allocation rate (MB/s): the object allocation rate in the generation being collected in the period between the last GC cycle to the start of this GC cycle. Intercycle (garbage collector only) Perm allocation rate (MB/s): the object allocation rate in the permanent generation during this GC cycle. Intracycle Duration (sec.): the GC cycle elapsed time; the duration of time from the beginning to the end of this GC cycle. Allocation rate (MB/s): the object allocation rate in the generation being collected during this GC cycle. Intracycle (garbage collector only) Perm allocation rate (MB/s): the object allocation rate in the permanent generation during this GC cycle. App threads Total threads: the total count of Java threads in the JVM. Threads delayed: the number of threads blocked trying to allocate memory during the GC cycle. When the number of delayed threads is greater than 0, application performance is affected due to lack of available memory. Average thread delay (sec): the average delay for threads blocked trying to allocate during the GC cycle. Max thread delay (sec): the maximum delay for threads blocked trying to allocate."
}, {
  "objectID" : "1b5ac61c-a365-419f-9202-1200b1ba0684",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Compilers – Task Window",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#compilers-task-window",
  "content" : "Compilers – Task Window The Compilers Task window of ZVRobot displays the status of Server and Client compiler tasks. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file. The following table describes the Compilers Tab window elements. Element Description Compiling Status of threads compiling. Waiting Status of threads waiting compiling."
}, {
  "objectID" : "7a705dff-4e62-4f85-b481-8372b5dda2d6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using ZVision Robot",
  "section" : "Class List Window",
  "url" : "https://docs.azul.com/prime/ZVision-Robot",
  "link" : "https://docs.azul.com/prime/ZVision-Robot#class-list-window",
  "content" : "Class List Window The Class List window displays a list of application and Java class library classes that are loaded in the JVM. Click a hyperlink in the left column to display the collected information for a snapshot. The number of snapshots and the interval between snapshot collection is specified by the ZVRobotVars.COUNT and ZVRobotVars.SECOND variables in the ZVRobot.prop file."
}, {
  "objectID" : "bff59ae4-46cd-44ee-865a-a82b97307adc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "content" : "Although the Java platform simplifies many aspects of software development, it introduces side effects of its runtime environment and memory models that can negatively affect runtime performance. Some performance concerns include the following: System pauses during garbage collection (GC) Warmup delays for just-in-time compilation Response latencies Once you have identified performance problems, you can perform root-cause analysis to determine the exact cause of the problem. You can perform root-cause analysis with unit and system tests but another option is to analyze the GC log. This article describes the following: How to create a GC log How to view the log data in the GC Log Analyzer tool How to interpret log analyzer metrics and visual graphs to resolve common Java performance problems. It’s important to note that the GC Log Analyzer can help identify a wide range of problems, from common to uncommon and from severe to trivial, which means choosing which graphs to look at in order to identify particular problems is purely a subjective task which changes from person to person. The information covered in this guide is meant to give you only a general idea of how to identify the most common and severe problems, using real-world examples."
}, {
  "objectID" : "a1639325-eb10-4fac-a0f1-7ca2c21db442",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "Generating GC Logs",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#generating-gc-logs",
  "content" : "Generating GC Logs To begin analysis of a poorly performing application, you must generate a GC log. Start your application with an additional parameter to begin generating the log file:  java -Xlog:gc:<filename> -jar <application.jar> The -Xlog:gc:<filename> parameter tells the Java Virtual Machine (JVM) to log garbage collection information to the file you specify. Although the log generator supports many options, the above is enough to get started. You can learn more about GC log output options from the Unified Logging documentation. Run your application under the same stress as your live application if possible. If not, you may have to simulate typical application conditions so that you duplicate the problematic behavior. Once you have a sufficient amount of log data, you are ready to view the logs with the GC Log Analyzer."
}, {
  "objectID" : "1d6aecf1-deec-4be4-b57d-c886b4e796b8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "Downloading and Running the Analyzer",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#downloading-and-running-the-analyzer",
  "content" : "Downloading and Running the Analyzer To run the GC Log Analyzer: Download the GCLogAnalayzer jar file. Open GC Log Analyzer using the following command:  java -jar GCLogAnalyzer2.jar <filename.log> The <filename> argument is optional and opens the specified log file in GC Log Analyzer at startup. Log files can also be opened once GC Log analyzer is running using File > Open File or by simply dragging and dropping a log file into the GC Log Analyzer application window."
}, {
  "objectID" : "57fb0816-b481-4393-9f57-ca6232ff5688",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "Understanding the Analyzer",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#understanding-the-analyzer",
  "content" : "Understanding the Analyzer The log analyzer has many analytical and display options. You can learn more details about these options from the Using the GC Log Analyzer documentation. For this article, we will cover some of the highlights and most helpful graphs. The log analyzer helps you to understand an application’s performance, memory usage, pauses, CPU usage, and even object allocation rates. As we investigate the analyzer, we will use a sample log file. Using this log, we will look at important screens within the UI that can help us understand the application’s performance. When looking at the analyzer graphs, it’s easy to feel overwhelmed with information. The GC logs can be quite verbose. It’s best to keep things simple. We’ll look at the following items in order: General Information GC Time (percent) GC Count Heap Collected Load Average Live Set"
}, {
  "objectID" : "6607c534-0299-438f-b8ac-c811e9cd0a8e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "General Information",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#general-information",
  "content" : "General Information The following image outlines the main parts of the GC Log Analyzer application. The first screen to look at is the basic information screen. Click at the top of the log analyzer screen. The general information screen shows basic static information about your system such as the following: Host Name CPU Count Total RAM JVM Arguments Along the left side of the analyzer screen is the list of all graphs provided by the tool, in the data directory. For the purpose of this guide, we will only be looking at a few of these graphs. Whenever you click on a graph, the graph’s time selection bar will appear below the graph itself. This is a tool for analyzing a particular portion of the graph. You can refine or expand the view by dragging the dots left or right."
}, {
  "objectID" : "17a51467-d01b-4a24-9aa1-00e15e683e04",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "Looking at the Graphs",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#looking-at-the-graphs",
  "content" : "Looking at the Graphs The GC Log Analyzer contains a lot of data and can seem overwhelming. It’s important to familiarize yourself with which graphs can indicate which problems. The following graphs were chosen for this example as they are commonly used to identify particular common problems. The graphs in the following sections displaying problematic behavior were obtained using an application simulator. All of the following graphs are from the same system using the same bad system setup. The initial bad setup has the following problems: Heaps are too small - 8GB Elastic heap set to true Large amount of reference data loaded - 5GB No garbage collection after reference data is loaded Too short rampup Too high transaction rates - 4 threads with 200 transactions/second each GC > GC Time (Percent) Click GC > GC Time (Percent) to see the percent of time that the garbage collector threads are running along the Y axis, over time along the X axis. The following graph shows collector threads running 100% of the time very frequently. Any spike above 30% should be investigated. This is a clear indication of a problem. Because the GC is running frequently and for long amounts of time, the application may be suffering from a lack of heap memory size. The next graph shows a healthy GC Time graph: GC > GC Count Click GC > GC Count to see the accumulated count of GC cycles over the lifetime of the application. In the following graph, focus on the \"New GC Count\" line (blue). Look for periods where the new GC count rises quickly. Calculate the number of cycles per minute. Take two points on the graph, and calculate the time differential and the GC count differential. We want to calculate cycles per minute. You should investigate anything over 10 cycles/minute. Anything over 20 cycles/minute is a serious concern. In the above graph, let’s look at the 1-minute interval from 30 seconds to 1 minute 30 seconds. If you hover the mouse over the graph, the analyzer will show you the exact time and GC count. Using the above graph, we do the following calculation:  72 cycles - 17 cycles = 55 cycles\n72 cycles/1 min = 55 cycles/min The graph above shows that the GC is running 55 times a minute. This is a serious cause for concern. The following graph shows a healthy GC count graph. When we use the same method to calculate GC cycles, using a 10 minute interval, we can see that the GC is running just 0.2 times a minute.  422 cycles – 420 cycles = 2 cycles\n2 cycles/10 min = 0.2 cycles/min Java Heap > Garbage Collected click Java Heap > Garbage Collected to see the amount of memory reclaimed by the garbage collector for both \"newGen\" and \"oldGen\" memory. The more garbage collected per cycle, the better. Watch for dramatic drops in the amount of garbage collected per collection cycle. This is particularly troublesome if you also notice cycle frequency increases, too. Typically, a healthy graph will show newGen cycles reclaim at least 10x than oldGen cycles. The following graph shows an unhealthy Java Heap graph. You can compare the above graph to the below graph, showing a healthy Java Heap graph. System > Load Average Click System > Load Average to display the thread count over time as the application runs. One sign of memory pressure is a thread count spike that is greater than the number of cores. For example, the following graph, from a machine with 8 cores and 16 threads, shows frequent jumps above 20 system threads, all the way up to 60 system threads, which suggests low memory. The following graph, from the same machine with 8 cores and 16 threads, shows a healthy Load Average graph, showing a steady average load under 5 threads. Java Heap > Live Set Click Java Heap > Live Set (either Known Live or Not Known as Dead) to show how big the objects were during garbage collection cycles. This set of graphs is only an estimate of object size. The \"Known Live\" graph represents an underestimate while the \"Not Known as Dead\" graph represents an overestimate. Old heap garbage collection is more stable than new heap garbage collection. You know from the system configuration that reference data is being loaded at the beginning. With this in mind, the following unhealthy graph shows that too much reference data is being loaded at system startup, causing system instability. Furthermore, you can see that old heap garbage collection stops entirely after just 28 seconds. The following healthy graph shows the same initial loading of reference data, yet old heap garbage collection continues to an eventually stable state."
}, {
  "objectID" : "e8518ced-8620-473c-b9ae-7954b9b7eecd",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "GC > GC Time (Percent)",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#gc-gc-time-percent",
  "content" : "GC > GC Time (Percent) Click GC > GC Time (Percent) to see the percent of time that the garbage collector threads are running along the Y axis, over time along the X axis. The following graph shows collector threads running 100% of the time very frequently. Any spike above 30% should be investigated. This is a clear indication of a problem. Because the GC is running frequently and for long amounts of time, the application may be suffering from a lack of heap memory size. The next graph shows a healthy GC Time graph:"
}, {
  "objectID" : "ceaa84a7-8dd7-4072-b8fb-930af1c1e7f2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "GC > GC Count",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#gc-gc-count",
  "content" : "GC > GC Count Click GC > GC Count to see the accumulated count of GC cycles over the lifetime of the application. In the following graph, focus on the \"New GC Count\" line (blue). Look for periods where the new GC count rises quickly. Calculate the number of cycles per minute. Take two points on the graph, and calculate the time differential and the GC count differential. We want to calculate cycles per minute. You should investigate anything over 10 cycles/minute. Anything over 20 cycles/minute is a serious concern. In the above graph, let’s look at the 1-minute interval from 30 seconds to 1 minute 30 seconds. If you hover the mouse over the graph, the analyzer will show you the exact time and GC count. Using the above graph, we do the following calculation:  72 cycles - 17 cycles = 55 cycles\n72 cycles/1 min = 55 cycles/min The graph above shows that the GC is running 55 times a minute. This is a serious cause for concern. The following graph shows a healthy GC count graph. When we use the same method to calculate GC cycles, using a 10 minute interval, we can see that the GC is running just 0.2 times a minute.  422 cycles – 420 cycles = 2 cycles\n2 cycles/10 min = 0.2 cycles/min"
}, {
  "objectID" : "1ef3c9d0-82ef-48b0-9f09-edc74c276cfe",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "Java Heap > Garbage Collected",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#java-heap-garbage-collected",
  "content" : "Java Heap > Garbage Collected click Java Heap > Garbage Collected to see the amount of memory reclaimed by the garbage collector for both \"newGen\" and \"oldGen\" memory. The more garbage collected per cycle, the better. Watch for dramatic drops in the amount of garbage collected per collection cycle. This is particularly troublesome if you also notice cycle frequency increases, too. Typically, a healthy graph will show newGen cycles reclaim at least 10x than oldGen cycles. The following graph shows an unhealthy Java Heap graph. You can compare the above graph to the below graph, showing a healthy Java Heap graph."
}, {
  "objectID" : "cae6fe70-ba04-41e3-9848-517167fdab6c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "System > Load Average",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#system-load-average",
  "content" : "System > Load Average Click System > Load Average to display the thread count over time as the application runs. One sign of memory pressure is a thread count spike that is greater than the number of cores. For example, the following graph, from a machine with 8 cores and 16 threads, shows frequent jumps above 20 system threads, all the way up to 60 system threads, which suggests low memory. The following graph, from the same machine with 8 cores and 16 threads, shows a healthy Load Average graph, showing a steady average load under 5 threads."
}, {
  "objectID" : "3d5d2fb9-d6b9-4439-aa0d-0869f88943c3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "Java Heap > Live Set",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#java-heap-live-set",
  "content" : "Java Heap > Live Set Click Java Heap > Live Set (either Known Live or Not Known as Dead) to show how big the objects were during garbage collection cycles. This set of graphs is only an estimate of object size. The \"Known Live\" graph represents an underestimate while the \"Not Known as Dead\" graph represents an overestimate. Old heap garbage collection is more stable than new heap garbage collection. You know from the system configuration that reference data is being loaded at the beginning. With this in mind, the following unhealthy graph shows that too much reference data is being loaded at system startup, causing system instability. Furthermore, you can see that old heap garbage collection stops entirely after just 28 seconds. The following healthy graph shows the same initial loading of reference data, yet old heap garbage collection continues to an eventually stable state."
}, {
  "objectID" : "374add67-d4e3-476e-9d45-a8fe2d42f618",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "Conclusions",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#conclusions",
  "content" : "Conclusions The GC Log Analyzer is an important tool for understanding application and JVM performance. Although the tool has much more functionality, you can gain significant awareness of your application performance by investigating just a few major graphs and metrics. Here is a brief review of the graphs covered in this guide and why they are important: GC > GC Time (percent) - Even if all else is perfect, irregularities and too high of a value may hint towards a scalability limitation. GC > GC Count - A high number of garbage collection cycles indicates a serious problem. Java Heap > Garbage Collected - Should be nice and regular newGen and fairly infrequent oldGen. System > Load Average - Check if your CPU is being overloaded. Java Heap > Live Set - Too big of a live set with too little room to spare. In the examples shown in this article, GC cycle times were frequent and often ran at 100% capacity. This is indicative of significant memory pressure. Although system memory is significantly higher than application memory, we might suspect that the heap size is too small. One of the resolutions includes increasing heap size. Additional Resources You can learn more from Azul’s official documentation here: Using the GC Log Analyzer"
}, {
  "objectID" : "506a5fb6-613e-4522-a2bf-7078e82adad6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Diagnosing Java Performance Problems with the GC Log Analyzer",
  "section" : "Additional Resources",
  "url" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer",
  "link" : "https://docs.azul.com/prime/diagnosing-java-performance-problems-with-gc-log-analyzer#additional-resources",
  "content" : "Additional Resources You can learn more from Azul’s official documentation here: Using the GC Log Analyzer"
}, {
  "objectID" : "d3754f80-5501-419c-9775-824fbee94d77",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "content" : "Warm-up is the time taken for the Java application to reach the optimum compiled code performance. It is the task of the Just-in-Time (JIT) compiler to deliver optimal performance by producing optimized compiled code from application bytecode. This article will give you a basic understanding of how JIT compilation works and how to optimize warm-up using Azul Zing Builds of OpenJDK (Zing)."
}, {
  "objectID" : "bf40e051-0a42-41ee-8bc3-792d32d33f6e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "An Introduction to JIT Compilation",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#an-introduction-to-jit-compilation",
  "content" : "An Introduction to JIT Compilation When people think of Java compilers, they usually think about javac, which turns your Java source code into Java bytecode. But equally important is JIT compilation, which turns your Java bytecode into optimized machine code for the specific hardware on which your Java program is running. When you first start your Java program, the JVM takes the platform-independent bytecode and runs it in the interpreter, which takes more CPU resources and is slower to execute. After a certain number of invocations (default 1K), the method is promoted to a profiling tier, known as the Tier 1 compiler or C1. Here the JVM monitors the method to build a profile of how many times each method is called, with which code paths, and how they are executed in the profiled method. After the compile threshold is reached (default 10K), the JVM promotes the method to the Tier 2 compiler by putting it in the Tier 2 compile queue. The Tier 2 compiler uses the Tier 1 profile to compile methods into highly optimized machine code. Speed of the application through the different phases of interpreted bytecode, Tier 1 profiling, and Tier 2 optimized code Because JIT compilation needs to use the same resources that your program runs, JIT compilers are usually very conservative in their operations. The performance of your application is lower and less stable during the warm-up phase when the JVM is identifying and compiling all hot methods. Eventually, compilation activity settles down and your code achieves its optimum stable performance. Note JIT optimization is often only one part of what is commonly seen as \"warm-up\". Other parts of warm-up include initializing resources needed by the application, rehydrating data from caches, etc. If you are experiencing long warm-up times, make sure to analyze everything that is happening during warm-up. JIT compilers make speculations on the best way to optimize methods based on the usage seen in the life of the program so far. Sometimes those speculations turn out to be incorrect. When this happens, the JVM performs a de-optimization, or deopt, in which the compiled method is discarded and the method is run in the interpreter or in Tier 1 until the JIT compiler can provide a newly compiled method that matches the new usage patterns."
}, {
  "objectID" : "96ba652c-47d2-4dd6-847d-8f966275f832",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Zing and the Falcon JIT Compiler",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#zing-and-the-falcon-jit-compiler",
  "content" : "Zing and the Falcon JIT Compiler Zing replaces OpenJDK’s HotSpot JIT compiler with Azul’s Falcon JIT compiler. Unlike HotSpot, Falcon has different levels of optimizations that you can use to balance eventual code speed versus how much time and computer resources you can commit to JIT warmup. Wherever you have enough CPU capacity and time to warm up using full Falcon optimizations running locally on your JVM, you should do so. Full Falcon optimizations deliver the best performance and infrastructure savings. There are many reasons to be sensitive to long warm-up, even if it delivers higher eventual speed: Long warm-up times make CI/CD rolling upgrades of a fleet of VMs is too long. Your SLAs mean you can’t start accepting traffic on a newly started node until it can serve requests at a certain speed. You have policies in place that throttle traffic or spin up new instances when CPU utilization goes over a certain percentage. You have to reserve capacity on your machines for the spike in CPU activity during warm-up, even though you do not need those resources for the regular running of your application. There are several ways you can affect the warm-up of Zing: Tune the Delivery of Full Falcon Optimizations Using Lower Optimization Levels Use Cloud Native Compiler Use ReadyNow Warm-Up Optimizer On this page, we explore many options to tune the JIT compiler to suit our needs. For ease of use, you can use the option VMFootprintLevel to set many of the parameters described here with one easy-to-use option."
}, {
  "objectID" : "e4c1e74a-c503-477c-affc-6948faa9d488",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Tuning JIT Compilations",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#tuning-jit-compilations",
  "content" : "Tuning JIT Compilations Setting the JVM Footprint For ease of use, Azul has introduced a parameter, VMFootprintLevel, which tunes various parts of the JVM to run on different configurations with different constraints by modifying a number of options. Since VMFootprintLevel tunes a number of internal options, it can be described as a \"master\" option. Further, when you manually set any option, that option is overridden by the same option set by VMFootprintLevel. In this way, you can use VMFootprintLevel as a starting point, with further tweaks to the JIT compiler done as needed. You can set VMFootprintLevel to \"XL\", \"L\", \"M\" or \"S\". \"XL\" is the default and specifying \"XL\" will cause no difference in behaviour. For the full list of parameters which are modified by VMFootprintLevel, see JVMFootprint Parameters at the end of this page. But first, let’s look at the various ways the JIT compiler can be modified. Tune the Delivery of Full Falcon Optimizations The Falcon compiler can be tuned in several ways: Give Falcon more threads. The normal heuristic is for Falcon to be allocated 2/3 of the total threads, but on a small machine, it can get rounded down to 1. You give Falcon a specific number of threads using the following flag: -XX:CIMaxCompilerThreads=3 (= 3 threads in this example). Note -XX:CIMaxCompilerThreads=3 will increase both Tier 1 (C1) and Tier 2 (C2) compiler threads. In case you want to distinguish between Tier 1 and Tier 2, the flags -XX:C1MaxCompilerThreads=3 and -XX:C2MaxCompilerThreads=3 can be used. Lower the Falcon compile threshold. The default threshold is 10K, which means a method must be invoked 10K times before it is put in the compilation queue. Lowering this number improves the warm-up curve but means there will be more compilation activity as more methods would be compiled when reaching 5K invocations instead of the 10K invocations required with the default value. Set the compile threshold using -XX:FalconCompileThreshold=5000. Note With Zing, -XX:FalconCompileThreshold=5000 behaves the same way as -XX:C2CompileThreshold=5000, as Falcon is the Tier 2 compiler, or C2, in Azul Prime. Lower the C1 compile threshold using XX:C1CompileThreshold=100. C1, or client compiler, generally uses less memory and compiles methods quicker than C2 but not at a cost. Since C2 compiled code is better optimized, it is often worthwhile to use C2 compiled code rather than C1 compiled code, but only where total startup time is not a concern. If startup time is a concern and the goal is to get a better warmup time, it is better to run through methods using C1 compilation. This is easily achieved by lowering the C1 compile threshold. In Azul Prime, C1CompileThreshold is set to 1000 by default. Give extra resources to the compiler for a set amount of time. Normally, the Compiler must share resources with executed code. Using -XX:CompilerWarmupPeriodSeconds, setting a timeframe to exclusively run the compiler during warmup, together with -XX:CompilerWarmupExtraThreads, allocating an extra number of threads to the compiler during warmup, will tell the JVM to give all available resources to the compiler for a set amount of time. After which, resources can finally be used by the application. This can greatly speed up warmup time but also restricts the use of the application during warmup. Using Lower Optimization Levels If you have tweaked the above settings and your warm-up time is still too long, you can lower optimization levels from Full Falcon down to the KestrelC2 compiler (light-weight Falcon). Each optimization level will give lower compile time and lower code speed. Each lower optimization level yields a drop in speed of C2 compilation from the next higher optimization level, in most cases, but also reduces the total compile time. Available levels of optimization are described below: Falcon Optimization Level 2 - Full Falcon: the full set of super-optimizations that deliver on average 20-30% faster code than OpenJDK’s HotSpot compiler. This is the recommended approach and the default configuration. Falcon Optimization Level 1 - code runs about 5% slower than Opt level 2 and reduces the compile time by about 50%. Enabled using the following option: -XX:FalconOptimizationLevel=1 Falcon Optimization Level 0 - code runs about 30% slower than Opt level 2 and reduces the compile time by about 70%. Opt level 0 is roughly comparable to Zulu C2 performance. Enabled using the following option: -XX:FalconOptimizationLevel=0 KestrelC2: a limited set of optimizations designed to approximate the warm-up costs and eventual code speed of OpenJDK’s HotSpot compiler. Code compiled with KestrelC2 will have a lower eventual speed than code compiled with full Falcon optimizations, but will reach an optimal state faster and with fewer resources. Enabled using the following option: -XX:+UseKestrelC2 Different compiler options can be used to lower the optimization levels and affect the amount of time and resources that Falcon uses to optimize your code. For more info on this topic, see Command Line Options > Falcon Compiler Options. A solution for the slower optimized code in these circumstances is provided by Azul’s Cloud Native Compiler. Setting Falcon to Prioritize Method Compilation Based on Hotness As your compile queue builds up with methods reaching the compile threshold, it can contain many methods that were once hot but are no longer, and therefore are not as critical to compile now. An example is an application platform that first performs many initialization operations and then has a different set of methods that are called once the application is initialized. Falcon offers two different ways to prioritize method compilation based on hotness. Avoid compiling cold methods. This is accomplished by not compiling methods which do not reach the compile threshold within a specified amount of time, reducing the overall amount of work that the compiler must do. This is done using the flag -XX:TopTierCompileThresholdTriggerMillis. This flag simply tells the compiler to check whether a method has reached the compile threshold within the specified amount of time. The time period is counted from a method’s first execution to the moment it reaches the compile threshold. If a method has reached the compile threshold, but not within the time period specified, the method is considered cold and is not compiled. Utilize compilation ranking. Beyond just hot and cold, compilation ranking introduces \"warm\" methods, as well. Via compilation ranking, Falcon is able to assign a rank to each method, either hot, warm, or cold, based on the amount of time it takes a method to reach the compile threshold. Hot methods are given priority of resources for compilation over warm methods, warm methods are still compiled at some point, and cold methods are excluded from compilation. Compilation ranking does not reduce the overall work that Falcon must do compared to TopTierCompileThresholdTriggerMillis, but rather spreads out Falcon’s work over a longer period of time. Compilation ranking is set up using the following flags: -XX:TopTierHotCompileThresholdTriggerMillis - Sets the upper bound for the hot rank and lower bound for the warm rank. Default value is 60000. -XX:TopTierWarmCompileThresholdTriggerMillis - Sets the upper bound for the warm rank and lower bound for the cold rank. Default value is 600000. -XX:TopTierWarmCompileCpuPercent - CPU thread allocation for warm methods. Default is 25%. For example, setting the hot compile threshold trigger to 5000, the warm compile threshold trigger to 50000, and the warm compile cpu percent to 50, results in the following ranks: Hot - Reach the compile threshold in 4999 ms or less, 100% CPU budget. Warm - Reach the compile threshold in 5000-49999 ms, 50% CPU budget. Cold - Reach the compile threshold in 50000 ms or more, 0% CPU budget. Note TopTierCompileThresholdTriggerMillis can not be used together with compilation ranking options."
}, {
  "objectID" : "6c513756-cba6-46bd-b0b6-3146acc5eec4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Setting the JVM Footprint",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#setting-the-jvm-footprint",
  "content" : "Setting the JVM Footprint For ease of use, Azul has introduced a parameter, VMFootprintLevel, which tunes various parts of the JVM to run on different configurations with different constraints by modifying a number of options. Since VMFootprintLevel tunes a number of internal options, it can be described as a \"master\" option. Further, when you manually set any option, that option is overridden by the same option set by VMFootprintLevel. In this way, you can use VMFootprintLevel as a starting point, with further tweaks to the JIT compiler done as needed. You can set VMFootprintLevel to \"XL\", \"L\", \"M\" or \"S\". \"XL\" is the default and specifying \"XL\" will cause no difference in behaviour. For the full list of parameters which are modified by VMFootprintLevel, see JVMFootprint Parameters at the end of this page. But first, let’s look at the various ways the JIT compiler can be modified."
}, {
  "objectID" : "5a7364bf-48ed-4e6e-b750-ddaeacca8777",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Tune the Delivery of Full Falcon Optimizations",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#tune-the-delivery-of-full-falcon-optimizations",
  "content" : "Tune the Delivery of Full Falcon Optimizations The Falcon compiler can be tuned in several ways: Give Falcon more threads. The normal heuristic is for Falcon to be allocated 2/3 of the total threads, but on a small machine, it can get rounded down to 1. You give Falcon a specific number of threads using the following flag: -XX:CIMaxCompilerThreads=3 (= 3 threads in this example). Note -XX:CIMaxCompilerThreads=3 will increase both Tier 1 (C1) and Tier 2 (C2) compiler threads. In case you want to distinguish between Tier 1 and Tier 2, the flags -XX:C1MaxCompilerThreads=3 and -XX:C2MaxCompilerThreads=3 can be used. Lower the Falcon compile threshold. The default threshold is 10K, which means a method must be invoked 10K times before it is put in the compilation queue. Lowering this number improves the warm-up curve but means there will be more compilation activity as more methods would be compiled when reaching 5K invocations instead of the 10K invocations required with the default value. Set the compile threshold using -XX:FalconCompileThreshold=5000. Note With Zing, -XX:FalconCompileThreshold=5000 behaves the same way as -XX:C2CompileThreshold=5000, as Falcon is the Tier 2 compiler, or C2, in Azul Prime. Lower the C1 compile threshold using XX:C1CompileThreshold=100. C1, or client compiler, generally uses less memory and compiles methods quicker than C2 but not at a cost. Since C2 compiled code is better optimized, it is often worthwhile to use C2 compiled code rather than C1 compiled code, but only where total startup time is not a concern. If startup time is a concern and the goal is to get a better warmup time, it is better to run through methods using C1 compilation. This is easily achieved by lowering the C1 compile threshold. In Azul Prime, C1CompileThreshold is set to 1000 by default. Give extra resources to the compiler for a set amount of time. Normally, the Compiler must share resources with executed code. Using -XX:CompilerWarmupPeriodSeconds, setting a timeframe to exclusively run the compiler during warmup, together with -XX:CompilerWarmupExtraThreads, allocating an extra number of threads to the compiler during warmup, will tell the JVM to give all available resources to the compiler for a set amount of time. After which, resources can finally be used by the application. This can greatly speed up warmup time but also restricts the use of the application during warmup."
}, {
  "objectID" : "e9936435-d0b5-42b2-a711-2b7eec8d0c2d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Using Lower Optimization Levels",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#using-lower-optimization-levels",
  "content" : "Using Lower Optimization Levels If you have tweaked the above settings and your warm-up time is still too long, you can lower optimization levels from Full Falcon down to the KestrelC2 compiler (light-weight Falcon). Each optimization level will give lower compile time and lower code speed. Each lower optimization level yields a drop in speed of C2 compilation from the next higher optimization level, in most cases, but also reduces the total compile time. Available levels of optimization are described below: Falcon Optimization Level 2 - Full Falcon: the full set of super-optimizations that deliver on average 20-30% faster code than OpenJDK’s HotSpot compiler. This is the recommended approach and the default configuration. Falcon Optimization Level 1 - code runs about 5% slower than Opt level 2 and reduces the compile time by about 50%. Enabled using the following option: -XX:FalconOptimizationLevel=1 Falcon Optimization Level 0 - code runs about 30% slower than Opt level 2 and reduces the compile time by about 70%. Opt level 0 is roughly comparable to Zulu C2 performance. Enabled using the following option: -XX:FalconOptimizationLevel=0 KestrelC2: a limited set of optimizations designed to approximate the warm-up costs and eventual code speed of OpenJDK’s HotSpot compiler. Code compiled with KestrelC2 will have a lower eventual speed than code compiled with full Falcon optimizations, but will reach an optimal state faster and with fewer resources. Enabled using the following option: -XX:+UseKestrelC2 Different compiler options can be used to lower the optimization levels and affect the amount of time and resources that Falcon uses to optimize your code. For more info on this topic, see Command Line Options > Falcon Compiler Options. A solution for the slower optimized code in these circumstances is provided by Azul’s Cloud Native Compiler."
}, {
  "objectID" : "f975edaa-a9b8-4032-adcb-c00d77214636",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Setting Falcon to Prioritize Method Compilation Based on Hotness",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#_setting_falcon_priorities",
  "content" : "Setting Falcon to Prioritize Method Compilation Based on Hotness As your compile queue builds up with methods reaching the compile threshold, it can contain many methods that were once hot but are no longer, and therefore are not as critical to compile now. An example is an application platform that first performs many initialization operations and then has a different set of methods that are called once the application is initialized. Falcon offers two different ways to prioritize method compilation based on hotness. Avoid compiling cold methods. This is accomplished by not compiling methods which do not reach the compile threshold within a specified amount of time, reducing the overall amount of work that the compiler must do. This is done using the flag -XX:TopTierCompileThresholdTriggerMillis. This flag simply tells the compiler to check whether a method has reached the compile threshold within the specified amount of time. The time period is counted from a method’s first execution to the moment it reaches the compile threshold. If a method has reached the compile threshold, but not within the time period specified, the method is considered cold and is not compiled. Utilize compilation ranking. Beyond just hot and cold, compilation ranking introduces \"warm\" methods, as well. Via compilation ranking, Falcon is able to assign a rank to each method, either hot, warm, or cold, based on the amount of time it takes a method to reach the compile threshold. Hot methods are given priority of resources for compilation over warm methods, warm methods are still compiled at some point, and cold methods are excluded from compilation. Compilation ranking does not reduce the overall work that Falcon must do compared to TopTierCompileThresholdTriggerMillis, but rather spreads out Falcon’s work over a longer period of time. Compilation ranking is set up using the following flags: -XX:TopTierHotCompileThresholdTriggerMillis - Sets the upper bound for the hot rank and lower bound for the warm rank. Default value is 60000. -XX:TopTierWarmCompileThresholdTriggerMillis - Sets the upper bound for the warm rank and lower bound for the cold rank. Default value is 600000. -XX:TopTierWarmCompileCpuPercent - CPU thread allocation for warm methods. Default is 25%. For example, setting the hot compile threshold trigger to 5000, the warm compile threshold trigger to 50000, and the warm compile cpu percent to 50, results in the following ranks: Hot - Reach the compile threshold in 4999 ms or less, 100% CPU budget. Warm - Reach the compile threshold in 5000-49999 ms, 50% CPU budget. Cold - Reach the compile threshold in 50000 ms or more, 0% CPU budget. Note TopTierCompileThresholdTriggerMillis can not be used together with compilation ranking options."
}, {
  "objectID" : "8f58bb24-bb8a-4092-b304-5b38c955b583",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Analyzing Java Warm-up",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#analyzing-java-warm-up",
  "content" : "Analyzing Java Warm-up So how do you know if your application is warmed up? The best way is by measuring the performance of your program by whatever metric you would normally measure it with. This could be operations/second or service time. Run a very long test and see how long it takes to reach 99% of peak performance and remain steadily at that level for a long period of time. Note that JIT compilers often keep performing optimizations long after you’ve reached your optimal peak performance. Therefore, you see higher CPU activity even after your code is running at optimal peak performance. When analyzing the compiler behavior, Azul Platform Prime’s Garbage Collector (GC) log file is the first information source to look into because this log file not only tracks GC information. On Azul Platform Prime, the log also contains much information about compilation activity and general system resources utilization. Add this flag to the Java command line to enable GC logging: -Xlog:gc,safepoint:gc.log::filecount=0. The filecount=0 setting disables log file rotation, resulting in one single log file which simplifies the tuning workflow. For further details about GC logging see Unified Garbage Collection Logging Recommendations and Advanced tuning hints. After your test, open the log file in the Azul GC Log Analyzer (download). With this tool you can check the following information: Number of threads/cores available for JIT compilation Total number of threads/cores and RAM for the process Compiler Queues: shows the number of methods waiting for compilation over time. Large numbers of methods in the compiler queues mean that Falcon does not have enough resources to handle all incoming requests Compiler Threads: shows how many threads were used over time for the JIT compilation Tier 2 Compile Counts and Tier 2 Wait Time Distribution: shows the full amount of compilations requested over the life of the process and how long it took to fulfill requests."
}, {
  "objectID" : "f578042c-c84b-42a4-8cd1-c8621559dc6a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Example Case",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#example-case",
  "content" : "Example Case Let’s compare the results of running the same application with or without certain parameters to see the impact on the warm-up. We let the application run for the same duration, which is long enough to reach a stable state, with the same load to ensure the maximum benefit from the Falcon compiler is reached, and similar use cases are compared. This test application is run on a small machine to see the impact of threads on warm-up. First, no parameters were used. In a second run of the same test, startup parameters were added: -XX:CIMaxCompilerThreads=3 to use more threads, and -XX:FalconCompileThreshold=5000 for a lower compiler threshold instead of the default 10K. System Information Let’s look at an example GC log. Open the log by running java -jar GCLogAnalyzer2.jar gc.log. Click the button to see the overall information about the process: System information of an application without additional flags You can see that the process is running on 6 threads overall. Scrolling down to the bottom, you see the following for the test without additional parameters: So there is only one thread for JIT compilation, which is generally not recommended for on-JVM JIT compilation on Zing. Note If you need to run on resource-constrained machines, consider off-loading JIT compilation to Cloud Native Compiler. Compiler Queues Click \"Compiler Statistics\" > \"Compiler Queues\" to see the backlog of methods in the Tier 2 Falcon compile queue. The left image shows a large backlog. In the second run a much smaller amount of compile queues is being handled, much more quickly. Compiler queues without parameters, versus extra threads and lower compile threshold. Compiler Threads Clicking \"Compiler Statistics\" > \"Compiler Threads\" shows there is just one Tier 2 thread which is getting maxed out. With the same additional flags for extra threads and lower compiler threshold, there is a more reasonable use of the three compiler threads over time rather than one thread being constantly maxed out. Compiler threads without parameters, versus extra threads and lower compile threshold. Compile Counts Clicking \"Compiler Statistics\" > \"Tier 2 Compile Counts\" shows a large number of the methods being evicted from the queue before they can be compiled. In the second run, the Compile Counts shows a much smaller number of methods getting evicted from the queue. Compile counts without parameters, versus extra threads and lower compile threshold. Note A lot of evicted methods is not always a bad thing. It just demonstrates that the application has phases and some methods are not used within some period of time. For example: Falcon didn’t compile the incoming requests in time and the application just switched to another phase and certain methods are no longer needed. If methods are executed by the application later again they would be enqueued again, so no worries. Wait Distribution Time Clicking \"Tier 2 Wait Time Distribution\" shows our JVM is experiencing long wait times for compiled methods in the first run, while the second run shows much better times to respond with compiled methods. Wait distribution time without parameters, versus extra threads and lower compile threshold."
}, {
  "objectID" : "3ee660ae-a7f7-40a2-a981-3375d9a21159",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "System Information",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#system-information",
  "content" : "System Information Let’s look at an example GC log. Open the log by running java -jar GCLogAnalyzer2.jar gc.log. Click the button to see the overall information about the process: System information of an application without additional flags You can see that the process is running on 6 threads overall. Scrolling down to the bottom, you see the following for the test without additional parameters: So there is only one thread for JIT compilation, which is generally not recommended for on-JVM JIT compilation on Zing. Note If you need to run on resource-constrained machines, consider off-loading JIT compilation to Cloud Native Compiler."
}, {
  "objectID" : "f7066972-e198-4b1c-81b1-581218bc6b76",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Compiler Queues",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#compiler-queues",
  "content" : "Compiler Queues Click \"Compiler Statistics\" > \"Compiler Queues\" to see the backlog of methods in the Tier 2 Falcon compile queue. The left image shows a large backlog. In the second run a much smaller amount of compile queues is being handled, much more quickly. Compiler queues without parameters, versus extra threads and lower compile threshold."
}, {
  "objectID" : "54d059dc-49a7-40cc-be9a-6ea6b12ff72f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Compiler Threads",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#compiler-threads",
  "content" : "Compiler Threads Clicking \"Compiler Statistics\" > \"Compiler Threads\" shows there is just one Tier 2 thread which is getting maxed out. With the same additional flags for extra threads and lower compiler threshold, there is a more reasonable use of the three compiler threads over time rather than one thread being constantly maxed out. Compiler threads without parameters, versus extra threads and lower compile threshold."
}, {
  "objectID" : "1f18c531-051a-4990-ac3a-a566a12190e1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Compile Counts",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#compile-counts",
  "content" : "Compile Counts Clicking \"Compiler Statistics\" > \"Tier 2 Compile Counts\" shows a large number of the methods being evicted from the queue before they can be compiled. In the second run, the Compile Counts shows a much smaller number of methods getting evicted from the queue. Compile counts without parameters, versus extra threads and lower compile threshold. Note A lot of evicted methods is not always a bad thing. It just demonstrates that the application has phases and some methods are not used within some period of time. For example: Falcon didn’t compile the incoming requests in time and the application just switched to another phase and certain methods are no longer needed. If methods are executed by the application later again they would be enqueued again, so no worries."
}, {
  "objectID" : "c412cf1b-73ef-4af9-848c-e5fbb419eec8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Wait Distribution Time",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#wait-distribution-time",
  "content" : "Wait Distribution Time Clicking \"Tier 2 Wait Time Distribution\" shows our JVM is experiencing long wait times for compiled methods in the first run, while the second run shows much better times to respond with compiled methods. Wait distribution time without parameters, versus extra threads and lower compile threshold."
}, {
  "objectID" : "cc15a496-d787-4b8b-8c5a-4238ab2c0470",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Eviction From the Compiler Queue",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#eviction-from-the-compiler-queue",
  "content" : "Eviction From the Compiler Queue The JVM enqueues a massive number of methods for compilation as your program starts. Most programs have different phases of execution. For example, your program could have an initialization phase followed by a steady run phase. The methods that are the hottest in the initialization phase may not be the same methods that are needed when you move to your steady run phase. Zing optimizes for this situation by continuing to count invocations after the compilation threshold has been reached. Every time there are another 10K invocations, the JVM increments a counter on the method. If the counter hasn’t been incremented in 20s, meaning it hasn’t been called 10K times in the last 20 seconds, the method is evicted from the compile queue. You can disable the eviction policy using -XX:TopTierCompileQueueEvictAfterMs=-1."
}, {
  "objectID" : "d31ca922-f1f1-4dcf-a0d7-87dd8b4557fe",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Use Cloud Native Compiler",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#use-cloud-native-compiler",
  "content" : "Use Cloud Native Compiler We often see cases where customers want to take advantage of full Falcon super-optimizations but are running on small machines whose resource constraints make it difficult. That’s why Azul has developed Cloud Native Compiler. Cloud Native Compiler provides a server-side optimization solution that offloads JIT compilation to dedicated hardware, providing more processing power to JIT compilation while freeing your client JVMs from the load of doing JIT compilation. For more information, see the Cloud Native Compiler documentation."
}, {
  "objectID" : "6ad1562a-7a68-4ab7-bacd-a703a02940d8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Use ReadyNow Warm-Up Optimizer",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#use-readynow-warm-up-optimizer",
  "content" : "Use ReadyNow Warm-Up Optimizer ReadyNow is a feature of Zing that can dramatically reduce your warm-up time. ReadyNow persists the profiling information gathered during the run of the application so that subsequent runs do not have to learn again from scratch. On the next run, ReadyNow pre-compiles all the methods in the profile before launching the Main method. For more information, see the ReadyNow documentation."
}, {
  "objectID" : "4eaf663d-f3e9-4b6b-8c45-8e4dc72cf53a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "JVM Footprint Parameters",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#jvm-footprint",
  "content" : "JVM Footprint Parameters Note The parameters which are set using VMFootprintLevel may vary according to Azul Platform Prime release. Note Some internal flags are also changed, which are not listed here. Specifying -XX:VMFootprintLevel=\"XL\" results in no changes: Specifying -XX:VMFootprintLevel=\"L\" results in the following settings: Command-Line Option Value CIMaxCompilerThreadsPercent 50 Specifying -XX:VMFootprintLevel=\"M\" results in the following settings: Command-Line Option Value FalconOptimizationLevel 1 CIMaxCompilerThreadsPercent 50 GPGCCommitInitialHeapLazily true GPGCNewGenConcurrentMarkFlushRetryLimitAction 1 CheckpointPromotionDelay 500 ms Specifying -XX:VMFootprintLevel=\"S\" results in the following settings: Command-Line Option Value FalconOptimizationLevel 0 TopTierCompileThresholdTriggerMillis 60000 CIMaxCompilerThreadsPercent 50 GPGCCommitInitialHeapLazily true GPGCNewGenConcurrentMarkFlushRetryLimitAction 1 GPGCNewGenConcurrentMarkFlushRetryLimit 2 CheckpointPromotionDelay 250 ms"
}, {
  "objectID" : "19810092-f090-4c64-b776-6b1dc286bcd1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Analyzing and Tuning Warm-up",
  "section" : "Advanced Tuning Hints",
  "url" : "https://docs.azul.com/prime/analyzing-tuning-warmup",
  "link" : "https://docs.azul.com/prime/analyzing-tuning-warmup#advanced-tuning-hints",
  "content" : "Advanced Tuning Hints When problems have been identified from the log-file analysis, you can dive even deeper into this process by running your application with additional flags that will give you more information. To get a full picture of JIT compilation, use the -XX:+PrintCompilation and -XX:+TraceDeoptimizations flags to print info to the vm output. You can also redirect this output into a separate log file by using -XX:+LogVMOutput -XX:-DisplayVMOutput -XX:LogFile=vm.log -XX:+PrintCompilation -XX:+TraceDeoptimization. We love to talk about Java We’re here to answer any questions about Azul performance, warmup, pricing, or anything Java. Want to find the ideal Warm-Up tuning for your application? Let us help! Contact Us"
}, {
  "objectID" : "61adf97d-1f42-44d0-b49a-b82f4f4c9624",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Enabling Huge Pages",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Enable-Huge-Pages",
  "link" : "https://docs.azul.com/prime/Enable-Huge-Pages",
  "content" : "Note This setting is only applicable to the Azul Zing Builds of OpenJDK (Zing) running without Azul Zing System Tools (ZST). Zing in ZST mode always uses its efficient large pages implementation. With Zing running in non-ZST mode, Zing uses standard Linux pages 4KB in size for its Java heap by default, which requires no system configuration. As all Azul Zing modes use the same C4 GC algorithm, good performance regarding the garbage collection is expected and for most applications, the default setting is sufficient. However, some applications may benefit from the use of large pages (2 MB) due to reduced misses on the Translation Lookaside Buffer (TLB). Zing with ZST implements a more efficient memory manager for large pages than standard Linux and is recommended in those situations. If ZST can not be used, a good alternative is transparent huge pages (THP) on RHEL/CentOS 8, Ubuntu 18, Amazon Linux since 2018, Debian 10, SLES 12 SP4 and their later versions. These operating systems support THP with shared memory and feature improved implementation of THP that reduces the risk of system pauses."
}, {
  "objectID" : "e665e06f-1218-4c1f-b380-1cfb586592b4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Enabling Huge Pages",
  "section" : "Transparent Huge Pages (THP)",
  "url" : "https://docs.azul.com/prime/Enable-Huge-Pages",
  "link" : "https://docs.azul.com/prime/Enable-Huge-Pages#transparent-huge-pages-thp",
  "content" : "Transparent Huge Pages (THP) Verify if your Linux system can be configured for the type of THP supported by Zing in the non-ZST mode:  cat /sys/kernel/mm/transparent_hugepage/shmem_enabled It should return a line similar to the following:  always within_size advise never deny force If it returns No such file or directory, your Linux version does not support shared memory THP. Use the ZST or upgrade to a more recent Linux version as an alternative. To enable THP for Zing in the non-ZST mode, first make a copy of the current settings:  /opt/zing/zing-jdk11/bin/java -Xlog:gc -version | grep huge > zingthp_old.conf Now run the following commands to enable THP for Zing:  echo madvise | sudo tee /sys/kernel/mm/transparent_hugepage/enabled\necho advise | sudo tee /sys/kernel/mm/transparent_hugepage/shmem_enabled\necho defer | sudo tee /sys/kernel/mm/transparent_hugepage/defrag\necho 1 | sudo tee /sys/kernel/mm/transparent_hugepage/khugepaged/defrag To persist these settings over a reboot, refer to Permanent THP Setting on Ubuntu or Permanent THP Setting on RHEL/CentOS/Oracle Linux/Amazon Linux according to your operating system below. Once the above settings are in place, Zing in the non-ZST mode automatically uses transparent huge pages. This can be verified by checking the GC log header file:  [GCHH : Use transparent huge pages for java heap : true ] If the process is running and can successfully acquire huge pages, it is reflected in the output of the following command:  grep HugePages: /proc/meminfo This lists Zing’s usage of THP for the complete Java heap defined by -Xmx under the ShmemHugePages metric while OpenJDK’s usage of THP would be listed as AnonHugePages. If you ever need to disable THP on Zing under this system configuration, add -XX:-UseTransparentHugePages to the command line of the Java process. Permanent THP Setting on Ubuntu To persist the THP configuration shown above on Ubuntu, do the following: Check if the setting is needed as it might already be enabled, and make a copy of this current setting:  /opt/zing/zing-jdk11/bin/java -Xlog:gc -version | grep huge > zingthp_old_ubuntu.conf Compare the settings with the recommendation shown above. If some of the settings already match and some not, your system is most likely tuned for some application. Refer to the documentation of that tuning to decide how to proceed and merge both tunings. To permanently enable recommended THP settings for Zing without ZST, run the following:  $ sudo apt install sysfsutils\n$ sudo tee /etc/sysfs.d/zingthp.conf <<EOF\nkernel/mm/transparent_hugepage/enabled=madvise\nkernel/mm/transparent_hugepage/shmem_enabled=advise\nkernel/mm/transparent_hugepage/defrag=defer\nkernel/mm/transparent_hugepage/khugepaged/defrag=1\nEOF\n$ sudo systemctl restart sysfsutils Verify the change:  /opt/zing/zing-jdk11/bin/java -Xlog:gc -version | grep huge A sample output showing Zing using THP should look as follows:  [GCHH : Use transparent huge pages for java heap : true ] Permanent THP Setting on RHEL / CentOS / Oracle Linux / Amazon Linux To persist the THP configuration on CentOS Stream / RHEL 8 or newer, Oracle Linux 8 and 9 and UEK 7.9 or Amazon Linux. Check if the setting is needed as it might already be enabled, and make a copy of this current setting:  /opt/zing/zing-jdk11/bin/java -Xlog:gc -version | grep huge > zingthp_old_rhel.conf Compare the settings with the recommendation shown above. If some of the settings already match and some not, your system is most likely tuned for some application. Refer to the documentation of that tuning to decide how to proceed and merge both tunings. To permanently enable recommended THP settings for Zing without ZST, run the following:  $ sudo mkdir /usr/lib/tuned/zingthp\n$ sudo tee /usr/lib/tuned/zingthp/tuned.conf <<EOF\n[main]\nsummary=Enable SHMEM transparent huge pages in madvise mode for Zing\n[sysfs]\n/sys/kernel/mm/transparent_hugepage/enabled=madvise\n/sys/kernel/mm/transparent_hugepage/shmem_enabled=advise\n/sys/kernel/mm/transparent_hugepage/defrag=defer\n/sys/kernel/mm/transparent_hugepage/khugepaged/defrag=1\nEOF List the currently activate tuned profiles:  sudo tuned-adm active Make a copy of the list of active profiles. In this example let’s assume the active profile is named MYPROFILE. Add the Zing THP profile by enabling the current profile and the Zing THP profile together:  sudo tuned-adm profile MYPROFILE zingthp Verify the change:  /opt/zing/zing-jdk11/bin/java -Xlog:gc -version | grep huge A sample output showing Zing using THP should look as follows:  [GCHH : Use transparent huge pages for java heap : true ]"
}, {
  "objectID" : "39bb3d85-0e57-486f-81de-54f7415ea9ba",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Enabling Huge Pages",
  "section" : "Permanent THP Setting on Ubuntu",
  "url" : "https://docs.azul.com/prime/Enable-Huge-Pages",
  "link" : "https://docs.azul.com/prime/Enable-Huge-Pages#permanent-thp-setting-on-ubuntu",
  "content" : "Permanent THP Setting on Ubuntu To persist the THP configuration shown above on Ubuntu, do the following: Check if the setting is needed as it might already be enabled, and make a copy of this current setting:  /opt/zing/zing-jdk11/bin/java -Xlog:gc -version | grep huge > zingthp_old_ubuntu.conf Compare the settings with the recommendation shown above. If some of the settings already match and some not, your system is most likely tuned for some application. Refer to the documentation of that tuning to decide how to proceed and merge both tunings. To permanently enable recommended THP settings for Zing without ZST, run the following:  $ sudo apt install sysfsutils\n$ sudo tee /etc/sysfs.d/zingthp.conf <<EOF\nkernel/mm/transparent_hugepage/enabled=madvise\nkernel/mm/transparent_hugepage/shmem_enabled=advise\nkernel/mm/transparent_hugepage/defrag=defer\nkernel/mm/transparent_hugepage/khugepaged/defrag=1\nEOF\n$ sudo systemctl restart sysfsutils Verify the change:  /opt/zing/zing-jdk11/bin/java -Xlog:gc -version | grep huge A sample output showing Zing using THP should look as follows:  [GCHH : Use transparent huge pages for java heap : true ]"
}, {
  "objectID" : "6ba19bb5-ca66-4da1-afb8-dd640832b2d5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Enabling Huge Pages",
  "section" : "Permanent THP Setting on RHEL / CentOS / Oracle Linux / Amazon Linux",
  "url" : "https://docs.azul.com/prime/Enable-Huge-Pages",
  "link" : "https://docs.azul.com/prime/Enable-Huge-Pages#permanent-thp-setting-on-rhel-centos-oracle-linux-amazon-linux",
  "content" : "Permanent THP Setting on RHEL / CentOS / Oracle Linux / Amazon Linux To persist the THP configuration on CentOS Stream / RHEL 8 or newer, Oracle Linux 8 and 9 and UEK 7.9 or Amazon Linux. Check if the setting is needed as it might already be enabled, and make a copy of this current setting:  /opt/zing/zing-jdk11/bin/java -Xlog:gc -version | grep huge > zingthp_old_rhel.conf Compare the settings with the recommendation shown above. If some of the settings already match and some not, your system is most likely tuned for some application. Refer to the documentation of that tuning to decide how to proceed and merge both tunings. To permanently enable recommended THP settings for Zing without ZST, run the following:  $ sudo mkdir /usr/lib/tuned/zingthp\n$ sudo tee /usr/lib/tuned/zingthp/tuned.conf <<EOF\n[main]\nsummary=Enable SHMEM transparent huge pages in madvise mode for Zing\n[sysfs]\n/sys/kernel/mm/transparent_hugepage/enabled=madvise\n/sys/kernel/mm/transparent_hugepage/shmem_enabled=advise\n/sys/kernel/mm/transparent_hugepage/defrag=defer\n/sys/kernel/mm/transparent_hugepage/khugepaged/defrag=1\nEOF List the currently activate tuned profiles:  sudo tuned-adm active Make a copy of the list of active profiles. In this example let’s assume the active profile is named MYPROFILE. Add the Zing THP profile by enabling the current profile and the Zing THP profile together:  sudo tuned-adm profile MYPROFILE zingthp Verify the change:  /opt/zing/zing-jdk11/bin/java -Xlog:gc -version | grep huge A sample output showing Zing using THP should look as follows:  [GCHH : Use transparent huge pages for java heap : true ]"
}, {
  "objectID" : "e4fe7973-7954-48ea-9ce0-c62bc2c54ce7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Enabling Huge Pages",
  "section" : "Explicit/Static Huge Pages",
  "url" : "https://docs.azul.com/prime/Enable-Huge-Pages",
  "link" : "https://docs.azul.com/prime/Enable-Huge-Pages#explicitstatic-huge-pages",
  "content" : "Explicit/Static Huge Pages Due to its complexity in setting up and the risk of poor performance if misconfigured, Explicit/Static huge pages in the non-ZST mode are not recommended. Note If the tuning guidelines above do not help, follow instructions in Installing the Zing with ZST to install the ZST component. The Zing automatically starts supporting the ZST component after its installation."
}, {
  "objectID" : "1aeaec1b-6c38-452a-9698-9fbb31bd3822",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "RHEL Performance Tuning Options",
  "section" : "",
  "url" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options",
  "link" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options",
  "content" : "Setting tuning options can be complicated, so RedHat Enterprise Linux (RHEL) has an installable daemon, tuned, that provides some tuning options, defined as profiles, to improve performance. This tuned periodically collects data about hardware subsystems, such as disks, network I/O, and switches. Then, based on the option selected, tuned dynamically adjusts system settings to raise or lower power consumption modes for these devices on your system. Note For Azul Zing Builds of OpenJDK (Zing), lower power consumption modes are detrimental to performance because if a core goes to sleep and the Garbage Collector or application has a thread that needs to run, then the cost of 'warming' up the core is expensive in time as the cache gets loaded and the pipeline is filled, etc. Two tuned profiles that might be useful with your Zing installation: throughput-performance This is a server profile for typical throughput performance tuning. It disables tuned and ktune power saving mechanisms, enables sysctl settings that improve the throughput performance of your disk and network I/O, and switches to the deadline scheduler. latency-performance This is a server profile for typical low-latency performance tuning that can reduce RHEL jitter caused by the OS. It disables tuned and ktune power saving mechanisms and enables sysctl settings that improve the latency performance of your network I/O. The latency-performance profile on RHEL can improve the max response time, depending upon the application running on Zing, by several (maybe 10s) of msec compared to the tuned default profile. You can set and un-set these profiles with tuned-adm. The profiles are implemented with the tuned daemon."
}, {
  "objectID" : "b5d8a758-bf76-42d3-a136-ede3de569b4f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "RHEL Performance Tuning Options",
  "section" : "Installing the Tuned Package",
  "url" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options",
  "link" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options#installing-the-tuned-package",
  "content" : "Installing the Tuned Package Installing the tuned package sets up a sample configuration file at /etc/tuned.conf and activates the default profile. The default power-saving profile has the lowest impact on power saving of the available profiles. It only enables CPU and disk tuned plug-ins. Installing tuned-utils adds following dependencies on a standard installation: systemtap-runtime kernel-devel systemtap To install tuned: Obtain the tuned installable package. Refer to your RHEL distribution for the tuned package and documentation on using tuned. It is available with several RHEL distributions, including RHEL 6, CentOS 6, and Fedora. Install the tuned package and its associated systemtap scripts with the command:  # yum install tuned"
}, {
  "objectID" : "bc17515c-2664-440b-9d89-7ca511e47840",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "RHEL Performance Tuning Options",
  "section" : "Running Tuned",
  "url" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options",
  "link" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options#running-tuned",
  "content" : "Running Tuned To use the tuned daemon: Enable tuned. At the command prompt, type:  # chkconfig tuned on Start tuned. At the command prompt, type:  # service tuned start View the tuned profiles. At the command prompt, type:  # tuned-adm list The system response is:  Available profiles:\n- default\n- desktop-powersave\n- latency-performance\n- laptop-ac-powersave\n- server-powersave\n- laptop-battery-powersave\n- throughput-performance\n- enterprise-storage\nCurrent active profile: default The profiles are implemented through the tuned daemon. Enable the desired profile. At the command prompt, type:  # tuned-adm profile <profile_name> For example:  # tuned-adm profile latency-performance\nCalling '/etc/ktune.d/tunedadm.sh stop': [ OK ]\nStopping tuned: [ OK ]\nSwitching to profile 'latency-performance'\nApplying ktune sysctl settings:\n/etc/ktune.d/tunedadm.conf: [ OK ]\nCalling '/etc/ktune.d/tunedadm.sh start': [ OK ]\nApplying sysctl settings from /etc/sysctl.conf Tuned Options tuned has additional options that you can use when you run it manually. The available options are: -d, --daemon Starts tuned as a daemon instead of in the foreground. -c, --conffile Uses a configuration file with the specified name and path, for example:  --conffile=/etc/tuned2.conf The default is /etc/tuned.conf -D, --debug Uses the highest level of logging."
}, {
  "objectID" : "3a3d2b63-f5b0-4892-a878-3f76ec199c9a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "RHEL Performance Tuning Options",
  "section" : "Tuned Options",
  "url" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options",
  "link" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options#tuned-options",
  "content" : "Tuned Options tuned has additional options that you can use when you run it manually. The available options are: -d, --daemon Starts tuned as a daemon instead of in the foreground. -c, --conffile Uses a configuration file with the specified name and path, for example:  --conffile=/etc/tuned2.conf The default is /etc/tuned.conf -D, --debug Uses the highest level of logging."
}, {
  "objectID" : "446cca2b-21dc-4281-87f4-fbf6611b3684",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "RHEL Performance Tuning Options",
  "section" : "Automatically Starting Tuned",
  "url" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options",
  "link" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options#automatically-starting-tuned",
  "content" : "Automatically Starting Tuned To start tuned every time the machine boots, at the command prompt, type:  # chkconfig tuned on"
}, {
  "objectID" : "0a5dc9b0-a10f-4e26-8e15-92c4c991dedc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "RHEL Performance Tuning Options",
  "section" : "Disabling All Tuning",
  "url" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options",
  "link" : "https://docs.azul.com/prime/RHEL-Performance-Tuning-Options#disabling-all-tuning",
  "content" : "Disabling All Tuning You can turn off the tuned profiles, use the tuned-adm command. At the command prompt, type:  # - tuned-adm off This disables all tuned profiles."
}, {
  "objectID" : "0ce2d198-0e1e-47b1-9e1c-77dcca26c2b3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Spin Loop Hint",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Spin-Hint-Loop",
  "link" : "https://docs.azul.com/prime/Spin-Hint-Loop",
  "content" : "The Intel x86 processors with the SSE2 instruction set contain a new instruction Pause that indicates that the CPU, which is currently running the thread, is effectively in a spin loop. Encountering such an indicator can help the CPU give more compute resources to other running threads by optimizing thread scheduling and thread switches. The new SpinHint java API helps the Azul Zing Builds of OpenJDK (Zing) to emit the x86 Pause instruction where the spinLoopHint method is being called. It does not change the semantics of the java code in any way. Note Use the spin loop hint with caution. For additional guidance and information on this advanced tuning instruction, contact Azul Technical Support. To use spin loop hint with Zing do the following: Import the package org.performancehints. Add a call SpinHint.spinLoopHint() where you want to hint to the CPU that this location is a spin loop. The example below illustrates how to use SpinHint."
}, {
  "objectID" : "d7bc39c2-50f6-4252-81fc-42682ab75087",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "@Contended",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Contended",
  "link" : "https://docs.azul.com/prime/Contended",
  "content" : "This tutorial provides a description of Azul Zing Builds of OpenJDK (Zing) advanced tuning use of the @sun.misc.Contended annotation to reduce cache contention across multiple threads. Caution: The suggestions presented in this guide are intended for expert users. Applying these suggestions inappropriately can have unintended consequences on your Java application performance. You must use discretion when applying the @Contended annotation. Contact your Azul Field Consultant or Azul Customer Support for additional information."
}, {
  "objectID" : "f0e194a4-1f8b-4f8e-ac7f-5dc3df981b1d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "@Contended",
  "section" : "@Contended Overview",
  "url" : "https://docs.azul.com/prime/Contended",
  "link" : "https://docs.azul.com/prime/Contended#contended-overview",
  "content" : "@Contended Overview The Java SE 8 platform introduced [0] a new annotation called @Contended [1] to reduce \"False Sharing\" [2],[3],[4]. False sharing is a term to describe performance degradation when several threads are modifying independent variable(s) sharing the same cache line. @Contended is applied as a conventional Java language annotation to fields in a class. It specifies that some field(s) in an object are probably highly contended across processor cores. At runtime the VM optimizes field layout. At the VM’s discretion, those fields annotated as contended are given extra padding so they do not share cache lines with other fields that are likely to be independently accessed. This helps to avoid cache contention across multiple threads. Note Applying @Contended to a class, field, or group: Does not force the VM to add padding or optimize the field layout in a specific way. Can substantially increase the size of a given object. Because the increase in size can be double or more, use @Contended sparingly. Zing provides an implementation of this feature for JDK 7."
}, {
  "objectID" : "a7dc012c-7828-47d9-ba1a-0f62a2987d63",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "@Contended",
  "section" : "Using @Contended Annotation",
  "url" : "https://docs.azul.com/prime/Contended",
  "link" : "https://docs.azul.com/prime/Contended#using-contended-annotation",
  "content" : "Using @Contended Annotation To use the @Contended annotation: In your Java application, add the @Contended annotation to denote the specific classes and/or their instance fields that are eligible for padding to avoid cache contention. See the following sections for examples. Marking a static field with @Contended is a non-operational (noop) action. Select and apply the Zing flags and options at your Java application runtime."
}, {
  "objectID" : "eb0cdf97-8ef3-4bcf-a2cb-4a95978e2e74",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "@Contended",
  "section" : "Marking a Class as Contended",
  "url" : "https://docs.azul.com/prime/Contended",
  "link" : "https://docs.azul.com/prime/Contended#marking-a-class-as-contended",
  "content" : "Marking a Class as Contended To mark a class as contended, precede the class with @Contended. In this example, both field1 and field2 are padded from the both sides.  @Contended\npublic class ContendedClass {\n    private int field1;\n    private Object field2;\n}"
}, {
  "objectID" : "d271fb17-cad9-4335-a8e5-d831f935b9ce",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "@Contended",
  "section" : "Marking an Instance Field as Contended",
  "url" : "https://docs.azul.com/prime/Contended",
  "link" : "https://docs.azul.com/prime/Contended#marking-an-instance-field-as-contended",
  "content" : "Marking an Instance Field as Contended To mark an instance field as contended, precede the field with @Contended. In this example, the padding is applied to field1 only.  public class ContendedField {\n    @Contended\n    private int field1;\n    private Object field2;\n}"
}, {
  "objectID" : "f5090b44-ed14-4961-a9e6-52e377735c1f",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "@Contended",
  "section" : "Marking Multiple Fields as Contended",
  "url" : "https://docs.azul.com/prime/Contended",
  "link" : "https://docs.azul.com/prime/Contended#marking-multiple-fields-as-contended",
  "content" : "Marking Multiple Fields as Contended To mark multiple fields as contended, precede each field with @Contended. In this example, both fields have separate padding.  public class ContendedFields {\n    @Contended\n    private int field1;\n    @Contended\n    private Object field2;\n}"
}, {
  "objectID" : "f162f594-1ea4-4b0e-be01-90391a898a2c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "@Contended",
  "section" : "Marking Groups as Contended",
  "url" : "https://docs.azul.com/prime/Contended",
  "link" : "https://docs.azul.com/prime/Contended#marking-groups-as-contended",
  "content" : "Marking Groups as Contended To mark a group as contended, include the optional @Contended parameter in the @Contended annotation to describe the equivalence class for contention group. In this example, The contendedField1 and contendedField2 fields are padded from everything else, but are still densely packed with each other.  public class ContendedGroups {\n    @Contended(\"updater1\")\n    private Object contendedField1;\n\n    @Contended(\"updater1\")\n    private Object contendedField2;\n\n    @Contended(\"updater2\")\n    private Object contendedField3;\n\n    private Object plainField5;\n    private Object plainField6;\n}"
}, {
  "objectID" : "48c76840-19bb-45df-8912-7f6e97d5998e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "@Contended",
  "section" : "Zing @Contended Options",
  "url" : "https://docs.azul.com/prime/Contended",
  "link" : "https://docs.azul.com/prime/Contended#zing-contended-options",
  "content" : "Zing @Contended Options After applying @Contended annotation to your Java application, include the Zing launch and configuration options in your Java command. Zing @Contended options and flags are: To enable (disable) @Contended annotation support.  -XX:+EnableContended     [<--default]\n-XX:-EnableContended To restrict (not restrict) @Contended to trusted classes only. This applies to classes loaded by bootstrap or extension classloaders.  -XX:+RestrictContended   [<--default]\n-XX:-RestrictContended To specify the number of bytes used to pad the fields/classes marked @Contended. Default value is 128. The value must be in between 0 and 8192 (inclusive) and be a multiple of 8.  -XX:ContendedPaddingWidth=128   [<--default]"
}, {
  "objectID" : "25f33564-5a11-453d-a898-c4087824eecb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "@Contended",
  "section" : "@Contended References",
  "url" : "https://docs.azul.com/prime/Contended",
  "link" : "https://docs.azul.com/prime/Contended#contended-references",
  "content" : "@Contended References The following links provide additional information about the general use of @Contended. http://openjdk.java.net/jeps/142 http://en.wikipedia.org/wiki/False_sharing http://mechanical-sympathy.blogspot.ru/2011/07/false-sharing.html http://mail.openjdk.java.net/pipermail/hotspot-dev/2012-November/007309.html http://shipilev.net/talks/jvmls-July2013-contended.pdf http://robsjava.blogspot.ru/2014/03/what-is-false-sharing.html"
}, {
  "objectID" : "f49cefb0-d5e7-4962-8c2b-f2c4c113407d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Safepoint Profiler",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Safe-Point-Profiler",
  "link" : "https://docs.azul.com/prime/Safe-Point-Profiler",
  "content" : "The Safepoint Profiler is a lightweight profiling tool that is built into the Azul Zing Builds of OpenJDK (Zing). It reports information about threads that are slow to reach safepoint. This is referred to as Time To Safepoint (TTSP). All JVMs use safepoints to bring all the application threads to a known state so the JVM can perform certain operations. Safepoints are used during Garbage Collection, during JIT compilation, for Thread Dumps, and many other operations. When a safepoint call is issued all the application threads should \"come to safepoint\" as fast as possible. Threads that have come to safepoint block until the JVM releases them. Once all the threads are at safepoint, the JVM performs the operation — GC, compile, thread dump, etc. — and then releases all the threads to run again. But when one or more application threads take a long time to come to safepoint, all the other threads, which are now blocked, have to wait for the tardy thread(s). Zing’s Safepoint Profiler will identify those tardy threads and help you to figure out why they are slow to reach safepoint."
}, {
  "objectID" : "711359d8-0a3a-453c-ac1b-9479f49d032d",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Safepoint Profiler",
  "section" : "Safepoint Profiler Overview",
  "url" : "https://docs.azul.com/prime/Safe-Point-Profiler",
  "link" : "https://docs.azul.com/prime/Safe-Point-Profiler#safepoint-profiler-overview",
  "content" : "Safepoint Profiler Overview Safepoint Profiler is an in-process profiling tool that collects stacks of the threads that were late to safepoint at frequent intervals asynchronously and also collects other system related information like the number of cores assigned to the thread. These logs can be collected and analyzed later to find the reason for the high TTSP issue. Safepoint Profiler is designed to have the minimal possible impact on Zing performance. The tool uses Linux signals to collect asynchronous stack traces of “slow” threads. The waiting VMThread sends RealTime signals (the “TTSP signal”) to slow Java threads after exceeding the profiling threshold (tunable by flags). System level attributes are also recorded for the slow threads (wchan, thread state, etc). These attributes are stored in private buffers assigned to slow Java threads. When a slow JavaThread receives the TTSP signal, it records its stacks into its buffer. At the end of safepoint, the VMThread walks all the Java threads in the process and prints out the buffers of the corresponding thread if available. To make TTSP overhead as lightweight as possible, there is no need to wait until slow Java threads respond to the signal that was sent by the VMThread. Since the Linux kernel sometimes delays delivering signals to a thread, it is entirely possible for a slow JavaThread to receive the signal after the whole safepoint is complete. An additional stack recording mechanism called \"synchronous stack\" serves as an extra stack that indicates the path from where the JavaThread gave up the jvm_lock (while reaching Safepoint). This way ensures there is at least one stack even if the signal delivery mechanism was not fast enough and didn’t record any asynchronous stack. Synchronous stack can be identified among the other stacks of a thread by looking at the top two frames in the StackTrace. It would indicate the path through which a JavaThread gave up the jvm_lock.  #0 0x00000000209f41d5 SafepointProfilerBuf::record_sync_stack(JavaThread*)\n#1 0x0000000020a35d68 JavaThread::safepoint_profiler_record_sync_stack()\n#2 0x000000002067a1c6 JavaThread::jvm_unlock_self()\n#3 0x00000000206bdd62 JavaThread::poll_at_safepoint()\n#4 0x0000000020a36fab JavaThread::poll_at_safepoint_static(JavaThread*)\n#5 0x00000000300068ba StubRoutines::safepoint_handler\n#6 0x000000003000b43a ContendedClass.run()V\n#7 0x00000000319a65ca interpreter\n#8 0x0000000030003035 StubRoutines::call_stub"
}, {
  "objectID" : "d558981d-120d-4800-8c77-4cf6d0b77783",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Safepoint Profiler",
  "section" : "Configuring Safepoint Profiler",
  "url" : "https://docs.azul.com/prime/Safe-Point-Profiler",
  "link" : "https://docs.azul.com/prime/Safe-Point-Profiler#configuring-safepoint-profiler",
  "content" : "Configuring Safepoint Profiler Use the following flags to configure the Safepoint Profiler: Configuring option Description -XX:+SafepointWaitTimeProfiler This is the flag that controls the turning on and off whole profiling mechanism. -XX:SafepointWaitTimeProfilerLog=<log file> By default the profiling information is logged onto the stderr, this flag redirects the output to a file. -XX:SafepointProfilerThreshold This is a threshold in percentage of safepoint/ checkpoint that controls when to activate profiling. So, for the current default value of SafepointTimoutDelay 50000, we would start profiling the threads once we cross 1000 ms (2% of timeout). The default value of this flag is 2. -XX:SafepointProfilerInterval This is the interval in percentage of safepoint/ checkpoint that controls the frequency at which you would like to collect multiple stack samples for a TTSP issue. The default value is 10 and minimum value is 5%. -XX:SafepointProfilerThresholdMS Specifies the number of milliseconds, which the VMThread waits before sending the first, second, third, fourth, and fifth backtrace request for each laggard thread. Using this flag replaces the use of SafepointProfilerThreshold, which applies to both checkpoints and safepoints. After the fifth backtrace without reaching [safe/check] point, subsequent wait intervals are computed by using the SafepointProfilerInterval value."
}, {
  "objectID" : "d190e018-55f4-4698-894b-fe015546ceaa",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Safepoint Profiler",
  "section" : "Understanding Safepoint Profiler Output",
  "url" : "https://docs.azul.com/prime/Safe-Point-Profiler",
  "link" : "https://docs.azul.com/prime/Safe-Point-Profiler#understanding-safepoint-profiler-output",
  "content" : "Understanding Safepoint Profiler Output To review a sample output of the Safepoint Profiler, run the command:  $taskset -c 0 java -XX:SafepointTimeoutDelay=10000 -XX:CheckpointTimeoutDelay=10000 -XX:SafepointProfilerThreshold=1 -XX:SafepointProfilerInterval=1 -XX:-DieOnSafepointTimeout <Test program>\nThis command prints the following details:\n\nDetected TTSP issue: start: 31.259 wait: 17.526\nDumping stack for thread 0x0000440005e00000\n\"Thread-1\" id: 30703 prio: 5 os_prio: 0 sched: SCHED_OTHER allowed_cpus: 000000000ffffff\nlock_release: 31.276\nlast_cpu: 20 cpu_time: 17563\n0 0x00000000209f41d5 SafepointProfilerBuf::record_sync_stack(JavaThread*)\n1 0x0000000020a35d68 JavaThread::safepoint_profiler_record_sync_stack()\n2 0x000000002067a1c6 JavaThread::jvm_unlock_self()\n3 0x00000000206bdd62 JavaThread::poll_at_safepoint()\n4 0x0000000020a36fab JavaThread::poll_at_safepoint_static(JavaThread*)\n5 0x00000000300068ba StubRoutines::safepoint_handler\n6 0x000000003000b43a ContendedClass.run()V\n7 0x00000000319a65ca interpreter\n8 0x0000000030003035 StubRoutines::call_stub\nsignal_sent: 31.271 signal_responded: 31.276\nstate: R wchan: 0\nlast_cpu: 20 cpu_time: 17563\n0 0x000000003000b382 ContendedClass.run()V\n1 0x00000000319a65ca interpreter\n2 0x0000000030003035 StubRoutines::call_stub The following table describes each field of the output. Field Description Detected TTSP issue: start: 31.259 wait: 17.526 This is the header that indicates the start of the logging for specific TTSP issue: * start – The VM uptime, this time is used to match against the GC log file to find the corresponding SPS. * wait – The actual wait time in milliseconds as seen in the SPS line. Dumping stack for thread 0x0000440005e00000 This is the header for each thread that had TTSP and whose stack will be logged. \"Thread-1\" id: 30703 prio: 5 os_prio: 0 sched: SCHED_OTHER allowed_cpus: 000000000ffffff Thread-1 – The thread name. id – LWP of the thread. prio – Java level priority os_prio – OS level priority sched – Scheduler chosen for the thread. allowed_cpus – The number of the CPUs that the thread is allowed to run. Each bit represents a CPU. lock_release: 31.276 This line is printed only for the synchronously collected stack. The time here means the time this JavaThread actually gave up the lock. But this does not mean that all the threads are at safepoint at this point in time, since there could be other threads that would have taken longer to reach. signal_sent: 31.271 signal_responded: 31.276 Applicable to only asynchronously collected stacks. signal sent – The time when VMThread issued a signal to this thread to record its stack. signal responded – The time at which the thread actually responded (received) the signal to dump the stack. If there is a huge difference in the time stamps of these fields, this could possibly indicate the following two among other unknown possibilities: The thread was not scheduled hence the kernel couldn’t deliver the signal immediately. This could possibly hint at starvation issues. The thread was in uninterrupted mode, so the signal was in the pending signal list. Examples: Page fault handler. state: R wchan: 0 This line is applicable only for asynchronously collected stacks: state – State of the thread when the signal was sent from the VMThread. wchan – Waiting channel state if the thread was waiting for something. last_cpu: 20 cpu_time: 17563 last cpu – The last CPU the thread was known to be running on. cpu time – Prints the clock CPU time of the thread."
}, {
  "objectID" : "52a80882-7456-4bd1-96c6-076b49984466",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Tuning and Troubleshooting Compilers",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Compilers",
  "link" : "https://docs.azul.com/prime/Compilers",
  "content" : "If you have an application performance problem and you suspect that you have a problem with the Azul Zing Builds of OpenJDK (Zing) runtime compiler, C1, C2, or Falcon, you will need to collect information about what is executing. The first step is to collect the high-level information about what is running. GC log file and GC Log File Analyzer ZVision and ZVRobot Compiler-specific metric collection Taking advantage of the GC fixup phase"
}, {
  "objectID" : "9bdc5e50-065a-4b1f-bbd9-17e74a34f4c8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Tuning and Troubleshooting Compilers",
  "section" : "GC log file and GC Log File Analyzer",
  "url" : "https://docs.azul.com/prime/Compilers",
  "link" : "https://docs.azul.com/prime/Compilers#gc-log-file-and-gc-log-file-analyzer",
  "content" : "GC log file and GC Log File Analyzer The Zing Garbage Collector (GC) log file contains information about not only the garbage collections but also system performance. Enable printing of the GC log file by adding the command-line option: -Xloggc:<filename>_%t_%p.out. Use $JAVA_HOME/bin/java -jar $JAVA_HOME/etc/gcLogAnalyser*jar –f <gcLogFile> to read the GC log file and check the performance information collected and displayed in the Process and System sets of graphs. Naturally, you can also check the overhead of garbage collections and the impact that safepoint pauses have on application throughput. In the GC and Safepoints - Pause Duration graph, check the frequency and duration of the compiler runtime’s Deoptimize Pause time. These pauses indicate that the compiler runtime had been executing native code generated from bytecode, but an assumption made at compile time was violated. This required that the method’s execution abandon that compiled version of the method. The execution resumes in interpreted or a C1 compiled version of the method."
}, {
  "objectID" : "4fae437a-712c-4979-a77a-ca7559cc3ee1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Tuning and Troubleshooting Compilers",
  "section" : "ZVision and ZVRobot",
  "url" : "https://docs.azul.com/prime/Compilers",
  "link" : "https://docs.azul.com/prime/Compilers#zvision-and-zvrobot",
  "content" : "ZVision and ZVRobot Note As of Azul Platform Prime 23.08.0.0, ZVision and ZVRobot components have been deprecated and are no longer supported. The information in this section is only informative and is planned for removal. ZVision and ZVRobot work with Zing to expose the lower level details about the runtime – both the JVM’s and the application’s. The questions to be answered: What methods and functions are executing? How much CPU time is consumed executing those methods? What is the call chain to the methods consuming most of the CPU time? The first step is to add the command line options to the command line for the ZVM:  -XX:ARTAPort=<port-number> -XX:+UseTickProfiler You can connect directly with the ZVM using the ZVision server (run the $JAVA_HOME/bin/zvision program and then connect with your browser to the machine and port for ZVision). Alternatively, you can use ZVRobot to collect the same information. To set up ZVRobot, extract the contents of the etc/ZVRobot.zip file to a directory: ZVRobot.prop – the property file that instructs ZVRobot to collect metrics. ZVRobot-<version>.jar – the ZVRobot archive. README– overall instructions on how to run ZVRobot. startsample.sh – simplified script for running ZVRobot. Each of the files, README, ZVRobot.prop, and startsample.sh contain instructions on how to modify files and run ZVRobot. Modify the ZVRobot.prop file for your environment. First, the host and ARTAPort for the ZVM you want to monitor. Set the following properties:  ZVRobotVars.HOST=YouMustSet_TheZingVM_Host_IPAddress_In_ZVRobot.prop\nZVRobotVars.PORT=YouMustSet_TheZingVM_Host_PortNumber_In_ZVRobot.prop To start, use the default values for the following: ZVRobotVars.THSIZE=10000 – Number of data sample sizes to collect; mostly for the thread stacks number of threads. ZVRobotVars.SECONDS=60 – Seconds between samples. ZVRobotVars.COUNT=-1 – Continue collecting until the ZVRobot process is killed. The following captures additional information for the top FETCHCOUNT entries in the tick profile page. The additional information for each is the machine instruction page that contains the instructions generated by the compiler for each method. In addition, the machine instruction page is annotated with the CPU use at each instruction (ticks). The third page for each method is the “callers of this method” page, displayed as a call graph sorted on the CPU consumption on each edge. You may want to increase FETCHCOUNT to 10 to get more information about the top methods executing. Here is what is in the ZVRobot.props file:  ZVRobotVars.TickProfilePage.FETCHCOUNT=5 You will not be using this:  ZVRobotVars.PollOpsPage.FETCHCOUNT=5 Further down in the file we have the pages that will be collected, represented as URIs to the servlets that provide the XML pages. Use these, as is:  ZVRobotPage.CONFIG_PROCESS=http://${HOST}:${PORT}/config/process ${SECONDS}\nZVRobotPage.ENVIRONMENT_VARIABLES=http://${HOST}:${PORT}/config/environment_variables ${SECONDS} 1 The most important one for this analysis:  ZVRobotPage.TICKS_PROFILE_DEFAULTVIEW=http://${HOST}:${PORT}/ticks/profile ${SECONDS} ${COUNT} Selecting these depends on how invasive you want to be for the information. The stack trace is very expensive. You can comment them out or reduce the frequency by replacing ${SECONDS} with 120, 180, … or even larger values.  ZVRobotPage.THREADS_LIST=http://${HOST}:${PORT}/threads/list?byname=&bystatus=any&stride=${THSIZE} ${SECONDS} ${COUNT} ZVRobotPage.THREADS_STACK_TRACE=http://${HOST}:${PORT}/threads/stack_trace?detail=low&byname=&bystatus=any&stride=${THSIZE} ${SECONDS} ${COUNT} The lock information is cumulative so you do not need to have fine granularity.  ZVRobotPage.THREADS_MONITOR_CONTENTION=http://${HOST}:${PORT}/monitors/contention ${SECONDS} ${COUNT} This information is in the GC log file, so you can comment them out as shown:  # ZVRobotPage.MEMORY_SUMMARY=http://${HOST}:${PORT}/memory/summary ${SECONDS} ${COUNT}\n# ZVRobotPage.MEMORY_GC_SUMMARY=http://${HOST}:${PORT}/memory/gc_summary ${SECONDS} ${COUNT}\n# ZVRobotPage.MEMORY_GC_HISTORY=http://${HOST}:${PORT}/memory/gc_history ${SECONDS} ${COUNT}"
}, {
  "objectID" : "b07742ff-b549-48da-b35d-b2dc0fd73acc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Tuning and Troubleshooting Compilers",
  "section" : "Compiler-specific Metric Collection",
  "url" : "https://docs.azul.com/prime/Compilers",
  "link" : "https://docs.azul.com/prime/Compilers#compiler-specific-metric-collection",
  "content" : "Compiler-specific Metric Collection Zing provides a number of logging options to collect metrics about the behavior of the compilers. To organize your data collection efforts, the first step is to supply the options to add the metrics to a file. The logging command line options provide you that capability. Here is the set of options to use to monitor the activity of the compilers (both Tier 1 and Tier 2) and write that information to a log file:  -XX:+PrintCompilation -XX:+PrintCompileDateStamps -XX:-DisplayVMOutput -XX:+LogVMOutput -XX:LogFile=compile_%t_%p.log Explanation: -XX:+PrintCompilation – Prints compiler output about the methods being compiled and installed in the CodeCache -XX:+PrintCompileDateStamps – Optional displays of the date stamp; the time stamp is automatically added -XX:-DisplayVMOutput – Does not display all output on the tty -XX:+LogVMOutput – Saves the VM output to the file specified with –XX:LogFile -XX:LogFile=compile_%t_%p.log – Writes to the file with the name in the format: compile_<date>_<time>_pid<PID>.log An example of the output file’s name: compile_2017-07-30_17-32-03_pid20137.log A sample of the compiler logging to the file:  <writer thread='20166'/>\n2017-07-30T17:32:03.437-0700: 0.437: 20 3 java.lang.String::hashCode ()I (55 score) (55 bytes) 0.437879\n<writer thread='20166'/>\n2017-07-30T17:32:03.510-0700: 0.510: 20 3 installed at 0x3000ca50 with size 0x12d 0.510984 The following describes the information in the line printed when the compiler starts compiling the method: Date and time: 2017-07-30T17:32:03.437-0700: Logging elapsed time stamp: 0.437: Overall compile sequence number: 20 Additional information about the compiler: Tier compiler (C1, C2, or Falcon): 3 Class: java.lang.String::hashCode Signature: ()I Compiler accounting information: (55 score) (55 bytes) Accurate elapsed time stamp: 0.437879 Explanation of “Additional information about the compile”: The encodings in this field specify attributes about the method being compiled: % On-stack-replacement compile ! Method includes exception handling The compilers make assumptions about the class hierarchy and the values of frequently used variables, if possible, to provide higher levels of optimization. At the beginning of an application’s execution, the compilers try to compile methods quickly to improve performance, but sometimes these assumptions are invalidated. The compiler runtime must recompile the method with the new environmental assumptions. The task of switching execution from the compiled code for that method to either the interpreter or a method with a lower level of optimization is called deoptimization. To track deoptimizations, use the command line option:  -XX:+TraceDeoptimization Inlining called methods in the caller is one of the most beneficial optimizations done by the compilers. Call overhead to the called methods is eliminated and the inlining provides a larger block of code over which optimizations can be performed. To see the inlining decisions made by the compiler, use the command line option:  -XX:+PrintInlining A warning – the output generated when using this option can be very verbose."
}, {
  "objectID" : "206590bd-0f3c-4ac2-921f-63d7dca842c1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Tuning and Troubleshooting Compilers",
  "section" : "Taking Advantage of the GC Fixup Phase",
  "url" : "https://docs.azul.com/prime/Compilers",
  "link" : "https://docs.azul.com/prime/Compilers#taking-advantage-of-the-gc-fixup-phase",
  "content" : "Taking Advantage of the GC Fixup Phase The Garbage Collector has an additional (optional) fixup phase that fixes all references in the heap to point to their proper targets, shifting more of the fixup work to the collector, and allowing generated code to potentially avoid certain checks between collections. Without this optional fixup pass, references are still fixed, but the fixup is done lazily, and will completed by the next GC cycle. To enable the fixup pass, use the -XX:+GPGCDoFixupPasses command-line option."
}, {
  "objectID" : "68524001-7a8d-44bb-88d0-4df7c8a7cefe",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Datagram Channel Optimization",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Datagram-Channel",
  "link" : "https://docs.azul.com/prime/Datagram-Channel",
  "content" : "Azul Platform Prime includes an on-by-default optimization for faster send and receive calls on NIO DatagramChannels. This optimization can be controlled with the following system property settings: java.nio.channels.DatagramChannel.useQuickJavaReceive - uses fast implementation of the receive method. java.nio.channels.DatagramChannel.useQuickJavaSend - uses fast implementation of send method. All options are boolean."
}, {
  "objectID" : "f8255a06-3312-4856-afc9-6e409de716e5",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using jHiccup",
  "section" : "",
  "url" : "https://docs.azul.com/prime/jHiccup",
  "link" : "https://docs.azul.com/prime/jHiccup",
  "content" : "jHiccup measures the pauses that could affect a running application. The source of the pauses could be from the JVM (Java Virtual Machine) runtime or operating system events. If we can rule out the operating system events then we can measure the JVM runtime-caused pauses that might impact the response times of running applications."
}, {
  "objectID" : "d2425c43-e7f4-4637-8539-a6e59eb0bd05",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using jHiccup",
  "section" : "How Does jHiccup Work?",
  "url" : "https://docs.azul.com/prime/jHiccup",
  "link" : "https://docs.azul.com/prime/jHiccup#how-does-jhiccup-work",
  "content" : "How Does jHiccup Work? jHiccup starts a thread that records the time interval since it last went to sleep. The thread sleeps for 1 millisecond (default, configurable) and then wakes up, records the time since it last went to sleep that is greater than 1 millisecond and repeats. In the diagram, jHiccup measures the length of time greater than 1 millisecond. This is the measured delay. If the measured delay is greater than 1 millisecond then jHiccup creates additional pauses to account for those that it missed. The following example shows the four additional pauses added when a 5 millisecond pause occurs. Together, all of these pauses are the hiccups."
}, {
  "objectID" : "28c066b4-b39e-4dd2-adeb-abf2a12b5e77",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using jHiccup",
  "section" : "Generating jHiccup Log Files",
  "url" : "https://docs.azul.com/prime/jHiccup",
  "link" : "https://docs.azul.com/prime/jHiccup#generating-jhiccup-log-files",
  "content" : "Generating jHiccup Log Files To understand the impact of JVM runtime pauses, follow this example of the process of collecting and evaluating the jHiccup data. Install and configure the application you wish to test. For this example, you can use a test in the DaCapo benchmark suite. This suite is intended as a tool for Java benchmarking and consists of a set of open source applications with non-trivial workloads. The benchmark suite can be downloaded from https://dacapobench.org/. Use the h2 benchmark test, a JDBCbench-like in-memory benchmark that executes transactions against a model of bank data. The benchmark is run using the following command:  java -Xmx8g -XX:+DisableExplicitGC -jar dacapo-9.12-bach.jar \\\n-n 20 -s huge h2 This command will perform twenty iterations of the benchmark using the huge dataset ensuring that it runs long enough to exercise the JVM at an acceptable level. When monitoring your own application you should select a configuration and length of time that will give throughput results representative of those you obtain in your production environment. Download the jHiccup application and obtain more details about jHiccup at: https://www.azul.com/products/components/jhiccup/. Extract the archive in a suitable directory. Version-specific information is available in the accompanying README file. jHiccup can be used in one of three ways: Start as a Java agent (recommended) java -javaagent:<path-to-jar>/jHiccup.jar java-application Use the environment variable _JAVA_OPTIONS in a complex environment: export _JAVA_OPTIONS=-javaagent:<path-to-jar>/jHiccup.jar Start application using jHiccup shell script jHiccup java-application Determine which is the best approach for your application. Typically, you will modify your application startup script to use one of the two methods. For our example, we will use the second method, so our command line becomes:  jHiccup $JAVA_HOME/bin/java -Xmx8g -XX:+DisableExplicitGC -jar \\\ndacapo-9.12-bach.jar -n 20 -s huge h2 If you are using the Oracle JDK, add -XX:+UseG1GC. You will need to run this test twice. For the first run, use your existing Java runtime (set via the JAVA_HOME environment variable or directly in your application startup script). For the second run, use the Azul Zing Builds of OpenJDK (Zing) by changing your JAVA_HOME environment variable and/or startup script appropriately. You will now have two histogram log (hlog) files with names of the form:  hiccup.<date>.<time>.<sub-second-time>.hlog"
}, {
  "objectID" : "5b621423-983d-4290-aa71-7979c6f18e88",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using jHiccup",
  "section" : "Comparing JVM Runtime Pause Performance",
  "url" : "https://docs.azul.com/prime/jHiccup",
  "link" : "https://docs.azul.com/prime/jHiccup#comparing-jvm-runtime-pause-performance",
  "content" : "Comparing JVM Runtime Pause Performance Now that we have created the histogram log files for both JVMs, we need a way to display the data. Azul created the HistogramLogAnalyzer tool to graph the results contained in one or more log files. Download a tar.gz or zip archive with the HistogramLogAnalyzer tool. Extract the archive in a suitable directory. Alternatively, you can download a source code from https://github.com/HdrHistogram/HistogramLogAnalyzer and build the tool. Start HistogramLogAnalyzer:  java -jar HistogramLogAnalyzer-1.0.3.jar You can also start the tool using the command line option, -f, to automatically open a file:  java -jar HistogramLogAnalyzer-1.0.3.jar -f file-name Following the example, click Open in the window, and navigate to the directory where your hlog files are located First select the log file generated using the Oracle HotSpot JVM. This will display the following two graphs: Upper Graph – Maximum Latency (Hiccups in this case) In Time Interval The upper graph shows the maximum hiccup for each time interval (5 seconds by default) as the application ran. The x-axis is the elapsed execution time for the application. The y-axis represents the maximum duration of hiccups in a given interval. These are the maximum pauses for the interval that an end user would experience when using the application. The pattern of the hiccups suggests that garbage collections have a significant impact on pause/hiccup durations – a series of pauses for minor collections followed by a longer pause for a major collection. Lower Graph – Latency (Hiccups) by Percentile Distribution The lower graph shows the hiccup times for the application in percentiles. Use this graph to assess whether your application meets a defined service level agreement (SLA) for response times. SLAs are frequently specified in the form, “this application must respond within 20 milliseconds 99.99% of the time”. An application with this SLA could have a single pause of 100 milliseconds during its run of several hours. For that case, despite the maximum pause being significantly longer than the required SLA maximum, it does not do so more than 0.01% of the time. However, if there are frequent pauses of 30 milliseconds this could break the SLA. The lower graph makes it easy to see the percentile at which the application goes above a certain threshold. In the graph, the 99.99th percentile is 1250 milliseconds. Comparing Hiccup Files For comparison, we can add a second set of data in a file generated using Zing. Again, click on Open, navigate, if necessary, to the directory containing the histogram log file generated using Zing and select it. A pop-up dialog box will ask you if you want to open this log in the same tab. Select ‘yes’. The tool will now display the following: This provides an easy way to compare hiccup times when your application is run using your current JVM and the Zing. Clearly, the hiccups measured when running Zing are shorter, with a maximum hiccup of 43 milliseconds and a 99.99th percentile of 20 milliseconds. The following table compares the two JVMs. JVM 99.99th Percentile (ms) Maximum Hiccup (ms) Oracle HotSpot 1250 1600 Azul Zing JVM 20 43"
}, {
  "objectID" : "43d314b6-5454-4886-9e97-afc93d217d86",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using jHiccup",
  "section" : "Upper Graph – Maximum Latency (Hiccups in this case) In Time Interval",
  "url" : "https://docs.azul.com/prime/jHiccup",
  "link" : "https://docs.azul.com/prime/jHiccup#upper-graph-maximum-latency-hiccups-in-this-case-in-time-interval",
  "content" : "Upper Graph – Maximum Latency (Hiccups in this case) In Time Interval The upper graph shows the maximum hiccup for each time interval (5 seconds by default) as the application ran. The x-axis is the elapsed execution time for the application. The y-axis represents the maximum duration of hiccups in a given interval. These are the maximum pauses for the interval that an end user would experience when using the application. The pattern of the hiccups suggests that garbage collections have a significant impact on pause/hiccup durations – a series of pauses for minor collections followed by a longer pause for a major collection."
}, {
  "objectID" : "e72088de-08fd-4521-acc6-36d0c59a9e98",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using jHiccup",
  "section" : "Lower Graph – Latency (Hiccups) by Percentile Distribution",
  "url" : "https://docs.azul.com/prime/jHiccup",
  "link" : "https://docs.azul.com/prime/jHiccup#lower-graph-latency-hiccups-by-percentile-distribution",
  "content" : "Lower Graph – Latency (Hiccups) by Percentile Distribution The lower graph shows the hiccup times for the application in percentiles. Use this graph to assess whether your application meets a defined service level agreement (SLA) for response times. SLAs are frequently specified in the form, “this application must respond within 20 milliseconds 99.99% of the time”. An application with this SLA could have a single pause of 100 milliseconds during its run of several hours. For that case, despite the maximum pause being significantly longer than the required SLA maximum, it does not do so more than 0.01% of the time. However, if there are frequent pauses of 30 milliseconds this could break the SLA. The lower graph makes it easy to see the percentile at which the application goes above a certain threshold. In the graph, the 99.99th percentile is 1250 milliseconds."
}, {
  "objectID" : "dca475a6-4938-4a45-8ebc-dbb03b247b76",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using jHiccup",
  "section" : "Comparing Hiccup Files",
  "url" : "https://docs.azul.com/prime/jHiccup",
  "link" : "https://docs.azul.com/prime/jHiccup#comparing-hiccup-files",
  "content" : "Comparing Hiccup Files For comparison, we can add a second set of data in a file generated using Zing. Again, click on Open, navigate, if necessary, to the directory containing the histogram log file generated using Zing and select it. A pop-up dialog box will ask you if you want to open this log in the same tab. Select ‘yes’. The tool will now display the following: This provides an easy way to compare hiccup times when your application is run using your current JVM and the Zing. Clearly, the hiccups measured when running Zing are shorter, with a maximum hiccup of 43 milliseconds and a 99.99th percentile of 20 milliseconds. The following table compares the two JVMs. JVM 99.99th Percentile (ms) Maximum Hiccup (ms) Oracle HotSpot 1250 1600 Azul Zing JVM 20 43"
}, {
  "objectID" : "1a0ad845-9bb5-4900-8b47-b4447078693b",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using jHiccup",
  "section" : "Setting the Y-Axis Range of Values",
  "url" : "https://docs.azul.com/prime/jHiccup",
  "link" : "https://docs.azul.com/prime/jHiccup#setting-the-y-axis-range-of-values",
  "content" : "Setting the Y-Axis Range of Values One important thing to note is the range of values on the y-axis for the graphs may not be the same, as is the case with these graphs. Although Zing’s Maximum Latency (Hiccup) graph appears to have equally long pauses, the range of values for the y-axis is much smaller for Zing’s data. The same applies to the percentile graphs. To get an accurate visual comparison select the View → Normalize Y Axis menu item in the menu bar. All the graphs will have the same range for their y-axes as shown below: The benefits of Zing now become clear."
}, {
  "objectID" : "92817c5c-68b3-4868-827b-3dfaaaa52884",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Using jHiccup",
  "section" : "jHiccup Command-Line Arguments",
  "url" : "https://docs.azul.com/prime/jHiccup",
  "link" : "https://docs.azul.com/prime/jHiccup#jhiccup-command-line-arguments",
  "content" : "jHiccup Command-Line Arguments Below are the command-line options used to control jHiccup behavior and reporting. The command-line options are separated by commas instead of spaces for easier embedding the –javaagent option to existing start scripts, for example:  -javaagent:/opt/zing/jHiccup.jar=-i,1000,-l,/tmp/hiccup.log Details of the options to use with the jHiccup Java agent that runs in the same process as the application: Option Description [-h] help [-l logFileName] Logs hiccup information into logFileName.hlog (will automatically replace occurrences of %pid and %date in the file name with appropriate information). [-d startDelayMs] Delays the beginning of hiccup measurement by startDelayMs milliseconds (default 30000). [-i reportingIntervalMs] Sets reporting interval (default 5000). [-r resolutionMs] Sets sampling resolution in milliseconds (default 1). [-t runTimeMs] Limits measurement time (default 0, == infinite). Details of the options to use to launch a separate JVM process on the same machine that runs the jHiccup Java agent and collects information about the operating system and hardware’s impact on pauses: Option Description [-c] Launches a control process in a separate JVM logging hiccup data into logFileName.c.hlog. [-x controlProcessArgs] Passes additional arguments to the control process JVM. [-terminateWithStdInput] Takes over standard input, and terminates process when standard input is severed (useful for control processes that wish to terminate when their launching parent does)."
}, {
  "objectID" : "869ecdb5-f48c-4338-b31b-ccb9f63f2adc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Installation Issues",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Install-Errors",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Install-Errors",
  "content" : "If you received an error or warning message during Azul Zing Builds of OpenJDK (Zing) installation or configuration, inspect the message and complete the steps listed for your operating system. In addition, you might want to study the following typical issues and the corresponding solutions: Permissions Denied Error Message: /usr/bin/ld: Permission denied Action: ZST installation requires access to /usr/bin/ld. Ensure acceptable permissions are set. For example: # chmod 755 /usr/bin/ld Operating System is not supported Issue: You cannot find a Zing Installation for your target operating system. Action: Consult the list of the supported operating systems and environments in the Azul Zing Builds of OpenJDK System Requirements document. Сontact [email protected] for any related questions. Conflict with settings configured for other JVMs Issue: Zing use on machines where there are other installed JVMs that have overlaps in environment and path settings leads to unwanted behaviors. Actions: Ensure your PATH and JAVA_HOME variables are set accurately in the shell or context of your runtime application. Ensure you have the proper Zing architecture for your OS and kernel. Using incorrect processor type or bitness may fail to operate at all. See the Azul Zing Builds of OpenJDK System Requirements document for more details. Cannot attach an APT repository Issue: You cannot attach an APT repository, because $(lsb_release -sc) command does not work in your system:  sudo apt-add-repository \"deb \\http://repos.azul.com/zing/ubuntu $(lsb_release -sc) main\" Actions: Use any of Ubuntu release name constants, such as \"xenial\", \"trusty\", or \"precise\". For example:  sudo apt-add-repository \"deb \\http://repos.azul.com/zing/ubuntu trusty main\" Problems with installing Azul Platform Prime on Debian and Amazon Linux Issue: Failed to install Azul Platform Prime on Debian and Amazon Linux when Linux headers are not present. Actions: Install Linux Headers. For Debian, run the following command:  apt-get install linux-headers-$(uname -r) For Amazon Linux, run:  $ yum install kernel-devel-$($uname -r)\ndkms build -m zing_mm -v <zst-version>\ndkms install -m zing_mm -v <zst-version> Run the system-config-zing-memory command, once the Linux headers are installed. Zing and ZST Compatibility Issue Issue: Zing stops during startup in case of incompatible Zing and ZST versions. Sample Message:  $ /usr/bin/java -version\nError occurred during initialization of VM\nZing VM Error: This Zing VM requires ZST 5.15 or later.\nZing VM Error: Found zst version: 'zst-5.14.0.0-4'.\nZing VM Error: See xref:ZST-Compatibility.adoc['System Requirements guide'] for more information. Action: Review the Azul Platform Prime Component Version Compatibility Reference and install an appropriate Azul Platform Prime component. Kernel Mismatch on a DKMS RHEL, SLES, or Ubuntu Systems Message:  Error! Your kernel headers for kernel <kernel version> cannot be found at\n/lib/modules/<kernel version>/build\n\nor\n\n/lib/modules/2.6.32-71.el6.x86_64/source Action: Run the following commands to fix the error: For RHEL:  sudo yum install kernel-devel-2.6.32-71.el6.x86_64\nsudo dkms build -m zing_mm -v 99.99.99.99-712\nsudo dkms install -m zing_mm -v 99.99.99.99-712 For SLES:  sudo zypper install kernel-devel-3.0.101-0.35-default\nsudo dkms build -m zing_mm -v 5.7.7.0-10\nsudo dkms install -m zing_mm -v 5.7.7.0-10 For Ubuntu:  apt-get install kernel-devel-$(uname -r) Once you resolve the errors listed in the error message, run system-config-zing-memory. ZST support for kernel version is unavailable Question: What if the kernel I am running on is not listed in the supported kernel list at https://www.azul.com/software-downloads-and-documents/? Sample error message :  /usr/lib/zing/bin/tar: zm.o_3.10.0-862.25.3.el7.x86_64: Not found in archive\n/usr/lib/zing/bin/tar: zm_linux.o_3.10.0-862.25.3.el7.x86_64: Not found in archive\n/usr/lib/zing/bin/tar: Exiting with failure status due to previous errors\nzing-memory: INFO: Zing ZST support for kernel 3.10.0-862.25.3.el7.x86_64 is unavailable. Please upgrade ZST.\nFatal error: os::safeSystem: command '/etc/init.d/zing-memory restart' failed. Actions: In most cases, the latest Feature and Update releases of ZST have support for required kernels. The latest release of ZST may happen to miss support for a kernel and display the error message if the kernel is: a custom kernel a part of the Extended Update Support (EUS) Subscription no longer available in the target OS repository File a bug and Azul team will do their best to add support for the kernel you need. Please install ZST Error Message:  Zing VM Error: DLERROR: libaznix.so: cannot open shared object file: No such file or directory\nZing VM Error: Please install ZST (Zing System Tools) Actions: Use Zing 19.06.0.0 or higher. See Azul Zing System Tools Libraries Retirement from Containers for details."
}, {
  "objectID" : "0e410972-e733-4bda-90a4-fafb3cece4e8",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime Errors",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Errors",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Errors",
  "content" : "This section lists common errors and possible solutions when using Azul Platform Prime to run your Java applications: Zing Error: Running without ZST requires memfd_create(2), which is not supported by this version of the operating system. Zing JVM Error: See documentation for more details. The error message is displayed when running Azul Zing Builds of OpenJDK (Zing) on your machine with an unsupported kernel or operating system. Solution: Install the ZST component. See Installing the Azul Zing System Tools for related installation details. AzulZing Error: libcurl.so.3: cannot open shared object file: No such file or directory When running zing-licensed --configure on Ubuntu 16.04, the following error message displays: zing-licensed --configure Zing Error: libcurl.so.3: cannot open shared object file: No such file or directory ERROR: Please install libcurl package with 'libcurl.so.3' or 'libcurl.so.4' Solution: Install libcurl3 package. cd /usr/lib/zing ln -s /usr/lib/x86_64-linux-gnu/libcurl.so.3 libcurl.so.3 ldconfig zing-licensed --c Cannot overwrite /proc/sys/kernel/core_pattern When abrtd running zing core_pattern cannot overwrite /proc/sys/kernel/core_pattern. Solution: Scan the file, core_pattern, for any reference piped ( \\| ) core_pattern. For example:  $ more /proc/sys/kernel/core_pattern\n\n\\|/usr/libexec/abrt-hook-ccpp /var/spool/abrt %s %c %p %u %g %t %h %e 636f726500 If a piped ( \\| ) core_pattern is found: Stop the process included in core_pattern. For example: $ service abrtd stop For RHEL 6.3: # service abrt-ccpp stop Clear or change core-pattern to not include any piped (\\|) core pattern. $ echo core > /proc/sys/kernel/core_pattern Restart zing-core-pattern. $ /etc/init.d/zing-core-pattern start Ensure the piped ( \\| ) core-pattern process is not restarted on boot. $ chkconfig abrdt off For RHEL 6.3: $ chkconfig abrt-ccpp off The Event Tick Buffer Profiling system status is: \"Shutdown.\" The tick profiler shutdowns automatically when an attempt is made to allocate more than the configured maximum number of tick profiling buffers. The reason is printed: Max Buffers Exceeded. Solution: Increase the maximum number of permissible tick profiling buffers by increasing the value of EventTickBuffersMaxAllocatedBeforeShutoff in the command line arguments. To avoid data structure resizes, use EventTickBuffersAllocated to simultaneously increase the chunk size used at initialization and for expansion. For example: java -XX:ARTAPort=9990 –XX:+UseTickProfiling -XX:EventTickBuffersAllocated=4096 -XX:EventTickBuffersMaxAllocatedBeforeShutoff=12288 <java-class> For best performance, keep the number of threads in the application to a reasonable number based on the CPU resources available. Crash When Using Tight Polling Loops Application hangs, and eventually crashes with a checkpoint timeout, when real time threads run tight loops. Background: In these conditions, lower priority threads are not getting sufficient CPU time to reach checkpoint. Solution: When the parameter CheckpointBoostPriority is configured, Zing temporarily boosts the priority of real time threads to the configured value. For example, one way to use this safely includes: Configure -XX:CheckpointBoostPriority=<Y> Start Zing on node 0 with SCJED_RR and a priority, <X>, ensuring that the value for <X> is greater than <Y>. Using JNI, move the threads with relative real time priority requirements to node 1. Using JNI, assign relative priorities to the threads you moved to node 1, so that the highest among them is <Y>. Out of Space KlassTable The OOP (Ordinary Object Pointer) Table - KlassTable contains a unique ID for each loaded class. Each entry is 8 bytes long. The entries will be freed when the corresponding classes are unloaded. Solution: The KlassTableSize option needs to be set appropriately for the number of live classes in the application, which can be monitored using PrintGCDetails. The default value of KlassTableSize is based on the Java heap size, For example: Java heaps less than 2 GB - default 2 MB Java heaps 2 GB or greater - default 8 MB Dependency on the JNIDetachThreadsIfNotDetached flag The flag -XX:+JNIDetachThreadsIfNotDetached is needed by any application that attaches a JNI thread to the VM but does not detach the thread before calling pthread_exit. For example with IBM WebSphere MQ Low Latency Messaging (LLM) applications. If this error occurs, an error report file with more information is saved in, for example, /home/<user>/tmp5/hs_err_pid16620.log. Solution: If you receive this error, include the following flag in your Zing commands: -XX:+JNIDetachThreadsIfNotDetached Problems when uninstalling or upgrading Zing You must stop all Zing Java processes before uninstalling or upgrading. Otherwise, you might see the following error message: %preun(zing-zst-<version>) scriptlet failed, exit status1 Solution: Run the zing-ps tool to list any running Zing processes. Stop the processes. Re-run zing-ps to verify all Zing processes are stopped. Reissue the uninstallation or upgrade commands. Could not create the Java virtual machine ZST is either not loaded properly or has not been configured yet. Solution: Please confirm the zing-zst package is properly installed and configured. Please run system-config-zing-memory as root. See man zing-installation for more information. Fatal error: Not enough free memory Running Linux processes are taking up a large amount of memory while attempting to configure Azul Platform Prime memory. Or, you have selected values that are too aggressive using the wizard or directly in the pmem.conf configuration file. Solution 1: Stop any processes that use significant resources while configuring Azul Platform Prime. You need to reevaluate your resource budget if you plan to run these concurrently with Azul Platform Prime. Solution 2: Try again with less aggressive memory settings. ZST Fails to Allocate Requested Memory Long after system startup (and after much memory has been consumed back and forth), ZST might fail to allocate the requested amount of memory, as it might (a) already be occupied or (b) exist in fragmented state that cannot be defragmented into 2MB pages. Transparent huge pages on RHEL 6.x can help recover 2MB pages, but might not be absolutely reliable, and on other systems (RHEL 5.x, SUSE 11, and other non-RHEL-6 kernel prior to 2.6.38) it is unlikely that you can find 75% of system memory in 2MB page form after the system has run loads for a while and cached files. Solution: See Enhanced Linux Memory Defragmentation. Cannot find kernel config/boot/config-<kernel version> The kernel you are running has no associated configuration file in the system /boot directory. A normal kernel installation and build will always include such a file. This is a serious error indicating that you are running a kernel in a non-standard way. Solution: You are likely using a non-supported system configuration. The solution is to use a standard configuration. Running Azul Platform Prime on Paravirtualized Kernels Kernel panic occurs when you are starting Azul Platform Prime on a paravirtualized instance. Explanation: Xen virtualization and in Amazon EC2 environments, paravirtualization is not supported in Azul Platform Prime. Only HVM (Hardware-assisted Virtual Machine) instances are supported. See the Azul Platform Prime System Requirements document for the complete list of the supported operating systems and kernels. UseLargePages Not Supported with ZST Azul Platform Prime does not support the -XX:+UseLargePages option. Azul Platform Prime pages are always large pages and they come from the ZST. ZST and the HugePages memory conflict, as they both reserve memory for themselves. The ZST memory service reserves and manages its own memory space, so Large Memory Pages configured by the operating system make it difficult or impossible for the ZST memory service to reserve enough pages for Azul Platform Prime. Therefore, set the output from the three Huge variables to zero. Solution: To set the huge variables to zero: Check if your system can support large page memory: # cat /proc/meminfo \\| grep Huge If Large Pages are available but not configured or reserved, the response is similar to:  # cat /proc/meminfo \\| grep Huge\nHugePages_Total: 0\nHugePages_Free: 0\nHugepagesize: 2048 kB If Large Pages are available, configured, and reserved, the response is similar to the following.  # cat /proc/meminfo \\| grep Huge\nHugePages_Total: 30000\nHugePages_Free: 264\nHugePages_Rsvd: 88\nHugepagesize: 2048 kB Set the operating system hugepages memory settings to zero. Log in as root. Reset the hugepages value, type: # echo 0 > /proc/sys/vm/nr_hugepages Optionally, because the /proc values resets after reboot, set the value in an init script, such as rc.local or sysctl.conf. JVM Process is Killed by the Linux Out Of Memory Process Killer The reason for the killed process is the memory pressure the VM Balloon Driver creates by over-expanding its virtual balloon and consuming the memory used by Azul Platform Prime. Sample error message:  java invoked oom-killer\nOut of memory: Kill process 6465 (java) score 38 or sacrifice child\nKilled process 6465 (java) total-vm: ... Solution Because the VM Balloon Driver is running on most standard Linux systems by default, it is recommended to disable the Balloon Driver by either of the following methods: For VMware, add the following line to the VMX file and restart the VM: sched.mem.maxmemctl = \"0\" Disable the balloon driver within the VM: Find the module name: /sbin/lsmod \\| grep balloon Remove the module: sudo modprobe -r vmw_balloon Problem running Azul Platform Prime on an unsupported kernel using reserve-at-launch You might encounter the following error when running ZST on an unsupported kernel using reserve-at-launch:  Enter reserve-at-(c)onfig or reserve-at-(l)aunch [default 'c']: l\nZing supports only the 'reserve-at-config' policy with the OS/kernel version\non this system. To override, please refer to the Zing documentation. This error might occur because the system-config-zing-memory script needs to identify if the kernel supports node compaction or not. Solution: To bypass the corresponding check: Login to your host system as root administrator or use sudo. Create an empty file named force_reserve_at_launch in the /etc/zing directory. Problem starting Azul Platform Prime memory (Syslog.pm) You might encounter the following error when trying to start Azul Platform Prime memory on Azul Linux:  zing-memory: INFO: Starting...\nCan't locate Sys/Syslog.pm Solution: Ensure you have installed the following packages are installed:  yum localinstall --nogpgcheck openssl binutils curl\nyum install perl-Sys-Syslog.x86_64 Problem starting Azul Platform Prime memory (Kernel update) You might encounter the following error when trying to start Azul Platform Prime memory:  zing-memory: INFO: Starting...\n/usr/lib/zing/bin/tar: zm.o_<kernel>: Not found in archive\n/usr/lib/zing/bin/tar: zm_linux.o_<kernel>: Not found in archive\n/usr/lib/zing/bin/tar: Exiting with failure status due to previous errors\nzing-memory: INFO: Zing ZST support for kernel <kernel> is unavailable. Please upgrade ZST. Solution: Upgrade ZST as described in Upgrading Azul Zing System Tools. Problem running Azul Platform Prime on CoreOS You might encounter the following error when trying to run Azul Platform Prime on CoreOS:  Error response from daemon: linux runtime spec devices: error gathering device information while adding custom device \"/dev/zing_mm0\": lstat /dev/zing_mm0: no such file or directory\nError: failed to start containers: <container ID> Solution: Run the following commands on privileged container:  ln -s /run/systemd/journal/dev-log /dev/log\nservice zing-memory restart and the following command on the CoreOS host:  /lib/modules/zing-memory create_devices Fatal error: Checkpoint sync time longer than 50000 ms detected You might encounter the following error when observing high time-to-checkpoint or event time-to-checkpoint crashes:  fatal error: Checkpoint sync time longer than 50000 ms detected Before this fatal error, you must have seen several warnings when either 1 second, 20%, or 80% of CheckpointTimeout was reached:  Detected TTSP issue: start: nnn.nnn wait: nnn.nnn\nFor details on how to modify profiler configuration (for example, increase the timeout limit with -XX:CheckpointTimeoutDelay=100000 or turn off crashing with -XX:-DieOnSafepointTimeout), see Safepoint Profiler. Solutions: Use any from below to fix the error: If CPU load is high, make sure that no non-JVM processes are affecting CPU availability for JVM. If CPU load is high and JVM contributes a large portion of it, try -XX:+PromoteCheckpoints. Depending on the load specifics, forcing earlier promotions with additional -XX:CheckpointPromotionDelay=<ms> may give better results. However, setting it to a too low value may negatively affect latency, as working java threads will be stopped more frequently. If CPU utilization is far from saturation, contact [email protected]. <path>has not been configured as an alternative for java You might encounter the following error when updating information in the alternatives system:  update-alternatives --set java /opt/zing/zing-jdk8/bin/java\n/opt/zing/zing-jdk8/bin/java has not been configured as an alternative for java Solution: Use the full path to the zing-jdk directory. For example: update-alternatives --set java /opt/zing/zing-jdk1.8.0-19.04.0.0-7-x86_64/bin/java libjvm.so: no version information available (required by … impalad) The libjvm.so library has a dependency on the libstdc++ version 3.4.20 or higher. Solution: Upgrade libstdc++ to be greater than 3.4.20. Alternatively, resolve the library dependency by using the library that is shipped with Azul Platform Prime: append the LD_LIBRARY_PATH environment variable to libstdc path in zing-jdk (e.g., export libstdc LD_LIBRARY_PATH=$LD_LIBARARY_PATH:/opt/zing/zing-jdk8//jre/lib/amd64/server/../../../../etc/libc++/) and relaunch your application. Error: dl failure on line 1095  $ java -version\nError: dl failure on line 1095\nError: failed /opt/zing/zing-jdk1.8.0-19.10.0.0-6-x86_64/jre/lib/amd64/server/libjvm.so, because libpam.so.0: cannot open shared object file: No such file or directory* This error message is displayed when running Azul Platform Prime on containers due to a missing pam library. Solution: If you received this error, install pam.x86_64: $ sudo yum install pam.x86_64 Error: 'core-bundler' failed: gpg not found  $ core-bundler c core.<pid> --docker-container <container_id>\ncore-bundler version 0.3\nError: 'core-bundler' failed: gpg not found\nRun 'core-bundler help' for more information In order to bundle Azul Platform Prime core files, GPG is required to be installed. Solution: If you received this error message, install GPG: $ sudo apt install gpg [-UseZST][ERROR] Could not find a suitable mount point for the backing storage  Error occurred during initialization of VM\nFailed to initialize memory management system This error can occur when migrating from a system where a JVM was configured to use static large pages. Solution: To check if a number of static large pages were previously configured on this system, run the following command to list the number of 2MByte pages: sysctl vm.nr_hugepages If no large pages are configured, remove -XX:+UseLargePages from your java command line. If large pages are configured and performance tests show a benefit for your application, refer to Using Huge Pages with Azul Platform Prime for information about enabling transparent huge pages. If Using Huge Pages with Azul Platform Prime is not applicable to your use case, use -XX:GPGCNoZSTBackingStoragePath. See Using Azul Zing Builds of OpenJDK Command-Line Options for details. Error occurred during initialization of VM: Memory management: unable to fund java heap account The error message displays for both ZST and non-ZST modes of Azul Platform Prime at startup in the following cases: In ZST reserve-at-config mode, when there is not enough memory left in the ZST partition to fund the whole of Xmx. Here the solution is to increase the ZST partition or reduce Xmx or stop other running Azul Platform Prime processes. In ZST reserve-at-launch mode, when ZST memory could not be extended sufficiently to fund the whole of Xmx. Here the solution is to add more memory or increase the overall limit for ZST memory or reduce Xmx or stop other running processes. In non-ZST mode with -XX:+AlwaysPreTouch, when the whole of Xmx cannot be funded from the system. Solution: Add more memory, reduce Xmx, or stop other running processes. [-UseZST][ERROR] Available physical memory is not enough to fund the backing storage  Error occurred during initialization of VM\nFailed to initialize memory management system This error message is displayed in the non-ZST mode if the JVM detects at startup that there is not enough memory available on the system to fund the whole of Xmx. Solution: Add more memory, reduce Xmx, or stop other running processes. [ERROR] Mapping to backing storage failed with errno 12  An unexpected error has been detected by Java Runtime Environment:\nInternal Error (vmem_spaceManager.cpp:309), pid=63145, tid=63236\nExternal Fatal Error: Multimap to aliases failed during multimap_from_space Insufficient virtual memory areas (VMA) may lead to a crash in Azul Platform Prime. Solution: Increase the VMA as described in Ensuring Sufficient Virtual Memory Areas. Exception: Too many open files The error is generated when the open file limit for a user or system exceeds the default setting. Solution: Increase the open files limit on your system. System-wide settings View the current limit value for maximum open files at the system level: # cat /proc/sys/fs/file-max To change the system-wide maximum open files limit, edit your /etc/sysctl.conf file as root and add the following line at the end of the file: fs.file-max = <num> To activate your change in the live system, run the following command: sysctl -p User settings To check the current limit value for maximum open files for a user, run the following commands as root:  $ su - <user>\n$ ulimit -n The default setting is usually 1024. Change the open files limit for either a specific user or all users as described below. To change the open files limit for a specific user, edit /etc/security/limits.conf as root: user - nofile <num> To increase the system-wide limit for all users, edit the /etc/security/limits.conf file as root: nofile <num> To apply your changes in the limits.conf file, close all active sessions, log back in, and restart your application. Note: The <num> value varies according to the amount of RAM in the system. It is approximately 100000 files per GB of RAM."
}, {
  "objectID" : "d18086ed-00a0-44d6-a8da-fa077546f30c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Performance Troubleshooting",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Performance",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Performance",
  "content" : "Symptom Workaround -XX:+ProfileLiveObjects is required for jmap -histo In order for jmap -histo to work on a ZVM, the ZVM command line has to have -XX:+ProfileLiveObjects specified at startup. Using Java Flight Recorder (JFR) can cause long (dozens of milliseconds) application pauses. Do not use JFR in environments where long pauses are unacceptable."
}, {
  "objectID" : "af76f66e-f42b-49a8-8119-a6c1a0475ed3",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Native Launch",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Invoke-Native-Launch",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Invoke-Native-Launch",
  "content" : "A native launch application is any application that is written in a language other than Java and calls JNI_CreateJavaVM to create the Azul Zing Builds of OpenJDK (Zing) and makes calls to Java code. This is usually written in C/C++ and contains the “main” function to start execution. Invoking Native Launch with Zing If Native (C/C++) applications invoke Zing, consider these issues before you execute your code. Native launch application — Identify how the native app creates the VM to find possible collisions with areas used by or allocated by Zing. Consider known limitations when running native apps on Zing. Identify the issues by the failure messages. Invoking Zing — check for differences between a stock build and a Zing build. Native apps should also know how to run Zing-specific features such as the Tick Profiler mechanism and C-Heap Leak detection. Consult the cases listed below to determine your best course of action: Bad address errors for CodeCache and OopTable: temporary az_mreserve failed.  Failure message: Error: temporary az_mreserve(CodeCache) failed: Bad address  at (0xNNNNNN for 0xNNNNNN bytes)\nFailure message: Error: temporary az_mreserve(OopTable) failed: Bad address  at (0xNNNNNN for 0xNNNNNN bytes) Virtual address space collisions when native launch applications allocate memory where Zing allocates certain internal structures like the CodeCache and the OopTable. Solution: If any of the reported messages are encountered, native launch applications should try to LD_PRELOAD libc_hooks3.so or call JNI_CreateJavaVM early on in the main function before calling routines that may allocate memory. libc_hooks3.so is available in $JAVA_ HOME/etc/zing/lib/. Problems using signal handlers Native launch application uses signal handlers for signals used by Zing. Solution: Please use libjsig.so to chain user signal handlers correctly behind Zing’s signal handlers. libjsig.so is available under $JAVA_HOME/jre/lib/amd64/server/libjsig.so. Dependency on libc_hooks3.so or LD_PRELOAD libc_hooks3.so Native launch applications will have to link against libc_hooks3.so or LD_PRELOAD libc_hooks3.so in the following scenarios: When using -XX:+UseTickProfiler When using -XX:+CHeapLeakDetection When there is a collision in the low 2 GB of virtual address space Solution: Applications can either modify the code to load libjvm.so early or load libc_hooks3.so, which will reserve upfront the space needed for the VM in the low 2 GB of virtual address space. libc_hooks3.so is available in $JAVA_HOME/etc/zing/lib/. Threads can come under the tick profiler scanner and allocations can come under the leak detection scanner only after VM initialization. Note Starting with Zing 18.12.0.0 release, native applications linked with libc_hooks2 will fail. To avoid the failure, rebuild your native application with libc_hooks3 which is in <JAVA_HOME>/etc/zing/lib."
}, {
  "objectID" : "e2b5be09-cb24-447b-8039-3a287c246a05",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Hardware Tips",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Qualification-Failed-Errors",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Qualification-Failed-Errors",
  "content" : "Consider the following recommendations related to the Azul Platform Prime hardware requirements. Limitation Description Recommendation Processor support insufficient for Azul Platform Prime (constant_tsc support required) Azul Platform Prime requires a specific feature of modern X86 chips in order to function properly. This feature, constant_tsc, provides a reliable, fast time-source even in the presence of power-saving operations performed by modern processors. This reliable time source is required by Azul Platform Prime. Solution: Run Azul Platform Prime on a processor supporting constant_tsc. Nearly all server-class X86 processors made in the last five years have this feature. See the Azul Platform Prime System Requirements and Compatibility References for a list of supported processors. Known Intel chip errata can cause spurious system-wide delays. Recent Intel chips in combination with some aggressive power-saving driver techniques are known to cause sporadic system lockups, up to a minute long. This is an issue which can occur with or without Azul Platform Prime present but can be more noticeably manifest in the high-performance, low-latency applications commonly deployed in Azul Platform Prime environments. This issue appears with RedHat Enterprise Linux 6.1 and its integrated Intel Idle Driver. The Intel Idle Driver aims to improve power efficiency but can lead to system lockups when run on some recent Intel CPUs (some Nehalems and Westmeres have been reported to have problems). Note that this issue does not occur on all Nehalem and Westmere processors. Solution: To solve the issue, you can simply boot your system with the Intel idle driver disabled. To do so, modify your kernel boot parameters and add the argument intel_idle.max_cstate=0 to the boot line. See Disabling the Intel Idle Driver for directions on RHEL, SUSE, and Ubuntu systems."
}, {
  "objectID" : "feeaf215-0d54-4371-a42b-274e1667a73c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "content" : "If you contact your Azul technical support representative regarding a failure, you might be asked to provide core files or a core bundle that includes the core files and crash associated files, (such as, log files generated by the Azul Zing Builds of OpenJDK [Zing] instance, system log files, and versions of shared libraries used by the Zing instance). Providing this information, in addition to the core files, helps Azul to properly diagnose and quickly identify failures due to Azul Platform Prime. If a failure occurs due to a Zing instance or Zing instance-related Java application failure a core file is created, provided ulimit -c unlimited is set. The uli`m`it setting is required to generate a core file. Use the following two scripts for bundling the core files with the shared libraries that were in use by the Zing instance running the Java application when it failed: core-bundler (introduced in Zing 19.06.0.0 for improved work with Docker containers) zing-core-bundler (a previous version of the script)"
}, {
  "objectID" : "dc48878a-6159-4e34-ad5b-86291b4cb0a2",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "About the core-bundler Script",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling#about-the-core-bundler-script",
  "content" : "About the core-bundler Script The core-bundler script is a self-contained bash script introduced in the Azul Platform Prime 19.06.0.0. It works well in a container environment. When the Azul Zing Builds of OpenJDK (Zing) crashes, a core file is dumped on a disk (if core dump is configured and enabled). See Core Bundling with Azul Platform Prime for more information. The core-bundler script is used to create an encrypted bundle containing the core file along with object files used by the crashed application and log files produced by Zing. It collects and bundles the core file along with the dynamic libraries to an encrypted gzipped tarball (.tgz.gpg) archive. core-bundler requires gpg, gtar/tar, pigz/gzip, gawk/awk. The core-bundler script does not require installation and is located in the <zvm installation directory>/etc/core-bundler directory once Zing is installed on your system. Using core-bundler The core-bundler syntax and options are listed below. Usage:  core-bundler -h|--help\ncore-bundler <command> <args> Command Description create Creates an encrypted archive with files needed to successfully debug the core dump. extract Extracts an encrypted core bundle to the current directory. help Provides information about a specific command usage. Creating an Encrypted Bundle To create a bundle, use the core-bundler create command:  core-bundler create [--hsfile <hsfile>] [--docker-container <cid> | --docker-image <iid> [-v <vlist> ...]] [<force-options> ...] <core> Option Description <core> Specifies the path to the core file to create a bundle for. <hsfile> Specifies the path to the hs_err log file left by the same VM process. Default: hs_err fileis in the same directory as the corefile. <cid> Docker container ID of the container that dumped the core or of a similar container (if the original one is not available). <iid> Docker image ID of the image that can be used to create a container similar to the one that dumped the core. <vlist> Docker volumes mount list (in the format of -v <src>:<dst>). Multiple -v options allowed. <force-options> core-bundler is interactive by default but you can force some/all actions by providing the following options: --no-host-check forces bundling on the current host even if it differs from the host where coredump was produced --no-preview does not open an EDITOR to preview the list of files to bundle --no-space-check does not perform a free disk space check --overwrite overwrites the bundle if a file with the same name already exists For example:  $ /opt/zing/zing-jdk8/etc/core-bundler create core.57075\ncore-bundler version 0.3\nExtracting hostname from the core file. Could take a while ... Done\nThe bundle file will contain core file, log files, executable, dynamic libraries and some system information.\nFor security reasons the bundle will be encrypted.\nDo you want to review (and/or modify) list of files to be included before proceeding? ([Y]es / [N]o / [C]ancel) [default 'n']: n\nCreating an encrypted bundle: /tmp/corelibs.57075_testhost.tgz.gpg ...\nEncrypted bundle file has been created and is ready to be shared with Azul!\nFile: /tmp/corelibs.57075_testhost.tgz.gpg\n** PLEASE DO NOT UPLOAD THE PASSWORD FILE TO AZUL **\nAzul already has a private key which can decrypt the core bundle.\nThe password is only for your use, in case YOU need to extract files from the bundle.\nTo extract the file use core-bundler extract corelibs.57075_testhost.tgz.gpg. Extracting an Encrypted Bundle The password file that is created next to the bundle file can be used to decode/extract files from the bundle. To extract an archive, use the core-bundler extract command:  core-bundler extract [--list-only] <encrypted-bundle> Option Description <encrypted-bundle> Specifies the path to the encrypted bundle (corelibs.xxxx.tgz.gpg). --list-only Does not extract files. Lists the archive content only. For example:  $ /opt/zing/zing-jdk8/etc/core-bundler create /tmp/corelibs.57075_testhost.tgz.gpg\ncore-bundler version 0.3\nExtracting data from /tmp/corelibs.57075_testhost.tgz.gpg ... Done The above command extracts the content of the bundle to the current directory. Dealing with Core Files from Docker Container Environment Core files dumped by Zing while running in a container need to be co-bundled with the same dynamic libraries that were used by Zing during the crashed run. So the core-bundler script needs a way to access files from the container. If the Docker container is either still alive or was started without the --rm option, one can use the --docker-container <cid> option to pass the ID of the container to the script. In this case, the script will auto-detect all the mappings that are used by the container and prepare a bundle: For example:  $ /opt/zing/zing-jdk8/etc/core-bundler create core.15 --docker-container 123abc456def\ncore-bundler version 0.3\nThe bundle file will contain core file, log files, executable, dynamic libraries and some system information.\nFor security reasons the bundle will be encrypted.\nDo you want to review (and/or modify) list of files to be included before proceeding? ([Y]es / [N]o / [C]ancel) [default 'n']: n\nCreating an encrypted bundle: /tmp/corelibs.15_123abc456def.tgz.gpg ...\nEncrypted bundle file has been created and is ready to be shared with Azul!\nFile: /tmp/corelibs.15_123abc456def.tgz.gpg\nPLEASE DO NOT UPLOAD THE PASSWORD FILE TO AZUL\nAzul already has a private key which can decrypt the core bundle.\nThe password is only for your use, in case YOU need to extract files from the bundle.\nTo extract the file use core-bundler extract corelibs.15_123abc456def.tgz.gpg. If the container is not available, you can use the --docker-image option to specify an image ID that could be used to re-create the environment used during the crashed run. It is important to provide an image that has the same set of dynamic libraries installed. Ideally, it should be the same image that the container was created from. Note, that in this case the script has no information about Docker Volumes mappings. So you have to provide them with -v <vlist> option(s): For example:  $ core-bundler create core.15 --docker-image fed654cba321 -v /tmp:/cores -v /home/user/data:/data --no-preview\ncore-bundler version 0.3\nCreating an encrypted bundle: /tmp/corelibs.15_45e64c65dd4b.tgz.gpg ...\nEncrypted bundle file has been created and is ready to be shared with Azul!\nFile: /tmp/corelibs.15_45e64c65dd4b.tgz.gpg\nPLEASE DO NOT UPLOAD THE PASSWORD FILE TO AZUL *\nAzul already has a private key which can decrypt the core bundle.\nThe password is only for your use, in case YOU need to extract files from the bundle.\nTo extract the file use core-bundler extract corelibs.15_45e64c65dd4b.tgz.gpg."
}, {
  "objectID" : "ba404a89-688f-4863-b227-12ed20a4f1f4",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "Using core-bundler",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling#using-core-bundler",
  "content" : "Using core-bundler The core-bundler syntax and options are listed below. Usage:  core-bundler -h|--help\ncore-bundler <command> <args> Command Description create Creates an encrypted archive with files needed to successfully debug the core dump. extract Extracts an encrypted core bundle to the current directory. help Provides information about a specific command usage."
}, {
  "objectID" : "35e18cbc-7323-4616-a03d-f913ab64ffca",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "Creating an Encrypted Bundle",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling#creating-an-encrypted-bundle",
  "content" : "Creating an Encrypted Bundle To create a bundle, use the core-bundler create command:  core-bundler create [--hsfile <hsfile>] [--docker-container <cid> | --docker-image <iid> [-v <vlist> ...]] [<force-options> ...] <core> Option Description <core> Specifies the path to the core file to create a bundle for. <hsfile> Specifies the path to the hs_err log file left by the same VM process. Default: hs_err fileis in the same directory as the corefile. <cid> Docker container ID of the container that dumped the core or of a similar container (if the original one is not available). <iid> Docker image ID of the image that can be used to create a container similar to the one that dumped the core. <vlist> Docker volumes mount list (in the format of -v <src>:<dst>). Multiple -v options allowed. <force-options> core-bundler is interactive by default but you can force some/all actions by providing the following options: --no-host-check forces bundling on the current host even if it differs from the host where coredump was produced --no-preview does not open an EDITOR to preview the list of files to bundle --no-space-check does not perform a free disk space check --overwrite overwrites the bundle if a file with the same name already exists For example:  $ /opt/zing/zing-jdk8/etc/core-bundler create core.57075\ncore-bundler version 0.3\nExtracting hostname from the core file. Could take a while ... Done\nThe bundle file will contain core file, log files, executable, dynamic libraries and some system information.\nFor security reasons the bundle will be encrypted.\nDo you want to review (and/or modify) list of files to be included before proceeding? ([Y]es / [N]o / [C]ancel) [default 'n']: n\nCreating an encrypted bundle: /tmp/corelibs.57075_testhost.tgz.gpg ...\nEncrypted bundle file has been created and is ready to be shared with Azul!\nFile: /tmp/corelibs.57075_testhost.tgz.gpg\n** PLEASE DO NOT UPLOAD THE PASSWORD FILE TO AZUL **\nAzul already has a private key which can decrypt the core bundle.\nThe password is only for your use, in case YOU need to extract files from the bundle.\nTo extract the file use core-bundler extract corelibs.57075_testhost.tgz.gpg."
}, {
  "objectID" : "908d18fe-86c6-4357-a57e-26a4ad165948",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "Extracting an Encrypted Bundle",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling#extracting-an-encrypted-bundle",
  "content" : "Extracting an Encrypted Bundle The password file that is created next to the bundle file can be used to decode/extract files from the bundle. To extract an archive, use the core-bundler extract command:  core-bundler extract [--list-only] <encrypted-bundle> Option Description <encrypted-bundle> Specifies the path to the encrypted bundle (corelibs.xxxx.tgz.gpg). --list-only Does not extract files. Lists the archive content only. For example:  $ /opt/zing/zing-jdk8/etc/core-bundler create /tmp/corelibs.57075_testhost.tgz.gpg\ncore-bundler version 0.3\nExtracting data from /tmp/corelibs.57075_testhost.tgz.gpg ... Done The above command extracts the content of the bundle to the current directory."
}, {
  "objectID" : "9cc6eac8-a70e-40d5-8fec-81f5f85f5fd1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "Dealing with Core Files from Docker Container Environment",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling#dealing-with-core-files-from-docker-container-environment",
  "content" : "Dealing with Core Files from Docker Container Environment Core files dumped by Zing while running in a container need to be co-bundled with the same dynamic libraries that were used by Zing during the crashed run. So the core-bundler script needs a way to access files from the container. If the Docker container is either still alive or was started without the --rm option, one can use the --docker-container <cid> option to pass the ID of the container to the script. In this case, the script will auto-detect all the mappings that are used by the container and prepare a bundle: For example:  $ /opt/zing/zing-jdk8/etc/core-bundler create core.15 --docker-container 123abc456def\ncore-bundler version 0.3\nThe bundle file will contain core file, log files, executable, dynamic libraries and some system information.\nFor security reasons the bundle will be encrypted.\nDo you want to review (and/or modify) list of files to be included before proceeding? ([Y]es / [N]o / [C]ancel) [default 'n']: n\nCreating an encrypted bundle: /tmp/corelibs.15_123abc456def.tgz.gpg ...\nEncrypted bundle file has been created and is ready to be shared with Azul!\nFile: /tmp/corelibs.15_123abc456def.tgz.gpg\nPLEASE DO NOT UPLOAD THE PASSWORD FILE TO AZUL\nAzul already has a private key which can decrypt the core bundle.\nThe password is only for your use, in case YOU need to extract files from the bundle.\nTo extract the file use core-bundler extract corelibs.15_123abc456def.tgz.gpg. If the container is not available, you can use the --docker-image option to specify an image ID that could be used to re-create the environment used during the crashed run. It is important to provide an image that has the same set of dynamic libraries installed. Ideally, it should be the same image that the container was created from. Note, that in this case the script has no information about Docker Volumes mappings. So you have to provide them with -v <vlist> option(s): For example:  $ core-bundler create core.15 --docker-image fed654cba321 -v /tmp:/cores -v /home/user/data:/data --no-preview\ncore-bundler version 0.3\nCreating an encrypted bundle: /tmp/corelibs.15_45e64c65dd4b.tgz.gpg ...\nEncrypted bundle file has been created and is ready to be shared with Azul!\nFile: /tmp/corelibs.15_45e64c65dd4b.tgz.gpg\nPLEASE DO NOT UPLOAD THE PASSWORD FILE TO AZUL *\nAzul already has a private key which can decrypt the core bundle.\nThe password is only for your use, in case YOU need to extract files from the bundle.\nTo extract the file use core-bundler extract corelibs.15_45e64c65dd4b.tgz.gpg."
}, {
  "objectID" : "bbc6014b-1058-4080-ba2e-5820697d5eea",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "About the zing-core-bundler Script",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling#about-the-zing-core-bundler-script",
  "content" : "About the zing-core-bundler Script This section describes the zing-core-bundler script. Azul Zing Builds of OpenJDK (Zing) Core Bundling If automatic core bundling is not enabled, you can manually bundle the core files with the shared libraries that were in use by the Zing instance running the Java application when it failed. If you are running a system based on Red Hat Enterprise Linux 5.2 or CentOS Linux 5.2, the automatic core bundler is not on, so core files need to be bundled manually. For this purpose the script zing-core-bundler is provided. This script, as part of the ZST installation, is located in the /usr/sbin subdirectory of the ZST installation. The zing-core-bundler bundles the required files needed to debug a Zing core. It assembles, collects, and bundles the core file along with the shared objects, data, and executable files in-use to an encrypted gzipped tarball (.tgz.gpg) archive. To manually bundle the core file with shared libraries: On RHEL, SLES, and Ubuntu systems, ensure the development tools package group is installed.  yum groupinstall 'Development Tools' Note Selected development tools are required to bundle RHEL 5 core files. If they are not installed, the shared libraries, which were used at the time of the crash and are essential to processing the core file, are not included. Locate the core file. Core files are bundled and stored in the current working directory of the process that crashed. [NOTE]Typically, you create a core bundle on the system where the core file was created, for example host A. If you run the zing-core-bundler command with a copy of the core file on a different system, for example host B, then include the -bundle-on-current-host option. On Ubuntu systems, ensure that the strings command is available. If it is not, install the package, binutils.  # apt-get install binutils If you use the jsvc tool to start your application, to generate Azul Platform Prime core files:  # kill -SIGABRT <PID> Ensure /usr/sbin is in your Zing executable path. For example, add the following to appropriate profile file:  export PATH=/usr/sbin:$PATH Run the zing-core-bundler command. Go to the Zing host command line where ZST is installed. To create a bundle with only related shared libraries that does not include the .jar files, run:  $ /usr/sbin/zing-core-bundler -core core<pid> For example:  $ /usr/sbin/zing-core-bundler -core core.1234 -getall -hsfile hs_err_pid1234.log A compressed and encrypted tar file ending in .tgz.gpg is returned. In this example, the package contains the core file, the .jar files, and because the -getall option is specified, it also contains the related shared libraries which were used in the Zing instance running the Java application. The -getall option ensures the bundle contains all application related data including the .jar files. The -hsfile option creates an additional file that provides additional information useful for support to identify issues. Locate the bundled libs.<corepid>.tgz.gpg file. The libs.<corepid>.tgz.gpg file is created in the current directory. For example, if you execute the command from /home/test, the bundled libs.<corepid>.tgz.gpg file is created in /home/test. Ensure you have write permissions in the executing directory (i.e. /home/test). Send the generated bundle to Azul for failure analysis. Note Encryption error If there is a file with the same name as the core bundle, the core bundle will not be encrypted and the following message is displayed in the core bundling response. INFO: Encrypting core bundle libs.1234.tgz … gpg: libs.1234.tgz: encryption failed: File exists ERROR: Encryption failed. Warning Core bundle is not encrypted INFO: Core bundle at libs.1234.tgz Bundler host error Typically, you create the bundle on the same system where the core file was created. If you are not creating the bundle on the originating core file system, and you did not specify the required option, the following message is displayed in the core bundling response. ERROR: The bundler must run on host <hostname> ERROR: Use the argument '-bundle-on-current-host' to bundle on this host To create the bundle on a different system: Copy the core file from the originating core file system (host A) to host B. On host B, include the -bundle-on-current-host option when you run the zing-core-bundler command. The zing-core-bundler syntax and options are listed below. Option Description -core Specify the core file to be bundled. -bundle-on-current-host Create bundle on current host. This allows bundling a core file that was generated on another host. -exepath Specify the path of the binary that was used to invoke Zing. -decrypt Specify file to decrypt -getall Include all possible files associated with the crash. This includes shared objects, data, and executable files. -getexe Include non-java executable with the bundle. This is bundled if it is available on the host at the time of bundling. -hsfile Explicitly specify the path of the hs_err file. -passwordfile Specify decryption password file. -help Print options help. -output-dir | -o Bundle will be produced at the location specified. Decrypting Core Files Core bundles created through zing-core-pattern, whether they are automatically or manually created and bundled, are encrypted. Files contained in the core bundle are not encrypted individually. The core bundle filename format is: libs.<corepid>.tgz.gpg, where <corepid> is a unique ID specific to the process that encountered an error and crashed. Note Core files are not encrypted if zing-core-pattern is disabled. To decrypt the Zing core bundle: Locate the core bundle file. Run the command:  $ /usr/sbin/zing-core-bundler –decrypt libs.<corepid>.tgz.gpg For example:  $ /usr/sbin/zing-core-bundler -decrypt libs.12830.tgz.gpg\nINFO: Decrypting file libs.12830.tgz.gpg\ngpg: CAST5 encrypted session key\ngpg: encrypted with 1 passphrase\ngpg: encrypted with RSA key, ID 2934892D\nSUCCESS: Decrypted file libs.12830.tgz Core Bundling with Docker Containers You can select one of the following options to collect core dumps from the Docker container: Option 1 Install zing-core-pattern to dump and bundle cores while using docker:  # system-config-zing-core-pattern enable Bundles will be kept under /var/crash/<docker_container_id> on the host. Option 2 Use zing-core-bundler script to bundle the core dumped by a docker container process:  # zing-core-bundler -c <core> --dockercontainerid <docker_container_id>"
}, {
  "objectID" : "82c622b2-139a-4f03-8a4c-bab52cee7c14",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "Azul Zing Builds of OpenJDK (Zing) Core Bundling",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling#azul-zing-builds-of-openjdk-zing-core-bundling",
  "content" : "Azul Zing Builds of OpenJDK (Zing) Core Bundling If automatic core bundling is not enabled, you can manually bundle the core files with the shared libraries that were in use by the Zing instance running the Java application when it failed. If you are running a system based on Red Hat Enterprise Linux 5.2 or CentOS Linux 5.2, the automatic core bundler is not on, so core files need to be bundled manually. For this purpose the script zing-core-bundler is provided. This script, as part of the ZST installation, is located in the /usr/sbin subdirectory of the ZST installation. The zing-core-bundler bundles the required files needed to debug a Zing core. It assembles, collects, and bundles the core file along with the shared objects, data, and executable files in-use to an encrypted gzipped tarball (.tgz.gpg) archive. To manually bundle the core file with shared libraries: On RHEL, SLES, and Ubuntu systems, ensure the development tools package group is installed.  yum groupinstall 'Development Tools' Note Selected development tools are required to bundle RHEL 5 core files. If they are not installed, the shared libraries, which were used at the time of the crash and are essential to processing the core file, are not included. Locate the core file. Core files are bundled and stored in the current working directory of the process that crashed. [NOTE]Typically, you create a core bundle on the system where the core file was created, for example host A. If you run the zing-core-bundler command with a copy of the core file on a different system, for example host B, then include the -bundle-on-current-host option. On Ubuntu systems, ensure that the strings command is available. If it is not, install the package, binutils.  # apt-get install binutils If you use the jsvc tool to start your application, to generate Azul Platform Prime core files:  # kill -SIGABRT <PID> Ensure /usr/sbin is in your Zing executable path. For example, add the following to appropriate profile file:  export PATH=/usr/sbin:$PATH Run the zing-core-bundler command. Go to the Zing host command line where ZST is installed. To create a bundle with only related shared libraries that does not include the .jar files, run:  $ /usr/sbin/zing-core-bundler -core core<pid> For example:  $ /usr/sbin/zing-core-bundler -core core.1234 -getall -hsfile hs_err_pid1234.log A compressed and encrypted tar file ending in .tgz.gpg is returned. In this example, the package contains the core file, the .jar files, and because the -getall option is specified, it also contains the related shared libraries which were used in the Zing instance running the Java application. The -getall option ensures the bundle contains all application related data including the .jar files. The -hsfile option creates an additional file that provides additional information useful for support to identify issues. Locate the bundled libs.<corepid>.tgz.gpg file. The libs.<corepid>.tgz.gpg file is created in the current directory. For example, if you execute the command from /home/test, the bundled libs.<corepid>.tgz.gpg file is created in /home/test. Ensure you have write permissions in the executing directory (i.e. /home/test). Send the generated bundle to Azul for failure analysis. Note Encryption error If there is a file with the same name as the core bundle, the core bundle will not be encrypted and the following message is displayed in the core bundling response. INFO: Encrypting core bundle libs.1234.tgz … gpg: libs.1234.tgz: encryption failed: File exists ERROR: Encryption failed. Warning Core bundle is not encrypted INFO: Core bundle at libs.1234.tgz Bundler host error Typically, you create the bundle on the same system where the core file was created. If you are not creating the bundle on the originating core file system, and you did not specify the required option, the following message is displayed in the core bundling response. ERROR: The bundler must run on host <hostname> ERROR: Use the argument '-bundle-on-current-host' to bundle on this host To create the bundle on a different system: Copy the core file from the originating core file system (host A) to host B. On host B, include the -bundle-on-current-host option when you run the zing-core-bundler command. The zing-core-bundler syntax and options are listed below. Option Description -core Specify the core file to be bundled. -bundle-on-current-host Create bundle on current host. This allows bundling a core file that was generated on another host. -exepath Specify the path of the binary that was used to invoke Zing. -decrypt Specify file to decrypt -getall Include all possible files associated with the crash. This includes shared objects, data, and executable files. -getexe Include non-java executable with the bundle. This is bundled if it is available on the host at the time of bundling. -hsfile Explicitly specify the path of the hs_err file. -passwordfile Specify decryption password file. -help Print options help. -output-dir | -o Bundle will be produced at the location specified."
}, {
  "objectID" : "e540fc79-5f84-46c2-8475-6f7bd1288468",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "Decrypting Core Files",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling#decrypting-core-files",
  "content" : "Decrypting Core Files Core bundles created through zing-core-pattern, whether they are automatically or manually created and bundled, are encrypted. Files contained in the core bundle are not encrypted individually. The core bundle filename format is: libs.<corepid>.tgz.gpg, where <corepid> is a unique ID specific to the process that encountered an error and crashed. Note Core files are not encrypted if zing-core-pattern is disabled. To decrypt the Zing core bundle: Locate the core bundle file. Run the command:  $ /usr/sbin/zing-core-bundler –decrypt libs.<corepid>.tgz.gpg For example:  $ /usr/sbin/zing-core-bundler -decrypt libs.12830.tgz.gpg\nINFO: Decrypting file libs.12830.tgz.gpg\ngpg: CAST5 encrypted session key\ngpg: encrypted with 1 passphrase\ngpg: encrypted with RSA key, ID 2934892D\nSUCCESS: Decrypted file libs.12830.tgz"
}, {
  "objectID" : "840a953f-e407-4d97-93e3-9d6e3cf0c897",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Core Bundling",
  "section" : "Core Bundling with Docker Containers",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Core-Files-Core-Bundling#core-bundling-with-docker-containers",
  "content" : "Core Bundling with Docker Containers You can select one of the following options to collect core dumps from the Docker container: Option 1 Install zing-core-pattern to dump and bundle cores while using docker:  # system-config-zing-core-pattern enable Bundles will be kept under /var/crash/<docker_container_id> on the host. Option 2 Use zing-core-bundler script to bundle the core dumped by a docker container process:  # zing-core-bundler -c <core> --dockercontainerid <docker_container_id>"
}, {
  "objectID" : "97886ddb-5bd2-427d-a2ea-5870b3ae9e61",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Mini-Core Files",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Mini-Core-Files",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Mini-Core-Files",
  "content" : "When generating crash associated files, you can use an option, -XX:+DumpMiniCore, that creates significantly smaller Azul Zing Builds of OpenJDK (Zing) core files. To adjust the size of the core file, use this option with the -XX:DumpMiniCoreLevel=<x> option. Where <x> specifies the information that is included in the mini core file. When you use this option: Generated Zing core files do not include application objects stored in the Java heap. Time required to produce a Zing core file or core file bundle is reduced. To further adjust the amount of data that is included in a mini-core file, include the option, -XX:DumpMiniCoreLevel=<x>, where <x> is in [0, 4]. Level 0 (the current default) includes page infos and audit records Level 1 includes marking information and the card tables Level 2 includes trampolines, forwarding hash tables, preallocated pages etc. Level 3 includes the heap mirror pages Level 4 includes the object heap itself The mini-core file -XX:+DumpMiniCore option requires ZST 5.7.5 or later and ZVM 5.10.x or later. The mini-core file level option, -XX:DumpMiniCoreLevel=<x>, requires ZST 5.7.11 or later and ZVM 15.05.0.0 or later. The default value of DumpMiniCore depends on the Xmx specified If Xmx >= 40g, the default is true (enabled); Otherwise the default is false (disabled). The default value of DumpMinICoreLevel is 0. If the option is specified and either the ZST version or ZVM version is not compatible, a message is issued. If the ZST version supports the -XX:+DumpMiniCore option, but the ZVM version does not, an Unrecognized VM option warning is printed to STDERR. For example:  <my dir>/jdk6/x86_64/product/bin/java -XX:+DumpMiniCore -version\nZing 64-Bit Tiered VM error: Unrecognized VM option '+DumpMiniCore'\nCould not create the Java virtual machine. If the ZVM version supports the -XX:+DumpMiniCore option, but the ZST version does not, a warning message is issued. For example:  $ /bin/java -jar -XX:+DumpMiniCore -version\nZing VM Warning: -XX:+DumpMiniCore is not supported by this ZST (found API version 0x5e, requires API version >= 0x5f)\njava version \"1.7.0-internal-zing_99.99.99.99.dev\"\nZing Runtime Environment for Java Applications (build 1.7.0-internal-zing_99.99.99.99.dev-b25)\nZing 64-Bit Tiered VM (build 1.7.0-zing_99.99.99.99.dev-b501-product-azlinuxM-X86_64, mixed mode) Include the option -XX:+DumpMiniCore, and optionally, -XX:DumpMiniCoreLevel=<x>, with your Java launch command. Some failures cannot be effectively diagnosed with a mini-core file. In this case, Azul support may request that you try to reproduce the failure and produce a full-sized core file, by removing -XX:+DumpMiniCore from your Java launch command. When -XX:+DumpMiniCore option is not specified, a full core file, including the application objects stored in the Java heap, is created if Zing crashes. When -XX:+DumpMiniCore option is specified, a core file, that does not include the application objects stored in the Java heap, is created if Zing crashes. When -XX:+DumpMiniCore and the -XX:DumpMiniCoreLevel=<x> options are specified, a core file, that includes the specified information, is created if Zing crashes."
}, {
  "objectID" : "a98c9e86-91c7-4960-ba3f-35d8d84365d6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul System Tools Libraries Retirement from Containers",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-ZST-Retirement-Containers",
  "link" : "https://docs.azul.com/prime/Troubleshoot-ZST-Retirement-Containers",
  "content" : "Starting with the release of Azul Platform Prime 19.06.0.0, the standard operation mode for Azul Zing Builds of OpenJDK (Zing) in container environments is the non-ZST mode. Since ZVM 19.07.0.0, the RPM/DEB package dependency towards the ZST package is removed. As of ZST 5.22.4, the zing-zst-ForContainer packages are empty (zing-zst-8b.ForContainer-VERSION.rpm, zing-zst_8b.ForContainer-VERSION.deb). Running Zing versions older than 19.06.0.0 in containers with a zing-zst-ForContainer package of 5.22.4 or newer installed will fail with the following error message:  Zing VM Error: DLERROR: libaznix.so: cannot open shared object file: No such file or directory\nZing VM Error: Please install ZST (Zing System Tools) The solution for container systems is to upgrade to Azul Platform Prime 19.07.0.0 or newer."
}, {
  "objectID" : "b3348cc8-2530-481c-9b42-b51ef48d9244",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Profiling with Intel® VTune™ Recommendations",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-VTune",
  "link" : "https://docs.azul.com/prime/Troubleshoot-VTune",
  "content" : "Intel VTune Profiler displays the Outside any known module message when analyzing a Java application run with the Azul Zing Builds of OpenJDK (Zing), how can I proceed? In the system-wide mode, Intel VTune Profiler does not recognize a Java process and does not obtain additional information using Java symbols.  export AMPLXE_RUNTOOL_OPTIONS=--no-altstack\n/opt/intel/vtune_profiler/bin64/vtune-gui Why does Intel VTune Profiler display the Stack size provided to sigaltstack is too small. Please increase the stack size to 64K minimum. error message when collecting data on Zing? The error message displays in both Run application and Attach to modes in Intel VTune Profiler since it attempts to configure the signals to use the alternative stack size using sigaltstack(). See Error Message: Stack Size Is Too Small for details. To collect profiling data with Intel VTune, use the following command-line options:  export AMPLXE_RUNTOOL_OPTIONS=--no-altstack\n/opt/intel/vtune_profiler/bin64/vtune-gui"
}, {
  "objectID" : "c8c2214f-fc6a-4183-98cb-9332a12a01b6",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Application Errors",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Troubleshoot-Application-Errors",
  "link" : "https://docs.azul.com/prime/Troubleshoot-Application-Errors",
  "content" : "This page lists possible errors between applications and the Azul Zing Builds of OpenJDK (Zing). If you get an error or warning message while running a Java application with Zing, inspect the message and complete the steps suggested as a solution. Error Description Solution Container [pid=<process_ID>,containerID=<container_ID>] is running beyond physical memory limits. Current usage: <RSS> GB of <physical_limit> physical memory used; <VIRT> of <virtual_limit>virtual memory used. Killing container. The error message displays when using Apache Hadoop with Zing in the non-ZST mode. + For information about Azul Platform Prime usage of physical memory, see Unexpected Resident Set Size Memory Metric Shown by top and ps for Azul Platform Prime Java Processes. Disable the Hadoop physical memory check by setting yarn.nodemanager.pmem-check-enabled to false in the Hadoop configuration file yarn-site.xml. Container [pid=<process_ID>,containerID=<container_ID>] is running beyond virtual memory limits. Current usage: <RSS> of <physical_limit> GB physical memory used; <VIRT> of <virtual_limit> virtual memory used. Killing container. The error message displays when using Apache Hadoop with Zing in both non-ZST and ZST modes. For information about Azul Platform Prime usage of physical and virtual memory, see the following: Large Amounts of Virtual Memory Shown by top and ps for Azul Platform Prime Java Processes Unexpected Resident Set Size Memory Metric Shown by top and ps for Azul Platform Prime Java Processes Disable the Hadoop virtual memory check by setting yarn.nodemanager.vmem-check-enabled to false in the Hadoop configuration file yarn-site.xml. If you need additional assistance, contact [email protected]."
}, {
  "objectID" : "4cd4bb9d-979c-467b-bc67-6a4b48b88a67",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Garbage Collector Log File",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Appendix-GC-Log-File",
  "link" : "https://docs.azul.com/prime/Appendix-GC-Log-File",
  "content" : "The GC log files present metrics in the text format."
}, {
  "objectID" : "8ec29f11-bbe4-4738-a282-1e6c7118c27e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Garbage Collector Log File",
  "section" : "Log File from Concurrent Garbage Collection (ZST 5.21.x)",
  "url" : "https://docs.azul.com/prime/Appendix-GC-Log-File",
  "link" : "https://docs.azul.com/prime/Appendix-GC-Log-File#log-file-from-concurrent-garbage-collection-zst-5-21-x",
  "content" : "Log File from Concurrent Garbage Collection (ZST 5.21.x) This log output has been generated for 5.21.0 ZST with 5.21.0 pmem.conf file  0.092: [GCHH : Zing name : Zing 64-Bit Tiered VM mixed mode ]\n0.092: [GCHH : Zing release : 1.8.0-zing_99.99.99.99.dev-b2018-product-azlinuxM-X86_64 ]\n0.092: [GCHH : ZST version : zst-5.21.0.0-8 ]\n0.092: [GCHH : ZST API : 0x8a ]\n0.092: [GCHH : OS name : Linux ]\n0.092: [GCHH : OS release : 2.6.32-358.el6.x86_64 #1 SMP Fri Feb 22 00:31:26 UTC 2013 ]\n0.092: [GCHH : hardware : x86_64 ]\n0.092: [GCHH : ncpus : 12 12 12 12 12 ]\n0.092: [GCHH : TSC : pstate off tsc on constant_tsc on nonstop_tsc on UseRdtsc false ]\n0.092: [GCHH : machine name : venison ]\n0.092: [GCHH : Zing VM running in container : false ]\n0.092: [GCHH : start time : Wed Sep 27 22:10:19 PDT 2017 ]\n0.092: [GCHH : start time ms : 1506575419967 ]\n0.092: [GCHH : process id : 18221 ]\n0.092: [GCHH : sequence no. : 0 ]\n0.092: [GCHH : Memory configuration and use (MB): ]\n0.092: [GCHH : System RAM max : 96735 ]\n0.092: [GCHH : System RAM free : 90949 ]\n0.092: [GCHH : Linux Memory available : 92239 ]\n0.092: [GCHH : Zing Memory configuration policy : reserve-at-launch ]\n0.092: [GCHH : Zing overall upper limit : 87060 ]\n0.092: [GCHH : Zing total reserved : 4496 ]\n0.092: [GCHH : Zing initial reserved : 400 ]\n0.092: [GCHH : Zing Reservable upper limit : 82224 ]\n0.092: [GCHH : Zing Reservable reserved : 4096 ]\n0.092: [GCHH : Zing Reservable initial reserved : 0 ]\n0.092: [GCHH : Zing Contingency upper limit : 48366 ]\n0.092: [GCHH : Zing Contingency reserved : 200 ]\n0.092: [GCHH : Zing Contingency initial reserved : 200 ] pmem.conf ContingencyMinimumFreeMemory\n0.092: [GCHH : Zing Pause upper limit : 48366 ]\n0.092: [GCHH : Zing Pause reserved : 200 ]\n0.092: [GCHH : Zing Pause initial reserved : 200 ]\n0.092: [GCHH : Process Zing maximum : 15606 ]\n0.092: [GCHH : Process Zing reserved (-Xmx) : 4096 ]\n0.092: [GCHH : Java system max : 246 ]\n0.092: [GCHH : Code cache location : Process Zing memory ]\n0.092: [GCHH : Code cache max : 256 ]\n0.092: [GCHH : Compiler Tier 1 : C1 ]\n0.092: [GCHH : Compiler Tier 2 : Falcon ]\n0.092: [GCHH : Garbage collection type : C4 ]\n0.092: [GCHH : GenPauseless Phase Encoding : Sparse ]\n0.092: [GCHH : jvm arguments\n0.092: [GCHH : Memory configuration and use (MB): ]\n0.092: [GCHH : System RAM max : 96735 ]\n0.092: [GCHH : System RAM free : 90949 ]\n0.092: [GCHH : Linux Memory available : 92239 ]\n0.092: [GCHH : Zing Memory configuration policy : reserve-at-launch ]\n0.092: [GCHH : Zing overall upper limit : 87060 ]\n0.092: [GCHH : Zing total reserved : 4496 ]\n0.092: [GCHH : Zing initial reserved : 400 ]\n0.092: [GCHH : Zing Reservable upper limit : 82224 ]\n0.092: [GCHH : Zing Reservable reserved : 4096 ]\n0.092: [GCHH : Zing Reservable initial reserved : 0 ]\n0.092: [GCHH : Zing Contingency upper limit : 48366 ]\n0.092: [GCHH : Zing Contingency reserved : 200 ]\n0.092: [GCHH : Zing Contingency initial reserved : 200 ]\n0.092: [GCHH : Zing Pause upper limit : 48366 ]\n0.092: [GCHH : Zing Pause reserved : 200 ]\n0.092: [GCHH : Zing Pause initial reserved : 200 ]\n0.092: [GCHH : Process Zing maximum : 15606 ] ** calculated\n0.092: [GCHH : Process Zing reserved (-Xmx) : 4096 ]\n0.092: [GCHH : Java system max : 246 ]\n0.092: [GCHH : Code cache location : Process Zing memory ]\n0.092: [GCHH : Code cache max : 256 ]\n0.092: [GCHH : Compiler Tier 1 : C1 ]\n0.092: [GCHH : Compiler Tier 2 : Falcon ]\n0.092: [GCHH : Garbage collection type : C4 ]\n0.092: [GCHH : jvm arguments : -Xmx16g -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=2m -Xloggc:GCLogFileRotation_%t_%p -XX:-ShowMessageBoxOnError ]\n0.092: [GCHH : jvm flags : none ]\n0.092: [GCHH : java command : SPECjvm2008.jar -ikv compiler.compiler ]\n0.092: [GCH : heap usage MB : gens MB : heap info MB : pages : intercycle intracycle : gc : threads delay : gc pause 1 pause 2 pause 3 pause 4 : end]\n0.092: [GCH type label tot_ct-cyc_ct : max peak cur ppause upause rss codec jsys : new old perm internal : live frag found cllctd lmtd : prom reloc noreloc rspike sm md lg : sec alloc-rate perm-rate sec alloc-rate perm-rate : thrds md diag : tot delayed avg max : start start dur start dur start dur start dur : end]\n0.092: [SYSINFOH sysMemUsed cacheActiveFile cacheInactiveFile cacheActiveAnon cacheInactiveAnon swapCached buffers unevictable mlocked mapped : totalSysZingMemAcrossPartitions sysZingMemTot sysZingReservableUsed sysZingReservableTot sysZingContMemUsed sysZingContMemTot sysZingPPMemUsed sysZingPPMemTot : swapUsed swapMax : load1 load5 load15 : pageIn pageOut : swapPageIn swapPageOut : majorFaults cMajorFaults : processes procsRunning procsBlocked procsTotal : end(s) ]\n0.092: [OBJCREATH newGen(kB) permGen(kB) oldGen(kB) : end(s)]\n0.092: [GPGC-HH Model MB/sec . . : KIDRate : EstTime secs : Sizes MB . . : KIDCount : Time(secs) : Heuristic ]\n0.092: [GPGC-HH NewGen OldGen PermGen Direct : KID/sec : NewGC OldGC : New Old Perm Direct : KID : Time : ReasonCode ReasonString ]\n0.092: [COMPSTATSH Tier FullMethodCompiles OSRMethodCompiles MethodFailToInstall OSRFailToInstall TotalCPUTimeMS TotalWallClockTimeMS TotalWaitInQueueTimeMS : WaitTimes0ms 10ms 100ms 1000ms 10000ms 100000ms 1000000ms : CompileTimes0ms 10ms 100ms 1000ms 10000ms 100000ms 1000000ms ]\n0.130: [SPSH lock suspend gclocker notify wait resuspend cleanup op_time wakeup total(ms) op_name end(s) ]\n0.130: [SPS 0.000 0.000 0.002 0.001 0.000 0.000 0.001 0.009 0.003 0.014 Deoptimize 0.129941 ]\n0.172: [COMPSTATS 1 100 0 0 0 0 0 1212: 43 57 0 0 0 0 0 : 96 0 0 0 0 0 0 ]\n0.310: [SPS 0.000 0.000 0.001 0.001 0.000 0.000 0.001 0.111 0.006 0.120 NewGC_pause1 0.310534 ]\n0.320: [SPS 0.000 0.000 0.000 0.001 0.000 0.000 0.001 0.218 0.003 0.223 NewGC_pause2 0.320863 ]\n0.331: [SPS 0.000 0.000 0.000 0.001 0.000 0.000 0.001 0.011 0.002 0.015 NewGC_pause3 0.331900 ]\n0.341: [SPS 0.000 0.000 0.000 0.001 0.000 0.000 0.001 0.143 0.002 0.146 OldGC_pause2 0.342170 ]\n0.352: [SPS 0.000 0.000 0.000 0.001 0.000 0.000 0.001 0.007 0.001 0.010 OldGC_pause3 0.352657 ]\n0.363: [SPS 0.000 0.003 0.000 0.001 0.000 0.000 0.001 0.039 0.002 0.042 NewGC_pause4 0.363751 ]\n0.365: [GC NTO Sys 1-1 : 16384 1182 1178 0 0 59 0 2 : 19 0 11 1152 : 7 15 6 5 0 : 0 8 3 2 10 0 0 : 0.238 67.3 42.1 0.056 70.9 35.5 : 6 -pc 000 : 26 0 0.000 0.000 : 0.309361 0.310414 0.000111 0.320640 0.000218 0.331885 0.000011 0.363710 0.000038 : 0.365770 ]\n0.365: [SYSINFO 92696 10312 8443 73 69 2 295 0 0 27 : - 72550 16384 65298 0 3626 0 3626 : 14 4095 : 0.00 0.95 2.54 : 827392 98723748 : 3521 6816 : 15 0 : 4064482 3 0 410 : 0.366038 ]\n0.365: [OBJCREAT 8291 7397 - : 0.366072 ]"
}, {
  "objectID" : "88dea80d-9a5f-456b-96bb-913b1c9b0dff",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Garbage Collector Log File",
  "section" : "Log File from Concurrent Garbage Collection (pre ZST 5.21.0)",
  "url" : "https://docs.azul.com/prime/Appendix-GC-Log-File",
  "link" : "https://docs.azul.com/prime/Appendix-GC-Log-File#log-file-from-concurrent-garbage-collection-pre-zst-5-21-0",
  "content" : "Log File from Concurrent Garbage Collection (pre ZST 5.21.0) This log output has been generated for pre 5.21.0 ZST with pre 5.21.0 pmem.conf file  0.092: [GCHH : Zing name : Zing 64-Bit Tiered VM mixed mode ]\n0.092: [GCHH : Zing release : 1.7.0-zing_99.99.99.99.dev-b1104-product-azlinuxM-X86_64-jcoha ]\n0.092: [GCHH : ZST version : zst-dev-1162 ]\n0.092: [GCHH : ZST internal : 0x7c ]\n0.092: [GCHH : OS name : Linux ]\n0.092: [GCHH : OS release : 2.6.32-504.el6.x86_64 #1 SMP Wed Oct 15 04:27:16 UTC 2014 ]\n0.092: [GCHH : hardware : x86_64 ]\n0.092: [GCHH : ncpus : 12 12 12 12 12 ]\n0.092: [GCHH : machine name : perfs ]\n0.092: [GCHH : Zing VM running in container : false ] Is the ZVM running in a container?\n0.092: [GCHH : start time : Sat Sep 05 10:12:20 PDT 2015 ]\n0.092: [GCHH : start time ms : 1441473140016 ]\n0.092: [GCHH : process id : 6837\n0.092: [GCHH : sequence no. : 0 ] Used for GC log file rotation\n0.092: [GCHH : Memory configuration and use (MB): ]\n0.092: [GCHH : System RAM max : 48258 ]\n0.092: [GCHH : System RAM free : 10337 ]\n0.092: [GCHH : Linux Memory max : 12066 ]\n0.092: [GCHH : Zing Memory configuration policy : reserve-at-config ]\n0.092: [GCHH : Zing Reservable max : 32576 ]\n0.092: [GCHH : Zing Contingency max : 1808 ]\n0.092: [GCHH : Zing Pause max : 1808 ]\n0.092: [GCHH : Process Zing reserved (-Xmx) : 2048 ]\n0.092: [GCHH : Java system max : 124 ]\n0.092: [GCHH : Code cache max : 256 ]\n0.092: [GCHH : Compiler Tier 1 : C1 ]\n0.092: [GCHH : Compiler Tier 2 : Falcon ]\n0.092: [GCHH : Garbage collection type : C4 ]\n0.092: [GCHH : jvm arguments : -Xmx16g -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=2m -Xloggc:GCLogFileRotation_%t_%p -XX:-ShowMessageBoxOnError ]\n0.092: [GCHH : jvm flags : none ]\n0.092: [GCHH : java command : SPECjvm2008.jar -ikv compiler.compiler ]\n0.092: [GCH : heap usage MB : gens MB : heap info MB : pages : intercycle intracycle : gc : threads delay : gc pause 1 pause 2 pause 3 pause 4 : end]\n0.092: [GCH type label tot_ct-cyc_ct : max peak cur ppause upause rss codec jsys : new old perm internal : live frag found cllctd lmtd : prom reloc noreloc rspike sm md lg : sec alloc-rate perm-rate sec alloc-rate perm-rate : thrds md diag : tot delayed avg max : start start dur start dur start dur start dur : end]\n0.092: [SYSINFOH sysMemUsed cacheActiveFile cacheInactiveFile cacheActiveAnon cacheInactiveAnon swapCached buffers unevictable mlocked mapped : totalSysZingMemAcrossPartitions sysZingMemTot sysZingReservableUsed sysZingReservableTot sysZingContMemUsed sysZingContMemTot sysZingPPMemUsed sysZingPPMemTot : swapUsed swapMax : load1 load5 load15 : pageIn pageOut : swapPageIn swapPageOut : majorFaults cMajorFaults : processes procsRunning procsBlocked procsTotal : end(s) ]\n0.092: [OBJCREATH newGen(kB) permGen(kB) oldGen(kB) : end(s)]\n0.092: [GPGC-HH Model MB/sec . . : KIDRate : EstTime secs : Sizes MB . . : KIDCount : Time(secs) : Heuristic ]\n0.092: [GPGC-HH NewGen OldGen PermGen Direct : KID/sec : NewGC OldGC : New Old Perm Direct : KID : Time : ReasonCode ReasonString ]\n0.092: [COMPSTATSH Tier FullMethodCompiles OSRMethodCompiles MethodFailToInstall OSRFailToInstall TotalCPUTimeMS TotalWallClockTimeMS TotalWaitInQueueTimeMS : WaitTimes0ms 10ms 100ms 1000ms 10000ms 100000ms 1000000ms : CompileTimes0ms 10ms 100ms 1000ms 10000ms 100000ms 1000000ms ]\n0.130: [SPSH lock suspend gclocker notify wait resuspend cleanup op_time wakeup total(ms) op_name end(s) ]\n0.130: [SPS 0.000 0.000 0.002 0.001 0.000 0.000 0.001 0.009 0.003 0.014 Deoptimize 0.129941 ]\n0.172: [COMPSTATS 1 100 0 0 0 0 0 1212: 43 57 0 0 0 0 0 : 96 0 0 0 0 0 0 ]\n0.310: [SPS 0.000 0.000 0.001 0.001 0.000 0.000 0.001 0.111 0.006 0.120 NewGC_pause1 0.310534 ]\n0.320: [SPS 0.000 0.000 0.000 0.001 0.000 0.000 0.001 0.218 0.003 0.223 NewGC_pause2 0.320863 ]\n0.331: [SPS 0.000 0.000 0.000 0.001 0.000 0.000 0.001 0.011 0.002 0.015 NewGC_pause3 0.331900 ]\n0.341: [SPS 0.000 0.000 0.000 0.001 0.000 0.000 0.001 0.143 0.002 0.146 OldGC_pause2 0.342170 ]\n0.352: [SPS 0.000 0.000 0.000 0.001 0.000 0.000 0.001 0.007 0.001 0.010 OldGC_pause3 0.352657 ]\n0.363: [SPS 0.000 0.003 0.000 0.001 0.000 0.000 0.001 0.039 0.002 0.042 NewGC_pause4 0.363751 ]\n0.365: [GC NTO Sys 1-1 : 16384 1182 1178 0 0 59 0 2 : 19 0 11 1152 : 7 15 6 5 0 : 0 8 3 2 10 0 0 : 0.238 67.3 42.1 0.056 70.9 35.5 : 6 -pc 000 : 26 0 0.000 0.000 : 0.309361 0.310414 0.000111 0.320640 0.000218 0.331885 0.000011 0.363710 0.000038 : 0.365770 ]\n0.365: [SYSINFO 92696 10312 8443 73 69 2 295 0 0 27 : - 72550 16384 65298 0 3626 0 3626 : 14 4095 : 0.00 0.95 2.54 : 827392 98723748 : 3521 6816 : 15 0 : 4064482 3 0 410 : 0.366038 ]\n0.365: [OBJCREAT 8291 7397 - : 0.366072 ]"
}, {
  "objectID" : "89269723-923f-4d6d-99d3-e1a831ba2955",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Garbage Collector Log File",
  "section" : "Log File from Stop-The-World (STW) garbage collection",
  "url" : "https://docs.azul.com/prime/Appendix-GC-Log-File",
  "link" : "https://docs.azul.com/prime/Appendix-GC-Log-File#log-file-from-stop-the-world-stw-garbage-collection",
  "content" : "Log File from Stop-The-World (STW) garbage collection The STW garbage collector mode can be enabled by using the -XX:+UseSTW command-line option. In this mode the set of the metrics collected in the log file might be different.  0.091: [GCHH : Zing name : Zing 64-Bit Tiered VM mixed mode ]\n0.091: [GCHH : Zing release : 1.7.0-zing_17.06.0.0-b5-product-azlinuxM-X86_64 ]\n0.091: [GCHH : ZST version : zst-dev-1705 ]\n0.091: [GCHH : ZST API : 0x7e ]\n0.091: [GCHH : OS name : Linux ]\n0.091: [GCHH : OS release : 2.6.32-358.el6.x86_64 #1 SMP Fri Feb 22 00:31:26 UTC 2013 ]\n0.091: [GCHH : hardware : x86_64 ]\n0.091: [GCHH : ncpus : 12 12 12 12 12 ]\n0.091: [GCHH : TSC : pstate off tsc on constant_tsc on nonstop_tsc on UseRdtsc false ]\n0.091: [GCHH : machine name : development1 ]\n0.091: [GCHH : Zing VM running in container : false ]\n0.091: [GCHH : start time : Mon Jun 12 20:24:18 PDT 2017 ]\n0.091: [GCHH : start time ms : 1497324258281 ]\n0.091: [GCHH : process id : 29231 ]\n0.091: [GCHH : sequence no. : 0 ]\n0.091: [GCHH : Memory configuration and use (MB): ]\n0.091: [GCHH : System RAM max : 96735 ]\n0.091: [GCHH : System RAM free : 3958 ]\n0.091: [GCHH : Linux Memory max : 24185 ]\n0.091: [GCHH : Zing Memory configuration policy : reserve-at-config ]\n0.091: [GCHH : Zing Memory partition size : 72550 ]\n0.091: [GCHH : Zing Reservable max : 65298 ]\n0.091: [GCHH : Zing Contingency max : 3626 ]\n0.091: [GCHH : Zing Pause max : 3626 ]\n0.091: [GCHH : Process Zing reserved (-Xmx) : 16384 ]\n0.091: [GCHH : Java system max : 380 ]\n0.091: [GCHH : Code cache location : Process Zing memory ]\n0.091: [GCHH : Code cache max : 256 ]\n0.091: [GCHH : Compiler Tier 1 : C1 ]\n0.091: [GCHH : Compiler Tier 2 : Falcon ]\n0.091: [GCHH : Garbage collection type : STW ]\n0.091: [GCHH : jvm arguments : -Xmx16g -XX:+UseSTW -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=2m -Xloggc:GCLogFileRotation_%t_%p -XX:-ShowMessageBoxOnError ]\n0.091: [GCHH : jvm flags : none ]\n0.091: [GCHH : java command : SPECjvm2008.jar -ikv compiler.compiler ]\n0.091: [GCH : heap usage MB : gens MB : heap info MB : pages : intercycle intracycle : gc : threads delay : gc pause 1 pause 2 pause 3 pause 4 : end]\n0.091: [GCH type label tot_ct-cyc_ct : max peak cur ppause upause rss codec jsys : new old perm internal : live frag found cllctd lmtd : prom reloc noreloc rspike sm md lg : sec alloc-rate perm-rate sec alloc-rate perm-rate : thrds md diag : tot delayed avg max : start start dur start dur start dur start dur : end]\n0.091: [SYSINFOH sysMemUsed cacheActiveFile cacheInactiveFile cacheActiveAnon cacheInactiveAnon swapCached buffers unevictable mlocked mapped : totalSysZingMemAcrossPartitions sysZingMemTot sysZingReservableUsed sysZingReservableTot sysZingContMemUsed sysZingContMemTot sysZingPPMemUsed sysZingPPMemTot : swapUsed swapMax : load1 load5 load15 : pageIn pageOut : swapPageIn swapPageOut : majorFaults cMajorFaults : processes procsRunning procsBlocked procsTotal : end(s) ]\n0.091: [OBJCREATH newGen(kB) permGen(kB) oldGen(kB) : end(s)]\n0.091: [GPGC-HH Model MB/sec . . : KIDRate : EstTime secs : Sizes MB . . : KIDCount : Time(secs) : Heuristic ]\n0.091: [GPGC-HH NewGen OldGen PermGen Direct : KID/sec : NewGC OldGC : New Old Perm Direct : KID : Time : ReasonCode ReasonString ]\n0.091: [COMPSTATSH Tier FullMethodCompiles OSRMethodCompiles MethodFailToInstall OSRFailToInstall TotalCPUTimeMS TotalWallClockTimeMS TotalWaitInQueueTimeMS : WaitTimes0ms 10ms 100ms 1000ms 10000ms 100000ms 1000000ms : CompileTimes0ms 10ms 100ms 1000ms 10000ms 100000ms 1000000ms ]\n0.130: [SPSH lock suspend gclocker notify wait resuspend cleanup op_time wakeup total(ms) op_name end(s) ]\n0.130: [SPS 0.000 0.000 0.002 0.001 0.000 0.000 0.001 0.009 0.003 0.014 Deoptimize 0.129890 ]\n0.172: [COMPSTATS 1 100 0 0 0 0 0 1212: 43 57 0 0 0 0 0 : 96 0 0 0 0 0 0 ]\n0.458: [SPS 0.000 0.000 0.001 0.001 0.000 0.000 0.002 146.245 0.004 146.253 FullGC_STW_pause 0.459151 ]\n0.459: [GC NTO Sys 1-1 : 16384 1210 1208 0 0 64 0 2 : 15 0 11 1183 : 3 11 6 5 0 : 0 8 0 0 8 0 0 : 0.240 66.6 41.6 0.150 0.0 13.4 : 12 -pc 000 : 24 0 0.000 0.000 : 0.309633 0.312897 0.146246 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 : 0.459366 ]\n0.459: [SYSINFO 92797 10346 8498 76 71 2 295 0 0 27 : - 72550 16384 65298 0 3626 0 3626 : 14 4095 : 3.75 0.90 1.25 : 827392 98801116 : 3521 6816 : 0 0 : 4065048 4 0 423 : 0.459810 ]\n0.459: [OBJCREAT 8288 7402 - : 0.459895 ]\n0.459: [GC Old Sys 2-1 : 16384 1210 1208 0 0 64 0 2 : 17 0 11 1183 : 7 2 1 0 0 : 0 2 0 0 6 0 0 : 0.242 0.0 41.3 0.148 0.0 13.5 : 12 -pc 000 : 24 - - - : 0.311524 0.312897 0.146246 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 : 0.459501 ]\n0.459: [SYSINFO 92797 10346 8498 76 71 2 295 0 0 27 : - 72550 16384 65298 0 3626 0 3626 : 14 4095 : 3.75 0.90 1.25 : 827392 98801116 : 3521 6816 : 0 0 : 4065048 4 0 423 : 0.459913 ]\n0.459: [OBJCREAT 8288 7402 - : 0.459957 ] Note In STW mode, there is only one pause for each type of garbage collection (NewGC_STW and FullGC_STW_pause_pause) unlike in concurrent mode, where each GC type has four pauses (NewGC_pause1, NewGC_pause2, NewGC_pause3, and NewGC_pause4). In STW mode in the line printed for each garbage collection, the single the pause at each collection corresponds to pause 1, and the pause 2, pause 3, and pause 4 times and duration are all zero."
}, {
  "objectID" : "f0cc17c3-e32f-4799-852c-4b6ac51555ac",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "GC Log Analyser Command-Line Options",
  "section" : "",
  "url" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options",
  "link" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options",
  "content" : "You can control the behavior of the gcLogAnalyser tool by using command-line options from the options below."
}, {
  "objectID" : "75584187-31b6-48a0-8a46-92c9c58d49ad",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "GC Log Analyser Command-Line Options",
  "section" : "Basic GC Log Analyser Command-Line Options",
  "url" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options",
  "link" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options#basic-gc-log-analyser-command-line-options",
  "content" : "Basic GC Log Analyser Command-Line Options Command-Line Option Description [-help ]| -h] Prints information about the command-line options. [-helpdate | -datehelp] Prints X-axis date and elapsed time use help message. [-f nameOfGCFileToOpen] File name of the Azul Zing Builds of OpenJDK (Zing) GC log file to open [-esg] Enable use of detailed, low-level graphs in GC Log Analyser. [-wse] Write warning and error messages to stderr. This is used to capture warnings and errors for documentation when reporting bugs. [-ipe | -ignoreParsingErrors] Ignore Parsing Errors: Ignore lines in the file with parsing errors but write each skipped line to stderr. [-parseFileWithMissingGCHLines] Try parsing GC log files with missing GC log file header lines. When the Zing starts and a GC log is being created, information about the environment is printed to the log. The information includes the start time for the Zing process. If the file is very large and you are having trouble with memory use by GC Log Analyser then split the GC log file into smaller files that are easier to analyze. Use this option to override the normal requirement that the initial information be present in the GC log file. Alternatively, append the original file’s [GCHH and first [GCH lines to each of the smaller files. [{-et | -elapsedTimeUnits} {ms | sec | min | hour |date} ] Set the elapsed time units (X-axis values) to milliseconds, seconds, minutes, hours, or date and time (default is minutes) [-samu | showAllMemUseInHeapUseGraphs] Show all memory in use (including Pause Prevention) in the Java Heap Use graphs in GC Log Analyser [-version] Print gcLogAnalyser’s version and build time"
}, {
  "objectID" : "7dc2b0ea-4951-4e1b-910d-75658a815fb7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "GC Log Analyser Command-Line Options",
  "section" : "Options for Converting Graphs to PNG Files Without Using the GUI",
  "url" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options",
  "link" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options#options-for-converting-graphs-to-png-files-without-using-the-gui",
  "content" : "Options for Converting Graphs to PNG Files Without Using the GUI Use the following command-line options to create PNG files when running GC Log Analyser in the non-GUI mode. Command-Line Option Description [-graphsToConvertToPNG {graphID[,graphID]* | all}] List of graphIDs to convert to PNG files or the string \"all\" to print all supported graphs. The set of \"all\" graphs is either the default set of graphs in the Graph menu or the complete set of graphs if the Graph menu’s \"Show more graphs\" menu item has been selected. To ensure conversion of the highest number of graphs to PNG files, also include the option: -esg GC LOog Analyser uses the data available in a GC log file to create the best set of graphs from that data. Some older graphs created when the data in the GC log file was more limited have been superseded by new graphs generated with updated information in GC log files generated by newer versions of Zing. [-gidtogname | -printGraphIDToGraphNameList] Prints the graphIDs to use as parameters to the graphsToConvertToPNG command line option. Eash line in the list generated to stdout has the graphID and its corresponding graph name. [{-gtopngwxh | -graphToPNGWidthXHeight} widthxheight] Width and height for the PNG image to be generated in units of pixels. Default value for widthxheight is 3000x1000. Suggested size for generating graphs to embed in documents: 1500x500. [{-gtopngtpre | -graphToPNGTitlePrefix} \"titlePrefix\"] String to add as the prefix to the title printed at the top of graph in the PNG file. Use the \"^\" character instead of spaces in the titlePrefix string. Substitutions in the titlePrefix string done by gcLogAnalyser: %t – start time of the Zing process %m – name of the machine on which the process was run %p – PID for the process Example: -gtopngtpre \"Eric’sCassandraRunon%t(%mPID:%p)-^\" [{-gtopngbfn | -graphToPNGBaseFileName} baseFileName] Format of PNG file name to use: <baseFileName>_GraphName.png The strings for which substitutions are made, %t, %m and %p, described in the use of the -graphToPNGTitlePrefix command line option can also be included in the baseFileName string. [{-gtopngfnpre | -graphToPNGFileNamePrefix} fileNamePrefix] Format of PNG file name: <fileNamePrefixProcessStartDate>_GCLogFileName_GraphName.png Valid paths and directory names are accepted in fileNamePrefix."
}, {
  "objectID" : "e3003f8c-ea8b-4635-a785-33c471cc6ff0",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "GC Log Analyser Command-Line Options",
  "section" : "Options for Restricting the Graphed Elapsed Time Interval",
  "url" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options",
  "link" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options#options-for-restricting-the-graphed-elapsed-time-interval",
  "content" : "Options for Restricting the Graphed Elapsed Time Interval With the following options you can elapsed time interval initially displayed in the GUI mode graphs and displayed in the non-GUI-mode PNG files. When using the GUI-mode, the graphs opened respect the values supplied using the command line options until the toolbar’s Reset button is selected or the Edit > Reset Time Range menu item is selected. Subsequently, all graphs will use the minimum and maximum values from the GC log file until a toolbar Set Time Range or Edit > Set Time Range To Selected menu item has been selected. Legend for [[h:]m:]s h is hours (integer); m is minutes (integer); s is seconds (real) Command-Line Option Description [{-getistart | -graphElapsedTimeIntervalStart} [[h:]m:]s] Elapsed time since the launch of the process to use as the beginning of the interval of time to graph data when generating graphs or PNG files. If not specified then the first elapsed time in the file’s data is used. The supplied value must be positive and greater than or equal to the data’s first elapsed time. The supplied value must be positive and less than the data’s last elapsed time, otherwise, the data’s first elapsed time is used. A provided start time must be less than a provided end time. [{-getiend | -graphElapsedTimeIntervalEnd} [[h:]m:]s] Elapsed time since the launch of the process to use as the end of the interval of time to graph data when generating graphs or PNG files. If not specified then the last elapsed time in the file’s data is used. The supplied value must be positive and less than or equal to the data’s last elapsed time, otherwise the last elapsed time is used. A provided end time must be greater than a provided start time."
}, {
  "objectID" : "db413775-166c-4f7e-8c55-bb0b314e6577",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "GC Log Analyser Command-Line Options",
  "section" : "X-axis Date and Time Options",
  "url" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options",
  "link" : "https://docs.azul.com/prime/Appendix-Garbage-Collector-Options#x-axis-date-and-time-options",
  "content" : "X-axis Date and Time Options With the following options you can print help information about X-axis date and time command-line options, select date and time as the X-axis units, control the X-axis label orientation and correct for any issues with GC Log Analyser’s date and time auto-detection mechanism used to set the time zone when using the date-time values for the X-axis. Command-Line Option Description [-helpdate | -datehelp] Prints X-axis date and time use help message. [[{-et | -elapsedTimeUnits} date] | -useDateTimeXAxis | -usedatex] Uses date and time for the X-axis rather than elapsed time in units of milliseconds, seconds, minutes or hours. [{-useDateTimeXAxisLabelOrientation | -usedatexlabelorient} {vertical | horizontal}] Orients the X-axis date and time labels vertically or horizontally. Default orientation is vertical. [{-xAxisTimeZoneOffsetHrs | -xTimeOffsetHrs} \"real-number\"] The number of offset hours to obtain alignment of the times in the GC log file with times used by the graph. As a first approximation, the value that should be used is the difference between the UTC time zone where the GC log file was generated and the UTC time zone where gcLogAnalyser is being run. You should only need to use this option if gcLogAnalyser is not able to do the calculations correctly. Units for real-number are hours plus fractional hours. Example: File generated on machine with: India Standard Time UTC +5.5 gcLogAnalyser run on machine with: Eastern Standard Time UTC -5 Offset = IST - EST = 5.5 - (-5) = 10.5 Add option: -xAxisTimeZoneOffsetHrs 10.5 [{-dateMaxMSAdd | -dateTimeMaxMSToAddForDuplicateSeriesTimes} \"integer\"] When using the X-axis date and time graphs, the X value (elapsed time) for each point in a series must be unique at millisecond granularity. Data in the GC log file is collected with microsecond accuracy and multiple events can occur per millisecond. To resolve this issue and ensure that all data in a series is displayed, gcLogAnalyser adds a millisecond to the elapsed time value if the value is the same as the previous, hoping to find a unique value. Incrementing the elapsed time value can be repeated. The integer value (>0) provided using this option is the upper bound on the number of times to add a millisecond in an attempt to find a unique value. Default value is: 5 [-printDateTimeMessages {true | false}] Prints messages to stdout about the work done by gcLogAnalyser to process the X-axis values. The messages can include information about points with the same value for the X coordinate (gcLogAnalyser tries to plot them) and data series that are empty."
}, {
  "objectID" : "e48ff476-48a3-4671-ac0a-12eecb5acf3c",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Platform Prime Third Party Licenses",
  "section" : "",
  "url" : "https://docs.azul.com/prime/tpl",
  "link" : "https://docs.azul.com/prime/tpl",
  "content" : "This page contains links to the documents with licenses for third party software included in the latest builds of Azul Platform Prime. Java Version Azul Platform Prime TPL 21 PDF 17 PDF 11 PDF 8 PDF"
}, {
  "objectID" : "c2318fb4-6231-4e14-b215-b10cae4d6cf1",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "CVEs - Common Vulnerabilities and Exposures",
  "section" : "",
  "url" : "https://docs.azul.com/prime/cve",
  "link" : "https://docs.azul.com/prime/cve",
  "content" : "This page provides a list of common vulnerabilities and exposures (CVE) fixed in Azul Prime builds of OpenJDK since October 2020. The CVEs fixed in earlier releases are not included in the list. CVEs are addressed in quarterly releases. The list of CVEs fixed in a specific Azul Prime release matches up with the CVEs fixed in the corresponding release of OpenJDK. You can filter the list by CVE ID, Azul Prime version, and/or JDK version. CVE ID OpenJDK Version Azul Zing Version Quarter All Releases"
}, {
  "objectID" : "c1329878-5148-420f-bed2-df5d919209f7",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Legal Notice",
  "section" : "",
  "url" : "https://docs.azul.com/prime/LegalNotice",
  "link" : "https://docs.azul.com/prime/LegalNotice",
  "content" : "Published, May 6, 2021 © 2005–2021, Azul Systems, Incorporated, 385 Moffett Park Drive, Suite 115, Sunnyvale, CA 94089. All rights reserved. Products and specifications discussed in this document may reflect future versions and are subject to change without notice. Azul Systems assumes no responsibility or liability for any errors or inaccuracies that may appear in the informational content contained in this guide. No part of this document may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, electronic, mechanical, recording, or otherwise, without the prior written permission of Azul Systems. Please note that the content in this document is protected under copyright law even if it is not distributed with software that includes an end user license agreement. Azul Systems, Azul Zing, Zing, and the Azul logo are trademarks or registered trademarks of Azul Systems, Inc. Linux is a registered trademark of Linus Torvalds. Red Hat is the property of Red Hat, Inc. Java is a registered trademark of Oracle Corporation. Microsoft and Windows are registered trademarks of Microsoft Corporation. Other marks are the property of their respective owners and are used here only for identification purposes."
}, {
  "objectID" : "19b2ca4d-48c1-4fc2-918b-35855ccca9cb",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Configuring Zing Memory with ZST",
  "section" : "",
  "url" : "https://docs.azul.com/prime/zst/configure-memory.html",
  "link" : "https://docs.azul.com/prime/zst/configure-memory.html",
  "content" : "After ZST is installed you can configure Zing memory allocation. Zing requires a portion of host system memory to be set aside and managed independently from Linux. The system-config-zing-memory wizard assists with this. Note The system-config-zing-memory creates or replaces any existing version of the pmem.conf file. Running the system-config-zing-memory wizard is required for first time installations. This section describes creating a default configuration. To customize your Zing memory configuration, see Modifying Zing Memory Configuration. With ZST 5.20.x you still should run system-config-zing-memory after installation as otherwise different default settings compared to ZST 5.19 and earlier will be applied. Complete the steps in Install Zing System Tools. Configure Zing memory management using the system-config-zing-memory command. Zing requires a portion of host system memory to be set aside and managed independently from Linux. Use the system-config-zing-memory wizard for initial configuration. From the command line, type:  #system-config-zing-memory The system responds:  Welcome to the Zing memory configuration wizard by Azul Systems.\n\nThis wizard sets up the Zing memory configuration file\n\n/etc/zing/pmem.conf.0\n\nand initializes System Zing memory. Read the man pages for zing, zing-zst, and zing-pmem-conf for more information about this configuration file.)\n\nUse of System Zing Memory by Java processes running on the Zing VM requires you to configure memory in advance. This is analogous to reservation of memory for Linux hugepages, although System Zing Memory pages are not interchangeable with hugepages.\n\nFor most environments running Java applications on the Zing VM, Azul recommends configuring your system with 25% System Linux Memory and 75% System Zing Memory.\n\nChoose yes to accept this default, or no to enter the wizard expert flow.\n** accept default configuration\n** (y)es or (n)o [default 'y']: y Accept default configuration settings. At the prompt, type: y. The system response lists the zing services that are started or restarted and memory configuration information. For example:  zing-memory: INFO: Restarting...\nzing-memory: INFO: Stopping...\nzing-memory: INFO: stop successful\nzing-memory: INFO: Starting...\nInfo: Zing Memory reserved using reserve-at-config policy.\nInfo: azulPmemPages: 54454.\nINFO: az_pmem_reserve_pages (num2mPages 54454) succeeded\nINFO: az_pmem_fund_transfer (to 7, from 0, bytes 114198315008) succeeded\nINFO: az_pmem_fund_transfer (to 1, from 7, bytes 5708447744) succeeded\nINFO: az_pmem_fund_transfer (to 3, from 7, bytes 5708447744) succeeded\nINFO: az_pmem_fund_transfer (to 0, from 7, bytes 102781419520) succeeded\nInfo: You can now run Java processes up to -Xmx98020m or -Xmx95g.\nInfo: Azul pmem initialized successfully.\nzing-memory: INFO: start successful\nzing-memory: INFO: restart successful You have completed ZST installation. If you do not want to use the default settings, you can modify Zing memory usage. Configuration using the system-config-zing-memory command might fail, if ZST is unable to allocate the requested memory. The solution is to start ZST immediately after a fresh system reboot (see ZST Fails to Allocate Requested Memory for more information)."
}, {
  "objectID" : "50248e80-6a57-43dd-a8a6-2df79dd7eafc",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "",
  "url" : "https://docs.azul.com/prime/ZST-System-Reqs",
  "link" : "https://docs.azul.com/prime/ZST-System-Reqs",
  "content" : "The ZST component is only needed for the following situations or requirements: Heapsize (-Xmx) larger than 2500 GBytes. With ZST, Zing supports up to 20 TB (20000 GBytes). Static memory reservation for Java heaps at system start. Older OS versions than listed on Zing Operating System Requirements The Azul Platform Prime with ZST can be installed on machines running the following operating systems using .rpm or .deb installers, as appropriate: Operating System Versions Red Hat Enterprise Linux 7, 8, 9 CentOS 7.x CentOS/CentOS Stream 8, 9 Rocky/Alma Linux 8 Oracle Linux 7 SLES 12 (SP3, SP4, SP5) Ubuntu 18.04 LTS, 20.04 LTS, 22.04 LTS Debian 9 (Stretch) and 10 (Buster) Amazon Linux 1, 2 CoreOS 4.13.16 See the complete list of the supported kernels on the Azul Platform Prime Customer Downloads page. You need to obtain a username and password from [email protected] to access the page."
}, {
  "objectID" : "f40d2ef8-d9d8-4699-a6db-51b0466a5c8a",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "ZST CPU Requirements",
  "url" : "https://docs.azul.com/prime/ZST-System-Reqs",
  "link" : "https://docs.azul.com/prime/ZST-System-Reqs#zst-cpu-requirements",
  "content" : "ZST CPU Requirements Azul Platform Prime with ZST can be installed on machines running the following CPU types. 64-bit x86 CPUs Intel® Xeon® server class processors released 2009 and later. AMD Opteron™ server class processors released 2010 and later. Azul Platform Prime is supported on systems with 2 or more vCores. Systems with higher core counts are obviously going to scale better, and provide lower scheduling related hiccup/jitter behavior."
}, {
  "objectID" : "8f2bf115-0f27-4379-800e-b8c65930113e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "ZST Memory Requirements",
  "url" : "https://docs.azul.com/prime/ZST-System-Reqs",
  "link" : "https://docs.azul.com/prime/ZST-System-Reqs#zst-memory-requirements",
  "content" : "ZST Memory Requirements Azul Platform Prime with ZST requires the following amount of RAM: 8+ GB RAM recommended 512 MB hard minimum"
}, {
  "objectID" : "a995dc05-f9a9-4214-9fcb-c97fd63c3000",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "ZST Platform Requirements",
  "url" : "https://docs.azul.com/prime/ZST-System-Reqs",
  "link" : "https://docs.azul.com/prime/ZST-System-Reqs#zst-platform-requirements",
  "content" : "ZST Platform Requirements Azul Platform Prime with the ZST runs on any of the following hardware or virtualized platforms: x86-64 hardware x86-64 virtual machines configured with Intel VT-x or AMD-V (e.g., Amazon EC2 (HVM), Azure, Oracle Virtual Box, Google Compute Engine, VMware)"
}, {
  "objectID" : "d530db35-b4e1-436b-8f48-936b25d26f69",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "Azul Zing System Tools System Requirements",
  "section" : "ZST Kernel Support Timeline",
  "url" : "https://docs.azul.com/prime/ZST-System-Reqs",
  "link" : "https://docs.azul.com/prime/ZST-System-Reqs#zst-kernel-support-timeline",
  "content" : "ZST Kernel Support Timeline In the vast majority of cases, we release ZST support on the same day as the release of the new version of the Linux kernel. In some cases, we may need additional time to address issues found in testing."
}, {
  "objectID" : "6c17a334-fe79-4f2a-98ba-61c456ac450e",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "About Azul Zing System Tools",
  "section" : "",
  "url" : "https://docs.azul.com/prime/ZST.html",
  "link" : "https://docs.azul.com/prime/ZST.html",
  "content" : "Azul Zing System Tools (ZST) is a component of Azul Platform Prime that allows you to coordinate memory usage between Azul Zing Builds of OpenJDK (Zing) and the underlying Linux operating system. Azul Platform Prime’s C4 garbage collector works the same way, with or without ZST. ZST enables Azul Platform Prime to support larger heap sizes, and to provide better memory management on older operating system versions that don’t have the required functionality already built in. Generally, it is simpler to run Azul Platform Prime without ZST. Your operational overhead may be less complex without the need to manage ZST installation and configuration. However, there are some conditions which require the use of ZST, and there are some operational considerations which could also mean that ZST is a preference for you. As of Zing 19.07, ZST becomes an optional component for Azul Platform Prime. With modern Linux kernels, the Linux kernel itself can provide most of the functionality that ZST provides. For most applications, the functionality now provided by modern Linux kernels is sufficient for good application performance on Azul Platform Prime, so we no longer require the use of ZST. However, there are some things that ZST can do that even the most modern Linux kernels can not, so in some cases, using ZST is still required, or desired if it gives better performance or simpler system management, and thus ZST remains an optional component for use with Azul Platform Prime."
}, {
  "objectID" : "6a7256ab-2ea4-4061-9e7d-1cf280b1cd84",
  "groupId" : "prime",
  "groupLabel" : "Azul Platform Prime",
  "version" : "",
  "title" : "About Azul Zing System Tools",
  "section" : "Considerations",
  "url" : "https://docs.azul.com/prime/ZST.html",
  "link" : "https://docs.azul.com/prime/ZST.html#considerations",
  "content" : "Considerations There are three main ways to use Azul Platform Prime: Zing without ZST, Zing without ZST but with Transparent Huge Pages (THP) configured, or Zing with ZST (ZST provides it own memory management for large pages). Each of these has different minimum operating system requirements, so a table format may be helpful. Read on below the table for details about each of the considerations. Minimum Operating System versions to run Azul Platform Prime in each of these configuration types: Azul Platform Prime without ZST - Recommended if ZST is not otherwise required or beneficial. Azul Platform Prime without ZST, with Transparent Huge Pages - Recommended for heap sizes 100 GB or more or if lower throughput or reduced start time is seen without ZST. Azul Platform Prime with ZST - Required for heap sizes over 2.5 TB and for older operating systems. Useful in environments where you can’t otherwise guarantee available memory at application launch time Operating System Without ZST Without ZST, With Transparent Huge Pages With ZST Red Hat Enterprise Linux 7.3 or later 8 or later 7 or later CentOS CentOS Linux 7.3 or later not supported 7 or later CentOS Stream 8 or later 8 or later 8 or later Oracle Linux UEK [1] 7.3 or later 7.6 or later 7 or later RHCK [2] 7.3 or later 8 or later 7 or later Ubuntu 16.04 LTS or later 18 or later 16.04 - 20.04 SLES 12 SP5 12 SPR or later 12 SP5 Debian 9 or later 10 or later 9 and 10 Amazon Linux 1, 2 Since 2018 1, 2 Amazon Linux 2023 all versions all versions not planned Note For technical questions about the table above, contact us at [email protected] More info about each of the considerations: Java heap size (-Xmx) ZST is required for heap size above 2.5 TB. If you don’t require heap sizes above 2.5 TB, you should try running without ZST if your operating system supports it. Note From Zing 19.07 to 20.03, the max heap size without ZST is 1 TB. As of Zing 20.04, the max heap size without ZST is 2.5 TB. Operating system version Using Azul Platform Prime without ZST requires the memfd_create(2) system call. This system call is available since mainline Linux 3.17. If you want to run Azul Platform Prime on an older operating system, you will have to use ZST. If your operating system supports running without ZST, you should try it. See System Requirements to verify minimum OS version requirements for Azul Platform Prime without ZST. See System Tools Requirements for minimum OS requirements for Azul Platform Prime with ZST. Large Pages For large heaps in the range of 100 GB or more, large memory pages (2 MB) are recommended to increase throughput performance and JVM start time. Most modern operating systems can meet this need with Transparent Huge Pages. If your application sees reduced throughput or JVM start time when you test with Azul Platform Prime without ZST, try using THP. If you find yourself in this situation and your operating system doesn’t support Transparent Huge Pages, then you can run Azul Platform Prime with ZST as ZST implements a more efficient memory manager for large pages than standard Linux and is recommended in these situations. See Enabling Huge Pages for more info. Reserved memory for your Java applications on Azul Platform Prime ZST can be used in reserve-at-config mode which reserves memory exclusively for use by Zing java process. Other processes using memory on the server will not be able to unexpectedly use up available memory on the host and impact your Zing application launches. An added benefit is the predictable application start time as you do not depend on Linux memory management at process start time when using ZST with \"reserve-at-config\". If you need to worry about other processes that might get run on the same host, you may prefer to use ZST to guarantee memory is always available for the Azul Platform Prime instances. If you don’t need to worry about other processes on the host, and the application is rarely restarted, this may be less of a concern for you and you may be fine without ZST, or with ZST using reserve-at-launch if ZST is used for other reasons. See Configuring Zing Memory with ZST for more info. If you don’t use ZST, here are some things you should consider and configure if needed: Enabling Huge Pages. For large heaps in the range of 100 GB or more, large memory pages (2 MB) are recommended to increase throughput performance and JVM start time. This can be enabled on all current modern operating systems. Increase vm.max_map_count If you still have questions about ZST and non-ZST mode, please contact us at [email protected]."
}, {
  "objectID" : "f0093242-af7b-41dd-bce0-7aef72d71a3c",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "About Optimizer Hub",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/",
  "link" : "https://docs.azul.com/optimizer-hub/",
  "content" : "Documentation for Optimizer Hub, version 1.9.0 Optimizer Hub is a component of Azul Platform Prime that makes your Java programs start fast and stay fast. It consists of two services: Cloud Native Compiler: Provides a server-side optimization solution that offloads JIT compilation to separate and dedicated service resources, providing more processing power to JIT compilation while freeing your client JVMs from the burden of doing JIT compilation locally. ReadyNow Orchestrator: Records and serves ReadyNow profiles. This greatly simplifies the operational use of the ReadyNow, and removes the need to configure any local storage for writing the profile. ReadyNow Orchestrator can record multiple profile candidates from multiple JVMs and promote the best recorded profile. Note You can run both services with the default installation, or ReadyNow Orchestrator only, depending on your use case. Check the Architecture Overview to understand the components within the Optimizer Hub system."
}, {
  "objectID" : "8a93e3ab-ac26-4bce-a0bf-0cf865cb6a19",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "About Optimizer Hub",
  "section" : "Interaction Between Optimizer Hub and JVMs",
  "url" : "https://docs.azul.com/optimizer-hub/",
  "link" : "https://docs.azul.com/optimizer-hub/#interaction-between-optimizer-hub-and-jvms",
  "content" : "Interaction Between Optimizer Hub and JVMs ReadyNow in the JVM asks ReadyNow Orchestrator in Optimizer Hub for a profile. In the JVM, ReadyNow instructs Falcon what to compile based on the profile. ReadyNow in the JVM sends back a new version of the profile to ReadyNow Orchestrator in Optimizer Hub. Falcon in the JVM asks the Cloud Native Compiler in Optimizer Hub to compile the code (optional). Cloud Native Compiler in Optimizer Hub sends the compiled code back to Falcon in the JVM (optional). Your browser does not support the video tag."
}, {
  "objectID" : "b4e01b2e-55e5-4e0c-ae30-d41a740c7687",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "About Optimizer Hub",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/index",
  "link" : "https://docs.azul.com/optimizer-hub/index",
  "content" : "Documentation for Optimizer Hub, version 1.9.0 Optimizer Hub is a component of Azul Platform Prime that makes your Java programs start fast and stay fast. It consists of two services: Cloud Native Compiler: Provides a server-side optimization solution that offloads JIT compilation to separate and dedicated service resources, providing more processing power to JIT compilation while freeing your client JVMs from the burden of doing JIT compilation locally. ReadyNow Orchestrator: Records and serves ReadyNow profiles. This greatly simplifies the operational use of the ReadyNow, and removes the need to configure any local storage for writing the profile. ReadyNow Orchestrator can record multiple profile candidates from multiple JVMs and promote the best recorded profile. Note You can run both services with the default installation, or ReadyNow Orchestrator only, depending on your use case. Check the Architecture Overview to understand the components within the Optimizer Hub system."
}, {
  "objectID" : "684b0827-4157-41df-a767-e6bb3bf13e0e",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "About Optimizer Hub",
  "section" : "Interaction Between Optimizer Hub and JVMs",
  "url" : "https://docs.azul.com/optimizer-hub/index",
  "link" : "https://docs.azul.com/optimizer-hub/index#interaction-between-optimizer-hub-and-jvms",
  "content" : "Interaction Between Optimizer Hub and JVMs ReadyNow in the JVM asks ReadyNow Orchestrator in Optimizer Hub for a profile. In the JVM, ReadyNow instructs Falcon what to compile based on the profile. ReadyNow in the JVM sends back a new version of the profile to ReadyNow Orchestrator in Optimizer Hub. Falcon in the JVM asks the Cloud Native Compiler in Optimizer Hub to compile the code (optional). Cloud Native Compiler in Optimizer Hub sends the compiled code back to Falcon in the JVM (optional). Your browser does not support the video tag."
}, {
  "objectID" : "8bd751e4-ce9e-4ee2-9d6e-1a1d84c0e320",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "About Cloud Native Compiler",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/about/cloud-native-compiler",
  "link" : "https://docs.azul.com/optimizer-hub/about/cloud-native-compiler",
  "content" : "Cloud Native Compiler is a component of Optimizer Hub that provides a server-side optimization solution that offloads JIT compilation to separate and dedicated service resources, providing more processing power to JIT compilation while freeing your client JVMs from the burden of doing JIT compilation locally."
}, {
  "objectID" : "dec20c2a-ab2d-467a-af5c-15c78ca73b77",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "About Cloud Native Compiler",
  "section" : "JIT Optimization",
  "url" : "https://docs.azul.com/optimizer-hub/about/cloud-native-compiler",
  "link" : "https://docs.azul.com/optimizer-hub/about/cloud-native-compiler#jit-optimization",
  "content" : "JIT Optimization JIT optimization provides a multitude of benefits, including the ability to use speculative optimizations that lead to faster eventual code. However, traditional on-JVM JIT compilers must share the JVMs local CPU resources and compete with the application logic in using that capacity. This presents several challenges: Optimization limitations: The JIT compiler is limited in resources. Resulting optimizations take time to arrive at, and benefits are limited by the practical amount of time that applications can wait for optimization and warm-up to complete. The JIT compiler is limited in how aggressively it can afford to optimize code. The resulting optimizations are not as fast as they could be if the optimizer had more resources available. Application performance limitations during warm-up: Optimization takes time to complete, and application code runs significantly slower and less efficiently until the JIT compilers optimize it. JIT compilation work competes with the application for resources. Not all CPU and memory resources are devoted to application threads. Resource allocation and utilization: Resources (CPU and memory capacity) used for JIT optimization are only needed and utilized during warm-up, which is a fraction of the overall lifetime of each Java process. Instances must reserve (and customers pay for) these under-utilized resources for the duration of the run of each application instance."
}, {
  "objectID" : "a329fd96-20c0-40ed-aff0-a0b5d846e66d",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "About Cloud Native Compiler",
  "section" : "Falcon JIT",
  "url" : "https://docs.azul.com/optimizer-hub/about/cloud-native-compiler",
  "link" : "https://docs.azul.com/optimizer-hub/about/cloud-native-compiler#falcon-jit",
  "content" : "Falcon JIT Azul Zulu Prime Builds of OpenJDK replace OpenJDK’s C2 JIT compiler with the Falcon JIT compiler. The Falcon JIT compiler can run different levels of optimizations, and its upper tier of optimizations produces optimized code that can run significantly faster than code produced by the OpenJDK C2 compiler. Using more aggressive optimization levels requires more resources, and when using JVM-local JIT compilers for optimization, resource tradeoffs can often lead to a choice of lowering optimization levels in favor of improved warmup times. Cloud Native Compiler eliminates these tradeoffs by removing JIT compilation work from individual JVMs, and shifting the work of the Falcon JIT compiler to a separate shared service. This shift of work and associated resources allows the Cloud Native Compiler to apply even the most aggressive Falcon JIT optimization levels without disrupting individual JVM behavior. The Cloud Native Compiler can bring to bear practically unlimited Falcon JIT compilation resources when a JVM needs them, and later scale those resources down when they are unused and unneeded. This results in JVMs that can consistently serve higher amounts of traffic in smaller footprint."
}, {
  "objectID" : "53f37ae1-b410-4cfa-9055-d3fd1a95e045",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "About ReadyNow Orchestrator",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/about/readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/about/readynow-orchestrator",
  "content" : "ReadyNow Orchestrator is a component of Optimizer Hub that records and serves ReadyNow profiles. This greatly simplifies the operational use of ReadyNow when using in large fleets of containerized environments. Centralized Profile Storage: You can configure your runtimes, using JVM command-line parameters, to use ReadyNow Orchestrator for profile recording. ReadyNow Orchestrator then records profiles from a meaningful subset of your JVMs, saving your profiles either on Optimizer Hub’s built-in storage or on your S3-like object storage. Profile Training and Optimization: ReadyNow Orchestrator also takes care of recording multiple training generations of your profile to produce the best possible optimization profile. ReadyNow Orchestrator then picks the best profile out of all the possible candidates and streams it to any new JVM that is configured to request that profile. Providing Profiles to JVMs: ReadyNow Orchestrator automatically serves the best profile to newly started JVMs."
}, {
  "objectID" : "8f928ee3-bb25-4a5e-a3d3-e06c2e31d41d",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "About ReadyNow Orchestrator",
  "section" : "Key Strengths of ReadyNow Orchestrator",
  "url" : "https://docs.azul.com/optimizer-hub/about/readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/about/readynow-orchestrator#key-strengths-of-readynow-orchestrator",
  "content" : "Key Strengths of ReadyNow Orchestrator No change to your deployment profile to manually record and distribute your ReadyNow profiles. Everything is configured with a few JVM command-line parameters. ReadyNow Orchestrator monitors your entire fleed of JVMs and picks the best optimization profile rather than just using the profile produced by one JVM. Easy streaming of profiles into and out of containers, removing the need to configure persistent storage or bake profiles into images each time you build a new image."
}, {
  "objectID" : "b36cc988-08da-491c-bf78-b5747841d7fe",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Architecture Overview",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/about/architecture-overview",
  "link" : "https://docs.azul.com/optimizer-hub/about/architecture-overview",
  "content" : "Optimizer Hub is shipped as a Helm chart and a set of docker images to be deployed into a Kubernetes cluster. The Helm chart deploys different components based on the use case."
}, {
  "objectID" : "720bf5a5-9390-4b0c-a522-748267562e3b",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Architecture Overview",
  "section" : "Architecture Overview",
  "url" : "https://docs.azul.com/optimizer-hub/about/architecture-overview",
  "link" : "https://docs.azul.com/optimizer-hub/about/architecture-overview#architecture-overview",
  "content" : "Architecture Overview Full Installation In a full installation, all Optimizer Hub components are available and gateway, compile-broker, and cache are scaled when needed. The Management Gateway component is optional, as it depends on your use case. See Management Gateway Parameters for more info. ReadyNow Orchestrator Only When only ReadyNow Orchestrator is needed, a reduced set of the Optimizer Hub components is deployed in the Kubernetes cluster."
}, {
  "objectID" : "9ef77a5c-6213-4114-854e-cc4eea05bb14",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Architecture Overview",
  "section" : "Full Installation",
  "url" : "https://docs.azul.com/optimizer-hub/about/architecture-overview",
  "link" : "https://docs.azul.com/optimizer-hub/about/architecture-overview#full-installation",
  "content" : "Full Installation In a full installation, all Optimizer Hub components are available and gateway, compile-broker, and cache are scaled when needed. The Management Gateway component is optional, as it depends on your use case. See Management Gateway Parameters for more info."
}, {
  "objectID" : "b33d649e-20d6-4b41-bf66-bbe6da37440a",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Architecture Overview",
  "section" : "ReadyNow Orchestrator Only",
  "url" : "https://docs.azul.com/optimizer-hub/about/architecture-overview",
  "link" : "https://docs.azul.com/optimizer-hub/about/architecture-overview#readynow-orchestrator-only",
  "content" : "ReadyNow Orchestrator Only When only ReadyNow Orchestrator is needed, a reduced set of the Optimizer Hub components is deployed in the Kubernetes cluster."
}, {
  "objectID" : "ea8174e0-fce2-41a3-a74c-b0376f899117",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Architecture Overview",
  "section" : "Deployment Overview",
  "url" : "https://docs.azul.com/optimizer-hub/about/architecture-overview",
  "link" : "https://docs.azul.com/optimizer-hub/about/architecture-overview#deployment-overview",
  "content" : "Deployment Overview With the default AWS setup (values-aws.yaml), the setup is divided into three node types (four if you also want to use the optional monitoring stack). Each node has a role label used to set the affinity for the nodes. If you set up your cluster on AWS EKS using the Azul-provided cluster config file, nodes are created with these labels. Note Make sure that the instances on which you run your Optimizer Hub on have enough CPU to handle your requests. For example, for AWS m5.2xlarge instances can be used, and on Google Cloud Platform c2-standard-8 instances. The nodes in a Optimizer Hub instance are as follows: Compile Broker - Performs JIT compilations. AWS node type: role=opthubserver System Requirements: CPU 8, RAM 32GB, HDD 100GB Cache - Stores information about the JVM that the compiler needs to perform compilations. AWS node type: role=opthubcache System Requirements: CPU 8, RAM 32GB, HDD 100GB There is one pod per Cache node. To scale up, create more replicas. Infrastructure - Provides supporting functionality. AWS node type: role=opthubinfra System Requirements: CPU 8, RAM 32GB, HDD 100GB. Make sure the disk connection is fast (use SSD) and that the storage volume is persistent between runs. The pods included in this node are: db gateway storage Infrastructure - Non-Optimizer Hub supporting functionality, such as monitoring. AWS node type: role=infra System Requirements: CPU 8, RAM 32GB, HDD 100GB. Pods included in this node: grafana prometheus"
}, {
  "objectID" : "582d6204-a198-416c-8907-f2e088d7ff31",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Optimizer Hub 1.9.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#optimizer-hub-1-9-0",
  "content" : "Optimizer Hub 1.9.0 Release Date: February 1, 2024 - Release Notes PDF New Features Cross-Region Synchronization of ReadyNow Orchestrator Profiles A new feature in ReadyNow Orchestrator allows you to synchronize profile names between Optimizer Hub instances in different regions so that each instance contains at least one promoted profile for each profile name. See Optimizer Hub Generic Defaults > Cross-Region Sync for configuration options. Database Changes Optimizer Hub 1.9 includes an update to the Code Cache database schema. After upgrading, Optimizer Hub dumps old Code Cache data and recreates it the next time you run your application. New Location of REST APIs and ReadyNow Profile Cleaner The REST APIs and ReadyNow Profile Cleaner moved to the new Management Gateway component, and the APIs are now exposed on a different address. The Management Gateway is disabled by default, see Management Gateway Parameters as this component is not required in all use-cases. Prioritization of Profile Generations ReadyNow Orchestrator allows you to set different minimum size and recording durations for different generations of your profiles. Often you want to promote the first generation of your profile as quickly as possible so new JVMs are not starting with nothing, but you want your second generation to record for a longer time before promotion, so it is more complete. New configuration settings: minProfileSize, minProfileDuration, minProfileSizePerGeneration, and minProfileDurationPerGeneration. Check ReadyNow Orchestrator Defaults for more info. Grafana Dashboard The Grafana Dashboard has been updated with more information for greater visibility into Optimizer Hub performance. Bug Fixes The message \"Error occurred while executing task for trigger IntervalTrigger\" may be seen during initialization. This resolves automatically after some time and works as expected. Optimizer Hub 1.8.2 Release Date: December 19, 2023 - Release Notes PDF New Features Fixes an issue in 1.8.1 where the cache component is not able to scale up. Fixes an issue that caused unexpected HTTP/1.x requests for GET /q/metrics to be reported in the logging. Optimizer Hub 1.8.1 Release Date: December 6, 2023 - Release Notes PDF New Features Includes bug fixes for Optimizer Hub 1.8.0. Known Issues The message \"Error occurred while executing task for trigger IntervalTrigger\" may be seen during initialization. This will resolve automatically after some time and work as expected. Optimizer Hub 1.8.0 Release Date: September 12, 2023 - Release Notes PDF As Cloud Native Compiler expands its scope to offer more functionality than just offloading compilations, it is time to rebrand the offering to better reflect what it does. Starting with release 1.8, we are using the following naming: Optimizer Hub (was Cloud Native Compiler) - The name of the overall component that you install on your Kubernetes cluster. Cloud Native Compiler (was Compiler Service) - The feature that performs the compilation on Optimizer Hub. ReadyNow Orchestrator (was Profile Log Service) - The feature that records and serves ReadyNow profiles to JVMs. In Optimizer Hub 1.8, all major artifacts and command line switches use the updated branding. This includes, but is not limited to: Command-line JVM options to configure Cloud Native Compiler and ReadyNow Orchestrator. Helm repository locations, names, and parameter names: github.com/AzulSystems/opthub-helm-charts. REST API URLs. If you are using release 1.7 and earlier, all of the previous spellings of artifacts still work. Additionally, all of the pre-1.8 command-line arguments will continue to work for a period of one year from the release of 1.8. New Features Monitoring with Prometheus and Grafana is no longer included in the Optimizer Hub Helm charts, but must be configured separately as described on Monitoring Optimizer Hub. In the past, each release was bundled with the most likely JVM compiler engine. This is no longer the cause, resulting in smaller images. Session rebalancing has been improved with an (optional) Envoy proxy, or any other gRPC-aware load balancer/ingress in your Kubernetes cluster. More information can be found on Configuring gRPC Proxy. Documentation has been extended with installation instructions for Google Cloud. Known Issues Fixed Ports for gRPC The helm chart values contain the keys gateway.service.httpEndpoint.port and gateway.service.grpc.port to change the default ports 50051 and 8080. But these values are hardcoded for the gRPC Envoy proxy, at this moment, and cannot be changed with the mentioned helm chart keys. Cloud Native Compiler 1.7.1 Release Date: June 30, 2023 New Features Profile Log Service now stores profile metadata in the blob storage. This means that you can use AWS S3 or Azure Blob Storage to persist profile metadata and no longer need to back up the database pod with persistent storage. This change also means that when you upgrade from any release prior to 1.7.1 your previously collected profiles are no longer available. Because of this change, the db component (MariaDB) is no longer needed when running CNC in Profile Log Service-only mode. Profile Log service automatically cleans-up unused profile names when not requested for a defined time. You can configure the duration with profileLogService.cleaner.keepUnrequestedProfileNamesFor. See Configuring ReadyNow Orchestrator for more configuration information. New version of the Grafana monitoring dashboard with additional charts, and updates related to changes in the metrics reported by CNC components. You can define the profile log name with a Java property specified in the command line, in the format %prop={PROPERTY}%. For more info, see \"Using the Profile Log Service > Substitution Macros\". Improved setup for Profile Log Service-only deployment. CNC can automatically recover from DB pod restarts with loss of schema. To enable this feature, set the following value in values-override.yaml:  dbschema.auto-recreate.enabled=true The hostPort attribute is no longer required and included for the storage pod. Cloud Native Compiler 1.7.0 Release Date: May 3, 2023 New Features Improved performance of autoscaling for the Compiler Service. Usability improvements to the Profile Log Service Admin REST API. Native blob storage on Azure and AWS. Extra documentation is provided on: Configuring AWS S3 Storage Configuring Azure Blob Storage Added documentation of the CNC API. Cloud Native Compiler 1.6.3 Release Date: May 24, 2023 New Feature Fix to prevent the storage pod from crashing with persistent volume enabled on CNC 1.6.2. Cloud Native Compiler 1.6.2 Release Date: April 27, 2023 New Features The CNC helm charts now use full names for the Docker images to prevent issues in environments where a Docker Hub mirror is used. CNC pods can now be run as non-root user. The Docker images have a non-root user and the Helm chart is instructing Kubernetes to use this non-root user for CNC pods. Upgrade Follow the steps described on \"Upgrading Cloud Native Compiler\". Cloud Native Compiler 1.6.1 Release Date: March 1, 2023 New Features To avoid restarts of the Gateway pod when a large number of clients try to write profile logs at the same time, a default limit has been configured. Upgrade from version 1.6.0 can be done with a helm upgrade, as described on Upgrading Cloud Native Compiler. Bug Fixes Gateway pod gets restarted when large number of clients try to write profile simultaneously. Known Issues JVMs released before CNC 1.6.1 use HTTP for uploads of the compiler engine. Since version 1.6.1, gRPC is used and the HTTP port is disabled by default in values.yaml. Because of this, these JVMs will not be able to upload their appropriate compiler engine to CNC. When a CNC version prior to 1.6.1 already has been used and upgraded, the older JVMs will keep working with CNC, because the upload is not needed anymore. The first attempt to download a previously existing profile, after CNC upgrade to 1.6.1 can fail with a timeout. Cloud Native Compiler 1.6.0 Release Date: January 30, 2023 New Features Cloud Native Compiler has a new Profile Log Service. This service allows you to read and write ReadyNow profile logs to Cloud Native Compiler. This simplifies getting profile logs in and out of containers and other environments without persistent storage. For more information on Profile Log Service configuration, see \"Using the Profile Log Service\". Introduced ReadyNow-only deployment to helm charts. Bug Fixes Multiple APIs failed with empty response. Cache requests latency increased manifold resulting in an increase in wait time and overall compilation duration. Known Issues In case of heavy applications, if you see anomalies in TTCOB, the problem can be resolved by increasing the number of cache pods. For more info, see \"Troubleshooting Cloud Native Compiler \". Cloud Native Compiler 1.5.0 Release Date: October 31, 2022 New Features Compiler Cache on by default. New Time to Clear Optimization Backlog metric in Grafana dashboard. Known Issues Multiple pods can get evicted because of low ephemeral storage in a long-running Code Cache cluster. Cloud Native Compiler 1.4.0 Release Date: July 8, 2022 New Features Early access of the Compiler Cache. The Compiler Cache stores previously performed optimizations and serves them from the cache rather than recompiling whenever possible. Running your workloads with a Compiler Cache leads to lower CNC CPU usage and faster warmup time. Known Issues Compiler Cache is not scalable and too many connections will overload the database. Multiple pods can get evicted because of low ephemeral storage in a long-running Code Cache cluster. Cloud Native Compiler 1.3.0 Release Date: May 9, 2022 New Features Simplified installation and configuration with Helm charts. Known Issues ZVM-23070 - Using Cloud Native Compiler with local ReadyNow can dramatically increase the CPU required to deliver the compilations in time. Monitor your compiler output and look for connections being rejected and the JVM switching to local compilation, and scale out your CNC instance accordingly. Cloud Native Compiler 1.2.0 Release Date: February 24, 2021 New Features Fallback to local JIT compilation when Cloud Native Compiler is unreachable or underperforming. You can now provide an existing ReadyNow profile as the input of the -XX:ProfileLogIn={file} flag. Note that generating a ReadyNow profile using the -XX:ProfileLogOut={file} is not supported with Cloud Native Compiler yet. Cloud Native Compiler 1.1.0 Release Date: December 20, 2021 New Features Built-in monitoring stack with Prometheus and Grafana. JDK 17 support. Known Issues The CNC gateway is currently configured with one instance. Do not attempt to increase the number of gateway instances. Extremely slow disk I/o configurations (with latencies in the multiple seconds) can lead to internal crashes and data loss within CNC (due to Artemis crashes). Avoid configuring CNC with pods using very slow HDD or network volumes. Cloud Native Compiler 1.0.0 Release Date: October 15, 2021 This is the first release of Cloud Connected Compiler (CNC), and we are really excited about it! New Features Cloud Native Compiler server able to provide JIT compilations to Azul Zulu Prime Builds of OpenJDK 12.09.1.0 and later. Configuration files to provision an AWS Elastic Kubernetes Service cluster for your CNC server. A sample Grafana dashboard for monitoring your CNC server."
}, {
  "objectID" : "c1f0da04-8d1a-467b-8a4a-ba60a3a0d401",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Optimizer Hub 1.9.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#optimizer-hub-1-9-0",
  "content" : "Optimizer Hub 1.9.0 Release Date: February 1, 2024 - Release Notes PDF New Features Cross-Region Synchronization of ReadyNow Orchestrator Profiles A new feature in ReadyNow Orchestrator allows you to synchronize profile names between Optimizer Hub instances in different regions so that each instance contains at least one promoted profile for each profile name. See Optimizer Hub Generic Defaults > Cross-Region Sync for configuration options. Database Changes Optimizer Hub 1.9 includes an update to the Code Cache database schema. After upgrading, Optimizer Hub dumps old Code Cache data and recreates it the next time you run your application. New Location of REST APIs and ReadyNow Profile Cleaner The REST APIs and ReadyNow Profile Cleaner moved to the new Management Gateway component, and the APIs are now exposed on a different address. The Management Gateway is disabled by default, see Management Gateway Parameters as this component is not required in all use-cases. Prioritization of Profile Generations ReadyNow Orchestrator allows you to set different minimum size and recording durations for different generations of your profiles. Often you want to promote the first generation of your profile as quickly as possible so new JVMs are not starting with nothing, but you want your second generation to record for a longer time before promotion, so it is more complete. New configuration settings: minProfileSize, minProfileDuration, minProfileSizePerGeneration, and minProfileDurationPerGeneration. Check ReadyNow Orchestrator Defaults for more info. Grafana Dashboard The Grafana Dashboard has been updated with more information for greater visibility into Optimizer Hub performance. Bug Fixes The message \"Error occurred while executing task for trigger IntervalTrigger\" may be seen during initialization. This resolves automatically after some time and works as expected."
}, {
  "objectID" : "b0213d5a-5702-4c75-aedf-3aa2fbcbd61b",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features",
  "content" : "New Features Cross-Region Synchronization of ReadyNow Orchestrator Profiles A new feature in ReadyNow Orchestrator allows you to synchronize profile names between Optimizer Hub instances in different regions so that each instance contains at least one promoted profile for each profile name. See Optimizer Hub Generic Defaults > Cross-Region Sync for configuration options. Database Changes Optimizer Hub 1.9 includes an update to the Code Cache database schema. After upgrading, Optimizer Hub dumps old Code Cache data and recreates it the next time you run your application. New Location of REST APIs and ReadyNow Profile Cleaner The REST APIs and ReadyNow Profile Cleaner moved to the new Management Gateway component, and the APIs are now exposed on a different address. The Management Gateway is disabled by default, see Management Gateway Parameters as this component is not required in all use-cases. Prioritization of Profile Generations ReadyNow Orchestrator allows you to set different minimum size and recording durations for different generations of your profiles. Often you want to promote the first generation of your profile as quickly as possible so new JVMs are not starting with nothing, but you want your second generation to record for a longer time before promotion, so it is more complete. New configuration settings: minProfileSize, minProfileDuration, minProfileSizePerGeneration, and minProfileDurationPerGeneration. Check ReadyNow Orchestrator Defaults for more info. Grafana Dashboard The Grafana Dashboard has been updated with more information for greater visibility into Optimizer Hub performance."
}, {
  "objectID" : "e4b01b00-26d9-4390-8951-043039d4a601",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cross-Region Synchronization of ReadyNow Orchestrator Profiles",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cross-region-synchronization-of-readynow-orchestrator-profiles",
  "content" : "Cross-Region Synchronization of ReadyNow Orchestrator Profiles A new feature in ReadyNow Orchestrator allows you to synchronize profile names between Optimizer Hub instances in different regions so that each instance contains at least one promoted profile for each profile name. See Optimizer Hub Generic Defaults > Cross-Region Sync for configuration options."
}, {
  "objectID" : "9604e7ac-3af8-4ff1-9fbb-427439d26513",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Database Changes",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#database-changes",
  "content" : "Database Changes Optimizer Hub 1.9 includes an update to the Code Cache database schema. After upgrading, Optimizer Hub dumps old Code Cache data and recreates it the next time you run your application."
}, {
  "objectID" : "02afb562-29dd-4ded-9427-032fbd48cf7d",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Location of REST APIs and ReadyNow Profile Cleaner",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-location-of-rest-apis-and-readynow-profile-cleaner",
  "content" : "New Location of REST APIs and ReadyNow Profile Cleaner The REST APIs and ReadyNow Profile Cleaner moved to the new Management Gateway component, and the APIs are now exposed on a different address. The Management Gateway is disabled by default, see Management Gateway Parameters as this component is not required in all use-cases."
}, {
  "objectID" : "4db2bf31-094f-4b5f-82b8-3b40002648c8",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Prioritization of Profile Generations",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#prioritization-of-profile-generations",
  "content" : "Prioritization of Profile Generations ReadyNow Orchestrator allows you to set different minimum size and recording durations for different generations of your profiles. Often you want to promote the first generation of your profile as quickly as possible so new JVMs are not starting with nothing, but you want your second generation to record for a longer time before promotion, so it is more complete. New configuration settings: minProfileSize, minProfileDuration, minProfileSizePerGeneration, and minProfileDurationPerGeneration. Check ReadyNow Orchestrator Defaults for more info."
}, {
  "objectID" : "344a1be5-5180-4f66-8f13-0506a7efe975",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Grafana Dashboard",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#grafana-dashboard",
  "content" : "Grafana Dashboard The Grafana Dashboard has been updated with more information for greater visibility into Optimizer Hub performance."
}, {
  "objectID" : "ef8ea5b3-df3e-464a-b18d-102816a27e88",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Bug Fixes",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#bug-fixes",
  "content" : "Bug Fixes The message \"Error occurred while executing task for trigger IntervalTrigger\" may be seen during initialization. This resolves automatically after some time and works as expected."
}, {
  "objectID" : "5dab7433-bd04-49d3-bad5-91a5d24472f2",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Optimizer Hub 1.8.2",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#optimizer-hub-1-8-2",
  "content" : "Optimizer Hub 1.8.2 Release Date: December 19, 2023 - Release Notes PDF New Features Fixes an issue in 1.8.1 where the cache component is not able to scale up. Fixes an issue that caused unexpected HTTP/1.x requests for GET /q/metrics to be reported in the logging."
}, {
  "objectID" : "d992930d-572f-48fd-beca-a9abddef9c48",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-2",
  "content" : "New Features Fixes an issue in 1.8.1 where the cache component is not able to scale up. Fixes an issue that caused unexpected HTTP/1.x requests for GET /q/metrics to be reported in the logging."
}, {
  "objectID" : "5e663bc6-d6d9-47be-9f4d-42e8393a2f7e",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Optimizer Hub 1.8.1",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#optimizer-hub-1-8-1",
  "content" : "Optimizer Hub 1.8.1 Release Date: December 6, 2023 - Release Notes PDF New Features Includes bug fixes for Optimizer Hub 1.8.0. Known Issues The message \"Error occurred while executing task for trigger IntervalTrigger\" may be seen during initialization. This will resolve automatically after some time and work as expected."
}, {
  "objectID" : "c51c7783-3a73-41b6-8fa3-6da91c7104b8",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-3",
  "content" : "New Features Includes bug fixes for Optimizer Hub 1.8.0."
}, {
  "objectID" : "f062655a-cea9-4a2f-8ee5-e2b657c27bc7",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#known-issues",
  "content" : "Known Issues The message \"Error occurred while executing task for trigger IntervalTrigger\" may be seen during initialization. This will resolve automatically after some time and work as expected."
}, {
  "objectID" : "35969339-e637-450f-b363-323e9104a1e9",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Optimizer Hub 1.8.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#optimizer-hub-1-8-0",
  "content" : "Optimizer Hub 1.8.0 Release Date: September 12, 2023 - Release Notes PDF As Cloud Native Compiler expands its scope to offer more functionality than just offloading compilations, it is time to rebrand the offering to better reflect what it does. Starting with release 1.8, we are using the following naming: Optimizer Hub (was Cloud Native Compiler) - The name of the overall component that you install on your Kubernetes cluster. Cloud Native Compiler (was Compiler Service) - The feature that performs the compilation on Optimizer Hub. ReadyNow Orchestrator (was Profile Log Service) - The feature that records and serves ReadyNow profiles to JVMs. In Optimizer Hub 1.8, all major artifacts and command line switches use the updated branding. This includes, but is not limited to: Command-line JVM options to configure Cloud Native Compiler and ReadyNow Orchestrator. Helm repository locations, names, and parameter names: github.com/AzulSystems/opthub-helm-charts. REST API URLs. If you are using release 1.7 and earlier, all of the previous spellings of artifacts still work. Additionally, all of the pre-1.8 command-line arguments will continue to work for a period of one year from the release of 1.8. New Features Monitoring with Prometheus and Grafana is no longer included in the Optimizer Hub Helm charts, but must be configured separately as described on Monitoring Optimizer Hub. In the past, each release was bundled with the most likely JVM compiler engine. This is no longer the cause, resulting in smaller images. Session rebalancing has been improved with an (optional) Envoy proxy, or any other gRPC-aware load balancer/ingress in your Kubernetes cluster. More information can be found on Configuring gRPC Proxy. Documentation has been extended with installation instructions for Google Cloud. Known Issues Fixed Ports for gRPC The helm chart values contain the keys gateway.service.httpEndpoint.port and gateway.service.grpc.port to change the default ports 50051 and 8080. But these values are hardcoded for the gRPC Envoy proxy, at this moment, and cannot be changed with the mentioned helm chart keys."
}, {
  "objectID" : "e7bdcead-b3fc-4e43-9732-fb538d808790",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-4",
  "content" : "New Features Monitoring with Prometheus and Grafana is no longer included in the Optimizer Hub Helm charts, but must be configured separately as described on Monitoring Optimizer Hub. In the past, each release was bundled with the most likely JVM compiler engine. This is no longer the cause, resulting in smaller images. Session rebalancing has been improved with an (optional) Envoy proxy, or any other gRPC-aware load balancer/ingress in your Kubernetes cluster. More information can be found on Configuring gRPC Proxy. Documentation has been extended with installation instructions for Google Cloud."
}, {
  "objectID" : "dba0139a-b3fe-4891-8aef-3edb8e81330a",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#known-issues-2",
  "content" : "Known Issues Fixed Ports for gRPC The helm chart values contain the keys gateway.service.httpEndpoint.port and gateway.service.grpc.port to change the default ports 50051 and 8080. But these values are hardcoded for the gRPC Envoy proxy, at this moment, and cannot be changed with the mentioned helm chart keys."
}, {
  "objectID" : "c04a2f0d-9584-40f7-8bf0-0055e9c28354",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Fixed Ports for gRPC",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#fixed-ports-for-grpc",
  "content" : "Fixed Ports for gRPC The helm chart values contain the keys gateway.service.httpEndpoint.port and gateway.service.grpc.port to change the default ports 50051 and 8080. But these values are hardcoded for the gRPC Envoy proxy, at this moment, and cannot be changed with the mentioned helm chart keys."
}, {
  "objectID" : "ed30a8c7-da9a-4458-af0b-2e9a4b9233de",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.7.1",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-7-1",
  "content" : "Cloud Native Compiler 1.7.1 Release Date: June 30, 2023 New Features Profile Log Service now stores profile metadata in the blob storage. This means that you can use AWS S3 or Azure Blob Storage to persist profile metadata and no longer need to back up the database pod with persistent storage. This change also means that when you upgrade from any release prior to 1.7.1 your previously collected profiles are no longer available. Because of this change, the db component (MariaDB) is no longer needed when running CNC in Profile Log Service-only mode. Profile Log service automatically cleans-up unused profile names when not requested for a defined time. You can configure the duration with profileLogService.cleaner.keepUnrequestedProfileNamesFor. See Configuring ReadyNow Orchestrator for more configuration information. New version of the Grafana monitoring dashboard with additional charts, and updates related to changes in the metrics reported by CNC components. You can define the profile log name with a Java property specified in the command line, in the format %prop={PROPERTY}%. For more info, see \"Using the Profile Log Service > Substitution Macros\". Improved setup for Profile Log Service-only deployment. CNC can automatically recover from DB pod restarts with loss of schema. To enable this feature, set the following value in values-override.yaml:  dbschema.auto-recreate.enabled=true The hostPort attribute is no longer required and included for the storage pod."
}, {
  "objectID" : "63d7bf37-d47d-4861-b854-fd5b12e20f95",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-5",
  "content" : "New Features Profile Log Service now stores profile metadata in the blob storage. This means that you can use AWS S3 or Azure Blob Storage to persist profile metadata and no longer need to back up the database pod with persistent storage. This change also means that when you upgrade from any release prior to 1.7.1 your previously collected profiles are no longer available. Because of this change, the db component (MariaDB) is no longer needed when running CNC in Profile Log Service-only mode. Profile Log service automatically cleans-up unused profile names when not requested for a defined time. You can configure the duration with profileLogService.cleaner.keepUnrequestedProfileNamesFor. See Configuring ReadyNow Orchestrator for more configuration information. New version of the Grafana monitoring dashboard with additional charts, and updates related to changes in the metrics reported by CNC components. You can define the profile log name with a Java property specified in the command line, in the format %prop={PROPERTY}%. For more info, see \"Using the Profile Log Service > Substitution Macros\". Improved setup for Profile Log Service-only deployment. CNC can automatically recover from DB pod restarts with loss of schema. To enable this feature, set the following value in values-override.yaml:  dbschema.auto-recreate.enabled=true The hostPort attribute is no longer required and included for the storage pod."
}, {
  "objectID" : "e908c5af-e10b-464a-9df0-3ef29fa02abd",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.7.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-7-0",
  "content" : "Cloud Native Compiler 1.7.0 Release Date: May 3, 2023 New Features Improved performance of autoscaling for the Compiler Service. Usability improvements to the Profile Log Service Admin REST API. Native blob storage on Azure and AWS. Extra documentation is provided on: Configuring AWS S3 Storage Configuring Azure Blob Storage Added documentation of the CNC API."
}, {
  "objectID" : "924f621b-8dc1-4586-8680-d5cd8ad0a0d4",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-6",
  "content" : "New Features Improved performance of autoscaling for the Compiler Service. Usability improvements to the Profile Log Service Admin REST API. Native blob storage on Azure and AWS. Extra documentation is provided on: Configuring AWS S3 Storage Configuring Azure Blob Storage Added documentation of the CNC API."
}, {
  "objectID" : "6728d05e-2085-4c20-94ba-74e1f78f6ce1",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.6.3",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-6-3",
  "content" : "Cloud Native Compiler 1.6.3 Release Date: May 24, 2023 New Feature Fix to prevent the storage pod from crashing with persistent volume enabled on CNC 1.6.2."
}, {
  "objectID" : "eb5a37a8-85bc-4ee2-8303-d7a18491e603",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Feature",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-feature",
  "content" : "New Feature Fix to prevent the storage pod from crashing with persistent volume enabled on CNC 1.6.2."
}, {
  "objectID" : "f405727e-f629-44ed-ac0d-97aaf6626089",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.6.2",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-6-2",
  "content" : "Cloud Native Compiler 1.6.2 Release Date: April 27, 2023 New Features The CNC helm charts now use full names for the Docker images to prevent issues in environments where a Docker Hub mirror is used. CNC pods can now be run as non-root user. The Docker images have a non-root user and the Helm chart is instructing Kubernetes to use this non-root user for CNC pods. Upgrade Follow the steps described on \"Upgrading Cloud Native Compiler\"."
}, {
  "objectID" : "f2d21d50-786b-4511-a3c1-950bfa4165c1",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-7",
  "content" : "New Features The CNC helm charts now use full names for the Docker images to prevent issues in environments where a Docker Hub mirror is used. CNC pods can now be run as non-root user. The Docker images have a non-root user and the Helm chart is instructing Kubernetes to use this non-root user for CNC pods."
}, {
  "objectID" : "166f788f-e3db-4fd0-ba9d-bcda73bd417a",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Upgrade",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#upgrade",
  "content" : "Upgrade Follow the steps described on \"Upgrading Cloud Native Compiler\"."
}, {
  "objectID" : "e319326d-f581-441a-acec-b85601e3f549",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.6.1",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-6-1",
  "content" : "Cloud Native Compiler 1.6.1 Release Date: March 1, 2023 New Features To avoid restarts of the Gateway pod when a large number of clients try to write profile logs at the same time, a default limit has been configured. Upgrade from version 1.6.0 can be done with a helm upgrade, as described on Upgrading Cloud Native Compiler. Bug Fixes Gateway pod gets restarted when large number of clients try to write profile simultaneously. Known Issues JVMs released before CNC 1.6.1 use HTTP for uploads of the compiler engine. Since version 1.6.1, gRPC is used and the HTTP port is disabled by default in values.yaml. Because of this, these JVMs will not be able to upload their appropriate compiler engine to CNC. When a CNC version prior to 1.6.1 already has been used and upgraded, the older JVMs will keep working with CNC, because the upload is not needed anymore. The first attempt to download a previously existing profile, after CNC upgrade to 1.6.1 can fail with a timeout."
}, {
  "objectID" : "1821c5b6-60b0-4181-8efb-88f1af95b996",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-8",
  "content" : "New Features To avoid restarts of the Gateway pod when a large number of clients try to write profile logs at the same time, a default limit has been configured. Upgrade from version 1.6.0 can be done with a helm upgrade, as described on Upgrading Cloud Native Compiler."
}, {
  "objectID" : "bc41cdfe-01c3-4c63-bf63-12664eae1262",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Bug Fixes",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#bug-fixes-2",
  "content" : "Bug Fixes Gateway pod gets restarted when large number of clients try to write profile simultaneously."
}, {
  "objectID" : "987fcc30-bcf6-4c37-9fc0-539bb0171200",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#known-issues-3",
  "content" : "Known Issues JVMs released before CNC 1.6.1 use HTTP for uploads of the compiler engine. Since version 1.6.1, gRPC is used and the HTTP port is disabled by default in values.yaml. Because of this, these JVMs will not be able to upload their appropriate compiler engine to CNC. When a CNC version prior to 1.6.1 already has been used and upgraded, the older JVMs will keep working with CNC, because the upload is not needed anymore. The first attempt to download a previously existing profile, after CNC upgrade to 1.6.1 can fail with a timeout."
}, {
  "objectID" : "dd206f98-7efb-41a5-b6f0-d2c798764b79",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.6.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-6-0",
  "content" : "Cloud Native Compiler 1.6.0 Release Date: January 30, 2023 New Features Cloud Native Compiler has a new Profile Log Service. This service allows you to read and write ReadyNow profile logs to Cloud Native Compiler. This simplifies getting profile logs in and out of containers and other environments without persistent storage. For more information on Profile Log Service configuration, see \"Using the Profile Log Service\". Introduced ReadyNow-only deployment to helm charts. Bug Fixes Multiple APIs failed with empty response. Cache requests latency increased manifold resulting in an increase in wait time and overall compilation duration. Known Issues In case of heavy applications, if you see anomalies in TTCOB, the problem can be resolved by increasing the number of cache pods. For more info, see \"Troubleshooting Cloud Native Compiler \"."
}, {
  "objectID" : "fe835d75-69a4-4dd9-9218-c720552f6999",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-9",
  "content" : "New Features Cloud Native Compiler has a new Profile Log Service. This service allows you to read and write ReadyNow profile logs to Cloud Native Compiler. This simplifies getting profile logs in and out of containers and other environments without persistent storage. For more information on Profile Log Service configuration, see \"Using the Profile Log Service\". Introduced ReadyNow-only deployment to helm charts."
}, {
  "objectID" : "43f76785-a75f-437b-9773-03be62132eaf",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Bug Fixes",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#bug-fixes-3",
  "content" : "Bug Fixes Multiple APIs failed with empty response. Cache requests latency increased manifold resulting in an increase in wait time and overall compilation duration."
}, {
  "objectID" : "2f644d9d-b622-47c3-a716-2f3ccb8da8a9",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#known-issues-4",
  "content" : "Known Issues In case of heavy applications, if you see anomalies in TTCOB, the problem can be resolved by increasing the number of cache pods. For more info, see \"Troubleshooting Cloud Native Compiler \"."
}, {
  "objectID" : "ebf4de43-868e-4622-80e8-402e592377eb",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.5.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-5-0",
  "content" : "Cloud Native Compiler 1.5.0 Release Date: October 31, 2022 New Features Compiler Cache on by default. New Time to Clear Optimization Backlog metric in Grafana dashboard. Known Issues Multiple pods can get evicted because of low ephemeral storage in a long-running Code Cache cluster."
}, {
  "objectID" : "be230ff5-e201-4fbd-9015-7fa83da9ce58",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-10",
  "content" : "New Features Compiler Cache on by default. New Time to Clear Optimization Backlog metric in Grafana dashboard."
}, {
  "objectID" : "1f8420dd-80f4-4a34-8587-19e2830b365f",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#known-issues-5",
  "content" : "Known Issues Multiple pods can get evicted because of low ephemeral storage in a long-running Code Cache cluster."
}, {
  "objectID" : "1aa8f4a3-8950-4535-b92f-0921630a7c1e",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.4.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-4-0",
  "content" : "Cloud Native Compiler 1.4.0 Release Date: July 8, 2022 New Features Early access of the Compiler Cache. The Compiler Cache stores previously performed optimizations and serves them from the cache rather than recompiling whenever possible. Running your workloads with a Compiler Cache leads to lower CNC CPU usage and faster warmup time. Known Issues Compiler Cache is not scalable and too many connections will overload the database. Multiple pods can get evicted because of low ephemeral storage in a long-running Code Cache cluster."
}, {
  "objectID" : "8fd1ec36-5052-449d-88df-891eb8429d5a",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-11",
  "content" : "New Features Early access of the Compiler Cache. The Compiler Cache stores previously performed optimizations and serves them from the cache rather than recompiling whenever possible. Running your workloads with a Compiler Cache leads to lower CNC CPU usage and faster warmup time."
}, {
  "objectID" : "59c39b74-94fc-4684-a1b0-bc477f4f2542",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#known-issues-6",
  "content" : "Known Issues Compiler Cache is not scalable and too many connections will overload the database. Multiple pods can get evicted because of low ephemeral storage in a long-running Code Cache cluster."
}, {
  "objectID" : "223af170-a904-441f-97ef-55a54468a733",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.3.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-3-0",
  "content" : "Cloud Native Compiler 1.3.0 Release Date: May 9, 2022 New Features Simplified installation and configuration with Helm charts. Known Issues ZVM-23070 - Using Cloud Native Compiler with local ReadyNow can dramatically increase the CPU required to deliver the compilations in time. Monitor your compiler output and look for connections being rejected and the JVM switching to local compilation, and scale out your CNC instance accordingly."
}, {
  "objectID" : "32c79103-9c4e-4e4d-b11f-dc445dc8ca23",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-12",
  "content" : "New Features Simplified installation and configuration with Helm charts."
}, {
  "objectID" : "984f9f76-cf03-4e0b-bc5f-095af6a87ab9",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#known-issues-7",
  "content" : "Known Issues ZVM-23070 - Using Cloud Native Compiler with local ReadyNow can dramatically increase the CPU required to deliver the compilations in time. Monitor your compiler output and look for connections being rejected and the JVM switching to local compilation, and scale out your CNC instance accordingly."
}, {
  "objectID" : "77f5937b-9408-4ff4-b813-6d31bd568204",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.2.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-2-0",
  "content" : "Cloud Native Compiler 1.2.0 Release Date: February 24, 2021 New Features Fallback to local JIT compilation when Cloud Native Compiler is unreachable or underperforming. You can now provide an existing ReadyNow profile as the input of the -XX:ProfileLogIn={file} flag. Note that generating a ReadyNow profile using the -XX:ProfileLogOut={file} is not supported with Cloud Native Compiler yet."
}, {
  "objectID" : "fd024f0d-88a0-444b-8146-75b6079a94fa",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-13",
  "content" : "New Features Fallback to local JIT compilation when Cloud Native Compiler is unreachable or underperforming. You can now provide an existing ReadyNow profile as the input of the -XX:ProfileLogIn={file} flag. Note that generating a ReadyNow profile using the -XX:ProfileLogOut={file} is not supported with Cloud Native Compiler yet."
}, {
  "objectID" : "13f64f4d-ce41-48eb-ba90-1de07fed4b3c",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.1.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-1-0",
  "content" : "Cloud Native Compiler 1.1.0 Release Date: December 20, 2021 New Features Built-in monitoring stack with Prometheus and Grafana. JDK 17 support. Known Issues The CNC gateway is currently configured with one instance. Do not attempt to increase the number of gateway instances. Extremely slow disk I/o configurations (with latencies in the multiple seconds) can lead to internal crashes and data loss within CNC (due to Artemis crashes). Avoid configuring CNC with pods using very slow HDD or network volumes."
}, {
  "objectID" : "271a4d65-0feb-46fc-a6ce-33978e2756c1",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-14",
  "content" : "New Features Built-in monitoring stack with Prometheus and Grafana. JDK 17 support."
}, {
  "objectID" : "e6b86747-a142-4b2c-b7bc-3405d6d6d2dc",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#known-issues-8",
  "content" : "Known Issues The CNC gateway is currently configured with one instance. Do not attempt to increase the number of gateway instances. Extremely slow disk I/o configurations (with latencies in the multiple seconds) can lead to internal crashes and data loss within CNC (due to Artemis crashes). Avoid configuring CNC with pods using very slow HDD or network volumes."
}, {
  "objectID" : "148ddfdb-36e0-4167-8239-3e1288cf80f6",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "Cloud Native Compiler 1.0.0",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#cloud-native-compiler-1-0-0",
  "content" : "Cloud Native Compiler 1.0.0 Release Date: October 15, 2021 This is the first release of Cloud Connected Compiler (CNC), and we are really excited about it! New Features Cloud Native Compiler server able to provide JIT compilations to Azul Zulu Prime Builds of OpenJDK 12.09.1.0 and later. Configuration files to provision an AWS Elastic Kubernetes Service cluster for your CNC server. A sample Grafana dashboard for monitoring your CNC server."
}, {
  "objectID" : "997060c7-fcc2-4421-9e29-98ce4f553cb0",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Release Notes",
  "section" : "New Features",
  "url" : "https://docs.azul.com/optimizer-hub/release-notes",
  "link" : "https://docs.azul.com/optimizer-hub/release-notes#new-features-15",
  "content" : "New Features Cloud Native Compiler server able to provide JIT compilations to Azul Zulu Prime Builds of OpenJDK 12.09.1.0 and later. Configuration files to provision an AWS Elastic Kubernetes Service cluster for your CNC server. A sample Grafana dashboard for monitoring your CNC server."
}, {
  "objectID" : "31e5312c-7ac7-4961-8216-05790fcb9ad8",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Azul Platform Core Third Party Licenses",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/tpl",
  "link" : "https://docs.azul.com/optimizer-hub/tpl",
  "content" : "This page contains links to the documents with licenses for third party software included in Optimizer Hub. Version Optimizer Hub TPL 1.9.0 PDF"
}, {
  "objectID" : "7615b02d-13c0-44a2-bb18-80cf770232c1",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/installation/install-optimizer-hub",
  "link" : "https://docs.azul.com/optimizer-hub/installation/install-optimizer-hub",
  "content" : "Optimizer Hub is shipped as a Kubernetes cluster which you provision and run on your cloud or on-premise servers."
}, {
  "objectID" : "2525f800-2a9d-4cb7-a1af-46deb8ca01f8",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub",
  "section" : "Supported Platforms",
  "url" : "https://docs.azul.com/optimizer-hub/installation/install-optimizer-hub",
  "link" : "https://docs.azul.com/optimizer-hub/installation/install-optimizer-hub#supported-platforms",
  "content" : "Supported Platforms Optimizer Hub is available for x64 platforms only."
}, {
  "objectID" : "7b48d2da-3c11-45a7-8778-d513a1a5f584",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub",
  "section" : "Supported Kubernetes Environments",
  "url" : "https://docs.azul.com/optimizer-hub/installation/install-optimizer-hub",
  "link" : "https://docs.azul.com/optimizer-hub/installation/install-optimizer-hub#supported-kubernetes-environments",
  "content" : "Supported Kubernetes Environments You can install Optimizer Hub on any Kubernetes cluster: Kubernetes clusters that you manually configure with kubeadm. Installing Optimizer Hub on Kubernetes. A single-node minikube cluster. Installing Optimizer Hub on Minikube. Managed cloud Kubernetes services such as Amazon Web Services Elastic Kubernetes Service (EKS), Google Kubernetes Engine, and Microsoft Azure Managed Kubernetes Service. Installing Optimizer Hub on Elastic Kubernetes Service. Note By downloading and using Optimizer Hub, you agree with the Azul Platform Prime Evaluation Agreement."
}, {
  "objectID" : "4ff0bf40-b841-43a7-97a4-77098efa7e2e",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Kubernetes",
  "section" : "Optimizer Hub Helm Charts",
  "url" : "https://docs.azul.com/optimizer-hub/installation/kubernetes",
  "link" : "https://docs.azul.com/optimizer-hub/installation/kubernetes#optimizer-hub-helm-charts",
  "content" : "Optimizer Hub Helm Charts Azul provides Optimizer Hub Helm Charts on GitHub. You can download the full package as a zip."
}, {
  "objectID" : "bc910530-5199-459a-b4e2-26d618799506",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Kubernetes",
  "section" : "Installing Optimizer Hub",
  "url" : "https://docs.azul.com/optimizer-hub/installation/kubernetes",
  "link" : "https://docs.azul.com/optimizer-hub/installation/kubernetes#installing-optimizer-hub",
  "content" : "Installing Optimizer Hub These instructions are for installing a full Optimizer Hub instance with both Cloud Native Compiler and ReadyNow Orchestrator. In case you only want to install the full Optimizer Hub, but only a part of the services, see \"Configuring the Active Optimizer Hub Services\". Install Azul Zulu Prime Builds of OpenJDK 21.09.1.0 or newer on your client machine. Make sure your Helm version is v3.8.0 or newer. Add the Azul Helm repository to your Helm environment:  helm repo add opthub-helm https://azulsystems.github.io/opthub-helm-charts/\nhelm repo update Create a namespace (i.e. my-opthub) for Optimizer Hub.  kubectl create namespace my-opthub Create the values-override.yaml file in your local directory. If you have a custom cluster domain name, specify it in values-override.yaml:  clusterName: \"example.org\" Configure sizing and autoscaling of the Optimizer Hub components according to the sizing guide. By default, autoscaling is on and Optimizer Hub can scale up to 10 Compile Brokers. For example, you could set the following:  simpleSizing:\n  vCores: 32\n  minVCores: 32\n  maxVCores: 106 If needed, configure external access in your cluster. If your JVMs are running within the same cluster as Optimizer Hub, you can ignore this step. Otherwise, it is necessary to configure an external load balancer in values-override.yaml. For clusters running on AWS an example configuration file is available on Azul’s GitHub. Install using Helm, passing in the values-override.yaml.  helm install opthub opthub-helm/azul-opthub -n my-opthub -f values-override.yaml In case you need a specific Optimizer Hub version, please use --version 1.9.0 flag. The command should produce output similar to this:  NAME: opthub\nLAST DEPLOYED: Wed Jan 31 12:19:58 2024\nNAMESPACE: my-opthub\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None Verify that all started pods are ready:  kubectl get all -n my-opthub"
}, {
  "objectID" : "b14ed153-6c40-4182-bcfe-856357124ede",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Kubernetes",
  "section" : "Configuring Persistent Storage",
  "url" : "https://docs.azul.com/optimizer-hub/installation/kubernetes",
  "link" : "https://docs.azul.com/optimizer-hub/installation/kubernetes#configuring-persistent-storage",
  "content" : "Configuring Persistent Storage By default, Optimizer Hub pods allocate data directories on the root disk or in an emptyDir volume, both residing in the pod’s ephemeral storage. If the pod dies, all data is lost and has to be regenerated after restart. When you move the pods' data directories to persistent volumes, the data survives pod crashes, restarts and even scale down/up events. Furthermore, this allows you to lower the local storage sizing of target Kubernetes worker nodes, since large data directories will be stored in separate volumes outside of these worker nodes. When you use persistent volumes, you create 2 additional Kubernetes objects per pod: persistentVolumeClaim (PVC), whose name is derived from parent pod persistentVolume (PV), which is allocated automatically by chosen the storage class and has an auto-generated name. PV and PVC objects lifecycles are separate from other Optimizer Hub Kubernetes objects. When you uninstall Optimizer Hub using the helm chart, these objects remain in cluster for as long as the installation namespace exists. Removal of namespace or manual deletion of PVCs within the namespace automatically removes their associated PVs from the Kubernetes cluster as well. You can configure persistent volumes for the db and builtinStorage components. The configuration is the same for both components. Your target Kubernetes cluster needs to have at least one storage class configured. By default, Optimizer Hub uses the default configured storage class. Note If you are using AWS EBS Storage for your persistent storage, use gp3 volumes instead of gp2 volumes. gp2 volumes have have limited IOPS which can affect Optimizer Hub performance. Additional configuration info for AWS S3 Storage is available here. Note If you are using Azure Blob Storage, please check \"Installing Optimizer Hub on Azure\" for additional settings. Configuration with Custom Resources Values Example pod sizing with 10GiB for root volume and 100GiB for data volume:  db:\n  resources:\n    requests:\n      cpu: \"5\"\n      memory: \"20Gi\"\n      ephemeral-storage: \"10Gi\"\n    limits:\n      cpu: \"5\"\n      memory: \"20Gi\"\n      ephemeral-storage: \"10Gi\"\n  persistentDataVolume:\n    enabled: true\n    size: \"100Gi\" If you want to use recommended sizing of pods, you still need to explicitly override the default size of the ephemeral storage. This is in order to not waste resources and increase pod schedulability on smaller sized nodes.  db:\n  resources:\n    requests:\n      ephemeral-storage: \"10Gi\"\n    limits:\n      ephemeral-storage: \"10Gi\"\n  persistentDataVolume:\n    enabled: true\n    size: \"100Gi\" Configuration with Custom Storage Class If your cluster has multiple configured storage classes, and you want to use a non-default storage class, do the following:  db:\n  resources:\n  persistentDataVolume:\n    enabled: true\n    storageClassName: \"my-storage-class\""
}, {
  "objectID" : "1c04e313-62d1-4502-8052-7edfa00cdb59",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Kubernetes",
  "section" : "Configuration with Custom Resources Values",
  "url" : "https://docs.azul.com/optimizer-hub/installation/kubernetes",
  "link" : "https://docs.azul.com/optimizer-hub/installation/kubernetes#configuration-with-custom-resources-values",
  "content" : "Configuration with Custom Resources Values Example pod sizing with 10GiB for root volume and 100GiB for data volume:  db:\n  resources:\n    requests:\n      cpu: \"5\"\n      memory: \"20Gi\"\n      ephemeral-storage: \"10Gi\"\n    limits:\n      cpu: \"5\"\n      memory: \"20Gi\"\n      ephemeral-storage: \"10Gi\"\n  persistentDataVolume:\n    enabled: true\n    size: \"100Gi\" If you want to use recommended sizing of pods, you still need to explicitly override the default size of the ephemeral storage. This is in order to not waste resources and increase pod schedulability on smaller sized nodes.  db:\n  resources:\n    requests:\n      ephemeral-storage: \"10Gi\"\n    limits:\n      ephemeral-storage: \"10Gi\"\n  persistentDataVolume:\n    enabled: true\n    size: \"100Gi\""
}, {
  "objectID" : "04637c91-2c8b-4e2b-91c4-65d48b235b6e",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Kubernetes",
  "section" : "Configuration with Custom Storage Class",
  "url" : "https://docs.azul.com/optimizer-hub/installation/kubernetes",
  "link" : "https://docs.azul.com/optimizer-hub/installation/kubernetes#storage",
  "content" : "Configuration with Custom Storage Class If your cluster has multiple configured storage classes, and you want to use a non-default storage class, do the following:  db:\n  resources:\n  persistentDataVolume:\n    enabled: true\n    storageClassName: \"my-storage-class\""
}, {
  "objectID" : "95c59a6a-1fa1-49e1-9a6d-c2148d96350d",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Kubernetes",
  "section" : "Enabling the Management Gateway",
  "url" : "https://docs.azul.com/optimizer-hub/installation/kubernetes",
  "link" : "https://docs.azul.com/optimizer-hub/installation/kubernetes#enabling-the-management-gateway",
  "content" : "Enabling the Management Gateway The Management Gateway enables two pieces of functionality: Access to REST APIs for managing ReadyNow profiles Cross-region synchronization of ReadyNow Profiles To enable the Management Gateway, set mgmtGateway.enabled to true in value-override.yaml, see Management Gateway Parameters for more info."
}, {
  "objectID" : "0a026cad-11e0-40ce-a7dd-a23a0d382fa0",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Kubernetes",
  "section" : "Cleaning Up",
  "url" : "https://docs.azul.com/optimizer-hub/installation/kubernetes",
  "link" : "https://docs.azul.com/optimizer-hub/installation/kubernetes#cleaning-up",
  "content" : "Cleaning Up To uninstall a deployed Optimizer Hub, run the following command:  helm uninstall opthub -n my-opthub\nkubectl delete namespace my-opthub"
}, {
  "objectID" : "e78a404f-b136-4942-a879-98a1871ac9e9",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on AWS Elastic Kubernetes Service",
  "section" : "Provisioning on EKS",
  "url" : "https://docs.azul.com/optimizer-hub/installation/aws-eks",
  "link" : "https://docs.azul.com/optimizer-hub/installation/aws-eks#provisioning-on-eks",
  "content" : "Provisioning on EKS To provision Optimizer Hub on EKS: Install and configure the eksctl and aws command-line tools. If you don’t have permissions to set up networking components, have your administrator create the Virtual Public Cloud. Download opthub-install.zip. Navigate to the opthub-install/eks directory. You can pass the opthub_eks.yaml file to the eksctl to create the cluster. For more information, look at the eskctl config file schema. Replace the placeholders {your-cluster-name}, {your-region}, and {path-to-your-key} with the correct values. If you are working with an existing VPC and do not want eksctl to create one, uncomment the vpc section and replace {your-vpc} and {your-subnet} with the correct values. Apply the file with the following command:  eksctl create cluster -f opthub_eks.yaml This command takes several minutes to execute. Successful command output:  2021-08-20 20:09:53 [ℹ] eksctl version 0.60.0\n2021-08-20 20:09:53 [ℹ] using region eu-central-1\n2021-08-20 20:09:54 [ℹ] setting availability zones to [eu-central-1a eu-central-1b eu-central-1c]\n2021-08-20 20:09:54 [ℹ] subnets for eu-central-1a - public:192.168.0.0/19 private:192.168.96.0/19\n2021-08-20 20:09:54 [ℹ] subnets for eu-central-1b - public:192.168.32.0/19 private:192.168.128.0/19\n2021-08-20 20:09:54 [ℹ] subnets for eu-central-1c - public:192.168.64.0/19 private:192.168.160.0/19\n2021-08-20 20:09:54 [ℹ] nodegroup \"infra\" will use \"ami-05f67790af078876f\" [AmazonLinux2/1.19]\n2021-08-20 20:09:54 [ℹ] using SSH public key \"/Users/XXXXXXXX/.ssh/id_rsa.pub\" as \"eksctl-eks-opthub-cluster-nodegroup-infra-19:01:7b:fb:83:19:12:bb:17:59:40:37:22:dc:82:86\"\n2021-08-20 20:09:54 [ℹ] nodegroup \"opthubservice\" will use \"ami-05f67790af078876f\" [AmazonLinux2/1.19]\n2021-08-20 20:09:54 [ℹ] using SSH public key \"/Users/XXXXXXXX/.ssh/id_rsa.pub\" as \"eksctl-eks-opthub-cluster-nodegroup-opthubserver-19:01:7b:fb:83:19:12:bb:17:59:40:37:22:dc:82:86\"\n2021-08-20 20:09:54 [ℹ] nodegroup \"opthubcache\" will use \"ami-05f67790af078876f\" [AmazonLinux2/1.19]\n2021-08-20 20:09:54 [ℹ] using SSH public key \"/Users/XXXXXXXX/.ssh/id_rsa.pub\" as \"eksctl-eks-opthub-cluster-nodegroup-opthubcache-19:01:7b:fb:83:19:12:bb:17:59:40:37:22:dc:82:86\"\n2021-08-20 20:09:54 [ℹ] nodegroup \"opthubinfra\" will use \"ami-05f67790af078876f\" [AmazonLinux2/1.19]\n2021-08-20 20:09:54 [ℹ] using SSH public key \"/Users/XXXXXXXX/.ssh/id_rsa.pub\" as \"eksctl-eks-opthub-cluster-nodegroup-opthubinfra-19:01:7b:fb:83:19:12:bb:17:59:40:37:22:dc:82:86\"\n2021-08-20 20:09:55 [ℹ] using Kubernetes version 1.19\n2021-08-20 20:09:55 [ℹ] creating EKS cluster \"eks-opthub-cluster\" in \"eu-central-1\" region with un-managed nodes\n2021-08-20 20:09:55 [ℹ] 4 nodegroups (opthubcache, opthubinfra, opthubserver, infra) were included (based on the include/exclude rules)\n2021-08-20 20:09:55 [ℹ] will create a CloudFormation stack for cluster itself and 4 nodegroup stack(s)\n2021-08-20 20:09:55 [ℹ] will create a CloudFormation stack for cluster itself and 0 managed nodegroup stack(s)\n2021-08-20 20:09:55 [ℹ] if you encounter any issues, check CloudFormation console or try 'eksctl utils describe-stacks --region=eu-central-1 --cluster=eks-opthub-cluster'\n2021-08-20 20:09:55 [ℹ] CloudWatch logging will not be enabled for cluster \"eks-opthub-cluster\" in \"eu-central-1\"\n2021-08-20 20:09:55 [ℹ] you can enable it with 'eksctl utils update-cluster-logging --enable-types={SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)} --region=eu-central-1 --cluster=eks-opthub-cluster'\n2021-08-20 20:09:55 [ℹ] Kubernetes API endpoint access will use default of {publicAccess=true, privateAccess=false} for cluster \"eks-opthub-cluster\" in \"eu-central-1\"\n2021-08-20 20:09:55 [ℹ] 2 sequential tasks: { create cluster control plane \"eks-opthub-cluster\", 3 sequential sub-tasks: { wait for control plane to become ready, 1 task: { create addons },\n4 parallel sub-tasks: { create nodegroup \"infra\", create nodegroup \"opthubserver\", create nodegroup \"opthubcache\", create nodegroup \"opthubinfra\" } } }\n2021-08-20 20:09:55 [ℹ] building cluster stack \"eksctl-eks-opthub-cluster-cluster\"\n2021-08-20 20:09:55 [ℹ] deploying stack \"eksctl-eks-opthub-cluster-cluster\"\n2021-08-20 20:10:25 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-cluster\"\n2021-08-20 20:10:55 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-cluster\"\n2021-08-20 20:19:57 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-cluster\"\n...\n2021-08-20 20:20:58 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-cluster\"\n2021-08-20 20:25:06 [ℹ] building nodegroup stack \"eksctl-eks-opthub-cluster-nodegroup-opthubinfra\"\n2021-08-20 20:25:06 [ℹ] building nodegroup stack \"eksctl-eks-opthub-cluster-nodegroup-opthubcache\"\n2021-08-20 20:25:06 [ℹ] building nodegroup stack \"eksctl-eks-opthub-cluster-nodegroup-opthubserver\"\n2021-08-20 20:25:06 [ℹ] building nodegroup stack \"eksctl-eks-opthub-cluster-nodegroup-infra\"\n2021-08-20 20:25:07 [ℹ] deploying stack \"eksctl-eks-opthub-cluster-nodegroup-infra\"\n2021-08-20 20:25:07 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-nodegroup-infra\"\n2021-08-20 20:25:07 [ℹ] deploying stack \"eksctl-eks-opthub-cluster-nodegroup-opthubserver\"\n2021-08-20 20:25:07 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-nodegroup-opthubserver\"\n2021-08-20 20:25:07 [ℹ] deploying stack \"eksctl-eks-opthub-cluster-nodegroup-opthubcache\"\n2021-08-20 20:25:07 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-nodegroup-opthubcache\"\n2021-08-20 20:25:07 [ℹ] deploying stack \"eksctl-eks-opthub-cluster-nodegroup-opthubinfra\"\n2021-08-20 20:25:07 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-nodegroup-opthubinfra\"\n2021-08-20 20:25:23 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-nodegroup-infra\"\n2021-08-20 20:25:24 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-nodegroup-opthubcache\"\n...\n2021-08-20 20:32:16 [ℹ] waiting for CloudFormation stack \"eksctl-eks-opthub-cluster-nodegroup-opthubcache\"\n2021-08-20 20:32:16 [ℹ] waiting for the control plane availability...\n2021-08-20 20:32:16 [✔] saved kubeconfig as \"/Users/XXXXXXXX/.kube/config\"\n2021-08-20 20:32:16 [ℹ] no tasks\n2021-08-20 20:32:16 [✔] all EKS cluster resources for \"eks-opthub-cluster\" have been created\n2021-08-20 20:32:16 [ℹ] adding identity \"arn:aws:iam::912192438162:role/eksctl-eks-opthub-cluster-nodegroup-infra-NodeInstanceRole-9VFWHMM30SSV\" to auth ConfigMap\n2021-08-20 20:32:16 [ℹ] nodegroup \"infra\" has 0 node(s)\n2021-08-20 20:32:16 [ℹ] waiting for at least 1 node(s) to become ready in \"infra\"\n2021-08-20 20:32:49 [ℹ] nodegroup \"infra\" has 1 node(s)\n2021-08-20 20:32:49 [ℹ] node \"ip-192-168-90-183.eu-central-1.compute.internal\" is ready\n2021-08-20 20:32:49 [ℹ] adding identity \"arn:aws:iam::912192438162:role/eksctl-eks-opthub-cluster-nodegroup-opthubser-NodeInstanceRole-16JA2COTZHLWQ\" to auth ConfigMap\n2021-08-20 20:32:49 [ℹ] nodegroup \"opthubserver\" has 0 node(s)\n2021-08-20 20:32:49 [ℹ] waiting for at least 1 node(s) to become ready in \"opthubserver\"\n2021-08-20 20:33:49 [ℹ] nodegroup \"opthubserver\" has 1 node(s)\n2021-08-20 20:33:49 [ℹ] node \"ip-192-168-90-115.eu-central-1.compute.internal\" is ready\n2021-08-20 20:33:49 [ℹ] adding identity \"arn:aws:iam::912192438162:role/eksctl-eks-opthub-cluster-nodegroup-opthubcac-NodeInstanceRole-5KIIEOTU3ELU\" to auth ConfigMap\n2021-08-20 20:33:49 [ℹ] nodegroup \"opthubcache\" has 0 node(s)\n2021-08-20 20:33:49 [ℹ] waiting for at least 1 node(s) to become ready in \"opthubcache\"\n2021-08-20 20:34:21 [ℹ] nodegroup \"opthubcache\" has 1 node(s)\n2021-08-20 20:34:21 [ℹ] node \"ip-192-168-70-66.eu-central-1.compute.internal\" is ready\n2021-08-20 20:34:21 [ℹ] adding identity \"arn:aws:iam::912192438162:role/eksctl-eks-opthub-cluster-nodegroup-opthubinf-NodeInstanceRole-103G0W4M1XCZ7\" to auth ConfigMap\n2021-08-20 20:34:21 [ℹ] nodegroup \"opthubinfra\" has 0 node(s)\n2021-08-20 20:34:21 [ℹ] waiting for at least 1 node(s) to become ready in \"opthubinfra\"\n2021-08-20 20:35:37 [ℹ] nodegroup \"opthubinfra\" has 1 node(s)\n2021-08-20 20:35:37 [ℹ] node \"ip-192-168-46-62.eu-central-1.compute.internal\" is ready\n2021-08-20 20:37:39 [ℹ] kubectl command should work with \"/Users/XXXXXXXX/.kube/config\", try 'kubectl get nodes'\n2021-08-20 20:37:39 [✔] EKS cluster \"eks-opthub-cluster\" in \"eu-central-1\" region is ready Here is everything that opthub_eks.yaml creates in your AWS account: CloudFormation stacks for the main EKS cluster and each of the NodeGroups in the cluster. A Virtual Private Cloud called eksctl-{cluster-name}-cluster/VPC. If you chose to use an existing VPC, this is not created. You can explore the VPC and its related networking components in the AWS VPC console. The VPC has all of the required networking components configured: A set of three public subnets and three private subnets An Internet Gateway Route Tables for each of the subnets An Elastic IP Address for the cluster A NAT Gateway An EKS Cluster, including four nodegroups with one m5.2xlarge instance provisioned: infra - For running Grafana and Prometheus. opthubinfra - For running the Optimizer Hub infrastructure components. opthubcache - For running the Optimizer Hub cache. opthubserver - For running the Optimizer Hub compile broker settings. IAM artifacts for the Autoscaling Groups: Roles for the Autoscaler groups for the cluster and for each subnet Policies for the EKS autoscaler"
}, {
  "objectID" : "2bbda5b5-ac56-453f-9cf2-384bb52ecab1",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on AWS Elastic Kubernetes Service",
  "section" : "Setting Up an External Load Balancer",
  "url" : "https://docs.azul.com/optimizer-hub/installation/aws-eks",
  "link" : "https://docs.azul.com/optimizer-hub/installation/aws-eks#setting-up-an-external-load-balancer",
  "content" : "Setting Up an External Load Balancer If you need to connect to Optimizer Hub from outside the Kubernetes cluster, you need to setup up a load balancer in front of the gateway instances: To set up a load balancer, please follow AWS documentation regarding load balancer controller setup."
}, {
  "objectID" : "5c92cda5-6d5b-453f-92ff-85430b44700c",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on AWS Elastic Kubernetes Service",
  "section" : "Installing Optimizer Hub on EKS",
  "url" : "https://docs.azul.com/optimizer-hub/installation/aws-eks",
  "link" : "https://docs.azul.com/optimizer-hub/installation/aws-eks#installing-optimizer-hub-on-eks",
  "content" : "Installing Optimizer Hub on EKS Because opthub_eks.yaml file creates the nodegroups in the cluster, you have to pass in an additional configuration file when installing via Helm. The opthub_eks.yaml file is located in opthub-install/eks/values-eks.yaml and includes the nodegroup affinity settings and other settings EKS expects. To continue with the full installation instructions for Optimizer Hub, please refer to \"Installing Optimizer Hub on Kubernetes\". In case you don’t want to install the full Optimizer Hub, but only a part of the services, check \"Configuring the Active Optimizer Hub Services\". To install using the values-eks.yaml config file, run the following command:  helm install opthub opthub-helm/azul-opthub -n my-opthub -f values-eks.yaml -f values-override.yaml When adding multiple values files, remember the last one takes precedence."
}, {
  "objectID" : "cf976638-6049-49dd-a9f5-b140a9bf651d",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on AWS Elastic Kubernetes Service",
  "section" : "Configuring AWS S3 Storage",
  "url" : "https://docs.azul.com/optimizer-hub/installation/aws-eks",
  "link" : "https://docs.azul.com/optimizer-hub/installation/aws-eks#configuring-aws-s3-storage",
  "content" : "Configuring AWS S3 Storage You can configure your Optimizer Hub to use AWS S3 storage instead of the internal blob storage in the internal builtInStorage pod. When you use AWS S3 storage, the builtInStorage pod is not created at all. To configure AWS S3 storage, use the following configuration. Ensure that your Kubernetes nodes with opthub-compilebroker and opthub-gateway have RW permissions to S3 bucket(s), and the target buckets exist. Configuring Permissions A role with the below policy must be assigned to instances (EC2, EC2 ASG, Fargate, etc) for the opthub-compilebroker and opthub-gateway pods.  {\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::opthub-*\"\n      ],\n      \"Effect\": \"Allow\"\n    },\n    {\n      \"Action\": [\n        \"s3:*Object\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::opthub-*/*\"\n      ],\n      \"Effect\": \"Allow\"\n    }\n  ]\n} Configuring S3 Storage You can configure S3 storage by adding the following to values-override.yaml:  storage:\n  blobStorageService: s3 # available options: builtin-storage, azure-blob, s3\n  s3:\n    # opthub-* buckets examples: opthub-sandbox, opthub-demo\n    commonBucket: opthub-storage0 Storage for ReadyNow Orchestrator You can limit the usage of persistent storage by ReadyNow Orchestrator with the appropriate settings."
}, {
  "objectID" : "8db1ad7f-31b9-4927-bdfa-192d61a200af",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on AWS Elastic Kubernetes Service",
  "section" : "Configuring Permissions",
  "url" : "https://docs.azul.com/optimizer-hub/installation/aws-eks",
  "link" : "https://docs.azul.com/optimizer-hub/installation/aws-eks#configuring-permissions",
  "content" : "Configuring Permissions A role with the below policy must be assigned to instances (EC2, EC2 ASG, Fargate, etc) for the opthub-compilebroker and opthub-gateway pods.  {\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::opthub-*\"\n      ],\n      \"Effect\": \"Allow\"\n    },\n    {\n      \"Action\": [\n        \"s3:*Object\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::opthub-*/*\"\n      ],\n      \"Effect\": \"Allow\"\n    }\n  ]\n}"
}, {
  "objectID" : "ef39011b-585a-48ad-90c3-39705f1f1fb8",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on AWS Elastic Kubernetes Service",
  "section" : "Configuring S3 Storage",
  "url" : "https://docs.azul.com/optimizer-hub/installation/aws-eks",
  "link" : "https://docs.azul.com/optimizer-hub/installation/aws-eks#configuring-s3-storage",
  "content" : "Configuring S3 Storage You can configure S3 storage by adding the following to values-override.yaml:  storage:\n  blobStorageService: s3 # available options: builtin-storage, azure-blob, s3\n  s3:\n    # opthub-* buckets examples: opthub-sandbox, opthub-demo\n    commonBucket: opthub-storage0"
}, {
  "objectID" : "0986eac9-6461-4219-b15b-c6bd86d6c74a",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on AWS Elastic Kubernetes Service",
  "section" : "Storage for ReadyNow Orchestrator",
  "url" : "https://docs.azul.com/optimizer-hub/installation/aws-eks",
  "link" : "https://docs.azul.com/optimizer-hub/installation/aws-eks#storage-for-readynow-orchestrator",
  "content" : "Storage for ReadyNow Orchestrator You can limit the usage of persistent storage by ReadyNow Orchestrator with the appropriate settings."
}, {
  "objectID" : "359917ed-5950-448f-9fc8-a46a506c4929",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on AWS Elastic Kubernetes Service",
  "section" : "Cleaning Up",
  "url" : "https://docs.azul.com/optimizer-hub/installation/aws-eks",
  "link" : "https://docs.azul.com/optimizer-hub/installation/aws-eks#cleaning-up",
  "content" : "Cleaning Up Run the following command:  eksctl delete cluster -f opthub_eks.yaml"
}, {
  "objectID" : "2ecd68e7-a05d-4d0d-9f14-113241c0805e",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Microsoft Azure",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/installation/azure",
  "link" : "https://docs.azul.com/optimizer-hub/installation/azure",
  "content" : "To install Optimizer Hub on Azure, follow the general Kubernetes instructions. This document provides additional configurations specific for Azure."
}, {
  "objectID" : "3e9dbf36-2552-4924-a053-90b4a923b6dc",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Microsoft Azure",
  "section" : "Configuring Azure Blob Storage",
  "url" : "https://docs.azul.com/optimizer-hub/installation/azure",
  "link" : "https://docs.azul.com/optimizer-hub/installation/azure#configuring-azure-blob-storage",
  "content" : "Configuring Azure Blob Storage Following Helm values activate Azure Blob Storage. Currently, the default configuration uses MinIO which is deployed as part of Optimizer Hub.  storage:\n  blobStorageService: azure-blob\n  azureBlob:\n    endpoint: https://{yourendpoint}.blob.core.windows.net\n    container: {your-container}\n    authMethod: {method} # sas-token, connection-string, or default-credentials When using authMethod:sas-token:  secrets:\n  azure:\n    blobStorage:\n      sasToken: \"{your-token}\" When using authMethod:connection-string:  secrets:\n  azure:\n    blobStorage:\n      connectionString: \"{your-connection-string}\" Storage for ReadyNow Orchestrator You can limit the usage of persistent storage by ReadyNow Orchestrator with the appropriate settings."
}, {
  "objectID" : "9543fe66-316f-4582-8294-a3a5ef9b3342",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Microsoft Azure",
  "section" : "Storage for ReadyNow Orchestrator",
  "url" : "https://docs.azul.com/optimizer-hub/installation/azure",
  "link" : "https://docs.azul.com/optimizer-hub/installation/azure#storage-for-readynow-orchestrator",
  "content" : "Storage for ReadyNow Orchestrator You can limit the usage of persistent storage by ReadyNow Orchestrator with the appropriate settings."
}, {
  "objectID" : "29803884-6fa3-4d42-9038-08b8e4383a96",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Google Cloud",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/installation/google-cloud",
  "link" : "https://docs.azul.com/optimizer-hub/installation/google-cloud",
  "content" : "To install Optimizer Hub on Google Cloud, please follow the instructions on Installing Optimizer Hub on Kubernetes. If you want to install Optimizer Hub on Google Cloud with S3 compatibility mode, instead of the builtin storage pod, you will need the following additional settings."
}, {
  "objectID" : "e85bba4a-0814-4c9c-bbf4-6c08e9b7045a",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Google Cloud",
  "section" : "Configuring Storage",
  "url" : "https://docs.azul.com/optimizer-hub/installation/google-cloud",
  "link" : "https://docs.azul.com/optimizer-hub/installation/google-cloud#configuring-storage",
  "content" : "Configuring Storage Use the S3 compatible storage and specify a bucket name in your values-override.yaml:  storage:\n  blobStorageService: s3\n  s3:\n    commonBucket: opthub-storage0"
}, {
  "objectID" : "f7f49704-0d0a-4dd8-bb26-7f19f5103ae6",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Google Cloud",
  "section" : "Configuring Compile Broker",
  "url" : "https://docs.azul.com/optimizer-hub/installation/google-cloud",
  "link" : "https://docs.azul.com/optimizer-hub/installation/google-cloud#configuring-compile-broker",
  "content" : "Configuring Compile Broker Add the following extraArgumentsMap section under compileBroker in your values-override.yaml:  compileBroker:\n  extraArgumentsMap:\n    \"quarkus.s3.endpoint-override\": \"https://storage.googleapis.com\"\n    \"quarkus.s3.aws.credentials.type\": static\n    \"quarkus.s3.aws.credentials.static-provider.access-key-id\": \"{your access key}\"\n    \"quarkus.s3.aws.credentials.static-provider.secret-access-key\": \"{your secret key}\""
}, {
  "objectID" : "f62bd86e-e448-41c7-a315-d40754baafdc",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Google Cloud",
  "section" : "Configuring Gateway",
  "url" : "https://docs.azul.com/optimizer-hub/installation/google-cloud",
  "link" : "https://docs.azul.com/optimizer-hub/installation/google-cloud#configuring-gateway",
  "content" : "Configuring Gateway Add the following extraArgumentsMap section gateway in your values-override.yaml:  gateway:\n  extraArgumentsMap:\n    \"quarkus.s3.endpoint-override\": \"https://storage.googleapis.com\"\n    \"quarkus.s3.aws.credentials.type\": static\n    \"quarkus.s3.aws.credentials.static-provider.access-key-id\": \"{your access key}\"\n    \"quarkus.s3.aws.credentials.static-provider.secret-access-key\": \"{your secret key}\""
}, {
  "objectID" : "91a24bf4-0a14-49f7-9c4d-b144a6ae8178",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Google Cloud",
  "section" : "Configuring Cache",
  "url" : "https://docs.azul.com/optimizer-hub/installation/google-cloud",
  "link" : "https://docs.azul.com/optimizer-hub/installation/google-cloud#configuring-cache",
  "content" : "Configuring Cache Add the following extraArgumentsMap section cache in your values-override.yaml:  cache:\n  extraArgumentsMap:\n    \"quarkus.s3.endpoint-override\": \"https://storage.googleapis.com\"\n    \"quarkus.s3.aws.credentials.type\": static\n    \"quarkus.s3.aws.credentials.static-provider.access-key-id\": \"{your access key}\"\n    \"quarkus.s3.aws.credentials.static-provider.secret-access-key\": \"{your secret key}\""
}, {
  "objectID" : "292abcbe-ece3-4655-a250-bd4542f6b16e",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Minikube",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/installation/minikube",
  "link" : "https://docs.azul.com/optimizer-hub/installation/minikube",
  "content" : "Minikube can be used for testing and evaluating Optimizer Hub. You should run Optimizer Hub on minikube only for evaluation purposes. Make sure your minikube meets the 18 vCore minimum for running Optimizer Hub. Although minikube can run on multiple platforms, Optimizer Hub is only available for the x64 platform, so not on macOS with M1/2."
}, {
  "objectID" : "1514f631-2db6-468f-baa6-f3a43993a92a",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Minikube",
  "section" : "Installing Minikube",
  "url" : "https://docs.azul.com/optimizer-hub/installation/minikube",
  "link" : "https://docs.azul.com/optimizer-hub/installation/minikube#installing-minikube",
  "content" : "Installing Minikube Install minikube for your platform following this installation guide."
}, {
  "objectID" : "12aadc32-31ef-44fd-bfc3-04c798b95925",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Minikube",
  "section" : "Installing Optimizer Hub",
  "url" : "https://docs.azul.com/optimizer-hub/installation/minikube",
  "link" : "https://docs.azul.com/optimizer-hub/installation/minikube#installing-optimizer-hub",
  "content" : "Installing Optimizer Hub Optimizer Hub uses Helm as the deployment manifest package manager. There is no need to manually edit any Kubernetes deployment manifests. Make sure your Helm version is v3.8.0 or newer. Add the Azul Helm repository to your Helm environment:  helm repo add opthub-helm https://azulsystems.github.io/opthub-helm-charts/\nhelm repo update Create a namespace (i.e. my-opthub) for Optimizer Hub.  minikube kubectl -- create namespace my-opthub Create a configuration file values-minikube.yaml. An example file is available on GitHub in the Azul \"opthub-helm-charts\" project, to disable all resource definitions. As the supplied values file for minikube resets pod resources to null, we can simply add only the persistent volume section:  db:\n  resources:\n  persistentDataVolume:\n    enabled: true You can also set the volume size if the default 200Gi is too big for local testing:  db:\n  resources:\n  persistentDataVolume:\n    enabled: true\n    size: \"50Gi\" Install using Helm, passing in the values-minikube.yaml. In case you don’t want to install the full Optimizer Hub, but only a part of the services, first check \"Configuring the Active Optimizer Hub Services\".  helm install opthub opthub-helm/azul-opthub -n my-opthub -f values-minikube.yaml The command should produce output similar to this:  NAME: opthub\nLAST DEPLOYED: Mon Jan 30 14:35:29 2023\nNAMESPACE: my-opthub\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None Verify that all started pods are ready:  minikube kubectl -- get all -n my-opthub"
}, {
  "objectID" : "acc4803f-2884-4dc9-be8a-48d3732211f0",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Installing Optimizer Hub on Minikube",
  "section" : "Uninstalling Optimizer Hub from Minikube",
  "url" : "https://docs.azul.com/optimizer-hub/installation/minikube",
  "link" : "https://docs.azul.com/optimizer-hub/installation/minikube#uninstalling-optimizer-hub-from-minikube",
  "content" : "Uninstalling Optimizer Hub from Minikube Optimizer Hub can be removed from minikube using helm, after which the namespace can also be deleted.  helm uninstall opthub -n my-opthub\nminikube kubectl -- delete namespace my-opthub"
}, {
  "objectID" : "e1b4968f-1381-4926-ad0c-c48b1c8fc49f",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Upgrading Optimizer Hub",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/installation/upgrade",
  "link" : "https://docs.azul.com/optimizer-hub/installation/upgrade",
  "content" : "Upgrade an existing Optimizer Hub installation to a newer version with the following commands:  helm repo update\nhelm upgrade opthub opthub-helm/azul-opthub -n my-opthub -f values-override.yaml\nkubectl get all -n my-opthub When upgrading an existing Optimizer Hub installation, make sure to validate your values-override.yaml file, as parameters might have changed."
}, {
  "objectID" : "77ab37f1-dd12-4047-9737-8a0e7ac6315c",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Upgrading Optimizer Hub",
  "section" : "Changed Values in 1.8",
  "url" : "https://docs.azul.com/optimizer-hub/installation/upgrade",
  "link" : "https://docs.azul.com/optimizer-hub/installation/upgrade#changed-values-in-1-8",
  "content" : "Changed Values in 1.8 In Optimizer Hub 1.8, all major artifacts and command line switches use the updated branding. This includes, but is not limited to: Command-line JVM options to configure Cloud Native Compiler and ReadyNow Orchestrator. Helm repository locations, names, and parameter names: github.com/AzulSystems/opthub-helm-charts. REST API URLs. Note If you are using release 1.7 and earlier, all of the previous spellings of artifacts still work. Additionally, all of the pre-1.8 command-line arguments will continue to work for a period of one year from the release of 1.8."
}, {
  "objectID" : "55e183ab-db8e-4784-82d4-705e2f34605c",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Upgrading Optimizer Hub",
  "section" : "Upgrade From Specific Versions",
  "url" : "https://docs.azul.com/optimizer-hub/installation/upgrade",
  "link" : "https://docs.azul.com/optimizer-hub/installation/upgrade#upgrade-from-specific-versions",
  "content" : "Upgrade From Specific Versions From Version 1.7.0 If you are upgrading from versions prior to 1.7.0, and you are using a custom values.yaml file with parameters for the storage component, rename the yaml block from storage to builtinStorage. For example: Before  storage:\n  persistentDataVolume:\n    enabled: true\n    size: \"200Gi\"\n    storageClassName: \"\" After  builtinStorage:\n  persistentDataVolume:\n    enabled: true\n    size: \"200Gi\"\n    storageClassName: \"\" From Version 1.6.1 If you are upgrading from version 1.6.1 with persistent storage, follow these steps before running the helm upgrade: Connect into the storage pod:  kubectl exec --stdin --tty storage-0 -- /bin/sh Inside the pod run the following command to change permissions:  chown -R 10001 /data && chmod u+rxw /data After the chmod command is completed, you can exit the pod shell with ctrl-d and continue with the helm upgrade."
}, {
  "objectID" : "2cc61ae9-af02-4daf-9231-f4377c5a12c2",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Upgrading Optimizer Hub",
  "section" : "From Version 1.7.0",
  "url" : "https://docs.azul.com/optimizer-hub/installation/upgrade",
  "link" : "https://docs.azul.com/optimizer-hub/installation/upgrade#from-version-1-7-0",
  "content" : "From Version 1.7.0 If you are upgrading from versions prior to 1.7.0, and you are using a custom values.yaml file with parameters for the storage component, rename the yaml block from storage to builtinStorage. For example: Before  storage:\n  persistentDataVolume:\n    enabled: true\n    size: \"200Gi\"\n    storageClassName: \"\" After  builtinStorage:\n  persistentDataVolume:\n    enabled: true\n    size: \"200Gi\"\n    storageClassName: \"\""
}, {
  "objectID" : "726fe61c-c468-4fe3-892e-95411228f18b",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Upgrading Optimizer Hub",
  "section" : "From Version 1.6.1",
  "url" : "https://docs.azul.com/optimizer-hub/installation/upgrade",
  "link" : "https://docs.azul.com/optimizer-hub/installation/upgrade#from-version-1-6-1",
  "content" : "From Version 1.6.1 If you are upgrading from version 1.6.1 with persistent storage, follow these steps before running the helm upgrade: Connect into the storage pod:  kubectl exec --stdin --tty storage-0 -- /bin/sh Inside the pod run the following command to change permissions:  chown -R 10001 /data && chmod u+rxw /data After the chmod command is completed, you can exit the pod shell with ctrl-d and continue with the helm upgrade."
}, {
  "objectID" : "38f3df28-bd18-4850-a217-1f21afef3111",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Generic Defaults",
  "section" : "Database Parameters",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults#db-parameters",
  "content" : "Database Parameters Option Description Default db.enabled Define wether the database node is installed. Is set to false in ReadyNow Orchestrator only mode, using values-disable-compiler.yaml true"
}, {
  "objectID" : "a9bc951e-e185-4503-ac3d-54c3ab6138dc",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Generic Defaults",
  "section" : "Database Schema Parameters",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults#db-scheme-parameters",
  "content" : "Database Schema Parameters Option Description Default dbschema.auto-recreate.enabled If enabled, will automatically recover from database pod restarts with loss of schema. If you have a database and this database is not using a persistence volume, this setting must be set to true, otherwise you will need manual interaction if the pod is restored. false"
}, {
  "objectID" : "21f7c320-d410-4524-8cbd-c07b777ef769",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Generic Defaults",
  "section" : "Management Gateway Parameters",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults#management-gateway-parameters",
  "content" : "Management Gateway Parameters Option Description Default mgmtGateway.enabled Define if the Management Gateway needs to be enabled to expose the REST APIs for ReadyNow Orchestrator and/or Cross-Region Sync. false mgmtGateway.service.httpEndpoint.port The port used by the Management Gateway. 8080"
}, {
  "objectID" : "0f324f8e-a840-4b71-86c7-2b233fc64bb4",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Generic Defaults",
  "section" : "Cross-Region Sync Parameters",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults#cross-region-sync-parameters",
  "content" : "Cross-Region Sync Parameters Option Description Default synchronization.enabled Define if Cross-Region Sync needs to be enabled. You must also enable the Management Gateway for this setting to become effective. true synchronization.peers A comma separated list of peer Management Gateway URLs from other Optimizer Hub instances to include in the syncing process. synchronization.initialDelay Initial delay for the periodic synchronization task. PT180s synchronization.period Defines a periodicity of a synchronization with the specified Optimizer Hub peers. PT30s"
}, {
  "objectID" : "8c70c400-3999-4913-9b40-ec5a536f2454",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Generic Defaults",
  "section" : "Simple Sizing Parameters",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults#simple-sizing-parameters",
  "content" : "Simple Sizing Parameters See \"Sizing and Scaling your Optimizer Hub Installation > Configuring Capacity\"."
}, {
  "objectID" : "90087619-9a32-4b84-9514-76933da00468",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Generic Defaults",
  "section" : "SSL Parameters",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults#ssl-parameters",
  "content" : "SSL Parameters See \"Configuring Optimizer Hub with SSL Authentication\"."
}, {
  "objectID" : "71df2297-e5e0-4e38-bf60-0bf78a0b37a9",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub Generic Defaults",
  "section" : "Storage Parameters",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/generic-defaults#storage-parameters",
  "content" : "Storage Parameters Storage parameters depend on the platform of your deployment: Kubernetes AWS EKS S3 Azure Blob"
}, {
  "objectID" : "16e9ddfc-d5c7-49db-bb3a-2e83871e7663",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring the Active Optimizer Hub Services",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/active-services",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/active-services",
  "content" : "Optimizer Hub can run in different modes: Full: both the Cloud Native Compiler and ReadyNow Orchestrator are available. This is the default configuration. ReadyNow only: only ReadyNow Orchestrator is available. Use the installation instructions below."
}, {
  "objectID" : "e0d437b5-a7d7-4065-8740-b2f6c02ffe0c",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring the Active Optimizer Hub Services",
  "section" : "Install Only ReadyNow Orchestrator",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/active-services",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/active-services#install-only-readynow-orchestrator",
  "content" : "Install Only ReadyNow Orchestrator To install with only ReadyNow Orchestrator, pass in values-disable-compiler.yaml, together with your values-override.yaml:  helm install opthub opthub-helm/azul-opthub \\\n  -n my-opthub \\\n  -f values-override.yaml \\\n  -f values-disable-compiler.yaml"
}, {
  "objectID" : "cc56a7ed-1942-4514-a65c-3781df782589",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring the Active Optimizer Hub Services",
  "section" : "Disabling Cloud Native Compiler on a Full Optimizer Hub Installation",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/active-services",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/active-services#disabling-cloud-native-compiler-on-a-full-optimizer-hub-installation",
  "content" : "Disabling Cloud Native Compiler on a Full Optimizer Hub Installation If you installed a full installation of full Optimizer Hub with Cloud Native Compiler and ReadyNow Orchestrator, you can still disable Cloud Native Compiler by: Reinstalling as specified above. Or disable the Cloud Native Compiler globally using the compilations.parallelism.limitPerVm setting, with the value 0, to override the default value of 500."
}, {
  "objectID" : "86641882-75bd-4ddd-b94e-3b607c26dbf2",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring the Active Optimizer Hub Services",
  "section" : "Enabling the Management Gateway",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/active-services",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/active-services#enabling-the-management-gateway",
  "content" : "Enabling the Management Gateway The Management Gateway enables two pieces of functionality: Access to REST APIs for managing ReadyNow profiles Cross-region synchronization of ReadyNow Profiles To enable the Management Gateway, set mgmtGateway.enabled to true in value-override.yaml, see Management Gateway Parameters for more info."
}, {
  "objectID" : "527757af-2456-491d-a39f-c313392f94ed",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring Optimizer Hub Host and Port",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/ports",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/ports",
  "content" : "As an Optimizer Hub administrator, you must provide users the host and ports for connecting to the service. Customers should use the host and port name in the OptHubHost JVM parameter."
}, {
  "objectID" : "53e37eb7-df5f-424d-bbf5-c6ae52109abf",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring Optimizer Hub Host and Port",
  "section" : "Determining the Optimizer Hub Endpoint",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/ports",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/ports#determining-the-optimizer-hub-endpoint",
  "content" : "Determining the Optimizer Hub Endpoint Use the IP address of the Optimizer Hub gateway service as the connection endpoint for your JVMs. Using an External Load Balancer It is strongly recommended to use an external load balancer. If you correctly defined the load-balancer in values-override.yaml as described in Installing Optimizer Hub, you can discover the external IP of the service using the following command:  $ kubectl describe service gateway -n my-opthub | grep 'LoadBalancer Ingress:'\nLoadBalancer Ingress:     internal-add1ff3e1591e4f93a49af3523b68e3b-1321158844.us-west-2.elb.amazonaws.com JVM customers then connect using the following command:  java -XX:OptHubHost=internal-add1ff3e1591e4f93a49af3523b68e3b-1321158844.us-west-2.elb.amazonaws.com -jar my-app.jar Connecting Without an External Load Balancer If you did not set up an external load balancer, you can find the endpoint using the following steps: Run the following command:  kubectl -n my-opthub get services Look for the gateway service and note the ports corresponding to port 50051 inside the container. This is the port to use for connecting VMs to this Optimizer Hub cluster.  service/gateway NodePort    10.233.15.55    <none>  8080:31951/TCP,50051:30926/TCP  52d In this example the ports is 30926. Note Only the internal ports 8080 and 50051 in Optimizer Hub are fixed. The port in each setup is a random value. You need to use this lookup to find the port of your Optimizer Hub instance. Run the kubectl get nodes command and note the IP address or name of any node. Concatenate node IP with service ports to get something like 10.22.20.131:30926. Do not prefix it with http://. JVM customers set -XX:OptHubHost=host:port flag to the port mapped to 50051.  java -XX:OptHubHost=10.22.20.131:30926 -jar my-app.jar"
}, {
  "objectID" : "48a2b9e5-67a9-4605-a305-622b1171433c",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring Optimizer Hub Host and Port",
  "section" : "Using an External Load Balancer",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/ports",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/ports#using-an-external-load-balancer",
  "content" : "Using an External Load Balancer It is strongly recommended to use an external load balancer. If you correctly defined the load-balancer in values-override.yaml as described in Installing Optimizer Hub, you can discover the external IP of the service using the following command:  $ kubectl describe service gateway -n my-opthub | grep 'LoadBalancer Ingress:'\nLoadBalancer Ingress:     internal-add1ff3e1591e4f93a49af3523b68e3b-1321158844.us-west-2.elb.amazonaws.com JVM customers then connect using the following command:  java -XX:OptHubHost=internal-add1ff3e1591e4f93a49af3523b68e3b-1321158844.us-west-2.elb.amazonaws.com -jar my-app.jar"
}, {
  "objectID" : "c6bd932b-caf5-4927-b578-81f4ed861ed7",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring Optimizer Hub Host and Port",
  "section" : "Connecting Without an External Load Balancer",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/ports",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/ports#connecting-without-an-external-load-balancer",
  "content" : "Connecting Without an External Load Balancer If you did not set up an external load balancer, you can find the endpoint using the following steps: Run the following command:  kubectl -n my-opthub get services Look for the gateway service and note the ports corresponding to port 50051 inside the container. This is the port to use for connecting VMs to this Optimizer Hub cluster.  service/gateway NodePort    10.233.15.55    <none>  8080:31951/TCP,50051:30926/TCP  52d In this example the ports is 30926. Note Only the internal ports 8080 and 50051 in Optimizer Hub are fixed. The port in each setup is a random value. You need to use this lookup to find the port of your Optimizer Hub instance. Run the kubectl get nodes command and note the IP address or name of any node. Concatenate node IP with service ports to get something like 10.22.20.131:30926. Do not prefix it with http://. JVM customers set -XX:OptHubHost=host:port flag to the port mapped to 50051.  java -XX:OptHubHost=10.22.20.131:30926 -jar my-app.jar"
}, {
  "objectID" : "8700d047-bdcf-40f7-a32c-b526aed7b6bf",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring Optimizer Hub Host and Port",
  "section" : "Specifying a Custom Compiler Engine Upload Port",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/ports",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/ports#custom-port",
  "content" : "Specifying a Custom Compiler Engine Upload Port Cloud Native Compiler uses compiler engines to provide instructions for working with a specific version of the JVM. These compiler engines are not shipped with Cloud Native Compiler. When attempting to use Cloud Native Compiler for compilation, the JVM checks if the right compiler engine is present and, if not, automatically uploads it to Cloud Native Compiler. If your Optimizer Hub instance is using default 8080 HTML ports, or you are fronting it with a load balancer, then there is nothing the user needs to do to configure uploads correctly. If you are connecting without a loadbalancer and are not using the default 8080 ports, follow the process described above to provide the JVM user with the host and port mapped to 8080. The JVM user must specify this host/port in the -XX:CNCEngineUploadAddress=host:port. In the above example, the host/port combination is 10.22.20.131:30926."
}, {
  "objectID" : "00f1a983-beff-4ca3-9fc2-8009c59602b1",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring gRPC Proxy",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/grpc-proxy",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/grpc-proxy",
  "content" : "Optimizer Hub comes with Envoy as the default gRPC proxy for optimal session rebalancing. In case you want to disable Envoy in Optimizer Hub and use your own instance, follow this guideline."
}, {
  "objectID" : "e00168d6-7c1d-4316-88e4-9e4119c8062d",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring gRPC Proxy",
  "section" : "Disabling Envoy in Optimizer Hub",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/grpc-proxy",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/grpc-proxy#disabling-envoy-in-optimizer-hub",
  "content" : "Disabling Envoy in Optimizer Hub Add the following to values-override.yaml:  $ gwProxy.enabled=false"
}, {
  "objectID" : "da7707a5-a0c5-44c1-ba97-729cc3d6d8ab",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring Optimizer Hub with SSL Authentication",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/ssl",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/ssl",
  "content" : "While you can use Optimizer Hub without SSL authentication for development and evaluation, it is highly recommended that you run your production Optimizer Hub with SSL authentication. To enable SSL authentication on your Optimizer Hub: Establish your SSL certificate. In order to enable SSL encryption of the communication between the JVM and Optimizer Hub, you will need to provide a certificate and a corresponding private key in the pem format. Note The common name field in the certificate must match the name of the Optimizer Hub service as provided to client JVMs via the —XX:OptHubHost flag. Otherwise there may be issues when connecting. Enable SSL in your values-overrride.yaml file:  ssl:\n  enabled: true Add your certificate and private key. This can be done in several ways: The most secure way to add certificates is using a separate chain that manages your certificate. You can then point the deployment to a custom secret in the installation namespace. Such a secret needs to have keys named cert.pem and key.pem.  ssl:\n  secretName: \"my-custom-secret\" You can add the certificate and private keys directly to the values.yaml as values. This is the simplest way to run quick experiments in a controlled environment, especially when you’re installing from the Helm repository. We do not recommend this approach in production as it embeds private security credentials in a config file:  ssl:\n  value:\n    cert: |-\n      -----BEGIN CERTIFICATE-----\n      ...\n      -----END CERTIFICATE-----\n    key: |-\n      -----BEGIN PRIVATE KEY-----\n      ...\n      -----END PRIVATE KEY----- If you downloaded and unpacked the Helm chart to a local directory, you can just place files named cert.pem and key.pem into the root directory of your Helm chart. Perform Helm installation as shown in the general installation guide."
}, {
  "objectID" : "861c5794-6bea-43c2-8d9c-30c3df7b31f9",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring Optimizer Hub with SSL Authentication",
  "section" : "Running Azul Zulu Prime JDK Clients with SSL",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/ssl",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/ssl#running-azul-zulu-prime-jdk-clients-with-ssl",
  "content" : "Running Azul Zulu Prime JDK Clients with SSL By default, the Azul Zulu Prime JDK connects to Optimizer Hub using SSL. If you installed without enabling SSL, you must use the -XX:-OptHubUseSSL flag to instruct the Azul Zulu Prime JDK to allow unsecured connections to Optimizer Hub. Note Before version 1.8.0 the flag was called -XX:+/-CNCInsecure. Because of this change, you will need to review your settings. If you attempt to connect to a Optimizer Hub that is running without SSL and do not specify the -XX:-OptHubUseSSL flag, you get the following error:  E1011 13:16:23.198074100      29 ssl_transport_security.cc:1446]\nHandshake failed with fatal error SSL_ERROR_SSL:\nerror:1408F10B:SSL routines:ssl3_get_record:wrong version number. To connect to Optimizer Hub using SSL, make sure the service certificate is trusted by the client server where you run Azul Zulu Prime JDK. This can be achieved by having the certificate signed by a publicly trusted certificate authority. If you have an internal CA trusted within the company infrastructure, make sure it is trusted. The exact process depends on your OS distribution. Follow the instructions for your OS distribution to register the certificate on your client server. For example, on Ubuntu-based distributions you run the following command:  sudo openssl x509 -in {path to cert.pem} -inform PEM -out /usr/local/share/ca-certificates/cert.crt\nsudo update-ca-certificates Alternatively, you can explicitly instruct Azul Zulu Prime JDK to use and trust a specified certificate on the filesystem by using the -XX:OptHubSSLRootsPath={path to cert.pem} flag. If certificate validation fails, your .pem file is missing or does not match the certificate that you uploaded to Optimizer Hub, you get the following error:  [1.856s][info][concomp] [gRPCEvent] read error!\n[1.856s][info][concomp] [gRPC processing] BidiStreamWrapper is dying, finishing stream 0x7fbec00180f0 with status: failed to connect to all addresses (14)"
}, {
  "objectID" : "fa6fa7fe-d23d-4aac-a53e-3558f95caa95",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring ReadyNow Orchestrator",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator",
  "content" : "When you use ReadyNow Orchestrator, JVMs all write profile log candidates to unique profile names on the service. ReadyNow Orchestrator gathers all of the candidates for a profile name and decides which is th best candidate to serve to JVM clients requesting that profile name. When considering what settings are set on the client versus on the service: Individual JVMs decide when ReadyNow Orchestrator should consider their profile log is a suitable candidate for sharing with other JVMs. They can also override server-side defaults for profile log nomination candidates and maximum profile log size. ReadyNow Orchestrator also controls the rules for where to store ReadyNow profile logs, when to clean up old logs, and service-wide defaults for profile log candidate nomination and maximum profile log size."
}, {
  "objectID" : "853e9638-0d3c-4065-af67-4fff51598d87",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring ReadyNow Orchestrator",
  "section" : "Duration Configuration",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator#duration-configuration",
  "content" : "Duration Configuration When you need to specify the duration in time a process takes, use the PnDTnHnMn.nS format, where n is the relevant days, hours, minutes or seconds part of the duration."
}, {
  "objectID" : "205e90cf-bab2-4305-a8ce-6b8ecfa55325",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring ReadyNow Orchestrator",
  "section" : "Configuring Clean Up of Old Profile Logs",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator#configuring-clean-up-of-old-profile-logs",
  "content" : "Configuring Clean Up of Old Profile Logs ReadyNow Orchestrator performs automatic cleanup of unused profile logs in order to fit collected data in the configured storage. When the data size in your storage exceeds a threshold, ReadyNow Orchestrator deletes old profile logs, thus guaranteeing that a promoted profile log is available for all profile names. The Management Gateway is required, in order for cleanup to be enabled, see Management Gateway Parameters. You can also configure ReadyNow Orchestrator to delete unused profile names completely after a given duration using the readyNowOrchestrator.cleaner.keepUnrequestedProfileNamesFor property in your values-override.yaml. For example, to keep unused profiles for 5 days, use the following:  readyNowOrchestrator.cleaner.keepUnrequestedProfileNamesFor=P5D ReadyNow Orchestrator triggers cleanup when you have used around 60% of the available space in your storage. If you are using a persistent volume to back up your storage, ReadyNow Orchestrator calculates the threshold for triggering clean up automatically. If you are using S3 or Azure Blob Storage, there is no reliable way for ReadyNow Orchestrator to calculate the size of the blob storage. You must therefore specify the size using the readyNowOrchestrator.cleaner.externalPersistentStorageSoftLimit property, which by default, is 10Gb. Note that depending on your usage, ReadyNow Orchestrator’s clean-up mechanism may not be able to keep the actual size of your stored profiles below the size of your storage. When you reach 90% usage, a warning is printed in the log of the gateway service. If your storage fills up completely, JVMs attempting to write to ReadyNow Orchestrator receive an error."
}, {
  "objectID" : "8fc8f336-8500-4781-a953-4e47f6045490",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring ReadyNow Orchestrator",
  "section" : "Configuring Cross-Region Synchronization of Profiles",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator#cross-region-sync",
  "content" : "Configuring Cross-Region Synchronization of Profiles When you deploy a separate instance of Optimizer Hub in each region, you can configure Optimizer Hub to synchronize profile names between Optimizer Hub instances so that each instance contains at least one promoted profile for each profile name. For example, when deploying a new version of your program, you may first do a canary run in one of your regions. This canary run populates the first generation of the profile for the new version’s profile name. Upon success, you want to launch a full fleet update in your other regions without doing a canary run in each region. By enabling cross-region synchronization, the profile that you wrote in the first region is available when you launch your fleet restarts in other regions. To enable cross-region synchronization of profiles: Enable the Management Gateway component by setting the following values in values-override.yaml: Set mgmtGateway.enabled to true If necessary, assign a different port than the default 8080 using mgmtGateway.service.httpEndpoint.port Define the Optimizer Hub instances that you want to synchronize by entering a comma-separated list of URLs in synchronization.peers. If necessary, adjust the number of profile generations that Optimizer Hub synchronizes. By default, Optimizer Hub synchronizes the first two generations of the profile. See Optimizer Hub Generic Defaults > Cross-Region Sync for more information about the configuration options."
}, {
  "objectID" : "d26362c8-4f5f-482a-ab71-c07bcdd46d4d",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Configuring ReadyNow Orchestrator",
  "section" : "ReadyNow Orchestrator Defaults",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/readynow-orchestrator#readynow-orchestrator-defaults",
  "content" : "ReadyNow Orchestrator Defaults Optimizer Hub admins can set the following global defaults for ReadyNow profiles in values-override.yaml: Option Description Default readyNowOrchestrator.debugInfoHistoryLength Limit of rolling profile history entries 100 readyNowOrchestrator.cache.enabled Enabling of caching the chunk content on the gateway true readyNowOrchestrator.cache.maxSizeBytes The fixed size of chunk content cache on the gateway 500000000 readyNowOrchestrator.completedAfter Time required after the last profile update, after which the profile is considered completed and updates are no longer possible, duration specified in format PnDTnHnMn.nS. PT24H readyNowOrchestrator.producers.maxConcurrentRecordings The number of concurrent copies of a specific generation ReadyNow Orchestrator will accept before it tells other JVMs trying to write the same generation of the same profile name to stop 5 readyNowOrchestrator.producers.maxPromotableGeneration Maximum number of generations ReadyNow Orchestrator will accept for a profile name. Note that here is no 'unlimited' value available 3 readyNowOrchestrator.producers.maxProfileSize Limit on the input profile size, in bytes. No limit by default 0 readyNowOrchestrator.cleaner.enabled Enabling of automatic repository clean-up true readyNowOrchestrator.cleaner.externalPersistentStorageSoftLimit When your storage is backed by azure-blob or s3 storage, this determines the threshold for the blob data usage, at which ReadyNow Orchestrator initiates its cleanup process. When your storage is backed by a persistent storage volume, this threshold is calculated automatically. 10Gi readyNowOrchestrator.cleaner.keepUnrequestedProfileNamesFor Time limit after which the profile name will be removed if it was not requested within the given duration specified in format PnDTnHnMn.nS. By default, no limit is defined. 0 readyNowOrchestrator.promotion.minProfileSize Minimal size (bytes) threshold for all generations unless per-generation flags are specified. Per-generation flags take precedence over the global setting, but the global might be used as a generation 0 setting in case it is not specified in the corresponding per-generation setting. 1000000 readyNowOrchestrator.promotion.minProfileDuration See previous. Duration specified in format PnDTnHnMn.nS. PT2M readyNowOrchestrator.promotion.minProfileSizePerGeneration Minimal size thresholds for each generation. In case a generation is missing in the list, it inherits a value from the previously specified generation or the global setting, if there is no previous generation specified. Comma seperated list of pair <generation>:<size> 0:1000000, 1:10000000, 2:25000000, 3:50000000 readyNowOrchestrator.promotion.minProfileDurationPerGeneration See previous. Comma seperated list of pair <generation>:<duration> durations specified in format PnDTnHnMn.nS. 0:PT2M, 1:PT15M, 2:PT30M, 3:PT60M readyNowOrchestrator.producers.maxSynchronizedGeneration Defines the maximum number of profile generations to be synced from peers. Profiles with a higher generation are not synced from peers. 2"
}, {
  "objectID" : "085989b7-1fa3-476c-9f0d-58de77c5f025",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Sizing and Scaling your Optimizer Hub Installation",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/sizing-and-scaling",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/sizing-and-scaling",
  "content" : "In order for the Optimizer Hub to perform the JIT compilation in time, you need to make sure the installation is sized correctly. You scale Optimizer Hub by specifying the total number of vCores you wish to allocate to the service. The Helm chart automatically sets the sizing of the individual Optimizer Hub components."
}, {
  "objectID" : "0e292f1d-acf2-4375-b769-96ac62049496",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Sizing and Scaling your Optimizer Hub Installation",
  "section" : "Scaling Overview",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/sizing-and-scaling",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/sizing-and-scaling#scaling-overview",
  "content" : "Scaling Overview Scaling Optimizer Hub is controlled by how much capacity Optimizer Hub has to process compilation requests. This is controlled by the amount of vCores Optimizer Hub has been provisioned. Note that scaling is primarily a concern when discussing Cloud Native Compiler. ReadyNow Orchestrator consumes much fewer resources than Cloud Native Compiler and will often never need to scale beyond its minimum installation. A critical metric to measure whether your Cloud Native Compiler is responding to compilation requests in time is the Time to Clear Optimization Backlog (TCOB). When you start a Java program, there is a burst of compilation activity as a large amount of optimization requests are put on the compilation queue. Eventually, the compiler catches up with the optimization backlog and all new compilation requests are started within 2 seconds of being put on the compilation queue. The TCOB is the measurement, for each individual JVM, of how long it took from the start of the compilation activity to when the optimization backlog is cleared. To find the right amount of vCores to provision for a job, first determine an acceptable TCOB for your application. Different applications will find different TCOBs acceptable depending on how many optimizations the program requests and how quickly you need to warm it up. As a starting point, set the amount of time you want to wait before the application is ready to accept requests as your target TCOB. Perform a test run of a single JVM against your Cloud Native Compiler. In Grafana, check the Time to Clear Optimization Backlog and Compilations in Progress graphs. If the maximum TCOB during your application’s warmup is lower than your target, you can scale down the number of vCores provisioned for the job. If the maximum TCOB is higher than your target, check the Compilations in Progress metric in Grafana. This metric shows you actual compilations in progress versus Cloud Native Compiler capacity. If you are using the full capacity, add more vCores to the capacity. You should also check the client JVM logs to see whether the JVM fell back to using local compilation. JVMs switch to local compilation when Cloud Native Compiler becomes unresponsive or tells the JVM that it cannot handle any new requests. You can also see the number of local fallbacks in the Grafana dashboard."
}, {
  "objectID" : "50bf83ea-20c3-460f-b603-c8cac4c536bd",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Sizing and Scaling your Optimizer Hub Installation",
  "section" : "Configuring Capacity",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/sizing-and-scaling",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/sizing-and-scaling#configuring-capacity",
  "content" : "Configuring Capacity Depending on your autoscaling settings, there are three variables you will need to set:  simpleSizing:\n  vCores: 32\n  minVCores: 32\n  maxVCores: 106 vCores - Total number of vCores that will be allocated. This does NOT include resources required by monitoring, if you enable it. The minimum amount of vCores for provisioning Cloud Native Compiler is 29. minVCores - The minimum amount of resources that are always allocated when autoscaling is enabled. maxVCores - The maximum amount of resources that are allocated when autoscaling is enabled."
}, {
  "objectID" : "d692608c-297c-48a8-822b-e68ba7cfa2c0",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Sizing and Scaling your Optimizer Hub Installation",
  "section" : "Configuring Autoscaling",
  "url" : "https://docs.azul.com/optimizer-hub/configuring/sizing-and-scaling",
  "link" : "https://docs.azul.com/optimizer-hub/configuring/sizing-and-scaling#autoscaling",
  "content" : "Configuring Autoscaling Autoscaling is enabled by default in the Helm chart. To disable autoscaling, add the following to values-override.yaml:  autoscaler: false If you use the Azul-provided cluster config file, the pre-defined node groups for the gateway, compile-broker and cache components already contain instructions to work with Autoscaler. If the Autoscaler Node sees any unused nodes, it deletes them. If a replication controller, deployment, or replica set tries to start a container and cannot do it due to lack of resources, the Autoscaler Node knows which service is needed and adds this service to the Kubernetes cluster. For more information, see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/. In order to use HPA autoscaling, you need install the Metrics Server component in Kubernetes."
}, {
  "objectID" : "a1b3ba85-3508-4c5e-b44b-3d382f52c9f0",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Connecting a JVM to Optimizer Hub",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/jvm-connect",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/jvm-connect",
  "content" : "Whether you are using an Optimizer Hub instance to provide compilations, ReadyNow profiles, or both, the first step is creating a connection between the JVM and the Optimizer Hub instance. Ask your Optimizer Hub instance admin for the host address and port of the Optimizer Hub host and enter it in the -XX:OptHubHost=host:port JVM parameter flag. Establishing a connection to Optimizer Hub does not force the JVM to fetch compilations from Optimizer Hub and not perform compilations locally by default. See the configuration flags on Using the Cloud Native Compiler. Note In some cases, you may also need to enter an additional -XX:CNCEngineUploadAddress=host:port flag. Ask your Optimizer Hub service admin if this is needed."
}, {
  "objectID" : "d6acee9a-20b8-439f-bb37-41e7c08b1964",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using the Cloud Native Compiler",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-cloud-native-compiler",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-cloud-native-compiler",
  "content" : "You configure an Azul Zulu Prime Build of OpenJDK (Azul Zulu Prime JVM) to request compilations from Cloud Native Compiler by specifying the IP address of the service along with other command-line options. If the Cloud Native Compiler cannot respond to the compilation requests in time, the Azul Zulu Prime JVM switches to local JIT compilation until the service recovers."
}, {
  "objectID" : "b97b85ba-187b-418b-90eb-39aa066120c1",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using the Cloud Native Compiler",
  "section" : "Cloud Native Compiler JVM Options",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-cloud-native-compiler",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-cloud-native-compiler#cloud-native-compiler-jvm-options",
  "content" : "Cloud Native Compiler JVM Options Note The minimum JVM options to request compilations from Cloud Native Compiler are -XX:OptHubHost={host:port} and -XX:+CNCEnableRemoteCompiler. Command Line Option Description Default -XX:OptHubHost={host:port} Address where Optimizer Hub is listening. The default is localhost:50051. See Configuring Optimizer Hub Host and Port for instructions on determining the correct host and port. -XX:[+/-]CNCEnableRemoteCompiler Allows usage of the remote compiler when Cloud Native Compiler has established a connection. false -XX:CNCEngineUploadAddress={host:port} Address to upload the compiler engine. Only needed when your Optimizer Hub has non-standard ports. See Specifying a Custom Compiler Engine Upload Port. -XX:[+/-]CNCAbortOnBadChannel With this flag, the JVM crashes if it loses connection with a Cloud Native Compiler. false -XX:[+/-]OptHubUseSSL Instructs the Azul Zulu Prime JVM to communicate directly with Optimizer Hub without using SSL. Use this option if you installed Optimizer Hub without SSL. true -XX:OptHubSSLRootsPath={path to cert.pem} Instructs the Azul Zulu Prime JVM to use and trust a specified SSL certificate on the filesystem. -Xlog:[+/-]concomp Display messages describing communication with Optimizer Hub. false"
}, {
  "objectID" : "cf08ed1b-f415-4388-bdd4-0d32c2a0ae96",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using the Cloud Native Compiler",
  "section" : "Fallback to Local JIT Compilation",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-cloud-native-compiler",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-cloud-native-compiler#fallback-to-local-jit-compilation",
  "content" : "Fallback to Local JIT Compilation When you connect an Azul Zulu Prime JVM to a Cloud Native Compiler, the JVM attempts to fetch all JIT compilations from the service. If the Cloud Native Compiler cannot meet the JVM’s requests in time, the JVM automatically falls back to performing optimizations on the client. Factors that can cause a Cloud Native Compiler to not meet optimization demand include: The service does not have the corresponding Compiler Engine installed. To force an Azul Zulu Prime JVM to fail when requesting optimizations from a Cloud Native Compiler that doesn’t have the corresponding Compiler Engine installed, use the -XX:+CNCAbortOnBadChannel flag. The service is down or cannot be reached. The service does not have enough capacity to meet the optimization requests. If you have autoscaling enabled, this is often a temporary problem as new resources come online. See Sizing and Scaling your Optimizer Hub Installation for more info. When an Azul Zulu Prime JVM switches to local JIT compilation, it keeps checking whether Cloud Native Compiler is ready to perform optimizations. Once Cloud Native Compilation is back online and healthy, the Azul Platform Prime JVM switches back to requesting optimizations from the service. The following output in the JVM concomp log show when fallback to local JIT compilation is enabled and disabled:  [110,991s][info   ][concomp] [LocalFallback] local compilation queue disabled\n[111,018s][info   ][concomp] [LocalFallback] local compilation queue enabled"
}, {
  "objectID" : "6cd4b644-ea6b-484f-b465-bcb2008676a9",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using the Cloud Native Compiler",
  "section" : "Logging and SSL",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-cloud-native-compiler",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-cloud-native-compiler#logging-and-ssl",
  "content" : "Logging and SSL To view compiler info and ensure that the JVM is correctly connecting to Optimizer Hub, use the -Xlog:concomp flag. By default the Azul Zulu Prime JDK connects to Optimizer Hub using SSL. If you did not enable SSL during Optimizer Hub deployment, you must use the -XX:-OptHubUseSSL flag to instruct the Azul Zulu Prime JDK to connect without SSL. If you attempt to connect to Optimizer Hub, running without SSL, and do not specify the -XX:-OptHubUseSSL flag, you get the following error (visible with the -Xlog:concomp flag):  E1011 13:16:23.198074100      29 ssl_transport_security.cc:1446] Handshake failed with fatal error SSL_ERROR_SSL: error:1408F10B:SSL routines:ssl3_get_record:wrong version number."
}, {
  "objectID" : "c6ab8d73-7f46-4703-b6d3-22aaad2e0a63",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Registering a New Compiler Engine in Cloud Native Compiler",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/jvm-new-compiler-engine",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/jvm-new-compiler-engine",
  "content" : "Since different versions of Azul Zulu Prime JVMs may require different compiled code, Optimizer Hub’s Cloud Native Compiler must be able to produce different versions of compiled code simultaneously. You do not need to create a separate Optimizer Hub instance for each application or different Java version. Cloud Native Compiler does not have its own compiler - it is just server-side infrastructure for running the JIT compiler that ships inside of Azul Zulu Prime Builds of OpenJDK. This compiler is uploaded to Cloud Native Compiler from the JVM in the form of a Compiler Engine. Each version of Azul Zulu Prime JVM contains a signed Compiler Engine distributable. The JVM auto-uploads any missing compiler engine on startup. Compiler Engines are signed to prevent malicious versions of Compiler Engines from being installed. If an Azul Zulu Prime JVM connects to a Cloud Native Compiler service that does not have the corresponding Compiler Engine installed, the JVM will automatically switch to performing optimizations on the client VM. Note Cloud Native Compiler does not keep any persistent record of compiler engines. If a JVM requests compilations from Cloud Native Compiler that does not have the corresponding compiler engine, the JVM switches to local JIT compilation and starts auto-uploading the compiler engine for future use."
}, {
  "objectID" : "953e8e89-1db2-47dc-8a13-46a2aed041a5",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Registering a New Compiler Engine in Cloud Native Compiler",
  "section" : "Auto-Uploading Compiler Engines",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/jvm-new-compiler-engine",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/jvm-new-compiler-engine#auto-uploading-compiler-engines",
  "content" : "Auto-Uploading Compiler Engines For JVMs connecting to Cloud Native Compiler in the same Kubernetes cluster, or connecting to Cloud Native Compiler that is fronted by an external load-balancer, auto-uploading works with no additional configuration. For JVMs connecting to Cloud Native Compiler in an external Kubernetes cluster with no external load-balancer, pass the IP address and port of Cloud Native Compiler’s gateway service in the --XX:CNCEngineUploadAddress flag. See Connecting a JVM to a Cloud Native Compiler for how to get the IP address of the gateway service. Make sure you use the port that is mapped to 8080 in the gateway service."
}, {
  "objectID" : "a8391a0c-8bab-4933-b7a1-b72466506d80",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Registering a New Compiler Engine in Cloud Native Compiler",
  "section" : "Inspecting the Installed Compiler Engines",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/jvm-new-compiler-engine",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/jvm-new-compiler-engine#inspecting-the-installed-compiler-engines",
  "content" : "Inspecting the Installed Compiler Engines Each Compiler Engine has a Compiler Engine ID. You can view all of the Compiler Engines that are installed on a Cloud Native Compiler by calling the /compiler-engines REST API on the gateway service’s 8080 port when calling from inside the cluster or the external port that is mapped to 8080 when calling from outside the cluster."
}, {
  "objectID" : "46db9490-d0dc-4024-b44b-709e28520960",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using ReadyNow Orchestrator",
  "section" : "Creating and Writing To a New Profile Name",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator#creating-and-writing-to-a-new-profile-name",
  "content" : "Creating and Writing To a New Profile Name You use ReadyNow Orchestrator by creating a connection to the Optimizer Hub and specifying the criteria for reading and writing profile logs. All of the necessary options can be specified as command-line arguments to the Java process at the time of deployment. The basic lifecycle of using ReadyNow profile logs is as follows: The JVM streams profile log output to ReadyNow Orchestrator, giving the output a unique profile name. Based on basic criteria specified in the command-line arguments, the JVM nominates the output profile log as a candidate for sharing with other JVMs. ReadyNow Orchestrator deals with candidate profile logs arriving from various JVMs that use the same profile name. Whenever the service receives a request for a profile log with a given profile name, it examines the candidates it has collected and serves up the best one. This can change over time as ReadyNow Orchestrator receives new and more complete profile log candidates. JVMs can request multiple generations of a profile log. Rather than starting with no input profile log and recording its output log based on the regular JIT profiling process, the JVM can take a profile log as the input and further refine the profiling information, recording its experience as a new generation of that profile log. If you need to minimize the chances of having any deoptimizations through the life of your Java program, it is sometimes beneficial to record several generations. ReadyNow Orchestrator always serves the newest generation for a profile name to JVMs. JVMs can cap the number of generations that they write out to avoid developing the profile forever."
}, {
  "objectID" : "0cc215d0-cda3-477a-9879-54f10a9ff0be",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using ReadyNow Orchestrator",
  "section" : "ReadyNow Orchestrator JVM Options",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator#readynow-orchestrator-jvm-options",
  "content" : "ReadyNow Orchestrator JVM Options The following options are available in Azul Prime when using ReadyNow Orchestrator with Optimizer Hub: Command Line Option Description Default -XX:OptHubHost={host:port} Address where Optimizer Hub is listening. The default is localhost:50051. See Connecting a JVM to Optimizer Hub for how instructions on determining the correct host and port. null -XX:ProfileLogName={profilePath} Name of the profile that the JVM both reads from and writes to. Use of this flag is equivalent to using -XX:ProfileLogIn={profilePath} -XX:ProfileLogOut={profilePath}, and is the preferred way to specify profile names when different input and output names are not needed. If prefixed with opthub://, {profilePath} is used as the profile name in ReadyNow Orchestrator. If not prefixed with opthub://, {profilePath} is interpreted as a file path on the JVM. null -XX:ProfileLogOut={profilePath} The ProfileLogOut enables Azul Zulu Prime JVM to record compilations from the current run. {profilePath} is the name of the profile that the JVM reads as input to ReadyNow. If prefixed with opthub://, {profilePath} is used as the profile name in ReadyNow Orchestrator. If not prefixed with opthub://, {profilePath} is interpreted as a file path on the JVM. null -XX:ProfileLogIn={profilePath} The ProfileLogIn allows Azul Zulu Prime JVM to base its decisions on the information from a previous run. The current ProfileLogIn file information will be read in its entirety - before Azul Zulu Prime JVM starts to create a new ProfileLogOut log. {profilePath} is the name of the profile that the JVM reads as input to ReadyNow. If prefixed with opthub://, {profilePath} is used as the profile name in ReadyNow Orchestrator. If not prefixed with opthub://, {profilePath} is interpreted as a file path on the JVM. null -XX:ProfileLogOutNominationMinSize Indicate to server that the produced profile is eligible for promotion after specified amount of bytes recorded. 0 = any size eligible -1 = will never be promoted 1M -XX:ProfileLogOutNominationMinSizePerGeneration Define minimum acceptable amount of bytes per generation which the profile size should reach to become eligible for promotion. null -XX:ProfileLogOutNominationMinTimeSec When used with ReadyNow Orchestrator, the minimum time, in seconds, a profile must record before ReadyNow Orchestrator will nominate it as a candidate. 0 = any duration eligible -1 = will never be promoted 120 -XX:ProfileLogOutNominationMinTimeSecPerGeneration When used with ReadyNow Orchestrator, the minimum time, in seconds, per generation during which the profile should be recorded in order to become eligible for promotion. null -XX:ProfileLogOutMaxNominatedGenerationCount When used with ReadyNow Orchestrator, specifies the maximum generation of a profile that a VM will nominate. This JVM command line parameter overrides the serverside default to configure ReadyNow Orchestrator. 0 = unlimited 0 -XX:ProfileLogMaxSize={value in bytes} Specifies the maximum size that a ReadyNow profile log is allowed to reach. Profiles will be truncated at this size, regardless of whether the application has actually been completely warmed up. This JVM command line parameter overrides the serverside default to configure ReadyNow Orchestrator. It is recommended to either not set this size explicitly, or set it generously if required, for example: -XX:ProfileLogMaxSize=1G 0 = unlimited 0 -XX:ProfileLogTimeLimitSeconds={value in seconds} Instructs ReadyNow to stop adding to the profile log after a period of N seconds regardless of where the application has been completely warmed up. It is recommended to either not set this size explicitly, or set it generously if required. 0 = unlimited 0 -XX:ProfileLogDumpInputToFile={name} Dumps input profile to the specified path. For debugging purposes only. null -XX:ProfileLogDumpOutputToFile={name} Dumps output profile to the specified path. For debugging purposes only. null -XX:RNOConnectionTimeoutMillis Timeout on establishing remote connection and timeout on interval between downloading two chunks. Specified in milliseconds. 5000 -XX:RNOProfileFallbackInput Experimental feature. Local filesystem path which gets used in case no profile data is downloaded. E.g., in case of a missing connection or the requested profile name doesn’t exist on the server. null -XX:ProfileLogOutVerbose Enables logging of verbose, optional tracing information in -XX:ProfileLogOut true Substitution Macros The profile name is the central organizing attribute that ReadyNow Orchestrator uses to group together profile logs. ReadyNow Orchestrator regards all candidates it receives that contain the same profile name as being for the same application, with no further knowledge of what code was actually runs. This poses the danger of accidentally using the same profile name for two different applications. For example, if a user copies and pastes the command-line arguments, including the profile name, from a production application and uses it to run HelloWorld, the HelloWorld profile could, in some cases, replace your valid production application profile. To avoid this danger, you can use substitution macros in your profile name to limit the likelihood of profile name clashes between different applications. Each macro unfolds to a 4-byte hash string taken from a particular plain-text string corresponding to a property: Macro Description %classpathhash Hashed user-defined Java class path string %vmargshash Hashed JVM arguments string %vmflagshash Hashed JVM flags string %cmdlinehash Hashed string containing all plain-text values from above macros. Input values are concatenated to one string: Java class path string + JVM arguments string + JVM flags string. Afterwards, 4-bytes hash is applied to concatenated result. %jdkver Hashed JDK version number converted to string %jvmver Hashed JVM version number converted to string %prop={PROPERTY}% Substition macro defining the profile log name. This gets replaced with the value of the corresponding Java system property. Provide these properties to the JVM on startup with -Dprop=value. For example:  -Dmyprofilename=test-profileout \\\n  -XX:ProfileLogOut=opthub://%prop=myprofilename%"
}, {
  "objectID" : "1dff55b6-80a8-4142-be26-f88c235af4bf",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using ReadyNow Orchestrator",
  "section" : "Substitution Macros",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator#substitution-macros",
  "content" : "Substitution Macros The profile name is the central organizing attribute that ReadyNow Orchestrator uses to group together profile logs. ReadyNow Orchestrator regards all candidates it receives that contain the same profile name as being for the same application, with no further knowledge of what code was actually runs. This poses the danger of accidentally using the same profile name for two different applications. For example, if a user copies and pastes the command-line arguments, including the profile name, from a production application and uses it to run HelloWorld, the HelloWorld profile could, in some cases, replace your valid production application profile. To avoid this danger, you can use substitution macros in your profile name to limit the likelihood of profile name clashes between different applications. Each macro unfolds to a 4-byte hash string taken from a particular plain-text string corresponding to a property: Macro Description %classpathhash Hashed user-defined Java class path string %vmargshash Hashed JVM arguments string %vmflagshash Hashed JVM flags string %cmdlinehash Hashed string containing all plain-text values from above macros. Input values are concatenated to one string: Java class path string + JVM arguments string + JVM flags string. Afterwards, 4-bytes hash is applied to concatenated result. %jdkver Hashed JDK version number converted to string %jvmver Hashed JVM version number converted to string %prop={PROPERTY}% Substition macro defining the profile log name. This gets replaced with the value of the corresponding Java system property. Provide these properties to the JVM on startup with -Dprop=value. For example:  -Dmyprofilename=test-profileout \\\n  -XX:ProfileLogOut=opthub://%prop=myprofilename%"
}, {
  "objectID" : "bca5c8b8-47db-4e2d-a534-e39c037868a2",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using ReadyNow Orchestrator",
  "section" : "Basic Profile Recording with Defaults",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator#basic-profile-recording-with-defaults",
  "content" : "Basic Profile Recording with Defaults In its most basic form, you just let the defaults do all the work. By default, ReadyNow Orchestrator will nominate profile logs after three full generations and does not place a limit on log size. Suppose you want to record a new profile while deploying code to a fleet running in production. Run with the following options:  java -XX:OptHubHost=TestEnvOptHubHost \\\n    -XX:ProfileLogName=opthub://MyApp-v3 \\\n    -jar myapp.jar In this case, all JVMs nominate their logs based on the defaults (e.g. 2 minutes for the first generation, 15 minutes for the second generation, etc.) and keep recording until the JVM shuts down. For best results, do a test run in a canary instance for at least two minutes and if possible a full ten minutes. This creates generation 1 of your profile. Then restart your fleet as normal. As JVMs start up, they receive a profile from ReadyNow Orchestrator and check the generation number. If that number is less than the server-side default maximum of 3, the JVM writes out the next generation of the profile. Once there is a valid generation 3 of the profile on ReadyNow Orchestrator, none of the JVMs write any more output."
}, {
  "objectID" : "b02a03e1-6a4e-40cb-9f1b-38d8a8f7fc56",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using ReadyNow Orchestrator",
  "section" : "Capping Profile Log Recording and Maximum Generations",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator#capping-profile-log-recording-and-maximum-generations",
  "content" : "Capping Profile Log Recording and Maximum Generations We can make our example above more complex: After 10 minutes you want to stop recording. You want to record two generations of the profile. Start your JVM with the following parameters:  java -XX:OptHubHost=TestEnvOptHubHost \\\n    -XX:ProfileLogName=opthub://MyApp-v3 \\\n    -XX:ProfileLogTimeLimitSeconds=600 \\\n    -XX:ProfileLogOutMaxNominatedGenerationCount=2 \\\n    -jar myapp.jar"
}, {
  "objectID" : "b7a28c6d-0aff-4845-987d-5a47d57f9c7f",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Using ReadyNow Orchestrator",
  "section" : "Using a Previous Profile as the Basis of a New Profile Recording",
  "url" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator",
  "link" : "https://docs.azul.com/optimizer-hub/connecting/using-readynow-orchestrator#using-a-previous-profile-as-the-basis-of-a-new-profile-recording",
  "content" : "Using a Previous Profile as the Basis of a New Profile Recording When you’re deploying version 3 of MyApp, you often have a valid profile for version 2. In most cases, you change a small portion of your code between versions and most of the previous profile is still valid for your new version. When you feed in the previous version of the profile as input to recording the new version of the profile, you can in most cases eliminate the need to do multiple training iterations. Using our above example, perform one run of the full ten minutes in a canary with the following settings:  java -XX:OptHubHost=TestEnvOptHubHost \\\n    -XX:ProfileLogIn=opthub://MyApp-v2 \\\n    -XX:ProfileLogOut=opthub://MyApp-v3 \\\n    -XX:ProfileLogTimeLimitSeconds=600 \\\n    -XX:ProfileLogOutMaxNominatedGenerationCount=1 \\\n    -jar myapp.jar To restart the rest of your fleet with the following settings:  java -XX:OptHubHost=TestEnvOptHubHost \\\n    -XX:ProfileLogName=opthub://MyApp-v3 \\\n    -XX:ProfileLogTimeLimitSeconds=600 \\\n    -XX:ProfileLogOutMaxNominatedGenerationCount=1 \\\n    -jar myapp.jar"
}, {
  "objectID" : "f9e27da6-d2bd-47a3-81c6-de384c809bb6",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub API",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/api",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/api",
  "content" : "Optimizer Hub provides an administration API with the following methods."
}, {
  "objectID" : "641e8127-3103-467b-b1da-f3d3e4c86a2c",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub API",
  "section" : "ReadyNow Orchestrator Admin API",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/api",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/api#readynow-orchestrator-admin-api",
  "content" : "ReadyNow Orchestrator Admin API These methods are available on {GATEWAY_IP}:{SERVICE_PORT}/rno/… and can be accessed without authentication. The service port typically is 8080, but can be different based on the used configuration. For security reasons, by default, the API is not exposed outside the cluster. Configure the API Endpoint Apply the required changes in this section of the cluster configuration.  gateway:\n  service:\n    type: \"NodePort\"\n    httpEndpoint:\n      enabled: false\n      port: 8080 Overview of the API Methods Method Url Description GET /rno/names Returns a list of all profile names with summary information. GET /rno/names/{name} Returns summary information for the requested profile name. DELETE /rno/names/{name} Deletes given profile name and all profiles belonging to it. GET /rno/names/{name}/profiles Returns summary information for all of the profiles within a given profile name. Use the ?status=promoted query parameter to see only the promoted profile. GET /rno/names/{name}/profiles/{Id} Returns summary information for a specific profile. DELETE /rno/names/{name}/profiles/{Id} Deletes a specific profile. GET /rno/names/{name}/export Exports all of the profiles in a specific profile name. Each profile’s directory has the Id of the VM that created it. The promoted profile, meaning the profile that PLS sends to new clients requesting the profile name, is stored in profilePromoted.json. The README has instructions for unifying the profile chunks into a single profile file that can be used as a local input to ReadyNow. You can see the iteration of a given profile in the profileIteration property in the profile’s profileInfo.json file. Note The profile export fails if the resulting data stream is larger than 2GB. If this happens, consider just exporting the promoted profile using the ?status=promoted query parameter. POST /rno/names/{name}/import Imports a profile log to this instance of Optimizer Hub. This API is mostly used for moving a promoted profile from one Optimizer Hub instance to another. The uploaded file should be a zip archive in the format produced by the /profile/export API. Do not rename directories in the profile structure or edit the profile metadata. Note If the profile name already exists, the import fails. GET /rno/profiles/{id}/content Returns a profile by the specified id. You can use the returned profile as an input for Prime JVM for the ReadyNow ProfileLogIn flag value. For example:  curl {endpoint}:{port}/rno/profiles/{id}/content > {RETURNED_PROFILE}\n\n-XX:ProfileLogIn={RETURNED_PROFILE} GET /rno/statistics Returns service-wide statistics for this instance of Cloud Native Compiler."
}, {
  "objectID" : "7217a072-b382-46c4-ab65-549c1c54aa62",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub API",
  "section" : "Configure the API Endpoint",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/api",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/api#configure-the-api-endpoint",
  "content" : "Configure the API Endpoint Apply the required changes in this section of the cluster configuration.  gateway:\n  service:\n    type: \"NodePort\"\n    httpEndpoint:\n      enabled: false\n      port: 8080"
}, {
  "objectID" : "c42f2a2d-0224-4818-859a-7d7fdd090418",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Optimizer Hub API",
  "section" : "Overview of the API Methods",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/api",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/api#overview-of-the-api-methods",
  "content" : "Overview of the API Methods Method Url Description GET /rno/names Returns a list of all profile names with summary information. GET /rno/names/{name} Returns summary information for the requested profile name. DELETE /rno/names/{name} Deletes given profile name and all profiles belonging to it. GET /rno/names/{name}/profiles Returns summary information for all of the profiles within a given profile name. Use the ?status=promoted query parameter to see only the promoted profile. GET /rno/names/{name}/profiles/{Id} Returns summary information for a specific profile. DELETE /rno/names/{name}/profiles/{Id} Deletes a specific profile. GET /rno/names/{name}/export Exports all of the profiles in a specific profile name. Each profile’s directory has the Id of the VM that created it. The promoted profile, meaning the profile that PLS sends to new clients requesting the profile name, is stored in profilePromoted.json. The README has instructions for unifying the profile chunks into a single profile file that can be used as a local input to ReadyNow. You can see the iteration of a given profile in the profileIteration property in the profile’s profileInfo.json file. Note The profile export fails if the resulting data stream is larger than 2GB. If this happens, consider just exporting the promoted profile using the ?status=promoted query parameter. POST /rno/names/{name}/import Imports a profile log to this instance of Optimizer Hub. This API is mostly used for moving a promoted profile from one Optimizer Hub instance to another. The uploaded file should be a zip archive in the format produced by the /profile/export API. Do not rename directories in the profile structure or edit the profile metadata. Note If the profile name already exists, the import fails. GET /rno/profiles/{id}/content Returns a profile by the specified id. You can use the returned profile as an input for Prime JVM for the ReadyNow ProfileLogIn flag value. For example:  curl {endpoint}:{port}/rno/profiles/{id}/content > {RETURNED_PROFILE}\n\n-XX:ProfileLogIn={RETURNED_PROFILE} GET /rno/statistics Returns service-wide statistics for this instance of Cloud Native Compiler."
}, {
  "objectID" : "437f86fb-1942-4ddc-a2bc-9545c75fd837",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Monitoring Optimizer Hub",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/monitor-optimizer-hub",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/monitor-optimizer-hub",
  "content" : "You can monitor your Optimizer Hub using the standard Kubernetes monitoring tools: Prometheus and Grafana. Optimizer Hub components are already configured to expose key metrics for scraping by Prometheus. In your production systems, you will likely want to use your existing Prometheus and Grafana instances to monitor Optimizer Hub. If you are just evaluating Optimizer Hub, you may want to install a separate instance of Prometheus and Grafana to just monitor your test instance of Optimizer Hub. Note Monitoring Optimizer Hub assumes you have a Prometheus and Grafana available, or install one within your Kubernetes cluster."
}, {
  "objectID" : "84ff9b7b-fe9d-484f-841c-8bc2a800eb41",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Monitoring Optimizer Hub",
  "section" : "Grafana Dashboard",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/monitor-optimizer-hub",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/monitor-optimizer-hub#grafana-dashboard",
  "content" : "Grafana Dashboard You can find a Grafana configuration file cnc_dashboard.json in opthub-install.zip."
}, {
  "objectID" : "7cca3a73-5c55-4bcc-845e-7ba20f07afec",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Monitoring Optimizer Hub",
  "section" : "Retrieving Optimizer Hub Logs",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/monitor-optimizer-hub",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/monitor-optimizer-hub#retrieving-optimizer-hub-logs",
  "content" : "Retrieving Optimizer Hub Logs All Optimizer Hub components, including third-party ones, log some information to stdout. These logs are very important for diagnosing problems. You can extract individual logs with the following command:  kubectl -n my-opthub logs {pod} However by default Kubernetes keeps only the last 10 MB of logs for every container, which means that in a cluster under load the important diagnostic information can be quickly overwritten by subsequent logs. You should configure log aggregation from all Optimizer Hub components, so that logs are moved to some persistent storage and then extracted when some issue needs to be analyzed. You can use any log aggregation One suggested way is to use Loki. You can query the Loki logs using the logcli tool. Here are some common commands you can run to retrieve logs: Find out host and port where Loki is listening  export LOKI_ADDR=http://{ip-adress}:{port} Get logs of all pods in the selected namespace  logcli query --since 24h --forward --limit=10000 '{namespace=\"zvm-dev-3606\"}' Get logs of a single application in the selected namespace  logcli query --since 24h --forward --limit=10000 '{namespace=\"zvm-dev-3606\" app=\"compile-broker\"}' Get logs of a single pod in the selected namespace  logcli query --since 24h --forward --limit=10000 '{namespace=\"zvm-dev-3606\",pod=\"compile-broker-5fd956f44f-d5hb2\"}'"
}, {
  "objectID" : "270805b3-69bf-4f57-8d78-970d6fd87809",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Monitoring Optimizer Hub",
  "section" : "Extracting Compilation Artifacts",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/monitor-optimizer-hub",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/monitor-optimizer-hub#extracting-compilation-artifacts",
  "content" : "Extracting Compilation Artifacts Optimizer Hub uploads compiler engine logs to the blob storage. By default only logs from failed compilations are uploaded. You can retrieve the logs from your blob storage, which uses the directory structure <compilationId>/<artifactName>. The <compilationId> starts with the VM-Id which you can find in connected-compiler-%p.log:  # Log command-line option\n-Xlog:concomp=info:file=connected-compiler-%p.log::filesize=500M:filecount=20\n\n# Example:\n[0.647s][info ][concomp] [ConnectedCompiler] received new VM-Id: 4f762530-8389-4ae9-b64a-69b1adacccf2"
}, {
  "objectID" : "183afba2-409b-4e9d-9499-360b18423fed",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Troubleshooting Optimizer Hub",
  "section" : "",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting",
  "content" : "This page shows how to troubleshoot a misbehaving Optimizer Hub and any Azul Zulu Prime Builds of OpenJDK (Azul Zulu Prime JVM) instances using Optimizer Hub."
}, {
  "objectID" : "3472c865-8f11-4799-8f94-91bb6532486f",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Troubleshooting Optimizer Hub",
  "section" : "Client VM Troubleshooting",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting#client-vm-troubleshooting",
  "content" : "Client VM Troubleshooting My application running in a Cloud Native Compiler-enabled VM shows worse performance than usually. What can I do? Double-check VM arguments. Ensure that VM is started with -XX:OptHubHost= parameter pointing to the address of the Optimizer Hub gateway. See Connecting a JVM to a Cloud Native Compiler for more details on Optimizer Hub-related VM parameters and Installing Optimizer Hub for finding out the gateway address. Enable Optimizer Hub logging in VM using -Xlog:concomp parameter and look for log messages that show the JVM connecting to and disconnecting from Optimizer Hub. If the log says that the VM fails to connect to the service, check that the service is up and running, check the network connectivity between JVM and service, and check the value of -XX:OptHubHost=. If the log says that VM disconnects from the service soon after connecting, the log should also give the reason for disconnecting. The most frequent reason for such disconnects is a missing Compiler Engine on the service, indicated by the FAILED_PRECONDITION error code and message Compiler engine … not found. See Registering a New Compiler Engine for more information. If the connection between the VM and service is established and does not break, then proceed to item #3. Collect VM GC log, open it in GCLA and see top-tier compilation statistics. Top-tier compilation stats can also be seen in VM compilation log (-XX:+PrintCompilation). If stats show high top-tier compilation failure ratio, then it’s time to troubleshoot Cloud Native Compiler. Write down the VM ID seen in the VM concomp log, it can be used to filter service events related to this particular VM. You can find the VM ID in connected-compiler-%p.log:  # Log command-line option\n-Xlog:concomp=info:file=connected-compiler-%p.log::filesize=500M:filecount=20\n\n# Example:\n[0.647s][info ][concomp] [ConnectedCompiler] received new VM-Id: 4f762530-8389-4ae9-b64a-69b1adacccf2 Proceed to Cloud Native Compiler Server Troubleshooting. Use the TTCOB metric to research possible problems. An overloaded client (the JVM) can cause worse performance of Cloud Native Compiler. This could be seen as a too high TTCOB metric. One example of such overload is CPU saturation on JVM side. This can cause smaller amounts of compilations being sent to Cloud Native Compiler but also a worse performance of Cloud Native Compiler compilation because an overloaded JVM affects the communication between the CNC Compiler and JVM itself. If TTCOB is over the threshold: Look at the \"Compilations in progress\" chart. If \"Compilations\" value hits the capacity, then the server is the bottleneck and should be scaled. Otherwise the bottleneck is related to the per-VM limit on concurrent compilations. It should be increased. Scaling server without increasing that per-VM limit won’t help. If TTCOB is below threshold: How much below threshold is it? If there is a gap between the actual TTCOB and the threshold, then Optimizer Hub can be downscaled proportionally to the gap. Otherwise relax and don’t touch anything. If scaling compile-brokers doesn’t improve TTCOB, the culprit may be the cache. A typical symptom is cache CPU usage hitting the ceiling, depending on the workload. An example can be seen in this graph: If that’s the case, one can modify simple sizing relationships to have more caches. This is the relevant section in the values.yaml:  simpleSizing:\n  relationships:\n    brokersPerGateway: 30\n    brokersPerCache: 20 Settings brokersPerCache to a lower value (e.g. 15) will result in having more cache instances relative to compile-brokers. I see occasional \"compiler timeout\" errors in service logs and/or grafana dashboard. What’s that? Every compilation on Cloud Native Compiler has a time limit. By default it’s 500 seconds. If that limit is exceeded, the first thing to check is network latency between VM and Cloud Native Compiler using ping {opthub_host}. Latency should not exceed single-digit milliseconds. If the latency is higher, CNC won’t deliver its best performance. Make sure to locate VMs close enough to CNC. You can use the \"VM rountrip\" widget in the Grafana dashboard to detect if this limit is exceeded. In rare cases there are very large compilations that actually require that long. If that’s the case, compilation timeout can be changed by adding -Dcompiler.timeout={N} flag to compile-broker, where {N} is the number in seconds. My application running in a Optimizer Hub-enabled VM behaves incorrectly or crashes. What can I do? Collect all VM logs and the hs_err* file and send it to Azul for analysis. Run the application without the -XX:OptHubHost flag to verify that the problem is specific to connecting to Optimizer Hub. I sometimes see entries about failed compilations because of \"ConnectedCompiler is not yet ready\", but I see it is compiling fine. Is that ok? This may happen when running with SSL enabled. The VM keeps an open connection to the service, but sometimes the connection can be reset or re-established. It may happen that the VM tries to send a compilation request in the very moment. With SSL, the VM and the service need to do a handshake to make sure the connection is trusted. It is very quick, but it is possible the VM hits this small window. It is harmless as the compilation is resubmitted the next moment."
}, {
  "objectID" : "58d24863-1f31-4056-8cf3-5752a1f6f3ba",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Troubleshooting Optimizer Hub",
  "section" : "Cloud Native Compiler Troubleshooting",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting#cloud_native_compiler_troubleshooting",
  "content" : "Cloud Native Compiler Troubleshooting JVM compilation log shows that top-tier compilations are started, but never finished. What can I do? This can be caused by one of these reasons: No compile-broker pods are running in the Optimizer Hub cluster. Make sure that at least one compile-broker is up and running. Cloud Native Compiler has too many compilation requests enqueued due to too many VMs connected and it takes too long to provide compiled code. To confirm, check the \"Compilation Queues\" chart in Grafana. Increase the number of compile-broker replicas. I see occasional \"vm unreachable\" in service logs and/or grafana dashboard. What’s that? This is caused by the service’s inability to receive some information necessary for the compilation from the JVM. It usually happens when the JVM disconnects from the service for any reason, e.g. JVM termination or a network error. It’s harmless. The service just skips the compilation and proceeds to the next one."
}, {
  "objectID" : "03824949-5c8a-42c4-9799-ad168a8dea10",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Troubleshooting Optimizer Hub",
  "section" : "ReadyNow Orchestrator Troubleshooting",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting#readynow-orchestrator-troubleshooting",
  "content" : "ReadyNow Orchestrator Troubleshooting ReadyNow profile reading timed-out with pre-main exceeding 60 seconds. In case of a service misconfiguration with the Optimizer Hub not being deployed, and compilation.limit.per.vm setting being set to a value higher than 0, Prime may attempt to use the service for compilations to no avail. It might take some time for Prime to automatically switch to the local Falcon compiler. This can severely impact the ability of ReadyNow to pre-compile methods before the application load is started thus limiting the overall effect of ReadyNow."
}, {
  "objectID" : "c59f2727-4a16-41cf-a2bf-e671b01f4c87",
  "groupId" : "optimizer-hub",
  "groupLabel" : "Optimizer Hub",
  "version" : "1.9.0",
  "title" : "Troubleshooting Optimizer Hub",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting",
  "link" : "https://docs.azul.com/optimizer-hub/detailed/troubleshooting#known-issues",
  "content" : "Known Issues VM crashes when there is not enough memory available on the system. The exact amount of memory needed depends on the environment and the application. If you see VM crashing, please try freeing memory (e.g. killing some memory-hungry processes) or moving to a machine with more memory."
}, {
  "objectID" : "d7d4e404-04f1-4926-ba76-b3e42ea6d1d5",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Azul Intelligence Cloud Documentation",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/",
  "link" : "https://docs.azul.com/intelligence-cloud/",
  "content" : "Azul Intelligence Cloud is an agentless cloud service that allows users to continuously monitor their Java applications to detect known vulnerabilities in production, and request different types of reports. It is a SaaS product that leverages Azul JVMs to help organizations understand their Java application exposure to known vulnerabilities based on real usage patterns in production and dev/test with a low false positive rate, that is updated continuously."
}, {
  "objectID" : "6222b335-323b-4460-9383-aff5f26ca345",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Azul Intelligence Cloud Documentation",
  "section" : "Why Now",
  "url" : "https://docs.azul.com/intelligence-cloud/",
  "link" : "https://docs.azul.com/intelligence-cloud/#why-now",
  "content" : "Why Now Business and technical leaders are faced with securing enterprise systems and customer data against explosive growth of known vulnerabilities in 3rd party software components and applications. In Q1 2022 alone there were 200+ known vulnerabilities (CVEs) in 3rd party Java applications and components, many with the highest risk score, cutting across thousands of contributors. Failure to detect and patch known vulnerabilities in their Java application estates can expose organizations to significant impact and cost, including financial penalties, compromise of customer data, lower market capitalization, and turnover in executive staff."
}, {
  "objectID" : "b5f9919f-43b0-4e2f-82fa-27da0933cb7c",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Azul Intelligence Cloud Documentation",
  "section" : "Getting Started",
  "url" : "https://docs.azul.com/intelligence-cloud/",
  "link" : "https://docs.azul.com/intelligence-cloud/#getting-started",
  "content" : "Getting Started To use Azul Intelligence Cloud in your organization, follow these steps: Request a trial account via [email protected] Set up your environment with a Forwarder (this has to be done only once per environment). Set up a JVM for Azul Intelligence Cloud"
}, {
  "objectID" : "c5a27903-b8ca-470e-850c-9aa1c1427e45",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Forwarder 1.0.7",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#forwarder-1-0-7",
  "content" : "Forwarder 1.0.7 Release date: March 5, 2024 Improvements All dependencies of the Forwarder are up-to-date and free of vulnerabilities as of the release date. Bug Fix Issue related to releasing runtime channels during artifact uploads to Intelligence Cloud. Previously, this led to the channel being closed unexpectedly, even if it was in use by another process at the time. This fix ensures that the connection/channel remains available for sharing and reuse as intended. Forwarder 1.0.6 Release date: December 13, 2023 Improvements All dependencies of the Forwarder are up-to-date and free of vulnerabilities as of the release date. A custom header x-forwarder-time is added into every proxied request directed to Intelligence Cloud, serving as an indication of the time when the Forwarder proxies VM requests to Intelligence Cloud. Network communication management between the Forwarder and the VM is improved. Robust network problem handling and comprehensive exchange of detailed information from the Forwarder to the VM has been implemented. The communication state logged on the VM side now contains this information:  [CRS.connection][warning] Request postEventBatch failed on attempt 1 of 3,\nelapsed (4,361 ms): code= 502, message=Bad Gateway, payload=null, error=[Forwarder]\nThe channel for uploading the artifact to Azul Intelligence Cloud has become inactive This contains more detailed information, compared to the log message in earlier versions of the Forwarder:  [CRS.connection][warning] Request postEventBatch failed on attempt 1 of 3,\nelapsed (4,361 ms): java.net.SocketException: Unexpected end of file from server The maximum length of the response content that Intelligence Cloud can send to the VM is increased from 64KB to 512KB. Additionally, you can configure the maximum size of response data that the Forwarder may forward to the Runtimes, thus minimizing potential impact. See for more details Configuring the Forwarder. Bug Fix An issue is fixed where the system lacked the capability to effectively manage certificate-related issues arising from the expiration of the Forwarder certificate. In some cases, such as PC hibernation, the scheduled task of re-issuing the certificate was not executed, resulting in the VM rejecting the SSL handshake, despite the Forwarder functioning properly. Forwarder 1.0.5 Release date: May 4, 2023 Improvements and Bug Fixes Starting from version 1.0.5, you can configure the connection pool size to manage the number of simultaneous connections that are made from the Forwarder to Azul Intelligence Cloud. This allows you to optimize the system performance and minimize resource usage. More details can be found in Configuring the Forwarder. Forwarder 1.0.4 Release date: March 14, 2023 Improvements and Bug Fixes Fixed a performance issue with the connection pool used to connect to the cloud: The issue occurred when two or more threads attempted to establish a connection to the cloud simultaneously, with distinct index values. One thread was required to wait for the other, even though it was unnecessary, resulting in a delay. This unnecessary wait has been eliminated. Resolved the problem resulting in a truncated response on the client side, which was caused by an incorrect value in the \"Content-length\" header when proxied by the Forwarder. All dependencies of the Forwarder are up-to-date and free of vulnerabilities as of the release date. Resolved an inconsistent state between the Forwarder state and the detailed metrics utilized for the computation of the state. Enhanced the Forwarder’s functionality by adding comprehensive explanations in case the Forwarder state is not Green, enabling users to identify and address any issues with greater accuracy. See Status API for an example. Resolved an issue concerning the retain/release of HTTP messages that were proxied by the Forwarder, which had the potential to result in memory leaks. Implemented the feature to periodically monitor and store the status of the Forwarder to a file. See Configuring the Forwarder for more information. Forwarder 1.0.3 Release date: November 2, 2022 This version of the Forwarder contains several fixes and improvements in regards to the general launch of Azul Intelligence Cloud. Improvements and Bug Fixes Fixed issue with duplicate proxied requests. Fixed IOException: Premature close → channelClosed on Forwarder. A single HTTP/2 connection cannot be used due to load issues, HTTP/2 connection pool was introduced in order to be able to work under load. Added the ability to calculate and log concurrent requests multiplexed into one HTTP/2 connection. Improved error handling and permissions. Enhanced readability of logged messages. Allowed to optionally provide the HTTPS scheme for the IC host when starting the Forwarder. Forwarder 1.0.2 Release date: October 18, 2022 Improvements and Bug Fixes Minimise the number of Forwarder dependencies. Added the ability to define the log level when starting the Forwarder using three different ways: via properties file, system variable or environment variable. Fixed format of the Forwarder’s uptime. Added the ability to request extended statistics that include memory and CPU consumption. Added homepage to the Forwarder when opening the root endpoint. Simplification of the Forwarder authorization process. Private key regeneration of the certificate on the Forwarder side during the daily certificate renewal process. Added the ability to trust certificates issued to Azul by Amazon’s CA when the Forwarder connects to Azul Intelligence Cloud cloud. No need to manually manage the certificates issued to the Forwarder. Forwarder 1.0.1 Release date: October 4, 2022 Initial release (internal use only)."
}, {
  "objectID" : "53be0491-bbbd-4a76-938a-3160e9934546",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Forwarder 1.0.7",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#forwarder-1-0-7",
  "content" : "Forwarder 1.0.7 Release date: March 5, 2024 Improvements All dependencies of the Forwarder are up-to-date and free of vulnerabilities as of the release date. Bug Fix Issue related to releasing runtime channels during artifact uploads to Intelligence Cloud. Previously, this led to the channel being closed unexpectedly, even if it was in use by another process at the time. This fix ensures that the connection/channel remains available for sharing and reuse as intended."
}, {
  "objectID" : "4c97c56c-6f6a-4971-89ad-078799950e44",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Improvements",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#improvements",
  "content" : "Improvements All dependencies of the Forwarder are up-to-date and free of vulnerabilities as of the release date."
}, {
  "objectID" : "fc77e80e-c6cf-46ae-baac-f1c6ff8a3abc",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Bug Fix",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#bug-fix",
  "content" : "Bug Fix Issue related to releasing runtime channels during artifact uploads to Intelligence Cloud. Previously, this led to the channel being closed unexpectedly, even if it was in use by another process at the time. This fix ensures that the connection/channel remains available for sharing and reuse as intended."
}, {
  "objectID" : "3b1f2756-dd9c-4688-ab75-80952256279b",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Forwarder 1.0.6",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#forwarder-1-0-6",
  "content" : "Forwarder 1.0.6 Release date: December 13, 2023 Improvements All dependencies of the Forwarder are up-to-date and free of vulnerabilities as of the release date. A custom header x-forwarder-time is added into every proxied request directed to Intelligence Cloud, serving as an indication of the time when the Forwarder proxies VM requests to Intelligence Cloud. Network communication management between the Forwarder and the VM is improved. Robust network problem handling and comprehensive exchange of detailed information from the Forwarder to the VM has been implemented. The communication state logged on the VM side now contains this information:  [CRS.connection][warning] Request postEventBatch failed on attempt 1 of 3,\nelapsed (4,361 ms): code= 502, message=Bad Gateway, payload=null, error=[Forwarder]\nThe channel for uploading the artifact to Azul Intelligence Cloud has become inactive This contains more detailed information, compared to the log message in earlier versions of the Forwarder:  [CRS.connection][warning] Request postEventBatch failed on attempt 1 of 3,\nelapsed (4,361 ms): java.net.SocketException: Unexpected end of file from server The maximum length of the response content that Intelligence Cloud can send to the VM is increased from 64KB to 512KB. Additionally, you can configure the maximum size of response data that the Forwarder may forward to the Runtimes, thus minimizing potential impact. See for more details Configuring the Forwarder. Bug Fix An issue is fixed where the system lacked the capability to effectively manage certificate-related issues arising from the expiration of the Forwarder certificate. In some cases, such as PC hibernation, the scheduled task of re-issuing the certificate was not executed, resulting in the VM rejecting the SSL handshake, despite the Forwarder functioning properly."
}, {
  "objectID" : "e5564d27-ed9b-4f9e-92c9-8ab83fb6f0b9",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Improvements",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#improvements-2",
  "content" : "Improvements All dependencies of the Forwarder are up-to-date and free of vulnerabilities as of the release date. A custom header x-forwarder-time is added into every proxied request directed to Intelligence Cloud, serving as an indication of the time when the Forwarder proxies VM requests to Intelligence Cloud. Network communication management between the Forwarder and the VM is improved. Robust network problem handling and comprehensive exchange of detailed information from the Forwarder to the VM has been implemented. The communication state logged on the VM side now contains this information:  [CRS.connection][warning] Request postEventBatch failed on attempt 1 of 3,\nelapsed (4,361 ms): code= 502, message=Bad Gateway, payload=null, error=[Forwarder]\nThe channel for uploading the artifact to Azul Intelligence Cloud has become inactive This contains more detailed information, compared to the log message in earlier versions of the Forwarder:  [CRS.connection][warning] Request postEventBatch failed on attempt 1 of 3,\nelapsed (4,361 ms): java.net.SocketException: Unexpected end of file from server The maximum length of the response content that Intelligence Cloud can send to the VM is increased from 64KB to 512KB. Additionally, you can configure the maximum size of response data that the Forwarder may forward to the Runtimes, thus minimizing potential impact. See for more details Configuring the Forwarder."
}, {
  "objectID" : "10f7f8b2-a250-4c4d-83f7-9c2d4d38fcb6",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Bug Fix",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#bug-fix-2",
  "content" : "Bug Fix An issue is fixed where the system lacked the capability to effectively manage certificate-related issues arising from the expiration of the Forwarder certificate. In some cases, such as PC hibernation, the scheduled task of re-issuing the certificate was not executed, resulting in the VM rejecting the SSL handshake, despite the Forwarder functioning properly."
}, {
  "objectID" : "89853641-912e-427d-825a-1bb2ea0422eb",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Forwarder 1.0.5",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#forwarder-1-0-5",
  "content" : "Forwarder 1.0.5 Release date: May 4, 2023 Improvements and Bug Fixes Starting from version 1.0.5, you can configure the connection pool size to manage the number of simultaneous connections that are made from the Forwarder to Azul Intelligence Cloud. This allows you to optimize the system performance and minimize resource usage. More details can be found in Configuring the Forwarder."
}, {
  "objectID" : "9c805545-901c-4577-824e-094967093f75",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Improvements and Bug Fixes",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#improvements-and-bug-fixes",
  "content" : "Improvements and Bug Fixes Starting from version 1.0.5, you can configure the connection pool size to manage the number of simultaneous connections that are made from the Forwarder to Azul Intelligence Cloud. This allows you to optimize the system performance and minimize resource usage. More details can be found in Configuring the Forwarder."
}, {
  "objectID" : "fef6f59a-8709-4c63-badf-0b9d433ead14",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Forwarder 1.0.4",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#forwarder-1-0-4",
  "content" : "Forwarder 1.0.4 Release date: March 14, 2023 Improvements and Bug Fixes Fixed a performance issue with the connection pool used to connect to the cloud: The issue occurred when two or more threads attempted to establish a connection to the cloud simultaneously, with distinct index values. One thread was required to wait for the other, even though it was unnecessary, resulting in a delay. This unnecessary wait has been eliminated. Resolved the problem resulting in a truncated response on the client side, which was caused by an incorrect value in the \"Content-length\" header when proxied by the Forwarder. All dependencies of the Forwarder are up-to-date and free of vulnerabilities as of the release date. Resolved an inconsistent state between the Forwarder state and the detailed metrics utilized for the computation of the state. Enhanced the Forwarder’s functionality by adding comprehensive explanations in case the Forwarder state is not Green, enabling users to identify and address any issues with greater accuracy. See Status API for an example. Resolved an issue concerning the retain/release of HTTP messages that were proxied by the Forwarder, which had the potential to result in memory leaks. Implemented the feature to periodically monitor and store the status of the Forwarder to a file. See Configuring the Forwarder for more information."
}, {
  "objectID" : "75558527-4219-4779-86b1-d9caef3a6287",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Improvements and Bug Fixes",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#improvements-and-bug-fixes-2",
  "content" : "Improvements and Bug Fixes Fixed a performance issue with the connection pool used to connect to the cloud: The issue occurred when two or more threads attempted to establish a connection to the cloud simultaneously, with distinct index values. One thread was required to wait for the other, even though it was unnecessary, resulting in a delay. This unnecessary wait has been eliminated. Resolved the problem resulting in a truncated response on the client side, which was caused by an incorrect value in the \"Content-length\" header when proxied by the Forwarder. All dependencies of the Forwarder are up-to-date and free of vulnerabilities as of the release date. Resolved an inconsistent state between the Forwarder state and the detailed metrics utilized for the computation of the state. Enhanced the Forwarder’s functionality by adding comprehensive explanations in case the Forwarder state is not Green, enabling users to identify and address any issues with greater accuracy. See Status API for an example. Resolved an issue concerning the retain/release of HTTP messages that were proxied by the Forwarder, which had the potential to result in memory leaks. Implemented the feature to periodically monitor and store the status of the Forwarder to a file. See Configuring the Forwarder for more information."
}, {
  "objectID" : "b7c21efe-e47d-4ba5-916a-b6b248458665",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Forwarder 1.0.3",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#forwarder-1-0-3",
  "content" : "Forwarder 1.0.3 Release date: November 2, 2022 This version of the Forwarder contains several fixes and improvements in regards to the general launch of Azul Intelligence Cloud. Improvements and Bug Fixes Fixed issue with duplicate proxied requests. Fixed IOException: Premature close → channelClosed on Forwarder. A single HTTP/2 connection cannot be used due to load issues, HTTP/2 connection pool was introduced in order to be able to work under load. Added the ability to calculate and log concurrent requests multiplexed into one HTTP/2 connection. Improved error handling and permissions. Enhanced readability of logged messages. Allowed to optionally provide the HTTPS scheme for the IC host when starting the Forwarder."
}, {
  "objectID" : "6797066a-a456-4967-9246-357d87619d3b",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Improvements and Bug Fixes",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#improvements-and-bug-fixes-3",
  "content" : "Improvements and Bug Fixes Fixed issue with duplicate proxied requests. Fixed IOException: Premature close → channelClosed on Forwarder. A single HTTP/2 connection cannot be used due to load issues, HTTP/2 connection pool was introduced in order to be able to work under load. Added the ability to calculate and log concurrent requests multiplexed into one HTTP/2 connection. Improved error handling and permissions. Enhanced readability of logged messages. Allowed to optionally provide the HTTPS scheme for the IC host when starting the Forwarder."
}, {
  "objectID" : "4a5c3429-b445-4768-9f61-267953b79856",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Forwarder 1.0.2",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#forwarder-1-0-2",
  "content" : "Forwarder 1.0.2 Release date: October 18, 2022 Improvements and Bug Fixes Minimise the number of Forwarder dependencies. Added the ability to define the log level when starting the Forwarder using three different ways: via properties file, system variable or environment variable. Fixed format of the Forwarder’s uptime. Added the ability to request extended statistics that include memory and CPU consumption. Added homepage to the Forwarder when opening the root endpoint. Simplification of the Forwarder authorization process. Private key regeneration of the certificate on the Forwarder side during the daily certificate renewal process. Added the ability to trust certificates issued to Azul by Amazon’s CA when the Forwarder connects to Azul Intelligence Cloud cloud. No need to manually manage the certificates issued to the Forwarder."
}, {
  "objectID" : "e408b116-0e71-4fba-8fbd-811d417e8913",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Improvements and Bug Fixes",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#improvements-and-bug-fixes-4",
  "content" : "Improvements and Bug Fixes Minimise the number of Forwarder dependencies. Added the ability to define the log level when starting the Forwarder using three different ways: via properties file, system variable or environment variable. Fixed format of the Forwarder’s uptime. Added the ability to request extended statistics that include memory and CPU consumption. Added homepage to the Forwarder when opening the root endpoint. Simplification of the Forwarder authorization process. Private key regeneration of the certificate on the Forwarder side during the daily certificate renewal process. Added the ability to trust certificates issued to Azul by Amazon’s CA when the Forwarder connects to Azul Intelligence Cloud cloud. No need to manually manage the certificates issued to the Forwarder."
}, {
  "objectID" : "84aad10b-1f06-4613-94cd-690670401f98",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Forwarder Release Notes",
  "section" : "Forwarder 1.0.1",
  "url" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder",
  "link" : "https://docs.azul.com/intelligence-cloud/release-notes/forwarder#forwarder-1-0-1",
  "content" : "Forwarder 1.0.1 Release date: October 4, 2022 Initial release (internal use only)."
}, {
  "objectID" : "6d9e106e-dbe1-4753-84bc-da1c21f7bb85",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What is Azul Intelligence Cloud?",
  "section" : "Overview",
  "url" : "https://docs.azul.com/intelligence-cloud/about/what-is-azul-intelligence-cloud",
  "link" : "https://docs.azul.com/intelligence-cloud/about/what-is-azul-intelligence-cloud#overview",
  "content" : "Overview Azul Intelligence Cloud connects previously self-reliant JVMs to remain self-reliant, but enables runtime and application security analysis. Vulnerability Detection helps security, understanding where/how vulnerable code is loaded. And with Code and Component Inventory you get deep insights into the use of the code and components in your Java production environment. Collect Information from your JVMs Azul Intelligence Cloud is a production-speed software composition analyzer. By using the JVM to retain information about loaded code, Azul Intelligence Cloud can apply analysis to look back and see where new vulnerabilities are used and/or present, and what code and components are used. When Java applications launch with vulnerability detection, the JVM operates at full speed with an asynchronous collector, the Forwarder, that communicates with Azul Intelligence Cloud. This data can later detect standard JAR files, shaded JARs, flattened JARs, and other packaging types. By working in the JVM itself, the collector operates at peak speed and does not rely on instrumentation — this independence can collect data from applications where jlink removed the java.instrument module. Services Provided by Azul Intelligence Cloud The collected data is used by Azul Intelligence Cloud to give you insights into: Vulnerability Detection Code Inventory Component Inventory"
}, {
  "objectID" : "d53993b3-6595-48e4-8523-e80332db268f",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What is Azul Intelligence Cloud?",
  "section" : "Overview",
  "url" : "https://docs.azul.com/intelligence-cloud/about/what-is-azul-intelligence-cloud",
  "link" : "https://docs.azul.com/intelligence-cloud/about/what-is-azul-intelligence-cloud#overview",
  "content" : "Overview Azul Intelligence Cloud connects previously self-reliant JVMs to remain self-reliant, but enables runtime and application security analysis. Vulnerability Detection helps security, understanding where/how vulnerable code is loaded. And with Code and Component Inventory you get deep insights into the use of the code and components in your Java production environment."
}, {
  "objectID" : "3c9096f4-6dad-4b1c-8814-eb4a6ad4fdd1",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What is Azul Intelligence Cloud?",
  "section" : "Collect Information from your JVMs",
  "url" : "https://docs.azul.com/intelligence-cloud/about/what-is-azul-intelligence-cloud",
  "link" : "https://docs.azul.com/intelligence-cloud/about/what-is-azul-intelligence-cloud#collect-information-from-your-jvms",
  "content" : "Collect Information from your JVMs Azul Intelligence Cloud is a production-speed software composition analyzer. By using the JVM to retain information about loaded code, Azul Intelligence Cloud can apply analysis to look back and see where new vulnerabilities are used and/or present, and what code and components are used. When Java applications launch with vulnerability detection, the JVM operates at full speed with an asynchronous collector, the Forwarder, that communicates with Azul Intelligence Cloud. This data can later detect standard JAR files, shaded JARs, flattened JARs, and other packaging types. By working in the JVM itself, the collector operates at peak speed and does not rely on instrumentation — this independence can collect data from applications where jlink removed the java.instrument module."
}, {
  "objectID" : "73311275-a228-4225-be0e-15c396c4f7f5",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What is Azul Intelligence Cloud?",
  "section" : "Services Provided by Azul Intelligence Cloud",
  "url" : "https://docs.azul.com/intelligence-cloud/about/what-is-azul-intelligence-cloud",
  "link" : "https://docs.azul.com/intelligence-cloud/about/what-is-azul-intelligence-cloud#services-provided-by-azul-intelligence-cloud",
  "content" : "Services Provided by Azul Intelligence Cloud The collected data is used by Azul Intelligence Cloud to give you insights into: Vulnerability Detection Code Inventory Component Inventory"
}, {
  "objectID" : "4e3d8f83-0676-40f3-87e7-c48055cb23e2",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Vulnerability Detection",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/about/cve-detection",
  "link" : "https://docs.azul.com/intelligence-cloud/about/cve-detection",
  "content" : "Vulnerability Detection is a production-speed software composition analyzer. By using the JVM to retain information about loaded code, Azul Intelligence Cloud can apply analysis to look back and see where new Common Vulnerabilities and Exposures (CVEs) are used and/or present. When Java applications launch with Vulnerability Detection, the JVM operates at full speed with an asycnchronous collector that communicates with Azul Intelligence Cloud. This data can later detect standard JAR files, shaded JARs, flattened JARs, and other packaging types. By working in the JVM itself, the collector operates at peak speed and does not rely on instrumentation — this independence can collect data from applications where jlink removed the java.instrument module. Vulnerability Detection reports are available: Via the web user interface. Via the API."
}, {
  "objectID" : "5aae8ce2-cf35-467d-a03a-fcb76611c304",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Code Inventory",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/about/inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/about/inventory-code",
  "content" : "Code Inventory provides reports with an overall overview of the code that is used in production over time with no performance penalty. It provides you a comprehensive view across your enterprise’s Java workloads, down to the class, package, and method level. This makes it easy to identify unused and dead code for removal and saves developer time and money. By providing the AppEnv tag to your JVM instances, as described here, you can group the code reports to understand which application is using specific code. This allows you to address code deletion or update requests to the responsible team. Code Inventory reports are available: Via the web user interface. Via the API."
}, {
  "objectID" : "d329f05d-b7fb-44c2-9fd6-cb9a9aa77ff4",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Component Inventory",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/about/inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/about/inventory-component",
  "content" : "Component Inventory provides reports with an overall inventory of what components are used in your Java application(s). By gathering the runtime information in production over time, this can report on all Java code that has run, including plugins and dynamic code. With Component Inventory, you can: Monitor the migration from a vulnerable library to a non-vulnerable version. Follow-up which applications are upgraded. Be able to communicate with the owners of non-migrated applications. Search where a specific component is used. Check which services need to be replace a specific library. Component Inventory reports are available: Via the web user interface. Via the API."
}, {
  "objectID" : "77bc0660-fba4-4117-88fc-5754655fb025",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "content" : "This section discusses key concepts of Azul Intelligence Cloud."
}, {
  "objectID" : "2b49bf81-a45b-4f80-9f06-86292f0eab79",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "JVM / JRE / JDK",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts#jvm-jre-jdk",
  "content" : "JVM / JRE / JDK Each term refers to a Java installation or runtime: JVM is a Java Virtual Machine, referring to the Azul JVMs that are supported by Azul Intelligence Cloud. JRE is a Java Runtime Environment, used to run a Java application. JDK is a Java Development Kit, used to build, compile, and package Java applications."
}, {
  "objectID" : "5610d980-a356-4866-ab42-6beab4823779",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "Instance",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts#instance",
  "content" : "Instance An instance is a JVMs single run of a Java virtual machine. When you run the same app several times, each run is considered a separate instance. Each instance is given a unique ID called the \"instance ID\" or \"vmID\". You can use the instance ID to find your instance in the Azul Intelligence Cloud Web UI. When your JVM connects to the Forwarder, the instance is registered automatically. Once connected, the JVM sends events and meta-information about the instance to the Azul Intelligence Cloud service. The JVM keeps sending events as long as the instance is running. You can add tags to your instances. Tags are used to categorize, group, and filter instances in the Azul Intelligence Cloud Web UI. Read more about instances in the About Instances section."
}, {
  "objectID" : "a5913b66-4358-4da8-aaa7-03573656423b",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "Instance Property",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts#instance-property",
  "content" : "Instance Property Azul Intelligence Cloud collects metadata about instances such as information about the JVM instance, libraries used by the app, and so on. The metadata is stored in the form of properties. A property has a name and one or multiple values. For example, the version of Java that was used to start the instance is a single-value property. The list of libraries used in an app is a multiple-value property."
}, {
  "objectID" : "2964b569-b982-4fd9-9854-33f9813e9fe3",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "Connected Runtime Service",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts#connected-runtime-service",
  "content" : "Connected Runtime Service The Azul JVMs are enhanced with the Connected Runtime Service (CRS) that allows detection and communication with the Azul Intelligence Cloud Forwarder. This runs inside the Java process and collects information about the instance. By default, CRS is disabled and does not affect the runtime. To let it connect to the Forwarder, you have to enable it and set connection parameters."
}, {
  "objectID" : "92209911-686a-4e86-bc5a-dbcd63b00d0d",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "Component",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts#component",
  "content" : "Component A component is a Java library. When you run a Java app in a JVM, the app actually consists of the Java Class Library of the JVM, your application code in binary form, and your application dependencies (libraries). The Java Class Library is considered a component, your app code is another component, and each library is also a component."
}, {
  "objectID" : "d96d564d-e179-495b-a120-d30d1e8396d6",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "Forwarder",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts#forwarder",
  "content" : "Forwarder The Forwarder is a component that facilitates communication between JREs on an internal network and Azul Intelligence Cloud. JREs communicate with the Forwarder, and it’s the only component to be configured to move through firewalls and segmented networks. It provides a single control point for organizations to monitor traffic."
}, {
  "objectID" : "50544ceb-23f3-4e8b-a2cd-e5ddbfcfd983",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "Tag",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts#tag",
  "content" : "Tag A tag is a user-defined key-value pair that is associated with an instance. Tags are used to search, categorize, and group instances in the Azul Intelligence Cloud Web UI. Read more about tags in the Tagging Your Instances section."
}, {
  "objectID" : "d191930b-c262-4988-b866-7d318435c6a5",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "CVE",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts#cve",
  "content" : "CVE A CVE (Common Vulnerabilities and Exposures) refers to a vulnerability that is publicly known and available in the CVE List. Vulnerabilities are ranked by score (severity). Azul Intelligence Cloud analyzes your instances to detect whether they are subject to any known CVEs."
}, {
  "objectID" : "c510c878-c3ba-4703-851e-45983310fda2",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Key Concepts of Azul Intelligence Cloud",
  "section" : "Artifact",
  "url" : "https://docs.azul.com/intelligence-cloud/about/key-concepts",
  "link" : "https://docs.azul.com/intelligence-cloud/about/key-concepts#artifact",
  "content" : "Artifact An artifact is a file associated with an instance."
}, {
  "objectID" : "902538b7-3415-4faa-bb2a-66e65968a34a",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "One-time Setup for Azul Intelligence Cloud Within Your Organization",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/introduction",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/introduction",
  "content" : "Azul Intelligence Cloud is a webservice provided by Azul. Once an account has been created for your organization, you will need to perform some on-time actions to configure the tool for your needs. Part of this initial setup also includes the installation of minimal one Forwarder within your application environment. The Forwarder is the communication broker, providing a single point of communication between many JVMs and the Azul Intelligence Cloud service. Your organization must have at least one Forwarder."
}, {
  "objectID" : "3f52909b-b605-4bcf-856b-93c907f5b2c0",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "One-time Setup for Azul Intelligence Cloud Within Your Organization",
  "section" : "About the Forwarder",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/introduction",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/introduction#about-the-forwarder",
  "content" : "About the Forwarder The Forwarder is a central point of communication for an organization’s JVMs to reach Azul Intelligence Cloud. By moving requests through a Forwarder, organizations can maintain fewer firewall rules for outbound communication, improve the speed of JVMs through local communication and caching, and maintain application control. Your organization must configure one or more of these Forwarders to receive data in Azul Intelligence Cloud, based on a mix of network and organizational structure requirements. The primary role of a Forwarder is to act as an intelligent proxy so that many JVMs can connect to Azul Intelligence Cloud without any JVM being directly connected to the internet. Communication Patterns Each JRE on a network communicates to the Forwarder, which communicates to Azul Intelligence Cloud. The Forwarder cannot initiate communication with a JRE and can only respond. Failure Resiliency Communication between a JVM and the Forwarder is fault-tolerant. A JVM will always continue to operate its workload regardless of its ability to communicate with the Forwarder. If the network is unreliable, or connection difficulties occur between a JVM and the Forwarder, the JVM will attempt to reconnect. If reconnection succeeds, data loss between the time of disconnection and time of reconnection may occur."
}, {
  "objectID" : "4e763900-ad36-47bb-a4ab-fb1874efa01d",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "One-time Setup for Azul Intelligence Cloud Within Your Organization",
  "section" : "Communication Patterns",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/introduction",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/introduction#communication-patterns",
  "content" : "Communication Patterns Each JRE on a network communicates to the Forwarder, which communicates to Azul Intelligence Cloud. The Forwarder cannot initiate communication with a JRE and can only respond."
}, {
  "objectID" : "e033bf53-c707-44c0-b127-5dc1ff9ccc00",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "One-time Setup for Azul Intelligence Cloud Within Your Organization",
  "section" : "Failure Resiliency",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/introduction",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/introduction#failure-resiliency",
  "content" : "Failure Resiliency Communication between a JVM and the Forwarder is fault-tolerant. A JVM will always continue to operate its workload regardless of its ability to communicate with the Forwarder. If the network is unreliable, or connection difficulties occur between a JVM and the Forwarder, the JVM will attempt to reconnect. If reconnection succeeds, data loss between the time of disconnection and time of reconnection may occur."
}, {
  "objectID" : "bc00d72a-7bd8-496f-8636-eacfbd286e31",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "content" : "Setting up a Forwarder involves steps both in the Azul Intelligence Cloud Web UI and on a machine within your environment. This step-by-step guide will help you in this process."
}, {
  "objectID" : "f07f3dbf-ba02-4d2e-b16c-b60298454148",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Configuration in the Web UI",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#configuration-in-the-web-ui",
  "content" : "Configuration in the Web UI Administrators must set up a Forwarder in the Azul Intelligence Cloud Web UI to connect it to their account. Forwarders are created on a per-Azul Intelligence Cloud basis and can be managed by administrators. Visit the Web UI of your Azul Intelligence Cloud instance. Adding a Forwarder In the Setup section of the Web UI click \"Forwarder\". In the \"Forwarders list\", click the \"Create Forwarder\" button. Fill in the fields to configure your Forwarder. Forwarder name: this is a free value. It is a name to manage your Forwarder more easily, not a domain name. If your organization uses multiple Forwarders, consider a naming convention that signifies usage. Forwarder’s Domain Names: a list of domain names that your JDKs will use to communicate with this Forwarder. The first entry will be your certificate’s Common Name (CN) and subsequent entries will be Server Alternative Names (SAN). Click the \"Create\" button to store the new Forwarder. The \"Forwarder ID\" and \"Access key\" will be shown, together with the pre-populated settings when you click on \"Show settings\". You can also download them as a ready-to-use properties file with the \"Download as file\" button. Note For security reasons, by default the Forwarder is not allowed to run as a server in a public domain to avoid unwanted behaviour like sending sensitive JVM data to the public internet and causing incorrect traffic on the domain. If your environment requires the use of a public domain, you can request Azul support to change the configuration of your Azul Intelligence Cloud environment to add it as an approved domain."
}, {
  "objectID" : "0fa0b05c-4efa-4042-ba5e-7d8bb7eaa3bc",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Adding a Forwarder",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#adding-a-forwarder",
  "content" : "Adding a Forwarder In the Setup section of the Web UI click \"Forwarder\". In the \"Forwarders list\", click the \"Create Forwarder\" button. Fill in the fields to configure your Forwarder. Forwarder name: this is a free value. It is a name to manage your Forwarder more easily, not a domain name. If your organization uses multiple Forwarders, consider a naming convention that signifies usage. Forwarder’s Domain Names: a list of domain names that your JDKs will use to communicate with this Forwarder. The first entry will be your certificate’s Common Name (CN) and subsequent entries will be Server Alternative Names (SAN). Click the \"Create\" button to store the new Forwarder. The \"Forwarder ID\" and \"Access key\" will be shown, together with the pre-populated settings when you click on \"Show settings\". You can also download them as a ready-to-use properties file with the \"Download as file\" button. Note For security reasons, by default the Forwarder is not allowed to run as a server in a public domain to avoid unwanted behaviour like sending sensitive JVM data to the public internet and causing incorrect traffic on the domain. If your environment requires the use of a public domain, you can request Azul support to change the configuration of your Azul Intelligence Cloud environment to add it as an approved domain."
}, {
  "objectID" : "378d40d2-f29b-49c2-ab1c-85ff78e5495c",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Configure Your Firewall",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#configure-your-firewall",
  "content" : "Configure Your Firewall The Forwarder will need to have access to the Azul Intelligence Cloud service, through the firewall of your system. Only one rule needs to be added with outgoing access to: The host address (API URL) of the Azul Intelligence Cloud service that has been set up for you by Azul. You can copy this from the Web UI Forwarder setup screen. On port 443 (HTTPS)."
}, {
  "objectID" : "46ea09f6-a3af-42c2-b401-9390090bbd40",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Setting up the Forwarder in Your Environment",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#setting-up-the-forwarder-in-your-environment",
  "content" : "Setting up the Forwarder in Your Environment The remaining configuration of the Forwarder has to be done within your environment. Server Requirements The Forwarder can run on any server within your environment at a location where it can be reached by many JVMs and the Forwarder itself can reach Azul Intelligence Cloud. The only requirement is a Java runtime, version 8 or newer. Downloading the Forwarder The Forwarder application can be downloaded from the Azul repository:  curl -O https://cdn.azul.com/forwarder/1.0.7/forwarder.jar Configuring the Forwarder Three different possibilities are supported to configure the Forwarder, and the values defined in each of them have this priority: System variables Properties file Environment variables Some settings are the ones filled in or retrieved from the Web UI earlier, others are related to the created certificate. The settings will be used by the Forwarder to connect to Azul Intelligence Cloud. Once authenticated, the Forwarder will exchange this information with Azul Intelligence Cloud to receive cryptographic certificates that will be trusted by the JVM. This is an overview of the available configuration options: Environment System Properties IC_HOST icHost ic.host The host of Azul Intelligence Cloud, copied from the Web UI Forwarder setup screen. CLOUD_CONNECTION_POOL_SIZE cloudConnectionPoolSize cloud.connection.poolSize Connection pool size used to manage connections between the Forwarder and Azul Intelligence Cloud. The default value is 50. Example:  export CLOUD_CONNECTION_POOL_SIZE=100 CLOUD_RESPONSE_MAX_CONTENT_LENGTH cloudResponseMaxContentLength cloud.response.maxContentLength The maximum length of response content, in bytes, that the Intelligence Cloud can send to the virtual machine. The default value is 524288. FORWARDER_ACCESS_KEY forwarderAccessKey forwarder.access.key The Forwarder Access Key copied in the Azul Intelligence Cloud Web UI after adding the Forwarder. This Access Key will be used for authentication to Azul Intelligence Cloud. FORWARDER_DOMAIN_NAMES forwarderDomainNames forwarder.domain.names A comma-delimited list with he Forwarder Domain Names (all or subset of them) that were used to create the Forwarder in the Azul Intelligence Cloud Web UI. These Domain Names will be used as SN/SAN attributes when creating the certificates for the authorization phase between the Forwarder and Azul Intelligence Cloud. This list can contain IP addresses, but must contain at least one domain name. FORWARDER_KEYSTORE_PATH forwarderKeystorePath forwarder.keystore.path If no JKS file is found in the specified path, an empty keystore with the same name will be created. This keystore is used to store the auto-generated Forwarder certificates. FORWARDER_KEYSTORE_PASSWORD forwarderKeystorePassword forwarder.keystore.password FORWARDER_PORT forwarderPort forwarder.port The Forwarder will listen on this port for incoming connections from VMs. The default value is 443. FORWARDER_STATE_REPORT_PATH forwarderStateReportPath forwarder.state.reportPath File path used by the Forwarder to periodically store its state. Example:  export FORWARDER_STATE_REPORT_PATH=./forwarder-state.log FORWARDER_STATE_CHECK_PERIOD forwarderStateCheckPeriod forwarder.state.checkPeriod Human-readable period specifying how often the state of the Forwarder should be checked and stored in the report path. It can be defined in the following formats: {N}d {N}h {N}min {N}sec {N}ms Example:  export FORWARDER_STATE_CHECK_PERIOD=10sec LOG_LEVEL logLevel log.level The default log level is INFO. By default, when errors are caught in the Forwarder, only error messages will be logged, without a stack trace. If you need to see the stack trace for debugging or troubleshooting purposes, use the TRACE level. Possible values (case-insensitive): ALL TRACE DEBUG INFO WARN ERROR OFF Note If you are concerned about the security of the password (FORWARDER_KEYSTORE_PASSWORD) and/or key (FORWARDER_ACCESS_KEY) values, using environment variables is the recommended approach. Using Properties File When you want to use a properties-file to configure the Forwarder, follow these steps. Create a new file forwarder-settings.properties  touch forwarder-settings.properties Edit the file and add the following content, specifying all the required values as defined in the table above.  ic.host = ${intelligence-cloud-api-host}\nforwarder.access.key = ${forwarder-access-key}\nforwarder.domain.names = <domain-names-from-web-ui>\nforwarder.keystore.path = <path-to-keystore>/forwarder.jks\nforwarder.keystore.password = <desired keystore password>\nforwarder.port = 443 Start the Forwarder Application Start the Forwarder application with the following command:  $JAVA_HOME/bin/java -DforwarderSettings=forwarder-settings.properties -jar forwarder.jar Checking the State of the Forwarder Unsuccessful Start If either the Forwarder Access Key or Common Name does not match, the Forwarder will display an appropriate error message and fail to start. Keep an eye on the output of the Forwarder to check if it could start successfully. These are some possible error messages while connecting:  Failed to init certificate challenge: responseCode=403, responseContent={\"message\":\"Forbidden\"}\nFailed to authorize forwarder, the application will be stopped. Successful Start A successful startup will contain these info messages:  Forwarder certificate signed by IC issued successfully\nStart forwarding *:443 to YOUR_AVD_HOST:443 Status Screen Also after a successful startup, a status page is available at the address https://{FORWARDER_ENDPOINT}. Status API The health of the Forwarder can also be checked via an API on https://{FORWARDER_ENDPOINT}/forwarder/health, which will return, for example:  {\n  \"version\":\"1.0.7\",\n  \"state\":\"GREEN\",\n  \"uptime\":\"327454123\",\n  \"formattedUptime\":\"03d 18h 57m 34s\"\n} Or more extended data can be retrieved by adding ?extended=true like this https://{FORWARDER_ENDPOINT}/forwarder/health?extended=true, resulting in, for example:  {\n  \"state\": \"RED\",\n  \"version\": \"1.0.7\",\n  \"uptime\": \"100610966\",\n  \"formattedUptime\": \"01d 03h 56m 50s\",\n  \"reasons\": [\n    \"CPU usage exceeded the RED threshold: usage=86%, threshold=85%\",\n    \"Heap memory usage (70%) has exceeded 65%\"\n  ],\n  \"memory\": {\n    \"heap.max\": \"10485760\",\n    \"heap.used\": \"7361768\",\n    \"heap.committed\": \"10485760\",\n    \"heap.init\": \"10485760\",\n    \"nonHeap.max\": \"-1\",\n    \"nonHeap.used\": \"28254384\",\n    \"nonHeap.committed\": \"31522816\",\n    \"nonHeap.init\": \"7667712\"\n  },\n  \"cpu\": {\n    \"jvmCpuUsage\": \"86%\",\n    \"systemCpuUsage\": \"97%\"\n  }\n} Forwarder State The state of the Forwarder is shown in both the Status-page and the API as GREEN in normal state or one of the following: Metrics Details Threshold State OperatingSystemMXBean#ProcessCpuLoad \"recent cpu usage\" for the Java Virtual Machine process 50% YELLOW OperatingSystemMXBean#ProcessCpuLoad \"recent cpu usage\" for the Java Virtual Machine process 85% RED MemoryMXBean#HeapMemoryUsage [amount of used memory in bytes] / [maximum amount of memory in bytes that can be used for memory management] 65% YELLOW MemoryMXBean#HeapMemoryUsage [amount of used memory in bytes] / [maximum amount of memory in bytes that can be used for memory management] 90% RED"
}, {
  "objectID" : "5c9a3869-2ecb-417c-8cc6-25af7132a5b2",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Server Requirements",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#server-requirements",
  "content" : "Server Requirements The Forwarder can run on any server within your environment at a location where it can be reached by many JVMs and the Forwarder itself can reach Azul Intelligence Cloud. The only requirement is a Java runtime, version 8 or newer."
}, {
  "objectID" : "59bbb1ef-c7a1-48ec-8c20-c3fd07afde39",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Downloading the Forwarder",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#downloading-the-forwarder",
  "content" : "Downloading the Forwarder The Forwarder application can be downloaded from the Azul repository:  curl -O https://cdn.azul.com/forwarder/1.0.7/forwarder.jar"
}, {
  "objectID" : "2c46d837-ebeb-4753-9fae-ccdda2c1654e",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Configuring the Forwarder",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#configuring_forwarder",
  "content" : "Configuring the Forwarder Three different possibilities are supported to configure the Forwarder, and the values defined in each of them have this priority: System variables Properties file Environment variables Some settings are the ones filled in or retrieved from the Web UI earlier, others are related to the created certificate. The settings will be used by the Forwarder to connect to Azul Intelligence Cloud. Once authenticated, the Forwarder will exchange this information with Azul Intelligence Cloud to receive cryptographic certificates that will be trusted by the JVM. This is an overview of the available configuration options: Environment System Properties IC_HOST icHost ic.host The host of Azul Intelligence Cloud, copied from the Web UI Forwarder setup screen. CLOUD_CONNECTION_POOL_SIZE cloudConnectionPoolSize cloud.connection.poolSize Connection pool size used to manage connections between the Forwarder and Azul Intelligence Cloud. The default value is 50. Example:  export CLOUD_CONNECTION_POOL_SIZE=100 CLOUD_RESPONSE_MAX_CONTENT_LENGTH cloudResponseMaxContentLength cloud.response.maxContentLength The maximum length of response content, in bytes, that the Intelligence Cloud can send to the virtual machine. The default value is 524288. FORWARDER_ACCESS_KEY forwarderAccessKey forwarder.access.key The Forwarder Access Key copied in the Azul Intelligence Cloud Web UI after adding the Forwarder. This Access Key will be used for authentication to Azul Intelligence Cloud. FORWARDER_DOMAIN_NAMES forwarderDomainNames forwarder.domain.names A comma-delimited list with he Forwarder Domain Names (all or subset of them) that were used to create the Forwarder in the Azul Intelligence Cloud Web UI. These Domain Names will be used as SN/SAN attributes when creating the certificates for the authorization phase between the Forwarder and Azul Intelligence Cloud. This list can contain IP addresses, but must contain at least one domain name. FORWARDER_KEYSTORE_PATH forwarderKeystorePath forwarder.keystore.path If no JKS file is found in the specified path, an empty keystore with the same name will be created. This keystore is used to store the auto-generated Forwarder certificates. FORWARDER_KEYSTORE_PASSWORD forwarderKeystorePassword forwarder.keystore.password FORWARDER_PORT forwarderPort forwarder.port The Forwarder will listen on this port for incoming connections from VMs. The default value is 443. FORWARDER_STATE_REPORT_PATH forwarderStateReportPath forwarder.state.reportPath File path used by the Forwarder to periodically store its state. Example:  export FORWARDER_STATE_REPORT_PATH=./forwarder-state.log FORWARDER_STATE_CHECK_PERIOD forwarderStateCheckPeriod forwarder.state.checkPeriod Human-readable period specifying how often the state of the Forwarder should be checked and stored in the report path. It can be defined in the following formats: {N}d {N}h {N}min {N}sec {N}ms Example:  export FORWARDER_STATE_CHECK_PERIOD=10sec LOG_LEVEL logLevel log.level The default log level is INFO. By default, when errors are caught in the Forwarder, only error messages will be logged, without a stack trace. If you need to see the stack trace for debugging or troubleshooting purposes, use the TRACE level. Possible values (case-insensitive): ALL TRACE DEBUG INFO WARN ERROR OFF Note If you are concerned about the security of the password (FORWARDER_KEYSTORE_PASSWORD) and/or key (FORWARDER_ACCESS_KEY) values, using environment variables is the recommended approach. Using Properties File When you want to use a properties-file to configure the Forwarder, follow these steps. Create a new file forwarder-settings.properties  touch forwarder-settings.properties Edit the file and add the following content, specifying all the required values as defined in the table above.  ic.host = ${intelligence-cloud-api-host}\nforwarder.access.key = ${forwarder-access-key}\nforwarder.domain.names = <domain-names-from-web-ui>\nforwarder.keystore.path = <path-to-keystore>/forwarder.jks\nforwarder.keystore.password = <desired keystore password>\nforwarder.port = 443"
}, {
  "objectID" : "0589f107-b0a2-4003-bc7f-59045e0878e8",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Using Properties File",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#using-properties-file",
  "content" : "Using Properties File When you want to use a properties-file to configure the Forwarder, follow these steps. Create a new file forwarder-settings.properties  touch forwarder-settings.properties Edit the file and add the following content, specifying all the required values as defined in the table above.  ic.host = ${intelligence-cloud-api-host}\nforwarder.access.key = ${forwarder-access-key}\nforwarder.domain.names = <domain-names-from-web-ui>\nforwarder.keystore.path = <path-to-keystore>/forwarder.jks\nforwarder.keystore.password = <desired keystore password>\nforwarder.port = 443"
}, {
  "objectID" : "a644c1c8-1aee-4ab3-a4ae-6108d347d0be",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Start the Forwarder Application",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#start-the-forwarder-application",
  "content" : "Start the Forwarder Application Start the Forwarder application with the following command:  $JAVA_HOME/bin/java -DforwarderSettings=forwarder-settings.properties -jar forwarder.jar"
}, {
  "objectID" : "3ab184c0-46ba-4921-b0cd-483ad4cd3b71",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Checking the State of the Forwarder",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#checking-the-state-of-the-forwarder",
  "content" : "Checking the State of the Forwarder Unsuccessful Start If either the Forwarder Access Key or Common Name does not match, the Forwarder will display an appropriate error message and fail to start. Keep an eye on the output of the Forwarder to check if it could start successfully. These are some possible error messages while connecting:  Failed to init certificate challenge: responseCode=403, responseContent={\"message\":\"Forbidden\"}\nFailed to authorize forwarder, the application will be stopped. Successful Start A successful startup will contain these info messages:  Forwarder certificate signed by IC issued successfully\nStart forwarding *:443 to YOUR_AVD_HOST:443 Status Screen Also after a successful startup, a status page is available at the address https://{FORWARDER_ENDPOINT}. Status API The health of the Forwarder can also be checked via an API on https://{FORWARDER_ENDPOINT}/forwarder/health, which will return, for example:  {\n  \"version\":\"1.0.7\",\n  \"state\":\"GREEN\",\n  \"uptime\":\"327454123\",\n  \"formattedUptime\":\"03d 18h 57m 34s\"\n} Or more extended data can be retrieved by adding ?extended=true like this https://{FORWARDER_ENDPOINT}/forwarder/health?extended=true, resulting in, for example:  {\n  \"state\": \"RED\",\n  \"version\": \"1.0.7\",\n  \"uptime\": \"100610966\",\n  \"formattedUptime\": \"01d 03h 56m 50s\",\n  \"reasons\": [\n    \"CPU usage exceeded the RED threshold: usage=86%, threshold=85%\",\n    \"Heap memory usage (70%) has exceeded 65%\"\n  ],\n  \"memory\": {\n    \"heap.max\": \"10485760\",\n    \"heap.used\": \"7361768\",\n    \"heap.committed\": \"10485760\",\n    \"heap.init\": \"10485760\",\n    \"nonHeap.max\": \"-1\",\n    \"nonHeap.used\": \"28254384\",\n    \"nonHeap.committed\": \"31522816\",\n    \"nonHeap.init\": \"7667712\"\n  },\n  \"cpu\": {\n    \"jvmCpuUsage\": \"86%\",\n    \"systemCpuUsage\": \"97%\"\n  }\n} Forwarder State The state of the Forwarder is shown in both the Status-page and the API as GREEN in normal state or one of the following: Metrics Details Threshold State OperatingSystemMXBean#ProcessCpuLoad \"recent cpu usage\" for the Java Virtual Machine process 50% YELLOW OperatingSystemMXBean#ProcessCpuLoad \"recent cpu usage\" for the Java Virtual Machine process 85% RED MemoryMXBean#HeapMemoryUsage [amount of used memory in bytes] / [maximum amount of memory in bytes that can be used for memory management] 65% YELLOW MemoryMXBean#HeapMemoryUsage [amount of used memory in bytes] / [maximum amount of memory in bytes that can be used for memory management] 90% RED"
}, {
  "objectID" : "2ac5cd77-1932-4a85-b8bf-dfd1d66cfa53",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Unsuccessful Start",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#unsuccessful-start",
  "content" : "Unsuccessful Start If either the Forwarder Access Key or Common Name does not match, the Forwarder will display an appropriate error message and fail to start. Keep an eye on the output of the Forwarder to check if it could start successfully. These are some possible error messages while connecting:  Failed to init certificate challenge: responseCode=403, responseContent={\"message\":\"Forbidden\"}\nFailed to authorize forwarder, the application will be stopped."
}, {
  "objectID" : "61515097-56b4-4b19-9b09-96a0f45ed6d5",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Successful Start",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#successful-start",
  "content" : "Successful Start A successful startup will contain these info messages:  Forwarder certificate signed by IC issued successfully\nStart forwarding *:443 to YOUR_AVD_HOST:443"
}, {
  "objectID" : "94bca02e-47ed-4529-9b73-96192579b2c8",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Status Screen",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#status-screen",
  "content" : "Status Screen Also after a successful startup, a status page is available at the address https://{FORWARDER_ENDPOINT}."
}, {
  "objectID" : "11178430-3393-4cab-9a67-de38fa218585",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Status API",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#status_api",
  "content" : "Status API The health of the Forwarder can also be checked via an API on https://{FORWARDER_ENDPOINT}/forwarder/health, which will return, for example:  {\n  \"version\":\"1.0.7\",\n  \"state\":\"GREEN\",\n  \"uptime\":\"327454123\",\n  \"formattedUptime\":\"03d 18h 57m 34s\"\n} Or more extended data can be retrieved by adding ?extended=true like this https://{FORWARDER_ENDPOINT}/forwarder/health?extended=true, resulting in, for example:  {\n  \"state\": \"RED\",\n  \"version\": \"1.0.7\",\n  \"uptime\": \"100610966\",\n  \"formattedUptime\": \"01d 03h 56m 50s\",\n  \"reasons\": [\n    \"CPU usage exceeded the RED threshold: usage=86%, threshold=85%\",\n    \"Heap memory usage (70%) has exceeded 65%\"\n  ],\n  \"memory\": {\n    \"heap.max\": \"10485760\",\n    \"heap.used\": \"7361768\",\n    \"heap.committed\": \"10485760\",\n    \"heap.init\": \"10485760\",\n    \"nonHeap.max\": \"-1\",\n    \"nonHeap.used\": \"28254384\",\n    \"nonHeap.committed\": \"31522816\",\n    \"nonHeap.init\": \"7667712\"\n  },\n  \"cpu\": {\n    \"jvmCpuUsage\": \"86%\",\n    \"systemCpuUsage\": \"97%\"\n  }\n}"
}, {
  "objectID" : "96acd7e8-c927-4967-aaf4-c32209f6030c",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Setting Up the Forwarder",
  "section" : "Forwarder State",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-organization/setup#forwarder-state",
  "content" : "Forwarder State The state of the Forwarder is shown in both the Status-page and the API as GREEN in normal state or one of the following: Metrics Details Threshold State OperatingSystemMXBean#ProcessCpuLoad \"recent cpu usage\" for the Java Virtual Machine process 50% YELLOW OperatingSystemMXBean#ProcessCpuLoad \"recent cpu usage\" for the Java Virtual Machine process 85% RED MemoryMXBean#HeapMemoryUsage [amount of used memory in bytes] / [maximum amount of memory in bytes that can be used for memory management] 65% YELLOW MemoryMXBean#HeapMemoryUsage [amount of used memory in bytes] / [maximum amount of memory in bytes that can be used for memory management] 90% RED"
}, {
  "objectID" : "951dae28-9df3-4f56-8f31-18d1d298ef64",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Set Up JVM for Azul Intelligence Cloud",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/introduction",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/introduction",
  "content" : "Each of your applications will communicate with the Forwarder and doesn’t need to be able to communicate to Azul Intelligence Cloud directly. This way you can keep your firewall changes minimal and security on the highest level. To achieve this, each JVM needs to be configured where and how to connect to the Forwarder. Download a JVM capable of communicating with the Forwarder. Configure the JVM. Once your application is connected and starts sending data to Azul Intelligence Cloud, you will also be able to check its CRS log via the Web UI."
}, {
  "objectID" : "34218eee-eb1a-4a0b-a8b0-0336dbf52c57",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Connect to Azul Intelligence Cloud via the Forwarder",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect",
  "content" : "The default connection mode for JVMs is auto, where they will determine if/where they should connect through the environment. JVMs will connect when they detect the right conditions."
}, {
  "objectID" : "f4e86970-7ad7-4617-b716-757f7435626a",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Connect to Azul Intelligence Cloud via the Forwarder",
  "section" : "Configure Runtimes",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect#_configure_runtimes",
  "content" : "Configure Runtimes There are different ways to enable and control your connection to Azul Intelligence Cloud: Using only Command Line Arguments Using only Environment Variables Using only a Properties file The configuration can be controlled with optional settings, which are fully described in Configuration Options along with examples for each of the setup methods mentioned above. Once enabled, advanced users can utilize DNS to control connections at scale without touching individual systems or containers. Connect with Command Line Arguments This example uses Command Line Arguments. Apply the following arguments to your Java command line, substituting your forwarder_endpoint. Note The Forwarder endpoint must be in URL format, e.g. https://FORWARDER_IP:443.  java -XX:AzCRSMode=on \\\n    -XX:AzCRSArguments=api.url={forwarder_endpoint} \\\n    MyApp Other configuration options are not required."
}, {
  "objectID" : "4fa2a00a-3f2b-4dd1-bbbf-c258eba3de61",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Connect to Azul Intelligence Cloud via the Forwarder",
  "section" : "Connect with Command Line Arguments",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect#connect-with-command-line-arguments",
  "content" : "Connect with Command Line Arguments This example uses Command Line Arguments. Apply the following arguments to your Java command line, substituting your forwarder_endpoint. Note The Forwarder endpoint must be in URL format, e.g. https://FORWARDER_IP:443.  java -XX:AzCRSMode=on \\\n    -XX:AzCRSArguments=api.url={forwarder_endpoint} \\\n    MyApp Other configuration options are not required."
}, {
  "objectID" : "c935934a-ac5f-4374-91d4-0866390651ae",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Connect to Azul Intelligence Cloud via the Forwarder",
  "section" : "Identifying Successful Connection",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect#identifying-successful-connection",
  "content" : "Identifying Successful Connection By default, the JRE will not emit log messages. To control the log level and see connectivity messages, add the following to the AZ_CRS_ARGUMENTS: log=info. Once in place, your JRE will produce a message about its JVM Instance ID:  [CRS.id][info] CRS authenticated: YOUR_UUID"
}, {
  "objectID" : "4c25e53c-5165-4c12-83d2-c5c711b0e62a",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Connect to Azul Intelligence Cloud via the Forwarder",
  "section" : "Configuring JVMs at Scale",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect#configuring-jvms-at-scale",
  "content" : "Configuring JVMs at Scale If all JVMs share a common network, IT administrators can set up the DNS on the network so that all Java VMs can connect to the Forwarder that exchanges the data with Azul Intelligence Cloud. Rather than configuring each JRE individually, each enabled JRE will look up a DNS entry for the required property. You still can override the connection parameters for individual JVM instances via command line arguments or environment variables. To set up service discovery via DNS, create the following DNS record: Name Type Description az-crs-endpoint CNAME The IP address or FQDN of the Forwarder. When your DNS is configured, start the application with AzCRSMode set to either auto (default) or on:  java -XX:AzCRSMode=on MyApp"
}, {
  "objectID" : "9f114f0f-dc10-4f39-8240-2b316e355a86",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Connect to Azul Intelligence Cloud via the Forwarder",
  "section" : "Disabling Azul Intelligence Cloud",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect#disabling-azul-intelligence-cloud",
  "content" : "Disabling Azul Intelligence Cloud Application owners can disable features by setting the mode to off with -XX:AzCRSMode=off. Environment Variable In your AZ_CRS_ARGUMENTS, set enable=false. This change will only be used for new launches and restarts."
}, {
  "objectID" : "db3d2d30-b133-400d-a181-583df27212fc",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Connect to Azul Intelligence Cloud via the Forwarder",
  "section" : "Environment Variable",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect#environment-variable",
  "content" : "Environment Variable In your AZ_CRS_ARGUMENTS, set enable=false. This change will only be used for new launches and restarts."
}, {
  "objectID" : "46b9f5ea-6d88-4cf6-8de3-81c430ca2ce6",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Connect to Azul Intelligence Cloud via the Forwarder",
  "section" : "Reference Documentation",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/connect#reference-documentation",
  "content" : "Reference Documentation Consult Configuration Options for complete documentation about arguments and variables."
}, {
  "objectID" : "98066c61-4b45-40cc-b81f-0a7edeccad43",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Checking CRS Log With Web UI",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/download-crs-log",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/download-crs-log",
  "content" : "An Azul JVM that has been configured to report data to the Azul Intelligence Cloud product may produce log messages (see Configuration Options) to the stdout/stderr of the Java process. There are times when that output is suppressed or not retained. As an aid to debugging, a copy of those log messages is uploaded and retained on the Azul Intelligence Cloud server in the crs.log file where it can be downloaded as needed."
}, {
  "objectID" : "3c1d9045-b88c-4c82-a473-07b8d4f6d805",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Checking CRS Log With Web UI",
  "section" : "Downloading a CRS Log File",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/download-crs-log",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/download-crs-log#downloading-a-crs-log-file",
  "content" : "Downloading a CRS Log File Log in to your Azul Intelligence Cloud Web UI and click on an Instance ID. This will give you a popup with more information about this instance. In this popup, scroll down till you reach the \"Artifacts\". In this list, you can find the file crs.log and download it."
}, {
  "objectID" : "37ab60c7-72f1-4ece-bfdb-9e5a49137838",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Set Up Code Inventory",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory",
  "content" : "Code Inventory is designed for application developers to simplify the work of code deprecation/removal. By tracking which methods run within a timeframe, teams can identify methods did not run and target that code for removal. Unlike dead code from static analysis techniques, Code Inventory tracks usage over time and helps pinpoint code regardless of accessibility or frameworks. Common uses of Code Inventory are: Decomposing monoliths. Reducing an application’s attack surface. Preventing accidental re-activation of dead code."
}, {
  "objectID" : "44eb421f-36b6-4496-a680-e7681710173f",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Set Up Code Inventory",
  "section" : "Enabling Code Inventory",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory#enabling-code-inventory",
  "content" : "Enabling Code Inventory Code Inventory must be enabled within applications. It is recommended for first-party (custom) applications rather than third-party COTS applications. To enable Code Inventory, add notifyFirstCall=true to your comma-separated AZ_CRS_ARGUMENTS environment variable. How Code Inventory Works Code Inventory tracks usage by recording the first execution of each method. Performance impact is negligible because the JVM has already identified this first execution and subsequent calls to the method are not tracked. Identifying Unused Methods Code Inventory tracks first method invocation – it does not reproduce the entire inventory of available code found within source files and bytecode. Developers should compare a Code Inventory report against their codebase to identify classes and methods that are in source but not the Code Inventory: these methods were not executed within the timeframe. Retrieve Code Inventory Results The results of Code Inventory are available through the API, see API for Code Inventory for more info."
}, {
  "objectID" : "07d19d81-30fc-498c-a410-7e6a82deb120",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Set Up Code Inventory",
  "section" : "How Code Inventory Works",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory#how-code-inventory-works",
  "content" : "How Code Inventory Works Code Inventory tracks usage by recording the first execution of each method. Performance impact is negligible because the JVM has already identified this first execution and subsequent calls to the method are not tracked."
}, {
  "objectID" : "28c56d79-1223-4fbb-ac90-76062abe93c7",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Set Up Code Inventory",
  "section" : "Identifying Unused Methods",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory#identifying-unused-methods",
  "content" : "Identifying Unused Methods Code Inventory tracks first method invocation – it does not reproduce the entire inventory of available code found within source files and bytecode. Developers should compare a Code Inventory report against their codebase to identify classes and methods that are in source but not the Code Inventory: these methods were not executed within the timeframe."
}, {
  "objectID" : "47d04f9c-9d5d-4d1e-be78-1e3531c0f617",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Set Up Code Inventory",
  "section" : "Retrieve Code Inventory Results",
  "url" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory",
  "link" : "https://docs.azul.com/intelligence-cloud/setup-jvm/setup-code-inventory#retrieve-code-inventory-results",
  "content" : "Retrieve Code Inventory Results The results of Code Inventory are available through the API, see API for Code Inventory for more info."
}, {
  "objectID" : "db0cc4d5-664f-47d9-bd06-4676bd0919cf",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Azul Intelligence Cloud Web User Interface",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/webui/introduction",
  "link" : "https://docs.azul.com/intelligence-cloud/webui/introduction",
  "content" : "Next to the APIs, Azul Intelligence Cloud also provides insights into the Java code, applications running in your production environment, and inventories with a web interface. It’s the easiest way when you need to look at data quickly. Viewing Detected CVEs in the Web UI Code Inventory Reports in the Web UI Component Inventory Reports in the Web UI"
}, {
  "objectID" : "55108c07-56c2-4b95-9824-0bc19c2c3cf1",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Viewing Detected CVEs in the Web UI",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/webui/webui-cve-detection",
  "link" : "https://docs.azul.com/intelligence-cloud/webui/webui-cve-detection",
  "content" : "Use the CVE Analysis view to monitor if your applications have executed code known to be affected by a CVE. Open the web UI and select \"Vulnerability Detection\". The table shows all CVEs that have been detected in the classes loaded by your instances. The CVE Status column indicates whether the vulnerable code has been executed or not: USED: The instance has executed the code affected by the CVE. PRESENT: The CVE is present in the classes loaded by the instance, but the instance has not executed the code containing the CVE. Column Description Component The name of the component. If a known component is detected, its name is shown. In all other cases, the jar-filename is in this column. Version The component version. CVE The CVE ID. If the component is not affected by any CVE, the column contains the string \"No CVE impact\". CVE Score The CVE score. CVE Status Indicates whether the code containing the CVE has been executed. Timestamp The timestamp when the CVE was detected. Hostname The hostname of the instance host machine. Instance ID The instance ID. An instance prints its ID to the console at startup if you enable logging of instance IDs. Note For a short time (a few minutes) after a JVM starts, it will be shown in this overview but no components are listed yet. As soon as vulnerabilities analysis has been performed for the first time, the list will contain the correct data for this new JVM."
}, {
  "objectID" : "8ded85f1-0a68-4fa6-a672-7f43a10a0c66",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Code Inventory Reports in the Web UI",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/webui/webui-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/webui/webui-inventory-code",
  "content" : "You can generate Code Inventory Reports through an API call, as described here. Such an API call, returns a reportID that you can use to either download the report with the API, or in the web user interface."
}, {
  "objectID" : "2b6c2b1d-26e8-4cc5-90dc-040d555ded5d",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Component Inventory Reports in the Web UI",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/webui/webui-inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/webui/webui-inventory-component",
  "content" : "You can generate Component Inventory Reports through an API call, as described here. Such an API call, returns a reportID that you can use to either download the report with the API, or in the web user interface."
}, {
  "objectID" : "9c9bfe0c-e583-4c4f-84e4-cdc0b640aae5",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Azul Intelligence Cloud API",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/api/introduction",
  "link" : "https://docs.azul.com/intelligence-cloud/api/introduction",
  "content" : "The API is the easiest way for automated tools, queries, or integrations into other dashboards. This is the most powerful mechanism and can sort/filter on many properties. The API provides several endpoints to access the data available within your instance of Azul Intelligence Cloud: API for CVE Events API for Component Inventory API for Code Inventory You can also consult the API documentation inside the webtool."
}, {
  "objectID" : "3da2532d-7781-4c68-a06d-8310bb6e365b",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for CVE Events",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-cve-detection",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-cve-detection",
  "content" : "The CVE Events API allows you to retrieve events for a given VM instance, which returns the detected CVEs in components on that instance."
}, {
  "objectID" : "edb8d32d-fbaf-452d-9b07-02714669a38a",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for CVE Events",
  "section" : "Request Parameters",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-cve-detection",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-cve-detection#request-parameters",
  "content" : "Request Parameters You can extend the request with a filter for one or more fields. Argument Default Description hostName string Filter by host name. vmId string Filter by VM ID. startTime string Filter results with VM start time to the provided parameter value. Format: 2023-01-01T00:00:00 endTime string Filter results with VM end time (lastHeardTime) to the provided parameter value. Format: 2023-01-01T00:00:00 cveAnalysisStartTime string Filter results with CVE analysis time greater than of equal to the provided parameter value. Format: 2023-01-01T00:00:00 cveAnalysisEndTime string Filter results with CVE analysis time less than of equal to the provided parameter value. Format: 2023-01-01T00:00:00 afterToken string Token representing the offset to get the next page of data. For correct pagination, need to use the 'afterToken' returned in the current response to get the next page of data. limit integer Number of items per data page with results. For correct pagination, need to use the 'limit' returned in the current response to get the next page of data. Default value: 100 tags.TAG_KEY object A custom user tag that can be assigned when a VM starts up. Results can be filtered by tags.  # Format\n\n{\n  \"TAG_KEY_NAME_1\": \"TAG_VALUE_1\",\n  \"TAG_KEY_NAME_2\": \"TAG_VALUE_2\",\n  \"TAG_KEY_NAME_3\": \"TAG_VALUE_3\",\n  ...\n}\n\n# For example\n\n{\n  \"tags.team\": \"credit-team\",\n  \"tags.service\": \"credit-service\"\n} showNotImpacted boolean The flag specifies whether detected components with no CVEs attached are returned in the response. By default, only impacted components will be shown. Default value: false Example Request  curl -X 'GET' \\\n  'https://YOUR_ENDPOINT.azul.com/public/cve/events?vmId=<VM_ID>&startTime=2022-01-01T00%3A00%3A00&endTime=2023-01-01T23%3A59%3A59&tags.owner=owner&tags.team=team&showNotImpacted=false' \\\n    -H 'accept: application/json' \\\n    -H 'x-api-key: <API_KEY>' \\\n    -H 'Content-Type: application/json' Example Response  {\n  \"limit\": 100,\n  \"afterToken\": \"100\",\n  \"data\": [\n    {\n      \"componentName\": \"spring-context\",\n      \"componentVersion\": \"5.1.9.RELEASE\",\n      \"cveId\": \"CVE-2020-5398\",\n      \"score\": 7.5,\n      \"cveState\": \"USED\",\n      \"cveAnalysisTime\": 1687758788095,\n      \"hostName\": \"vkvashin-thinkpad\",\n      \"startTime\": 1687758339283,\n      \"lastHeardTime\": 1687758639283,\n      \"vmId\": \"99f4abdf-3329-454d-93d3-0f18a3bef50b\",\n      \"tags\": null\n    },\n    ....\n  ],\n  \"summary\": {\n    \"warnings\": [\n      \"the exact result count unknown; it is not less than 10000\"\n    ],\n    \"totalCount\": 10000\n  },\n  \"size\": 100,\n  \"hasNext\": true\n}"
}, {
  "objectID" : "e4fcea8f-4b6e-4896-9794-3701f2970b36",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for CVE Events",
  "section" : "Example Request",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-cve-detection",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-cve-detection#example-request",
  "content" : "Example Request  curl -X 'GET' \\\n  'https://YOUR_ENDPOINT.azul.com/public/cve/events?vmId=<VM_ID>&startTime=2022-01-01T00%3A00%3A00&endTime=2023-01-01T23%3A59%3A59&tags.owner=owner&tags.team=team&showNotImpacted=false' \\\n    -H 'accept: application/json' \\\n    -H 'x-api-key: <API_KEY>' \\\n    -H 'Content-Type: application/json'"
}, {
  "objectID" : "bca9c6af-7170-41dd-9c73-213466516f9d",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for CVE Events",
  "section" : "Example Response",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-cve-detection",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-cve-detection#example-response",
  "content" : "Example Response  {\n  \"limit\": 100,\n  \"afterToken\": \"100\",\n  \"data\": [\n    {\n      \"componentName\": \"spring-context\",\n      \"componentVersion\": \"5.1.9.RELEASE\",\n      \"cveId\": \"CVE-2020-5398\",\n      \"score\": 7.5,\n      \"cveState\": \"USED\",\n      \"cveAnalysisTime\": 1687758788095,\n      \"hostName\": \"vkvashin-thinkpad\",\n      \"startTime\": 1687758339283,\n      \"lastHeardTime\": 1687758639283,\n      \"vmId\": \"99f4abdf-3329-454d-93d3-0f18a3bef50b\",\n      \"tags\": null\n    },\n    ....\n  ],\n  \"summary\": {\n    \"warnings\": [\n      \"the exact result count unknown; it is not less than 10000\"\n    ],\n    \"totalCount\": 10000\n  },\n  \"size\": 100,\n  \"hasNext\": true\n}"
}, {
  "objectID" : "ec84938b-6fae-4024-8acd-533064b82137",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Component Inventory",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component#generate-report",
  "content" : "The Component Inventory API allows you to create and download reports to get insights into what components are used in your Java application(s). Component Inventory reports can be grouped by tag to break down areas of ownership and logically combine differentiated services, build versions, regions, or other information. Reports are generated asynchronously. By using the schedule endpoint, a task to generate a report is created. In response, you get a unique report identifier. With this identifier, you can retrieve the report."
}, {
  "objectID" : "570fa2b1-3480-442c-a9d4-89a1cdc2f9a4",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Component Inventory",
  "section" : "Request Report Generation",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component#generate-report",
  "content" : "Request Report Generation You can request the generation of a report with a POST call to https://YOUR_ENDPOINT.azul.com/public/component/report/schedule and a set of parameters. Request Parameters Argument Default Description filter array[string] SQL-based filters applied to data collected from virtual machines. The fields used to filter the data are presented in the data items of the response. Supported operations: field = literal field = null field != literal field != null field < literal field <= literal field > literal field >= literal field LIKE regexp field CONTAINS literalSubstring field IN (literal1, literal2,…literalN) field RANGE (literalLow, literalHigh) groupBy array[string] List of fields by which the components (name + version) are grouped. The order of the fields directly affects the result of the grouping. The values of the groupBy fields are presented in the data items of the response. In addition, the count field corresponding to the number of VMs included in each group is returned. Format: <field_name>. Note The count field can be used to sort data, for example, using count=ASC. Note To group by time period, use the keywords year, month, week, or day. When using week, the week number of the year will be used (Calendar.WEEK_OF_YEAR). sortBy array[string] A set of fields and the desired sort order for their values. Format: <field_name>=<sort_order>. Sort order values: ASC - ascending DESC - descending startTime string Relative or absolute time to get components detected by AVD based on VMs that are still running after (or equal to) the provided startTime. Relative time is calculated from the current time on the server (now) and can be set as: Xd where X is an integer number of days in the past from now: 0d = today, 1d = yesterday. Xm where X is an integer number of months in the past from now: 1m = 1 month ago from today, 12m = 1 year ago from today. Absolute time must be in ISO 8601 format (`yyyy-MM-dd’T’HH:mm:ss.SSS) or epoch time in milliseconds. Examples: 2022-05-01T12:43:50.000 3d 0m 365d 1671397200000 (epoch time in milliseconds) 1674075599999 (epoch time in milliseconds) Default value: 3m. endTime string Relative or absolute time to get components detected by AVD based on VMs that are not started after the provided endTime. Similar to startTime. detail boolean Whether to include in the report a set of virtual machine IDs containing a particular detected component (name + version). Default value: false. Example Request  curl -X 'POST' \\\n  'https://YOUR_ENDPOINT.azul.com/public/component/report/schedule' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -d '{\n  \"filter\": [\n    \"tags.owner CONTAINS '\\''admin'\\''\",\n    \"state != '\\''OFFLINE'\\''\"\n  ],\n  \"groupBy\": [\n    \"state\",\n    \"agentVersion\"\n  ],\n  \"sortBy\": [\n    \"componentName=ASC\",\n    \"tags.owner=DESC\"\n  ],\n  \"startTime\": \"2022-05-01T12:43:50.999\",\n  \"endTime\": \"1d\",\n  \"detail\": false\n}' Example Response In response, you will get a reportId that can be used with the GET endpoint to retrieve the report.  {\n  \"reportId\": \"f12ba5df-0673-4917-92ce-4f6c84a3ace8\",\n  \"userId\": \"...\",\n  \"parameters\": {\n    \"filter\": [\n      \"tags.owner CONTAINS 'admin'\",\n      \"state != 'OFFLINE'\"\n    ],\n    ...\n    \"detail\": false\n  },\n  \"state\": \"PROCESSING\",\n  \"created\": 1682510562745\n}"
}, {
  "objectID" : "517e2e03-b814-42cf-abf2-6583e05a6a2b",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Component Inventory",
  "section" : "Request Parameters",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component#request-parameters",
  "content" : "Request Parameters Argument Default Description filter array[string] SQL-based filters applied to data collected from virtual machines. The fields used to filter the data are presented in the data items of the response. Supported operations: field = literal field = null field != literal field != null field < literal field <= literal field > literal field >= literal field LIKE regexp field CONTAINS literalSubstring field IN (literal1, literal2,…literalN) field RANGE (literalLow, literalHigh) groupBy array[string] List of fields by which the components (name + version) are grouped. The order of the fields directly affects the result of the grouping. The values of the groupBy fields are presented in the data items of the response. In addition, the count field corresponding to the number of VMs included in each group is returned. Format: <field_name>. Note The count field can be used to sort data, for example, using count=ASC. Note To group by time period, use the keywords year, month, week, or day. When using week, the week number of the year will be used (Calendar.WEEK_OF_YEAR). sortBy array[string] A set of fields and the desired sort order for their values. Format: <field_name>=<sort_order>. Sort order values: ASC - ascending DESC - descending startTime string Relative or absolute time to get components detected by AVD based on VMs that are still running after (or equal to) the provided startTime. Relative time is calculated from the current time on the server (now) and can be set as: Xd where X is an integer number of days in the past from now: 0d = today, 1d = yesterday. Xm where X is an integer number of months in the past from now: 1m = 1 month ago from today, 12m = 1 year ago from today. Absolute time must be in ISO 8601 format (`yyyy-MM-dd’T’HH:mm:ss.SSS) or epoch time in milliseconds. Examples: 2022-05-01T12:43:50.000 3d 0m 365d 1671397200000 (epoch time in milliseconds) 1674075599999 (epoch time in milliseconds) Default value: 3m. endTime string Relative or absolute time to get components detected by AVD based on VMs that are not started after the provided endTime. Similar to startTime. detail boolean Whether to include in the report a set of virtual machine IDs containing a particular detected component (name + version). Default value: false."
}, {
  "objectID" : "30e2b9ce-3693-44c6-bba1-068300a72619",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Component Inventory",
  "section" : "Example Request",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component#example-request",
  "content" : "Example Request  curl -X 'POST' \\\n  'https://YOUR_ENDPOINT.azul.com/public/component/report/schedule' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -d '{\n  \"filter\": [\n    \"tags.owner CONTAINS '\\''admin'\\''\",\n    \"state != '\\''OFFLINE'\\''\"\n  ],\n  \"groupBy\": [\n    \"state\",\n    \"agentVersion\"\n  ],\n  \"sortBy\": [\n    \"componentName=ASC\",\n    \"tags.owner=DESC\"\n  ],\n  \"startTime\": \"2022-05-01T12:43:50.999\",\n  \"endTime\": \"1d\",\n  \"detail\": false\n}'"
}, {
  "objectID" : "b2e3c09c-3ee1-4514-bb1a-d3d106eb6258",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Component Inventory",
  "section" : "Example Response",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component#example-response",
  "content" : "Example Response In response, you will get a reportId that can be used with the GET endpoint to retrieve the report.  {\n  \"reportId\": \"f12ba5df-0673-4917-92ce-4f6c84a3ace8\",\n  \"userId\": \"...\",\n  \"parameters\": {\n    \"filter\": [\n      \"tags.owner CONTAINS 'admin'\",\n      \"state != 'OFFLINE'\"\n    ],\n    ...\n    \"detail\": false\n  },\n  \"state\": \"PROCESSING\",\n  \"created\": 1682510562745\n}"
}, {
  "objectID" : "d9e8d843-afc7-492f-b011-12c08cb89072",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Component Inventory",
  "section" : "Retrieve the Report",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component#retrieve-report",
  "content" : "Retrieve the Report You can retrieve a report with a GET call to https://YOUR_ENDPOINT.azul.com/public/component/report/YOUR_REPORT_ID. The response must be checked to define if the data is available, based on the following possible return data: state: State of the request, one of the following options: PROCESSING SUCCEEDED FAILED PARTIALLY_FAILED TIMED_OUT summary: More info related to the state. errors: Errors while creating the report (if applicable). Large reports are split into pages (up to 5.5MB per page). You can find the total number of pages in the response and use this value to retrieve all the report pages. Note Regardless of whether a report is generated successfully or not, when the generation is finished, at least one page of the report is available for retrieval. Example Request  curl -X 'GET' \\\n  'https://YOUR_ENDPOINT.azul.com/public/component/report/YOUR_REPORT_ID' \\\n  -H 'accept: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' Example Response  {\n  \"reportId\": \"f12ba5df-0673-4917-92ce-4f6c84a3ace8\",\n  \"userId\": \"...\",\n  \"parameters\": {\n    \"filter\": [\n      \"tags.owner CONTAINS 'shep'\",\n      \"state != 'OFFLINE'\"\n    ],\n    ...\n    \"detail\": false\n  },\n  \"state\": \"SUCCEEDED\",\n  \"created\": 1682510562745,\n  \"generated\": 1682510570860,\n  \"elapsed\": 1316,\n  \"data\": [\n    {\n      \"state\": \"TERMINATED\",\n      \"data\": [\n        {\n          \"agentVersion\": \"1.0.0-271\",\n          \"data\": [\n            {\n              \"componentName\": \"commons-io\",\n              \"tags.owner\": \"ashepotko\",\n              \"componentVersion\": \"2.11.0\",\n              \"count\": 26\n            },\n            {\n              \"componentName\": \"crs-tests-jar-with-dependencies.jar\",\n              \"tags.owner\": \"ashepotko\",\n              \"componentVersion\": \"UNKNOWN\",\n              \"count\": 26\n            },\n            ...\n          ]\n        },\n        {\n          \"agentVersion\": \"1.0.11-568\",\n          \"data\": [\n            {\n              \"componentName\": \"aether-connector-basic\",\n              \"tags.owner\": \"ashepotko\",\n              \"componentVersion\": \"1.1.0\",\n              \"count\": 11\n            },\n            ...\n          ]\n        },\n        ...\n      ]\n    }\n  ],\n  \"totalCount\": 44,\n  \"totalPages\": 1,\n  \"page\": 1\n}"
}, {
  "objectID" : "aa1d3a8a-5f01-4971-9167-7b5eaf808511",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Component Inventory",
  "section" : "Example Request",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component#example-request-2",
  "content" : "Example Request  curl -X 'GET' \\\n  'https://YOUR_ENDPOINT.azul.com/public/component/report/YOUR_REPORT_ID' \\\n  -H 'accept: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json'"
}, {
  "objectID" : "3490aa79-66b6-44de-b98d-306acfa5bb15",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Component Inventory",
  "section" : "Example Response",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-component#example-response-2",
  "content" : "Example Response  {\n  \"reportId\": \"f12ba5df-0673-4917-92ce-4f6c84a3ace8\",\n  \"userId\": \"...\",\n  \"parameters\": {\n    \"filter\": [\n      \"tags.owner CONTAINS 'shep'\",\n      \"state != 'OFFLINE'\"\n    ],\n    ...\n    \"detail\": false\n  },\n  \"state\": \"SUCCEEDED\",\n  \"created\": 1682510562745,\n  \"generated\": 1682510570860,\n  \"elapsed\": 1316,\n  \"data\": [\n    {\n      \"state\": \"TERMINATED\",\n      \"data\": [\n        {\n          \"agentVersion\": \"1.0.0-271\",\n          \"data\": [\n            {\n              \"componentName\": \"commons-io\",\n              \"tags.owner\": \"ashepotko\",\n              \"componentVersion\": \"2.11.0\",\n              \"count\": 26\n            },\n            {\n              \"componentName\": \"crs-tests-jar-with-dependencies.jar\",\n              \"tags.owner\": \"ashepotko\",\n              \"componentVersion\": \"UNKNOWN\",\n              \"count\": 26\n            },\n            ...\n          ]\n        },\n        {\n          \"agentVersion\": \"1.0.11-568\",\n          \"data\": [\n            {\n              \"componentName\": \"aether-connector-basic\",\n              \"tags.owner\": \"ashepotko\",\n              \"componentVersion\": \"1.1.0\",\n              \"count\": 11\n            },\n            ...\n          ]\n        },\n        ...\n      ]\n    }\n  ],\n  \"totalCount\": 44,\n  \"totalPages\": 1,\n  \"page\": 1\n}"
}, {
  "objectID" : "aa74e507-b3d1-4849-b95e-7e6aef1f3af0",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#generate-report",
  "content" : "The Code Inventory API allows you to create and download reports to get insights into how your Java code is used in production. Reports can be grouped by JAR, classes and/or methods. Reports are generated asynchronously. By using the endpoint, a task to generate a report is created. In response, you get a unique report identifier. With this identifier, you can retrieve the report."
}, {
  "objectID" : "9810324d-acd6-403e-9894-7e537cf3a1a6",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Request Report Generation",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#generate-report",
  "content" : "Request Report Generation You can request the generation of a report with a POST call to https://YOUR_ENDPOINT.azul.com/public/report/codeInventory and a set of parameters. Request Parameters Argument Default Description filter array[string] Array of filters for one or more of the following: sourceName className methodName from timestamp Timestamp for the start of the report. Example: \"2023-02-15T00:00:00.000+0200` to timestampe Timestamp for the end of the report. Similar to from. Example Request  curl -X 'POST' \\\n  'https://YOUR_ENDPOINT.azul.com/report/codeInventory' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -d '{\n  \"filter\": [\n    \"sourceName:myapp.jar\",\n    \"className:com/company/firstclass\",\n    \"methodName:mymethod\"\n  ],\n  \"from\": \"2023-02-15T00:00:00.000+0200\",\n  \"to\": \"2023-02-16T23:59:59.999+0200\"\n}' Example Response In response, you will get a reportId that can be used with the GET endpoint to retrieve the report.  {\n  \"reportId\": \"1cc40ee6-87a7-4147-b02d-7d26ce0387d0\",\n  \"state\": \"PROCESSING\",\n  \"stateMessages\": [\n    \"1st message\",\n    \"2nd message\"\n  ],\n  \"userId\": \"[email protected]\",\n  \"params\": {\n    \"filter\": [\n      \"sourceName:myapp.jar\",\n      \"className:com/company/firstclass\",\n      \"methodName:mymethod\"\n    ],\n    \"from\": \"2023-02-15T00:00:00.000+0200\",\n    \"to\": \"2023-02-16T23:59:59.999+0200\"\n  },\n  \"requestTime\": \"2023-02-15T00:00:00.000Z\"\n}"
}, {
  "objectID" : "1b1edd45-372c-400a-9ce9-d9e2066da26a",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Request Parameters",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#request-parameters",
  "content" : "Request Parameters Argument Default Description filter array[string] Array of filters for one or more of the following: sourceName className methodName from timestamp Timestamp for the start of the report. Example: \"2023-02-15T00:00:00.000+0200` to timestampe Timestamp for the end of the report. Similar to from."
}, {
  "objectID" : "860a7d0d-8899-4f09-ac57-7d949ce84463",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Example Request",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#example-request",
  "content" : "Example Request  curl -X 'POST' \\\n  'https://YOUR_ENDPOINT.azul.com/report/codeInventory' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -d '{\n  \"filter\": [\n    \"sourceName:myapp.jar\",\n    \"className:com/company/firstclass\",\n    \"methodName:mymethod\"\n  ],\n  \"from\": \"2023-02-15T00:00:00.000+0200\",\n  \"to\": \"2023-02-16T23:59:59.999+0200\"\n}'"
}, {
  "objectID" : "8b607ebf-85ae-461c-92b7-ebb2f239d92d",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Example Response",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#example-response",
  "content" : "Example Response In response, you will get a reportId that can be used with the GET endpoint to retrieve the report.  {\n  \"reportId\": \"1cc40ee6-87a7-4147-b02d-7d26ce0387d0\",\n  \"state\": \"PROCESSING\",\n  \"stateMessages\": [\n    \"1st message\",\n    \"2nd message\"\n  ],\n  \"userId\": \"[email protected]\",\n  \"params\": {\n    \"filter\": [\n      \"sourceName:myapp.jar\",\n      \"className:com/company/firstclass\",\n      \"methodName:mymethod\"\n    ],\n    \"from\": \"2023-02-15T00:00:00.000+0200\",\n    \"to\": \"2023-02-16T23:59:59.999+0200\"\n  },\n  \"requestTime\": \"2023-02-15T00:00:00.000Z\"\n}"
}, {
  "objectID" : "37e86f7a-3fae-4bd0-9e23-9f0b6dc2c3e2",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Retrieve the Report",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#retrieve-report",
  "content" : "Retrieve the Report You can retrieve a report with a GET call to /public/report/codeInventory/YOUR_REPORT_ID. The response must be checked to define if the data is available, based on the following possible return data: state: State of the request, one of the following options: PROCESSING SUCCEEDED FAILED PARTIALLY_FAILED TIMED_OUT stateMessages: More info related to the state. errors: Errors while creating the report (if applicable). Large reports are split into pages (up to 5.5MB per page). You can find the total number of pages in the response and use this value to retrieve all the report pages. Note Regardless of whether a report is generated successfully or not, when the generation is finished, at least one page of the report is available for retrieval. Example Request  curl -X 'GET' \\\n  'https://YOUR_ENDPOINT.azul.com/public/report/codeInventory/YOUR_REPORT_ID' \\\n  -H 'accept: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' Example Response  {\n  \"reportId\": \"1cc40ee6-87a7-4147-b02d-7d26ce0387d0\",\n  \"userId\": \"[email protected]\",\n  \"params\": {\n    \"filter\": [\n      \"sourceName:myapp.jar\",\n      \"className:com/company/firstclass\",\n      \"methodName:mymethod\"\n    ],\n    \"from\": \"2023-02-15T00:00:00.000+0200\",\n    \"to\": \"2023-02-16T23:59:59.999+0200\"\n  },\n  \"from\": \"2023-07-13T16:42:37.268\",\n  \"to\": \"2023-07-13T16:42:37.268\",\n  \"state\": \"PROCESSING\",\n  \"stateMessages\": [\n    \"1st message\",\n    \"2nd message\"\n  ],\n  \"requestTime\": \"2023-07-13T16:42:37.268\",\n  \"startTime\": \"2023-07-13T16:42:37.268\",\n  \"finishTime\": \"2023-07-13T16:42:47.231\",\n  \"data\": [\n    {\n      \"sourceName\": \"myapp.jar\",\n      \"className\": \"com/company/firstclass\",\n      \"methodName\": \"getHost(java/lang/String)\",\n      \"firstSeen\": \"2023-07-13T16:12:51.181\",\n      \"lastSeen\": \"2023-07-14T11:10:01.112\"\n    }\n  ],\n  \"totalCount\": 35352,\n  \"totalPages\": 36,\n  \"page\": 1,\n  \"afterToken\": \"2\"\n} When the JMV is configured with the AppEnv tag, as described here, the data block includes that extra info. For example:  {\n  \"reportId\": \"1cc40ee6-87a7-4147-b02d-7d26ce0387d0\",\n  ...\n  \"data\": [\n    {\n      \"sourceName\": \"myapp.jar\",\n      \"className\": \"com/company/firstclass\",\n      \"methodName\": \"getHost(java/lang/String)\",\n      \"firstSeen\": \"2023-07-13T16:12:51.181\",\n      \"lastSeen\": \"2023-07-14T11:10:01.112\",\n      \"tags\": [\n        \"AppEnv:test\"\n      ]\n    }\n  ],\n  ...\n}"
}, {
  "objectID" : "902bf5c8-137d-4f9b-81d0-ac7c59fd1111",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Example Request",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#example-request-2",
  "content" : "Example Request  curl -X 'GET' \\\n  'https://YOUR_ENDPOINT.azul.com/public/report/codeInventory/YOUR_REPORT_ID' \\\n  -H 'accept: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json'"
}, {
  "objectID" : "7c323818-ec84-4a01-8c78-52c89fbe363b",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Example Response",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#example-response-2",
  "content" : "Example Response  {\n  \"reportId\": \"1cc40ee6-87a7-4147-b02d-7d26ce0387d0\",\n  \"userId\": \"[email protected]\",\n  \"params\": {\n    \"filter\": [\n      \"sourceName:myapp.jar\",\n      \"className:com/company/firstclass\",\n      \"methodName:mymethod\"\n    ],\n    \"from\": \"2023-02-15T00:00:00.000+0200\",\n    \"to\": \"2023-02-16T23:59:59.999+0200\"\n  },\n  \"from\": \"2023-07-13T16:42:37.268\",\n  \"to\": \"2023-07-13T16:42:37.268\",\n  \"state\": \"PROCESSING\",\n  \"stateMessages\": [\n    \"1st message\",\n    \"2nd message\"\n  ],\n  \"requestTime\": \"2023-07-13T16:42:37.268\",\n  \"startTime\": \"2023-07-13T16:42:37.268\",\n  \"finishTime\": \"2023-07-13T16:42:47.231\",\n  \"data\": [\n    {\n      \"sourceName\": \"myapp.jar\",\n      \"className\": \"com/company/firstclass\",\n      \"methodName\": \"getHost(java/lang/String)\",\n      \"firstSeen\": \"2023-07-13T16:12:51.181\",\n      \"lastSeen\": \"2023-07-14T11:10:01.112\"\n    }\n  ],\n  \"totalCount\": 35352,\n  \"totalPages\": 36,\n  \"page\": 1,\n  \"afterToken\": \"2\"\n} When the JMV is configured with the AppEnv tag, as described here, the data block includes that extra info. For example:  {\n  \"reportId\": \"1cc40ee6-87a7-4147-b02d-7d26ce0387d0\",\n  ...\n  \"data\": [\n    {\n      \"sourceName\": \"myapp.jar\",\n      \"className\": \"com/company/firstclass\",\n      \"methodName\": \"getHost(java/lang/String)\",\n      \"firstSeen\": \"2023-07-13T16:12:51.181\",\n      \"lastSeen\": \"2023-07-14T11:10:01.112\",\n      \"tags\": [\n        \"AppEnv:test\"\n      ]\n    }\n  ],\n  ...\n}"
}, {
  "objectID" : "b72eb119-9712-44a4-8db0-4fa9dae25048",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Retrieve All Reports",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#retrieve-all-reports",
  "content" : "Retrieve All Reports You can retrieve a list with all reports with a GET call to https://YOUR_ENDPOINT.azul.com/public/report/codeInventory.  curl -X 'GET' \\\n  'https://YOUR_ENDPOINT.azul.com/public/report/codeInventory' \\\n  -H 'accept: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' Example Response  {\n  \"data\": [\n    {\n      \"reportId\": \"1cc40ee6-87a7-4147-b02d-7d26ce0387d0\",\n      \"state\": \"SUCCEEDED\",\n      \"stateMessages\": [\n        \"1st message\",\n        \"2nd message\"\n      ],\n      \"userId\": \"[email protected]\",\n      \"params\": {\n        \"filter\": [\n          \"sourceName:myapp.jar\",\n          \"className:com/company/firstclass\",\n          \"methodName:mymethod\"\n        ],\n        \"from\": \"2023-02-15T00:00:00.000+0200\",\n        \"to\": \"2023-02-16T23:59:59.999+0200\"\n      },\n      \"requestTime\": \"2023-02-15T00:00:00.000Z\",\n      \"startTime\": \"2023-02-15T00:00:00.000Z\",\n      \"finishTime\": \"2023-02-15T00:00:00.000Z\"\n    }\n  ],\n  \"afterToken\": \"1683200412\"\n}"
}, {
  "objectID" : "78a572d1-646b-4f7d-a396-808f1d365b02",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Example Response",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#example-response-3",
  "content" : "Example Response  {\n  \"data\": [\n    {\n      \"reportId\": \"1cc40ee6-87a7-4147-b02d-7d26ce0387d0\",\n      \"state\": \"SUCCEEDED\",\n      \"stateMessages\": [\n        \"1st message\",\n        \"2nd message\"\n      ],\n      \"userId\": \"[email protected]\",\n      \"params\": {\n        \"filter\": [\n          \"sourceName:myapp.jar\",\n          \"className:com/company/firstclass\",\n          \"methodName:mymethod\"\n        ],\n        \"from\": \"2023-02-15T00:00:00.000+0200\",\n        \"to\": \"2023-02-16T23:59:59.999+0200\"\n      },\n      \"requestTime\": \"2023-02-15T00:00:00.000Z\",\n      \"startTime\": \"2023-02-15T00:00:00.000Z\",\n      \"finishTime\": \"2023-02-15T00:00:00.000Z\"\n    }\n  ],\n  \"afterToken\": \"1683200412\"\n}"
}, {
  "objectID" : "82637f3b-1fbb-447b-a452-fc04a2cfde67",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Delete a Report",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#delete-report",
  "content" : "Delete a Report You can delete a report with a DELETE call to https://YOUR_ENDPOINT.azul.com/public/report/codeInventory/YOUR_REPORT_ID. Example Request  curl -X 'DELETE' \\\n  'https://YOUR_ENDPOINT.azul.com/public/report/codeInventory/YOUR_REPORT_ID' \\\n  -H 'accept: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' Example Response HTTP 204: Report deleted successfully."
}, {
  "objectID" : "4056a034-cc98-4193-8099-89b047d08717",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Example Request",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#example-request-3",
  "content" : "Example Request  curl -X 'DELETE' \\\n  'https://YOUR_ENDPOINT.azul.com/public/report/codeInventory/YOUR_REPORT_ID' \\\n  -H 'accept: application/json' \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json'"
}, {
  "objectID" : "49823352-0e32-48f6-adc9-42859b7ae412",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "API for Code Inventory",
  "section" : "Example Response",
  "url" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code",
  "link" : "https://docs.azul.com/intelligence-cloud/api/api-inventory-code#example-response-4",
  "content" : "Example Response HTTP 204: Report deleted successfully."
}, {
  "objectID" : "5676b8a0-47e7-49e7-b893-796f209c15b4",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "content" : "Azul Intelligence Cloud is a combination of applications running within your environment combined with an analysis and data collection solution provided by Azul as Software as a Service (SaaS). This means there is an exchange of JVM Meta Data from your environment to the Azul system. This document describes what data are exchanged exactly and how the security of your JVM Meta Data is handled at every level involved."
}, {
  "objectID" : "80e2afb4-78dd-46da-9b17-6c4ad5e62432",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "Components Within the System",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#components-within-the-system",
  "content" : "Components Within the System To be able to provide vulnerability information, three components are involved: Within your environment Java Runtimes Forwarder(s) Provided by Azul Azul Intelligence Cloud Web UI and APIs Java Runtime The Java Runtime (being Azul Zulu JRE and/or Azul Zulu Prime JRE) runs within your environment and will never need access to the public internet to exchange data with Azul Intelligence Cloud. The runtime will collect information about the libraries inside the application using the Connected Runtime Service (CRS), a component inside the JVM. But only when the argument -XX:AzCRSMode=on or environment variable AZ_CRS_ARGUMENTS are added (for more info, see Connect to Azul Intelligence Cloud via the Forwarder), the runtime will collect information about the libraries inside the application using the Connected Runtime Service (CRS), a component inside the JVM. CRS will transmit these data via the Forwarder. Note Our runtimes only send data regarding the Java runtime and libraries for this very specific functionality. There is no other information exchanged with Azul, and all collected JVM Meta Data in the Saas environment is available to you via our Web UI and API. In contrast to distributions from other providers, Azul will not, and cannot, use this information to check licenses. Forwarder The Forwarder is a separate application provided by Azul to be installed within your environment (at least once, for more info, see One-time Setup), that will transmit the JVM Meta Data provided by the runtimes to Azul Intelligence Cloud. It requires access to the public internet. Rotating certificates secure the connection between the Forwarder and Azul Intelligence Cloud. Azul Intelligence Cloud Our SaaS solution to detect vulnerabilities in your applications, uses an internal knowledge base containing \"fingerprints\" (hashes) as described on How CVEs are Detected. At this point, Azul doesn’t have any other reference to your code or applications except the info related to the Instance ID."
}, {
  "objectID" : "40e6bf3e-5fc1-40d7-a3ce-11fec7e8847e",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "Java Runtime",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#java-runtime",
  "content" : "Java Runtime The Java Runtime (being Azul Zulu JRE and/or Azul Zulu Prime JRE) runs within your environment and will never need access to the public internet to exchange data with Azul Intelligence Cloud. The runtime will collect information about the libraries inside the application using the Connected Runtime Service (CRS), a component inside the JVM. But only when the argument -XX:AzCRSMode=on or environment variable AZ_CRS_ARGUMENTS are added (for more info, see Connect to Azul Intelligence Cloud via the Forwarder), the runtime will collect information about the libraries inside the application using the Connected Runtime Service (CRS), a component inside the JVM. CRS will transmit these data via the Forwarder. Note Our runtimes only send data regarding the Java runtime and libraries for this very specific functionality. There is no other information exchanged with Azul, and all collected JVM Meta Data in the Saas environment is available to you via our Web UI and API. In contrast to distributions from other providers, Azul will not, and cannot, use this information to check licenses."
}, {
  "objectID" : "933d3fb5-60c2-429d-80d2-81227ca4e8c9",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "Forwarder",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#forwarder",
  "content" : "Forwarder The Forwarder is a separate application provided by Azul to be installed within your environment (at least once, for more info, see One-time Setup), that will transmit the JVM Meta Data provided by the runtimes to Azul Intelligence Cloud. It requires access to the public internet. Rotating certificates secure the connection between the Forwarder and Azul Intelligence Cloud."
}, {
  "objectID" : "ee7aa7e6-b155-4d4b-b468-5d48c346099f",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "Azul Intelligence Cloud",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#azul-intelligence-cloud",
  "content" : "Azul Intelligence Cloud Our SaaS solution to detect vulnerabilities in your applications, uses an internal knowledge base containing \"fingerprints\" (hashes) as described on How CVEs are Detected. At this point, Azul doesn’t have any other reference to your code or applications except the info related to the Instance ID."
}, {
  "objectID" : "8f356a14-5cbd-46b9-8934-93bad0c3eab1",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "APIs Between Java Runtime and Forwarder",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#apis-between-java-runtime-and-forwarder",
  "content" : "APIs Between Java Runtime and Forwarder The Forwarder is the \"gateway\" between the runtimes within your environment and the Azul Intelligence Cloud SaaS solution. All data flowing through the Forwarder is transmitted via an API approach. API Method Description /crs/instance/{vmId} POST Report new VM instance events. /crs/auth/rt/token GET Get new runtime token. /crs/auth/rt/token POST Refresh runtime token."
}, {
  "objectID" : "e38a3d02-9975-44cf-9fb8-f7b8ac36f79f",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "Data Model Exchanged Between Java Runtime and Forwarder",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#data-model-exchanged-between-java-runtime-and-forwarder",
  "content" : "Data Model Exchanged Between Java Runtime and Forwarder VM Event Each JVM instance reports VM events to the Forwarder. Field Description vmId VM instance associated with event, must be set only for user initiated requests eventId Synthetic primary key of event eventType See VM Event Types eventPayload Optional payload, based on eventType, see the VM Event Types eventTime VM event time (epoch millis) receivedTime The time VM event first observed by the server (epoch millis) VM Event Types VM event types supported by CRS. Event Type Event Payload VM_CREATE VM Instance VM_PATCH VM Instance VM_ARTIFACT_CREATE VM Artifact VM_ARTIFACT_PATCH VM Artifact VM_ARTIFACT_DATA VM Artifact Data VM_JAR_LOADED VM Jar Loaded VM_CLASS_LOADED VM Class Loaded VM_METHOD_FIRST_CALLED VM Method First Called VM_PERFORMANCE_METRICS VM Performance Metrics VM_HEARTBEAT - VM_SHUTDOWN - VM Event Payloads The eventPayload in VM Event is defined by the VM Event Type and uses one of the following structures. VM Instance Payload of VM_CREATE and VM_PATCH events. The model of a VM instance managed by CRS. Field Description vmId VM instance ID generated by CRS clientVersion Version of CRS client used by VM instance clientRevision Source code revision of CRS client used by VM instance inventory See the Inventory model. jvmInfo JVM information derived from VM instance metadata: Xmx: Max Java heap size Xms: Initial Java heap size startTime Start time of the VM instance (epoch millis) lastHeardTime Last time VM instance was heard by CRS service (epoch millis) owner User name associated with VM instance mailbox Mailbox ID used by CRS to report VM instance metadata and telemetry state State of VM instance last known to CRS: STARTED - [Deprecated, but can be found in old VMs] VM instance is started but not running yet RUNNING - VM instance is running TERMINATED - VM instance is terminated OFFLINE - VM instance does not respond for a long time (disconnected, crashed or any other reason) tags Tags of VM instance consisted of named string values VM Artifact Payload of VM_ARTIFACT_CREATE and VM_ARTIFACT_PATCH events. Represents information about a file associated with a specific VMInstance (e.g. GC log or JFR recording). The content of the file is not a part of the model. It is hosted by a suitable storage and is simply referenced by the VMArtifact. Field Description artifactId VM artifact ID generated by CRS on artifact creation artifactType Types of VM artifacts supported by CRS GC_LOG: GC log generated by JVM according to arguments passed to JVM VM_LOG: log generated by JVM according to arguments passed to JVM CRS_LOG: log generated by CRS agent for debug purpose JFR: JFR recording generated by JVM according to arguments passed to JVM JAR: JAR file content, can be uploaded or sent by runtime if allowed by a policy JAR_ENTRY: JAR entry content, can be sent by runtime if allowed by a policy LARGE_VM_EVENT: payload of VM event that exceeds threshold and can not be sent inlined OTHER: other type of VM artifact metadata VM artifact metadata with free form schema dependent on artifact type filename Name of the artifact vmId VM instance associated with the artifact createTime Time of VM artifact creation (epoch millis). uploadURL Presigned URL to upload artifact file. Only used as a return value. snapshot Presigned URL to download artifact snapshot. Only used as a return value. size Size of artifact data in bytes, -1 if no data available. Only used as a return value. VM Artifact Data Payload of VM_ARTIFACT_DATA events. The data is appended to VM artifact content accumulated by CRS so far. That means no concurrent events for the same VM artifact are allowed, and the ordering of sent data should be preserved by CRS. Field Description artifactId ID of VM artifact the data belongs to data Plain text representation of VM artifact data to be appended to the artifact. VM Jar Loaded Payload of VM_JAR_LOADED events. Field Description jarName JAR file name url URL used by JVM to access JAR content centralDirectoryHash Hash value computed by central directory of JAR archive centralDirectoryLength Length of the central directory of JAR archive centralDirectoryExtractionMethod Method used to obtain central directory of JAR archive recursionDepth Depth of JAR when nested JAR is reported recursively manifestHash Hash value computed by META-INF/MANIFEST.MF of JAR initiatedBy The party that initiated the reporting of JAR: CLASS_LOADING JDK_NATIVE_LOADING RECURSIVE_LOADING OTHER mavenComponents Maven components detected by metadata files of JAR (pom.properties, etc.), containing: groupId: Group ID of maven component artifactId: Artifact ID of maven component version: Version of maven component stats Time counters computed on JAR processing, containing: visitJarEntries: Elapsed time to visit JAR entries, ns jarEntriesHashes: Elapsed time to compute hashes of JAR class entries, ns jarEntriesShaded: Elapsed time to compute shaded hashes of JAR class entries, ns pomProperties: Elapsed time to process POM properties of JAR, ns entries Packed data with JAR entry details VM Class Loaded Payload of VM_CLASS_LOADED events. Field Description classId VM specific ID of the class loaderId VM specific ID of the class loader that loaded the class className Fully qualified class name source Source of the loaded class hash Hash calculated by original class content transformedHash Hash of the class that was transformed on loading (e.g. instrumented) VM Method First Called Payload of VM_METHOD_FIRST_CALLED events. Field Description classId VM specific ID of the class methodName Name and signature of the method VM Performance Metrics Payload of VM_PERFORMANCE_METRICS events. Field Description numEventBatches Number of buckets sent to the cloud (events are sent in buckets) numBytesOut Number of bytes of data sent to the cloud numConnections Total number of HTTP connections established to the cloud (including all reconnects) numRequests Total number of HTTP requests to the cloud (greater than the number of connections since connections may be cached) numClassLoads Total number of registered class load events maxQueueLength Max reached event queue length handshakeMillis Elapsed time on handshake with the cloud numBytesInArtifacts Number of bytes sent as artifact data communicationMillis Elapsed time on network activity (handshake + read + write) numBytesIn Number of bytes received from the cloud numEvents Number of events sent to the cloud (class load, jar load, and everything else) numEventHistogram Histogram of the number of events sent to the cloud in one batch (base 2 logarithm of the number of events in the batch) preShutdownMillis Time elapsed since the start of VM shutdown hooks (effectively the end of user application), till the end of processing of rest events in the queue numMethodEntries Number of executed unique Java methods Inventory VM instance inventory reported by connected runtime. Field Description hostName Host name of machine running VM instance networks Network interfaces of machine running VM instance, containing an array with hostname and address systemProperties The following subset of JVM system properties:  com.azul.crs.instance.offline.timeout\ncom.azul.crs.instance.store.discarded.vmevents\ncom.azul.crs.instance.tags\nfile.encoding\nfile.separator\njava.class.path\njava.compiler\njava.home\njava.io.tmpdir\njava.library.path\njava.runtime.version\njava.specification.version\njava.vendor\njava.vendor.version\njava.version\njava.vm.name\njava.vm.version\njava.vm.vendor\njdk.vendor.version\nline.separator\nos.arch\nos.name\nos.version\npath.separator\nsun.arch.data.model\nsun.boot.class.path\nsun.boot.library.path\nsun.cpu.endian\nsun.desktop\nsun.io.unicode.encoding\nsun.java.launcher\nsun.jnu.encoding\nsun.management.compiler\nsun.os.patch.level\nuser.country\nuser.dir\nuser.home\nuser.language\nuser.name systemInfo System info of machine running VM instance For example:  sysctl.hw.activecpu: \"16\"\nsysctl.hw.cpufrequency_min: \"2300000000\"\nsysctl.hw.memsize: \"17179869184\"\nsysctl.hw.l1dcachesize: \"32768\" cpuInfo CPU info of machine running VM instance For example:  CPU Microcode: 240\nAffected by MCU Erratum SKX102: false\nNumber of Processors: 16\nCPU Stepping: 13 memInfo Memory info of machine running VM instance For example:  System RAM max, GB: 16 osInfo OS info of machine running VM instance For example:  OS Name: Mac OS X\nOS Version: 10.16\nOS Arch: x86_64 osEnvironment Only the following list of OS environment variables, needed by Azul Intelligence Cloud, are transmitted:  AZ_CRS_ARGUMENTS\nCRS_DATACENTER\nCRS_IMAGE\nCRS_OWNER\nCRS_SERVICE\nCRS_TAGS mainMethod Main method executed by JVM on VM instance invocation For example:  HelloWorld.main"
}, {
  "objectID" : "a8cfde54-facf-4955-ab1f-d850236bf015",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Event",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-event",
  "content" : "VM Event Each JVM instance reports VM events to the Forwarder. Field Description vmId VM instance associated with event, must be set only for user initiated requests eventId Synthetic primary key of event eventType See VM Event Types eventPayload Optional payload, based on eventType, see the VM Event Types eventTime VM event time (epoch millis) receivedTime The time VM event first observed by the server (epoch millis)"
}, {
  "objectID" : "691c2864-6fa4-4eaa-8cc8-fd0dfbc6fff0",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Event Types",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-event-types",
  "content" : "VM Event Types VM event types supported by CRS. Event Type Event Payload VM_CREATE VM Instance VM_PATCH VM Instance VM_ARTIFACT_CREATE VM Artifact VM_ARTIFACT_PATCH VM Artifact VM_ARTIFACT_DATA VM Artifact Data VM_JAR_LOADED VM Jar Loaded VM_CLASS_LOADED VM Class Loaded VM_METHOD_FIRST_CALLED VM Method First Called VM_PERFORMANCE_METRICS VM Performance Metrics VM_HEARTBEAT - VM_SHUTDOWN -"
}, {
  "objectID" : "8a069e8a-3123-4819-ba23-d90761febb2f",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Event Payloads",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-event-payloads",
  "content" : "VM Event Payloads The eventPayload in VM Event is defined by the VM Event Type and uses one of the following structures. VM Instance Payload of VM_CREATE and VM_PATCH events. The model of a VM instance managed by CRS. Field Description vmId VM instance ID generated by CRS clientVersion Version of CRS client used by VM instance clientRevision Source code revision of CRS client used by VM instance inventory See the Inventory model. jvmInfo JVM information derived from VM instance metadata: Xmx: Max Java heap size Xms: Initial Java heap size startTime Start time of the VM instance (epoch millis) lastHeardTime Last time VM instance was heard by CRS service (epoch millis) owner User name associated with VM instance mailbox Mailbox ID used by CRS to report VM instance metadata and telemetry state State of VM instance last known to CRS: STARTED - [Deprecated, but can be found in old VMs] VM instance is started but not running yet RUNNING - VM instance is running TERMINATED - VM instance is terminated OFFLINE - VM instance does not respond for a long time (disconnected, crashed or any other reason) tags Tags of VM instance consisted of named string values VM Artifact Payload of VM_ARTIFACT_CREATE and VM_ARTIFACT_PATCH events. Represents information about a file associated with a specific VMInstance (e.g. GC log or JFR recording). The content of the file is not a part of the model. It is hosted by a suitable storage and is simply referenced by the VMArtifact. Field Description artifactId VM artifact ID generated by CRS on artifact creation artifactType Types of VM artifacts supported by CRS GC_LOG: GC log generated by JVM according to arguments passed to JVM VM_LOG: log generated by JVM according to arguments passed to JVM CRS_LOG: log generated by CRS agent for debug purpose JFR: JFR recording generated by JVM according to arguments passed to JVM JAR: JAR file content, can be uploaded or sent by runtime if allowed by a policy JAR_ENTRY: JAR entry content, can be sent by runtime if allowed by a policy LARGE_VM_EVENT: payload of VM event that exceeds threshold and can not be sent inlined OTHER: other type of VM artifact metadata VM artifact metadata with free form schema dependent on artifact type filename Name of the artifact vmId VM instance associated with the artifact createTime Time of VM artifact creation (epoch millis). uploadURL Presigned URL to upload artifact file. Only used as a return value. snapshot Presigned URL to download artifact snapshot. Only used as a return value. size Size of artifact data in bytes, -1 if no data available. Only used as a return value. VM Artifact Data Payload of VM_ARTIFACT_DATA events. The data is appended to VM artifact content accumulated by CRS so far. That means no concurrent events for the same VM artifact are allowed, and the ordering of sent data should be preserved by CRS. Field Description artifactId ID of VM artifact the data belongs to data Plain text representation of VM artifact data to be appended to the artifact. VM Jar Loaded Payload of VM_JAR_LOADED events. Field Description jarName JAR file name url URL used by JVM to access JAR content centralDirectoryHash Hash value computed by central directory of JAR archive centralDirectoryLength Length of the central directory of JAR archive centralDirectoryExtractionMethod Method used to obtain central directory of JAR archive recursionDepth Depth of JAR when nested JAR is reported recursively manifestHash Hash value computed by META-INF/MANIFEST.MF of JAR initiatedBy The party that initiated the reporting of JAR: CLASS_LOADING JDK_NATIVE_LOADING RECURSIVE_LOADING OTHER mavenComponents Maven components detected by metadata files of JAR (pom.properties, etc.), containing: groupId: Group ID of maven component artifactId: Artifact ID of maven component version: Version of maven component stats Time counters computed on JAR processing, containing: visitJarEntries: Elapsed time to visit JAR entries, ns jarEntriesHashes: Elapsed time to compute hashes of JAR class entries, ns jarEntriesShaded: Elapsed time to compute shaded hashes of JAR class entries, ns pomProperties: Elapsed time to process POM properties of JAR, ns entries Packed data with JAR entry details VM Class Loaded Payload of VM_CLASS_LOADED events. Field Description classId VM specific ID of the class loaderId VM specific ID of the class loader that loaded the class className Fully qualified class name source Source of the loaded class hash Hash calculated by original class content transformedHash Hash of the class that was transformed on loading (e.g. instrumented) VM Method First Called Payload of VM_METHOD_FIRST_CALLED events. Field Description classId VM specific ID of the class methodName Name and signature of the method VM Performance Metrics Payload of VM_PERFORMANCE_METRICS events. Field Description numEventBatches Number of buckets sent to the cloud (events are sent in buckets) numBytesOut Number of bytes of data sent to the cloud numConnections Total number of HTTP connections established to the cloud (including all reconnects) numRequests Total number of HTTP requests to the cloud (greater than the number of connections since connections may be cached) numClassLoads Total number of registered class load events maxQueueLength Max reached event queue length handshakeMillis Elapsed time on handshake with the cloud numBytesInArtifacts Number of bytes sent as artifact data communicationMillis Elapsed time on network activity (handshake + read + write) numBytesIn Number of bytes received from the cloud numEvents Number of events sent to the cloud (class load, jar load, and everything else) numEventHistogram Histogram of the number of events sent to the cloud in one batch (base 2 logarithm of the number of events in the batch) preShutdownMillis Time elapsed since the start of VM shutdown hooks (effectively the end of user application), till the end of processing of rest events in the queue numMethodEntries Number of executed unique Java methods"
}, {
  "objectID" : "c7d77f4a-c63e-48d8-997b-c4debbd0a4b5",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Instance",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-instance",
  "content" : "VM Instance Payload of VM_CREATE and VM_PATCH events. The model of a VM instance managed by CRS. Field Description vmId VM instance ID generated by CRS clientVersion Version of CRS client used by VM instance clientRevision Source code revision of CRS client used by VM instance inventory See the Inventory model. jvmInfo JVM information derived from VM instance metadata: Xmx: Max Java heap size Xms: Initial Java heap size startTime Start time of the VM instance (epoch millis) lastHeardTime Last time VM instance was heard by CRS service (epoch millis) owner User name associated with VM instance mailbox Mailbox ID used by CRS to report VM instance metadata and telemetry state State of VM instance last known to CRS: STARTED - [Deprecated, but can be found in old VMs] VM instance is started but not running yet RUNNING - VM instance is running TERMINATED - VM instance is terminated OFFLINE - VM instance does not respond for a long time (disconnected, crashed or any other reason) tags Tags of VM instance consisted of named string values"
}, {
  "objectID" : "74b09611-b744-405b-849e-a6d07921edd3",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Artifact",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-artifact",
  "content" : "VM Artifact Payload of VM_ARTIFACT_CREATE and VM_ARTIFACT_PATCH events. Represents information about a file associated with a specific VMInstance (e.g. GC log or JFR recording). The content of the file is not a part of the model. It is hosted by a suitable storage and is simply referenced by the VMArtifact. Field Description artifactId VM artifact ID generated by CRS on artifact creation artifactType Types of VM artifacts supported by CRS GC_LOG: GC log generated by JVM according to arguments passed to JVM VM_LOG: log generated by JVM according to arguments passed to JVM CRS_LOG: log generated by CRS agent for debug purpose JFR: JFR recording generated by JVM according to arguments passed to JVM JAR: JAR file content, can be uploaded or sent by runtime if allowed by a policy JAR_ENTRY: JAR entry content, can be sent by runtime if allowed by a policy LARGE_VM_EVENT: payload of VM event that exceeds threshold and can not be sent inlined OTHER: other type of VM artifact metadata VM artifact metadata with free form schema dependent on artifact type filename Name of the artifact vmId VM instance associated with the artifact createTime Time of VM artifact creation (epoch millis). uploadURL Presigned URL to upload artifact file. Only used as a return value. snapshot Presigned URL to download artifact snapshot. Only used as a return value. size Size of artifact data in bytes, -1 if no data available. Only used as a return value."
}, {
  "objectID" : "0a2f55de-c81a-41dd-99a7-99b66b0df003",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Artifact Data",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-artifact-data",
  "content" : "VM Artifact Data Payload of VM_ARTIFACT_DATA events. The data is appended to VM artifact content accumulated by CRS so far. That means no concurrent events for the same VM artifact are allowed, and the ordering of sent data should be preserved by CRS. Field Description artifactId ID of VM artifact the data belongs to data Plain text representation of VM artifact data to be appended to the artifact."
}, {
  "objectID" : "ad8d5abb-da8c-4891-8b70-a0cd4a183bed",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Jar Loaded",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-jar-loaded",
  "content" : "VM Jar Loaded Payload of VM_JAR_LOADED events. Field Description jarName JAR file name url URL used by JVM to access JAR content centralDirectoryHash Hash value computed by central directory of JAR archive centralDirectoryLength Length of the central directory of JAR archive centralDirectoryExtractionMethod Method used to obtain central directory of JAR archive recursionDepth Depth of JAR when nested JAR is reported recursively manifestHash Hash value computed by META-INF/MANIFEST.MF of JAR initiatedBy The party that initiated the reporting of JAR: CLASS_LOADING JDK_NATIVE_LOADING RECURSIVE_LOADING OTHER mavenComponents Maven components detected by metadata files of JAR (pom.properties, etc.), containing: groupId: Group ID of maven component artifactId: Artifact ID of maven component version: Version of maven component stats Time counters computed on JAR processing, containing: visitJarEntries: Elapsed time to visit JAR entries, ns jarEntriesHashes: Elapsed time to compute hashes of JAR class entries, ns jarEntriesShaded: Elapsed time to compute shaded hashes of JAR class entries, ns pomProperties: Elapsed time to process POM properties of JAR, ns entries Packed data with JAR entry details"
}, {
  "objectID" : "26604143-a4d5-4f92-9ab0-ed4ef8597e6c",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Class Loaded",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-class-loaded",
  "content" : "VM Class Loaded Payload of VM_CLASS_LOADED events. Field Description classId VM specific ID of the class loaderId VM specific ID of the class loader that loaded the class className Fully qualified class name source Source of the loaded class hash Hash calculated by original class content transformedHash Hash of the class that was transformed on loading (e.g. instrumented)"
}, {
  "objectID" : "54140ad1-1dc1-4d81-bee3-3cf9512a4b69",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Method First Called",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-method-first-called",
  "content" : "VM Method First Called Payload of VM_METHOD_FIRST_CALLED events. Field Description classId VM specific ID of the class methodName Name and signature of the method"
}, {
  "objectID" : "7589291d-dc9d-4dd7-b03e-26ea61febb95",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "VM Performance Metrics",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#vm-performance-metrics",
  "content" : "VM Performance Metrics Payload of VM_PERFORMANCE_METRICS events. Field Description numEventBatches Number of buckets sent to the cloud (events are sent in buckets) numBytesOut Number of bytes of data sent to the cloud numConnections Total number of HTTP connections established to the cloud (including all reconnects) numRequests Total number of HTTP requests to the cloud (greater than the number of connections since connections may be cached) numClassLoads Total number of registered class load events maxQueueLength Max reached event queue length handshakeMillis Elapsed time on handshake with the cloud numBytesInArtifacts Number of bytes sent as artifact data communicationMillis Elapsed time on network activity (handshake + read + write) numBytesIn Number of bytes received from the cloud numEvents Number of events sent to the cloud (class load, jar load, and everything else) numEventHistogram Histogram of the number of events sent to the cloud in one batch (base 2 logarithm of the number of events in the batch) preShutdownMillis Time elapsed since the start of VM shutdown hooks (effectively the end of user application), till the end of processing of rest events in the queue numMethodEntries Number of executed unique Java methods"
}, {
  "objectID" : "c52df5fe-93a7-44ba-8d97-466c82ebabe3",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "What Info is Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "Inventory",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/what-info-is-transmitted#inventory",
  "content" : "Inventory VM instance inventory reported by connected runtime. Field Description hostName Host name of machine running VM instance networks Network interfaces of machine running VM instance, containing an array with hostname and address systemProperties The following subset of JVM system properties:  com.azul.crs.instance.offline.timeout\ncom.azul.crs.instance.store.discarded.vmevents\ncom.azul.crs.instance.tags\nfile.encoding\nfile.separator\njava.class.path\njava.compiler\njava.home\njava.io.tmpdir\njava.library.path\njava.runtime.version\njava.specification.version\njava.vendor\njava.vendor.version\njava.version\njava.vm.name\njava.vm.version\njava.vm.vendor\njdk.vendor.version\nline.separator\nos.arch\nos.name\nos.version\npath.separator\nsun.arch.data.model\nsun.boot.class.path\nsun.boot.library.path\nsun.cpu.endian\nsun.desktop\nsun.io.unicode.encoding\nsun.java.launcher\nsun.jnu.encoding\nsun.management.compiler\nsun.os.patch.level\nuser.country\nuser.dir\nuser.home\nuser.language\nuser.name systemInfo System info of machine running VM instance For example:  sysctl.hw.activecpu: \"16\"\nsysctl.hw.cpufrequency_min: \"2300000000\"\nsysctl.hw.memsize: \"17179869184\"\nsysctl.hw.l1dcachesize: \"32768\" cpuInfo CPU info of machine running VM instance For example:  CPU Microcode: 240\nAffected by MCU Erratum SKX102: false\nNumber of Processors: 16\nCPU Stepping: 13 memInfo Memory info of machine running VM instance For example:  System RAM max, GB: 16 osInfo OS info of machine running VM instance For example:  OS Name: Mac OS X\nOS Version: 10.16\nOS Arch: x86_64 osEnvironment Only the following list of OS environment variables, needed by Azul Intelligence Cloud, are transmitted:  AZ_CRS_ARGUMENTS\nCRS_DATACENTER\nCRS_IMAGE\nCRS_OWNER\nCRS_SERVICE\nCRS_TAGS mainMethod Main method executed by JVM on VM instance invocation For example:  HelloWorld.main"
}, {
  "objectID" : "c3f4982d-9efb-4e74-b994-4fe1d4693349",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Validating the Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/validating-transmitted-data",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/validating-transmitted-data",
  "content" : "On What Info is Transmitted Between Your System and Azul Intelligence Cloud the data that is sent from your system is documented. You can validate this data using one of the following methods."
}, {
  "objectID" : "47ee60cf-8e17-4122-8243-fc30ff13f4a8",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Validating the Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "Check the Forwarder Logging",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/validating-transmitted-data",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/validating-transmitted-data#check-the-forwarder-logging",
  "content" : "Check the Forwarder Logging Set the LOG_LEVEL of the Forwarder to TRACE to get a print of every message that is received in the Forwarder. See Configuring the Forwarder for more info."
}, {
  "objectID" : "f65493b6-c2d6-4238-b63f-b9c8505cf256",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Validating the Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "Capturing the Transmitted Data Using Wireshark",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/validating-transmitted-data",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/validating-transmitted-data#capturing-the-transmitted-data-using-wireshark",
  "content" : "Capturing the Transmitted Data Using Wireshark Since the data that is being transmitted between the JVMs and the Forwarder is encrypted with TLS, Wireshark needs access to the encryption keys. Use the following steps to be able to capture this data. Configure Wireshark to find the keys: Preferences > Protocols > TLS > Pre-Master-Secret log filename. Specify a local filename. Configure your JVM to put the keys in the file. Use the jSSKeyLog agent. Instructions on downloading and setting up jSSKeyLog can be found at github.com/jsslkeylog. Example:  -javaagent:~/Projects/jSSLKeyLog/jSSLKeyLog.jar=~/Projects/avdtest/conf/sslkey.log Configure Wireshark to capture packets going to the IP address of the Forwarder. Run your Java application that has been configured for CRS and also has the jSSKeyLog agent attached. You should see the packets in Wireshark and when you look an HTTP/JSON packet with URI prefix /crs the payload should be in plain text (readable JSON). To reduce the Wireshark output to just the packets of interest add the following filter:  http.request.method == POST && http.request.uri contains \"/crs\" Save this capture to a file. Note This is important as the next step only works on a saved file, not a live capture. Export the contents of the JSON out of Wireshark into a JSON file. File > Export Packet Dissections > As JSON The resulting file has more details about the HTTP conversation. It is an array that you need to parse to get to another array. Each array item is an HTTP/Post that contains the actual payload in _source.layers.http[http.file_data]. This payload is a JSON in a string with an array of events. These are the events that CRS sent to the Forwarder. Note Method data does not always have the string name of the class in the event but it does include a classId that can be used to find the class name in other EVENTS. AVD data is sent with an eventName and payload, as described in \"VM Event\". Data Examples  {\n    \"eventId\": \"d8b1947c-5337-427b-979c-6e4bb36fde49\",\n    \"eventType\": \"VM_CREATE\",\n    \"eventPayload\": {\n        \"agentVersion\": \"1.0.26-1462\",\n        \"agentRevision\": \"41ffdd5\",\n        \"inventory\": {\n            \"hostName\": \"localhost\",\n            \"systemProperties\": {\n                \"java.specification.version\": \"11\",\n                \"sun.management.compiler\": \"HotSpot 64-Bit Tiered Compilers\",\n                \"sun.jnu.encoding\": \"UTF-8\",\n                \"java.runtime.version\": \"11.0.20+0-LTS-dev-20230413100725\",\n                \"user.name\": \"test\",\n                \"java.class.path\": \"target/jtest-2.14.1.jar:lib-2.14.1/log4j-core-2.14.1.jar:lib-2.14.1/log4j-api-2.14.1.jar\",\n                \"java.vm.vendor\": \"Azul Systems, Inc.\",\n                \"path.separator\": \":\",\n                \"sun.arch.data.model\": \"64\",\n                \"os.version\": \"13.3.1\",\n                \"file.encoding\": \"UTF-8\",\n                \"os.name\": \"Mac OS X\",\n                \"java.vm.name\": \"OpenJDK 64-Bit Server VM\",\n                \"java.vendor.version\": \"Zulu11.66+0-CA-dev-20230413100725\",\n                \"sun.java.launcher\": \"SUN_STANDARD\",\n                \"user.country\": \"US\",\n                \"sun.boot.library.path\": \"/Users/test/IdeaProjects/ictest/jdks/Zulu11.66+0-CA-dev-20230413100725/lib\",\n                \"java.io.tmpdir\": \"/var/folders/0s/g4h1_8y13bggncbny502s5b80000gp/T/\",\n                \"java.version\": \"11.0.20\",\n                \"sun.cpu.endian\": \"little\",\n                \"user.home\": \"/Users/test\",\n                \"user.dir\": \"/Users/test/IdeaProjects/ictest/apps/log4jTest\",\n                \"user.language\": \"en\",\n                \"os.arch\": \"x86_64\",\n                \"java.home\": \"/Users/test/IdeaProjects/ictest/jdks/Zulu11.66+0-CA-dev-20230413100725\",\n                \"sun.os.patch.level\": \"unknown\",\n                \"file.separator\": \"/\",\n                \"line.separator\": \"\\n\",\n                \"java.library.path\": \"/Users/test/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.\",\n                \"jdk.vendor.version\": \"Zulu11.66+0-CA-dev-20230413100725\",\n                \"java.vendor\": \"Azul Systems, Inc.\",\n                \"java.vm.version\": \"11.0.20+0-LTS-dev-20230413100725\",\n                \"sun.io.unicode.encoding\": \"UnicodeBig\"\n            },\n            \"osEnvironment\": {\n                \"AZ_CRS_ARGUMENTS\": \"UnlockExperimentalCRS,enable,api.url=https://127.0.0.1:443,api.mailbox=mailbox@crs,log=debug+time,delayInitiation=0,delayTermination=120000,notifyFirstCall=true\",\n                \"CRS_TAGS\": \"testtid=92E54103-4145-4DA4-AC79-578A1109A327;testapp=Log4j;testmod=14_PRESENT\"\n            },\n            \"mainMethod\": \"jdk/internal/jimage/BasicImageReader$1.run\"\n        },\n        \"startTime\": 1681488478704,\n        \"owner\": \"mailbox@crs\"\n    }\n}\n\n{\n    \"eventId\": \"4ff1aaea-806c-4804-9697-5223608b1470\",\n    \"eventType\": \"VM_ARTIFACT_CREATE\",\n    \"eventPayload\": {\n        \"artifactId\": \"1\",\n        \"artifactType\": \"CRS_LOG\",\n        \"metadata\": {\n            \"name\": \"crs.log\"\n        }\n    }\n}\n\n{\n    \"eventId\": \"07749e32-3ace-41d4-bcd1-f6c6f797b930\",\n    \"eventType\": \"VM_ARTIFACT_DATA\",\n    \"eventPayload\": {\n        \"data\": \"0.455: [CRS.args][error] unrecognized CRS agent option printParameters ignored\\n0.525: [CRS.id][debug] 0.525: [CRS.id][warning] notifyToJavaCall name 'jdk/internal/jimage/BasicImageReader$1.run' accepted.\\nnotifyToJavaCall - name jdk/internal/jimage/BasicImageReader$1.run has been already accepted, skip jdk/internal/loader/BuiltinClassLoader$2.run\\n0.537: [CRS.connection][info] Using CRS endpoint configuration\\n0.537: [CRS.connection][info]    API url = https://127.0.0.1:443\\n0.537: [CRS.connection][info]    mailbox = mailbox@crs\\n0.540: [CRS.id][trace] checking if startup is complete and waiting for it to finish (120000 ms)\\n0.561: [CRS.id][debug] CRS agent (1.0.26-1462+41ffdd5) started. Start time 1681488478704, VM uptime 531ms\\n0.663: [CRS.id][trace] Post VM start to CRS service\\n0.685: [CRS.id][trace] Active VMCRSCapabilities: [POST_JAR_LOAD_EVENTS, POST_CLASS_LOAD_EVENTS, POST_FIRST_CALL_EVENTS, POST_NOTIFY_TO_JAVA_CALLS, POST_VM_TOOLING_EVENT]\\n1.257: [CRS.connection][info] Get runtime token: clientVersion=1.0.26-1462, mailbox=mailbox@crs\\n2.355: [CRS.id][info] Agent authenticated: vmId=b6426012-27d0-4107-89c5-9d7c79f92640\\n2.357: [CRS.id][debug]  VM uptime 2327ms\\n\",\n        \"artifactId\": \"1\"\n    }\n}\n\n{\n    \"eventId\": \"659f1361-19ad-46d2-84e4-8340ff55938f\",\n    \"eventType\": \"VM_CLASS_LOADED\",\n    \"eventTime\": 1681488481265,\n    \"eventPayload\": {\n        \"classId\": \"2878\",\n        \"loaderId\": \"1\",\n        \"className\": \"java/lang/ProcessHandleImpl$1\",\n        \"source\": \"/Users/test/IdeaProjects/ictest/jdks/Zulu11.66+0-CA-dev-20230413100725/lib/modules\",\n        \"hash\": \"66b2551812eb9d408752e884ea503ee1dd181797926e5498bacca932869ac50d\"\n    }\n}\n\n{\n    \"eventId\": \"15478e09-43b1-4c2f-b58d-b02574f5a824\",\n    \"eventType\": \"VM_METHOD_FIRST_CALLED\",\n    \"eventTime\": 1681488481249,\n    \"eventPayload\": {\n        \"classId\": \"2878\",\n        \"methodName\": \"run()V\"\n    }\n}\n\n{\n    \"eventId\": \"3fdf2e5e-d60c-4f32-b3e0-225a55ab7d6a\",\n    \"eventType\": \"VM_CLASS_LOADED\",\n    \"eventTime\": 1681488481524,\n    \"eventPayload\": {\n        \"classId\": \"1307\",\n        \"loaderId\": \"3\",\n        \"className\": \"com/azul/test/Main\",\n        \"source\": \"file:/Users/test/IdeaProjects/ictest/apps/log4jTest/target/jtest-2.14.1.jar\",\n        \"hash\": \"ac04bef1ef16cdc754483b694af31a36db1f8e42b5dd7243c800be22c8a1d95d\"\n    }\n}\n\n{\n    \"eventId\": \"1133fed5-45ee-4d00-ac4d-40e007f858f8\",\n    \"eventType\": \"VM_METHOD_FIRST_CALLED\",\n    \"eventTime\": 1681488481524,\n    \"eventPayload\": {\n        \"classId\": \"1307\",\n        \"methodName\": \"main([Ljava/lang/String;)V\"\n    }\n}"
}, {
  "objectID" : "d7f41079-85fa-4024-99fb-827b12b39bb1",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Validating the Transmitted Between Your System and Azul Intelligence Cloud",
  "section" : "Data Examples",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/validating-transmitted-data",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/validating-transmitted-data#data-examples",
  "content" : "Data Examples  {\n    \"eventId\": \"d8b1947c-5337-427b-979c-6e4bb36fde49\",\n    \"eventType\": \"VM_CREATE\",\n    \"eventPayload\": {\n        \"agentVersion\": \"1.0.26-1462\",\n        \"agentRevision\": \"41ffdd5\",\n        \"inventory\": {\n            \"hostName\": \"localhost\",\n            \"systemProperties\": {\n                \"java.specification.version\": \"11\",\n                \"sun.management.compiler\": \"HotSpot 64-Bit Tiered Compilers\",\n                \"sun.jnu.encoding\": \"UTF-8\",\n                \"java.runtime.version\": \"11.0.20+0-LTS-dev-20230413100725\",\n                \"user.name\": \"test\",\n                \"java.class.path\": \"target/jtest-2.14.1.jar:lib-2.14.1/log4j-core-2.14.1.jar:lib-2.14.1/log4j-api-2.14.1.jar\",\n                \"java.vm.vendor\": \"Azul Systems, Inc.\",\n                \"path.separator\": \":\",\n                \"sun.arch.data.model\": \"64\",\n                \"os.version\": \"13.3.1\",\n                \"file.encoding\": \"UTF-8\",\n                \"os.name\": \"Mac OS X\",\n                \"java.vm.name\": \"OpenJDK 64-Bit Server VM\",\n                \"java.vendor.version\": \"Zulu11.66+0-CA-dev-20230413100725\",\n                \"sun.java.launcher\": \"SUN_STANDARD\",\n                \"user.country\": \"US\",\n                \"sun.boot.library.path\": \"/Users/test/IdeaProjects/ictest/jdks/Zulu11.66+0-CA-dev-20230413100725/lib\",\n                \"java.io.tmpdir\": \"/var/folders/0s/g4h1_8y13bggncbny502s5b80000gp/T/\",\n                \"java.version\": \"11.0.20\",\n                \"sun.cpu.endian\": \"little\",\n                \"user.home\": \"/Users/test\",\n                \"user.dir\": \"/Users/test/IdeaProjects/ictest/apps/log4jTest\",\n                \"user.language\": \"en\",\n                \"os.arch\": \"x86_64\",\n                \"java.home\": \"/Users/test/IdeaProjects/ictest/jdks/Zulu11.66+0-CA-dev-20230413100725\",\n                \"sun.os.patch.level\": \"unknown\",\n                \"file.separator\": \"/\",\n                \"line.separator\": \"\\n\",\n                \"java.library.path\": \"/Users/test/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.\",\n                \"jdk.vendor.version\": \"Zulu11.66+0-CA-dev-20230413100725\",\n                \"java.vendor\": \"Azul Systems, Inc.\",\n                \"java.vm.version\": \"11.0.20+0-LTS-dev-20230413100725\",\n                \"sun.io.unicode.encoding\": \"UnicodeBig\"\n            },\n            \"osEnvironment\": {\n                \"AZ_CRS_ARGUMENTS\": \"UnlockExperimentalCRS,enable,api.url=https://127.0.0.1:443,api.mailbox=mailbox@crs,log=debug+time,delayInitiation=0,delayTermination=120000,notifyFirstCall=true\",\n                \"CRS_TAGS\": \"testtid=92E54103-4145-4DA4-AC79-578A1109A327;testapp=Log4j;testmod=14_PRESENT\"\n            },\n            \"mainMethod\": \"jdk/internal/jimage/BasicImageReader$1.run\"\n        },\n        \"startTime\": 1681488478704,\n        \"owner\": \"mailbox@crs\"\n    }\n}\n\n{\n    \"eventId\": \"4ff1aaea-806c-4804-9697-5223608b1470\",\n    \"eventType\": \"VM_ARTIFACT_CREATE\",\n    \"eventPayload\": {\n        \"artifactId\": \"1\",\n        \"artifactType\": \"CRS_LOG\",\n        \"metadata\": {\n            \"name\": \"crs.log\"\n        }\n    }\n}\n\n{\n    \"eventId\": \"07749e32-3ace-41d4-bcd1-f6c6f797b930\",\n    \"eventType\": \"VM_ARTIFACT_DATA\",\n    \"eventPayload\": {\n        \"data\": \"0.455: [CRS.args][error] unrecognized CRS agent option printParameters ignored\\n0.525: [CRS.id][debug] 0.525: [CRS.id][warning] notifyToJavaCall name 'jdk/internal/jimage/BasicImageReader$1.run' accepted.\\nnotifyToJavaCall - name jdk/internal/jimage/BasicImageReader$1.run has been already accepted, skip jdk/internal/loader/BuiltinClassLoader$2.run\\n0.537: [CRS.connection][info] Using CRS endpoint configuration\\n0.537: [CRS.connection][info]    API url = https://127.0.0.1:443\\n0.537: [CRS.connection][info]    mailbox = mailbox@crs\\n0.540: [CRS.id][trace] checking if startup is complete and waiting for it to finish (120000 ms)\\n0.561: [CRS.id][debug] CRS agent (1.0.26-1462+41ffdd5) started. Start time 1681488478704, VM uptime 531ms\\n0.663: [CRS.id][trace] Post VM start to CRS service\\n0.685: [CRS.id][trace] Active VMCRSCapabilities: [POST_JAR_LOAD_EVENTS, POST_CLASS_LOAD_EVENTS, POST_FIRST_CALL_EVENTS, POST_NOTIFY_TO_JAVA_CALLS, POST_VM_TOOLING_EVENT]\\n1.257: [CRS.connection][info] Get runtime token: clientVersion=1.0.26-1462, mailbox=mailbox@crs\\n2.355: [CRS.id][info] Agent authenticated: vmId=b6426012-27d0-4107-89c5-9d7c79f92640\\n2.357: [CRS.id][debug]  VM uptime 2327ms\\n\",\n        \"artifactId\": \"1\"\n    }\n}\n\n{\n    \"eventId\": \"659f1361-19ad-46d2-84e4-8340ff55938f\",\n    \"eventType\": \"VM_CLASS_LOADED\",\n    \"eventTime\": 1681488481265,\n    \"eventPayload\": {\n        \"classId\": \"2878\",\n        \"loaderId\": \"1\",\n        \"className\": \"java/lang/ProcessHandleImpl$1\",\n        \"source\": \"/Users/test/IdeaProjects/ictest/jdks/Zulu11.66+0-CA-dev-20230413100725/lib/modules\",\n        \"hash\": \"66b2551812eb9d408752e884ea503ee1dd181797926e5498bacca932869ac50d\"\n    }\n}\n\n{\n    \"eventId\": \"15478e09-43b1-4c2f-b58d-b02574f5a824\",\n    \"eventType\": \"VM_METHOD_FIRST_CALLED\",\n    \"eventTime\": 1681488481249,\n    \"eventPayload\": {\n        \"classId\": \"2878\",\n        \"methodName\": \"run()V\"\n    }\n}\n\n{\n    \"eventId\": \"3fdf2e5e-d60c-4f32-b3e0-225a55ab7d6a\",\n    \"eventType\": \"VM_CLASS_LOADED\",\n    \"eventTime\": 1681488481524,\n    \"eventPayload\": {\n        \"classId\": \"1307\",\n        \"loaderId\": \"3\",\n        \"className\": \"com/azul/test/Main\",\n        \"source\": \"file:/Users/test/IdeaProjects/ictest/apps/log4jTest/target/jtest-2.14.1.jar\",\n        \"hash\": \"ac04bef1ef16cdc754483b694af31a36db1f8e42b5dd7243c800be22c8a1d95d\"\n    }\n}\n\n{\n    \"eventId\": \"1133fed5-45ee-4d00-ac4d-40e007f858f8\",\n    \"eventType\": \"VM_METHOD_FIRST_CALLED\",\n    \"eventTime\": 1681488481524,\n    \"eventPayload\": {\n        \"classId\": \"1307\",\n        \"methodName\": \"main([Ljava/lang/String;)V\"\n    }\n}"
}, {
  "objectID" : "92e0ae61-4a1c-4fa6-916a-af22d2d3ee23",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#where-to-specify-arguments",
  "content" : "Connected Runtime Services (CRS) is the component inside the JVM that runs your applications. CRS collects the dependency information of your application, and sends it via the Forwarder to Azul Intelligence Cloud. Skip to section Where to specify arguments for a quick start."
}, {
  "objectID" : "2e037ffb-ecc3-4649-a454-584e37be10cd",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "Configuration Options",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#configuration-options",
  "content" : "Configuration Options CRS can be controlled with the following command line arguments or environment variables. Command line Environment Variable Options -XX:AzCRSMode - auto: Default value. CRS decides whether it needs to start in the main method, and excludes tools like javap, javac having a specific main method in com.sun.tools. on: Forces CRS to start, if all required configurations are available (e.g. endpoint), even for tools like javap, javac. off: Forces CRS to be disabled regardless Note When you add the -XX:AzCRSMode option to the command line, the enable option, presented in the AzCRSArguments command line option with the AZ_CRS_ARGUMENTS environment variable, is ignored. -XX:AzCRSArguments AZ_CRS_ARGUMENTS See description below -Dcom.azul.crs.instance.tags CRS_TAGS See description below CRS Arguments CRS Arguments are specified in a comma-separated value format.  -XX:AzCRSArguments=expression1,expression2,expression3,...\n\nOR\n\nexport AZ_CRS_ARGUMENTS=expression1,expression2,expression3,... Each expression is either <propertyName>=<value>, or just <propertyName> for Boolean properties. These are the available properties: Argument Default Description enable true Use this argument when you can’t adjust the command line, to enable or disable the CRS agent. Enabling the CRS agent with enable=true has the same effect as -XX:AzCRSMode=auto. Note When you specify the -XX:AzCRSMode runtime flag, this enable environment variable flag, gets ignored. delayInitiation 2000 Number of milliseconds to delay the CRS start. The default enables integration with major Java frameworks. Lower to 0 for short-lived microservices. delayTermination 0 Number of milliseconds to hold a JVM alive at its end, providing time to send the collected data to the Forwarder. Raise the value to provide time to short-lived microservices. The provided value will be used as a maximum, if CRS takes less time (down to 0), the delay will not use the fully defined duration. notifyFirstCall false Enables the Code Inventory functionality at the method level. When set to true, it will send events of the first method execution to the Forwarder. log ERROR The level of logging for CRS. Options are (case insensitive): TRACE, DEBUG, INFO, WARNING, ERROR, OFF. The use of the TRACE level is discouraged, since the size of the output will be enormous. keystore null If set, this keystore will be used to authenticate the JVM with the Forwarder. Set this to a Java Keystore file if you are using self-signed certificates. props ~/.az_crs/config.properties Location of a properties file to configure CRS. api.url null This is the base URL of your Forwarder instance. If null, your runtime will perform a DNS-based lookup to locate its Forwarder. If no Forwarder is specified anywhere, CRS will be effectively disabled. The Forwarder endpoint must be in URL format, e.g. https://FORWARDER_IP:443. printParameters false Print the value of all CRS arguments. heartbeat 4 Number of seconds for your JVM to keep its long-lasting connection to the Forwarder open. Raising this may improve Java 11+ through its HTTP2 connections but may cause timeout/new connections with Java 8 HTTP 1.1. CRS Tags A tag is a user-defined key-value pair that is associated with an instance. Tags are used to search, categorize, and organize instances logically in the Azul Intelligence Cloud Web UI. Unlike instance IDs, tags are not unique. You can add the same tag to multiple instances as well as add multiple tags to one instance. Applying Tags Tag keys must begin with a letter. Both key and value may contain lower and upper case letters, and numbers. These additional characters are also allowed:  ALLOWED_KEY_EXTRA_CHARS = \"-_.\"\nALLOWED_VALUE_EXTRA_CHARS = \"-_. :/@\" <-- Includes space Note Tags can be provided both as environment variable and in command line options. When using both, the result will be combined. It’s recommended to use environment variables as it allows AZ_CRS_ARGUMENTS to be mostly the same for each JVM. Special Tags A few tags are handled in a specific way with the system: Tag Description Example AppEnv To use the \"Code Inventory Summarization\" feature, you need to configure an AppEnv value on the machine where you run the JVM. The value is, for example, the application name. This information is sent through the Forwarder to the Azul Intelligence Cloud system, together with information about the components, classes, and methods that are used. AppEnv=test Usage Examples A few examples as command line argument or environment variable:  -Dcom.azul.crs.instance.tags=\"system-prop.tag_1=system prop/value@1; system_prop_tag.2=system prop:value/2\"\n\nOR\n\nexport CRS_TAGS=\"env.tag-1=value:1; env_Tag_2=value 2\" Recommended Tagging Practice It is important that you properly tag your instances. As a general rule, tagging should reflect the way you categorize your Java applications. For example, you can use \"west-coast\", \"east-coast\", and so on to distinguish between different availability zones/locations. Note Some instance properties are detected automatically. For example, you don’t have to tag Java versions, because it’s detected by CRS."
}, {
  "objectID" : "436871ca-5b11-4f5f-aeca-45d1011da6fe",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "CRS Arguments",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#crs-arguments",
  "content" : "CRS Arguments CRS Arguments are specified in a comma-separated value format.  -XX:AzCRSArguments=expression1,expression2,expression3,...\n\nOR\n\nexport AZ_CRS_ARGUMENTS=expression1,expression2,expression3,... Each expression is either <propertyName>=<value>, or just <propertyName> for Boolean properties. These are the available properties: Argument Default Description enable true Use this argument when you can’t adjust the command line, to enable or disable the CRS agent. Enabling the CRS agent with enable=true has the same effect as -XX:AzCRSMode=auto. Note When you specify the -XX:AzCRSMode runtime flag, this enable environment variable flag, gets ignored. delayInitiation 2000 Number of milliseconds to delay the CRS start. The default enables integration with major Java frameworks. Lower to 0 for short-lived microservices. delayTermination 0 Number of milliseconds to hold a JVM alive at its end, providing time to send the collected data to the Forwarder. Raise the value to provide time to short-lived microservices. The provided value will be used as a maximum, if CRS takes less time (down to 0), the delay will not use the fully defined duration. notifyFirstCall false Enables the Code Inventory functionality at the method level. When set to true, it will send events of the first method execution to the Forwarder. log ERROR The level of logging for CRS. Options are (case insensitive): TRACE, DEBUG, INFO, WARNING, ERROR, OFF. The use of the TRACE level is discouraged, since the size of the output will be enormous. keystore null If set, this keystore will be used to authenticate the JVM with the Forwarder. Set this to a Java Keystore file if you are using self-signed certificates. props ~/.az_crs/config.properties Location of a properties file to configure CRS. api.url null This is the base URL of your Forwarder instance. If null, your runtime will perform a DNS-based lookup to locate its Forwarder. If no Forwarder is specified anywhere, CRS will be effectively disabled. The Forwarder endpoint must be in URL format, e.g. https://FORWARDER_IP:443. printParameters false Print the value of all CRS arguments. heartbeat 4 Number of seconds for your JVM to keep its long-lasting connection to the Forwarder open. Raising this may improve Java 11+ through its HTTP2 connections but may cause timeout/new connections with Java 8 HTTP 1.1."
}, {
  "objectID" : "6279aba9-a41e-4faf-a3dc-32ba7b4d838d",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "CRS Tags",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#crs-tags",
  "content" : "CRS Tags A tag is a user-defined key-value pair that is associated with an instance. Tags are used to search, categorize, and organize instances logically in the Azul Intelligence Cloud Web UI. Unlike instance IDs, tags are not unique. You can add the same tag to multiple instances as well as add multiple tags to one instance. Applying Tags Tag keys must begin with a letter. Both key and value may contain lower and upper case letters, and numbers. These additional characters are also allowed:  ALLOWED_KEY_EXTRA_CHARS = \"-_.\"\nALLOWED_VALUE_EXTRA_CHARS = \"-_. :/@\" <-- Includes space Note Tags can be provided both as environment variable and in command line options. When using both, the result will be combined. It’s recommended to use environment variables as it allows AZ_CRS_ARGUMENTS to be mostly the same for each JVM. Special Tags A few tags are handled in a specific way with the system: Tag Description Example AppEnv To use the \"Code Inventory Summarization\" feature, you need to configure an AppEnv value on the machine where you run the JVM. The value is, for example, the application name. This information is sent through the Forwarder to the Azul Intelligence Cloud system, together with information about the components, classes, and methods that are used. AppEnv=test Usage Examples A few examples as command line argument or environment variable:  -Dcom.azul.crs.instance.tags=\"system-prop.tag_1=system prop/value@1; system_prop_tag.2=system prop:value/2\"\n\nOR\n\nexport CRS_TAGS=\"env.tag-1=value:1; env_Tag_2=value 2\" Recommended Tagging Practice It is important that you properly tag your instances. As a general rule, tagging should reflect the way you categorize your Java applications. For example, you can use \"west-coast\", \"east-coast\", and so on to distinguish between different availability zones/locations. Note Some instance properties are detected automatically. For example, you don’t have to tag Java versions, because it’s detected by CRS."
}, {
  "objectID" : "2a1667d8-40e7-46c2-8ce5-664ce9a44ba3",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "Applying Tags",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#applying-tags",
  "content" : "Applying Tags Tag keys must begin with a letter. Both key and value may contain lower and upper case letters, and numbers. These additional characters are also allowed:  ALLOWED_KEY_EXTRA_CHARS = \"-_.\"\nALLOWED_VALUE_EXTRA_CHARS = \"-_. :/@\" <-- Includes space Note Tags can be provided both as environment variable and in command line options. When using both, the result will be combined. It’s recommended to use environment variables as it allows AZ_CRS_ARGUMENTS to be mostly the same for each JVM."
}, {
  "objectID" : "f29bfa6f-e767-411a-8c9c-6c33667d6dfa",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "Special Tags",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#special-tags",
  "content" : "Special Tags A few tags are handled in a specific way with the system: Tag Description Example AppEnv To use the \"Code Inventory Summarization\" feature, you need to configure an AppEnv value on the machine where you run the JVM. The value is, for example, the application name. This information is sent through the Forwarder to the Azul Intelligence Cloud system, together with information about the components, classes, and methods that are used. AppEnv=test"
}, {
  "objectID" : "080bf1af-5e42-4e38-b585-06bf8e158c45",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "Usage Examples",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#usage-examples",
  "content" : "Usage Examples A few examples as command line argument or environment variable:  -Dcom.azul.crs.instance.tags=\"system-prop.tag_1=system prop/value@1; system_prop_tag.2=system prop:value/2\"\n\nOR\n\nexport CRS_TAGS=\"env.tag-1=value:1; env_Tag_2=value 2\""
}, {
  "objectID" : "3fd8e476-c9e4-4317-8256-026b11ae161b",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "Recommended Tagging Practice",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#recommended-tagging-practice",
  "content" : "Recommended Tagging Practice It is important that you properly tag your instances. As a general rule, tagging should reflect the way you categorize your Java applications. For example, you can use \"west-coast\", \"east-coast\", and so on to distinguish between different availability zones/locations. Note Some instance properties are detected automatically. For example, you don’t have to tag Java versions, because it’s detected by CRS."
}, {
  "objectID" : "7f802fff-424b-4fc8-9582-193b2f390779",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "Where to Specify Arguments",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#where-to-specify-arguments",
  "content" : "Where to Specify Arguments To enable and configure your instances for CRS, you can choose to use one of these three options: JVM command line arguments The AZ_CRS_ARGUMENTS and CRS_TAGS environment variables A .properties file The connected runtime looks for the configuration parameters in the order described above. You can use a combination of these options. If you set a parameter in several ways, for example via both the environment variable and configuration file, the JVM uses the value that comes first in the order given above. In addition, the Forwarder address can be configured via DNS records. See Service discovery via DNS. Command Line Arguments Pass configuration parameters to the CRS (Connected Runtime Service) in the Azul JVM by using the -XX:AzCRSArguments command line argument: Minimal command that sets the api.url parameter via JVM arguments.:  java -XX:AzCRSMode=on \\\n    -XX:AzCRSArguments=api.url={forwarder_endpoint} \\\n    MyApp A more extended example via JVM arguments:  java -XX:AzCRSMode=on \\\n    -XX:AzCRSArguments=api.url={forwarder_endpoint},log=DEBUG,delayTermination=120000,delayInitiation=0 \\\n    -Dcom.azul.crs.instance.tags={tags} \\\n    MyApp Environment Variables You can use dedicated environment variables to enable and control all JVM processes for Prime and Zulu Core distributions. When the environment variables are present, they will automatically apply to any newly started JVM, enabling CRS. Substitute your forwarder_endpoint in the following example. Starting with environment variables and optional arguments:  export CRS_TAGS={tags}\nexport AZ_CRS_ARGUMENTS=enable,api.url={forwarder_endpoint},log=DEBUG,delayTermination=120000,delayInitiation=0\njava MyApp Properties File A third way to set the CRS parameters is to use a local .properties file. There are two default locations where CRS looks for the properties file, and you can specify a custom properties file as a command line argument. CRS looks for the properties file in the following order: the file provided via the -XX:AzCRSArguments=props=/path/to/config.properties argument ~/.az_crs/config.properties in the user’s home directory $JRE/lib/crs.properties, where $JRE is the directory where the JRE is located"
}, {
  "objectID" : "15c8d269-c8cf-4f45-8cca-10c299bdb164",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "Command Line Arguments",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#command-line-arguments",
  "content" : "Command Line Arguments Pass configuration parameters to the CRS (Connected Runtime Service) in the Azul JVM by using the -XX:AzCRSArguments command line argument: Minimal command that sets the api.url parameter via JVM arguments.:  java -XX:AzCRSMode=on \\\n    -XX:AzCRSArguments=api.url={forwarder_endpoint} \\\n    MyApp A more extended example via JVM arguments:  java -XX:AzCRSMode=on \\\n    -XX:AzCRSArguments=api.url={forwarder_endpoint},log=DEBUG,delayTermination=120000,delayInitiation=0 \\\n    -Dcom.azul.crs.instance.tags={tags} \\\n    MyApp"
}, {
  "objectID" : "7ddfe405-600f-4a4b-ab09-71540d4fdee4",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "Environment Variables",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#environment-variables",
  "content" : "Environment Variables You can use dedicated environment variables to enable and control all JVM processes for Prime and Zulu Core distributions. When the environment variables are present, they will automatically apply to any newly started JVM, enabling CRS. Substitute your forwarder_endpoint in the following example. Starting with environment variables and optional arguments:  export CRS_TAGS={tags}\nexport AZ_CRS_ARGUMENTS=enable,api.url={forwarder_endpoint},log=DEBUG,delayTermination=120000,delayInitiation=0\njava MyApp"
}, {
  "objectID" : "1a7a8276-4c0d-4508-a755-e17f415b5eb8",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "Configuration Options for CRS in JVM",
  "section" : "Properties File",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/configuration-options#properties-file",
  "content" : "Properties File A third way to set the CRS parameters is to use a local .properties file. There are two default locations where CRS looks for the properties file, and you can specify a custom properties file as a command line argument. CRS looks for the properties file in the following order: the file provided via the -XX:AzCRSArguments=props=/path/to/config.properties argument ~/.az_crs/config.properties in the user’s home directory $JRE/lib/crs.properties, where $JRE is the directory where the JRE is located"
}, {
  "objectID" : "00f43015-5bf4-4825-abbf-5706ac4d88a2",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "About Instances",
  "section" : "",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/instances",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/instances",
  "content" : "This section explains how Azul Intelligence Cloud detects and collects information about instances."
}, {
  "objectID" : "aa8fd91b-8d08-4752-a3c8-56b2fda9097a",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "About Instances",
  "section" : "Instance ID",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/instances",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/instances#instance-id",
  "content" : "Instance ID Each instance is given a unique identifier which is generated when the instance starts."
}, {
  "objectID" : "c9afcb55-8dba-4a05-97a1-5ca8f507658f",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "About Instances",
  "section" : "Instance States",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/instances",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/instances#instance-states",
  "content" : "Instance States The state of an instance indicates whether the instance is running, offline, or has been terminated. The instance state is detected based on the events that CRS reports to Azul Intelligence Cloud during instance’s lifetime. In the Web UI, the state of an instance is always considered as of now, and is indicated by the following labels: RUNNING: Indicates that the instance is running. The instance sends events regularly. TERMINATED: Indicates that the instance was terminated. A termination event has been received. OFFLINE: The service has not heard from the instance for 5 minutes. This can happen when the instance terminated abruptly and didn’t send a termination event, or when the instance lost connection to the service. The state in the service may differ from the actual state of the instance. For example: An instance is started but CRS is not enabled. In this case, the actual instance continues to run but it is not registered in the service. An instance was connected to the service, but lost the connection at some point. In this case, the actual instance continues to run, but the service sets the state to \"offline\" after a predefined timeout."
}, {
  "objectID" : "000fe66a-52b6-40c5-b9bc-045b6f7bce13",
  "groupId" : "intelligence-cloud",
  "groupLabel" : "Azul Intelligence Cloud",
  "version" : "",
  "title" : "About Instances",
  "section" : "What Information is Reported",
  "url" : "https://docs.azul.com/intelligence-cloud/detailed-information/instances",
  "link" : "https://docs.azul.com/intelligence-cloud/detailed-information/instances#what-information-is-reported",
  "content" : "What Information is Reported The CRS (Connected Runtime Service) in the Azul JVM sends information about the instance and instance host environment to the Azul Intelligence Cloud service. See What Info Is Transmitted Between Your System And Azul Intelligence Cloud for the full information."
}, {
  "objectID" : "faaba067-e0cb-4717-a700-e4d68b65e83e",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control Documentation",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/",
  "link" : "https://docs.azul.com/azul-mission-control/",
  "content" : "Azul® Mission Control is a tool for monitoring, profiling, and troubleshooting Java applications running in a JVM. The tool provides a detailed and efficient analysis of a running Java application with very little overhead on the JVM. This document includes the following sections to help you get started with Azul Mission Control: Installation Guidelines: Contains installation and startup instructions for Azul Mission Control. Creating JFR Recordings: Explains how to make recordings for different deployment cases. Analyzing JFR Recordings: Explains how to analyze recordings with Azul Mission Control. Release Notes"
}, {
  "objectID" : "4ccfa7f4-f20a-4dba-a0b8-dfbdc81df0ef",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Release Notes",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/release-notes",
  "link" : "https://docs.azul.com/azul-mission-control/release-notes",
  "content" : "Version Release Date Azul Mission Control 8.3.1 April 26, 2023 Azul Mission Control 8.3.0 November 17, 2022 Azul Mission Control 8.2.1 July 27, 2022 Azul Mission Control 8.2.0 May 18, 2022 Azul Mission Control 8.1.1 November 15, 2021 Azul Mission Control 8.1.0 August 26, 2021 Zulu Mission Control 8.0.1 August 10, 2021 Zulu Mission Control 8.0.0.17 April 5, 2021"
}, {
  "objectID" : "eea4ce0d-d437-451d-9696-8ae49268f62d",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.1",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.1",
  "content" : "April 26, 2023"
}, {
  "objectID" : "7ae31577-d8b7-4c51-9bc5-f4c3ed971e71",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.1",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.1#whats-new",
  "content" : "What’s new This April 2023 release of Azul Mission Control 8.3.1 incorporates all the critical security fixes aligned with the JDK Mission Control 8.3.1 General-Availability April 2023 Release."
}, {
  "objectID" : "9c37d2d5-022d-4c99-9325-b7ffd9da6873",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.1",
  "section" : "Installation Instructions",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.1#installation-instructions",
  "content" : "Installation Instructions If you get an alert that states A Java Runtime Environment (JRE) or Java Development Kit (JDK) must be available in order to run JMC or Failed to create the Java Virtual Machine, you need to update your Java runtime. Azul Mission Control 8.1.0 and newer, requires OpenJDK 11 and later. However, it supports Java Management Console (JMX) monitoring and Java Flight Recorder (JFR) profiling of JVMs (JDK 7u40 and later) on any supported platform."
}, {
  "objectID" : "d984cd99-6caa-4a67-b847-6d7d3f6e25cc",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.1",
  "section" : "Known issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.1#known-issues",
  "content" : "Known issues Issue ID Description JMC-6739 Unable to perform flight recordings on jLinked applications JMC-7007 Unable to edit eclipse project run configurations after installing JMC plugins on Linux JMC-7071 JMC wrongly attaches itself with other (unsupported) JVMs JMC-7220 Unable to open JMX Console after installing plugins in macOS and Linux JMC-7560 Stacktrace graph views are not shown on Windows JMC-7953 Unable to install JMC Plugins on Eclipse 4.25"
}, {
  "objectID" : "f6ce4188-01e1-4a2c-aa44-255a0bba9ec0",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.0",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.0",
  "content" : "November 17, 2022"
}, {
  "objectID" : "55c83100-5fe5-4845-b2e9-647ef135fbc3",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.0",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.0#whats-new",
  "content" : "What’s new Core Parser improvements The performance of the FastAccessNumberMap has been improved for sparse values. Java Flight Recorder Dependency View A new view for visualizing call dependencies: \"Dependency View\", accessible via Window | Show View | Other… and select the Dependency View under the Mission Control folder. There are two modes of operation in the view: chord diagram and edge bundling. In the edge bundling visualization, hover over packages to see dependencies highlighted in colors: Green: methods in the linked package are called by methods in the package being hovered over. Yellow: methods in the linked package are calling mathods in the package being hovered over. Red: methods in the packages are calling each other. Graph Pruning The graph view can now be pruned to focus on the most impactful nodes. Select the target number of nodes, and the visualization limits the number of shown nodes. Selectable Attribute It is now possible to select which attribute must be used for the weights in the trace view and the flame graph view. Parser improvement The parser now supports parsing events with char fields."
}, {
  "objectID" : "8818c691-0127-45f0-9ece-9d88dec8c1e7",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.0",
  "section" : "Core",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.0#core",
  "content" : "Core Parser improvements The performance of the FastAccessNumberMap has been improved for sparse values."
}, {
  "objectID" : "8cd0cc23-67db-482b-82a7-67cf04a3039a",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.0",
  "section" : "Java Flight Recorder",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.0#java-flight-recorder",
  "content" : "Java Flight Recorder Dependency View A new view for visualizing call dependencies: \"Dependency View\", accessible via Window | Show View | Other… and select the Dependency View under the Mission Control folder. There are two modes of operation in the view: chord diagram and edge bundling. In the edge bundling visualization, hover over packages to see dependencies highlighted in colors: Green: methods in the linked package are called by methods in the package being hovered over. Yellow: methods in the linked package are calling mathods in the package being hovered over. Red: methods in the packages are calling each other. Graph Pruning The graph view can now be pruned to focus on the most impactful nodes. Select the target number of nodes, and the visualization limits the number of shown nodes. Selectable Attribute It is now possible to select which attribute must be used for the weights in the trace view and the flame graph view. Parser improvement The parser now supports parsing events with char fields."
}, {
  "objectID" : "d3c46676-d108-46b0-a6b4-369ed6871390",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.0",
  "section" : "Fixed issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.0#fixed-issues",
  "content" : "Fixed issues Issue ID Description JMC-7568 Support parsing char fields in jfr events JMC-7581 Missing required plugins in JMC-RCP and JMC-RCP-plug-ins launcher JMC-7589 Add 2022-03 target platform JMC-7765 Bump some Maven plugins JMC-6972 Naming and Version Numbering Issues with Plugins JMC-7508 Use preferred way for test-jars JMC-7767 Fix handling of version qualifier in core plugins JMC-7769 Cleanup pom and project files for JMC core JMC-7801 Fix GHA that is broken due to OpenJDK Update 11.0.15 JMC-7796 Remove workflow status indicator in the readme JMC-7797 Update pom.xml to download latest js files for graphview JMC-7798 Make the frame type extensible JMC-7827 Update to Eclipse 2022-06 JMC-7832 Refresh dev guide JMC-7834 Improve GitHub Actions validation workflow JMC-7842 JMC agent: policy file is missing entry for test on Windows JMC-7856 Fix errors in Eclipse projects after JMC-7769 JMC-7243 Resolve discrepancy between JDK attributes coming from different JDK versions JMC-7858 Upgrade jetty.project in github to 10.0.11 JMC-7860 Upgrade d3-flame-graph in github to 4.1.3 JMC-7862 Platform-definitions-2022-06.target file has space in pde version JMC-7820 Add validations for master password JMC-7831 Add new view for hierarchical edge bundling JMC-7872 Adding artifacts to third-party pom file, which are not getting resolved by maven JMC-7874 Update thirdpartyreadme.txt file for upgraded third party libraries JMC-7096 Bring back Object statistics table for heap. JMC-6757 Selector for attribute in the flame graph JMC-7074 Smart pruning of graphs to make it possible to sensibly render larger graphs JMC-7812 Unable to open links from Automated Result analysis page. Links in the results of the automated analysis results would not open properly on Linux and macOS X. Now they do open in situ. JMC-7892 JMC Automated UI MasterPasswordTests is failing JMC-7870 JMC 8.3.0 Update Site Pages require changes JMC-7813 Unable to open Help page in macOS M1 when JMC started with JDK11. The help page was inaccessible, throwing an error on macOS M1 when JMC is run on JDK 11.0.16. This is now fixed. JMC-7903 FastAccessNumberMap is slow for sparse values JMC-7910 Fix spotless finding after JMC-7903 JMC-7902 UseCompressedOopsRule has flipped comparison JMC-7855 JFR Writer incorrectly uses epoch nanoseconds as the start ticks JMC-7350 [Accessibility, JAWS] [Misc] Deadlinks in Help Page JMC-7923 Cleanup warnings in core JMC-7922 Issue using attribute selections in the stack trace view JMC-7321 Unable to view JMC Help Contents (HTTP ERROR 500 ) when booted with JDK 17 or higher. The help page was inaccessible, throwing an error, when running on JDK 17+. This is now fixed."
}, {
  "objectID" : "1ddb00f2-d98b-4995-8b12-24fcff05492c",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.3.0",
  "section" : "Known issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.3.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.3.0#known-issues",
  "content" : "Known issues JMC-4270: General - Hibernation and time After the bugfix of JDK-6523160 in JDK 8, the RuntimeMXBean#getUptime() attribute was re-implemented to mean \"Elapsed time of JVM process\", whilst it previously was implemented as time since start of the JVM process. The uptime attribute is used together with RuntimeMXBean#getStartTime(), to estimate the actual server time. This means that time stamps, as well as remaining time for a flight recording, can be wrong for processes on machines that have been hibernated. JMC-7071: JFR - Can’t attach to jlinked JVMs This one is still under investigation, but it seems the application can’t attach to certain jlinked images. JMC-7003: JFR - The graph, flame graph view, heatmap view and dependency view does not work on Windows This is due to a problem with the Windows based browser component in SWT. We’re hoping for a fix in the component for a future version of the Eclipse platform."
}, {
  "objectID" : "3ab257d2-6aad-4798-b19d-bb0a4a68e2b9",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.1",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.1",
  "content" : "July 27, 2022"
}, {
  "objectID" : "00eb38f5-09e9-4536-8d9b-6be841a8bf5f",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.1",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.1#whats-new",
  "content" : "What’s new This July 2022 release of Azul Mission Control 8.2.1 incorporates all the critical security fixes aligned with the JDK Mission Control 8.2.1 General-Availability July 2022 Release. Fixed Issues There are no fixed issues associated with this release. Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "600bb0eb-00ca-4097-b64c-32df40803b15",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.1",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.1#whats-new",
  "content" : "What’s new This July 2022 release of Azul Mission Control 8.2.1 incorporates all the critical security fixes aligned with the JDK Mission Control 8.2.1 General-Availability July 2022 Release."
}, {
  "objectID" : "a9cf6e6f-93e2-49f4-abcb-bc0c800e1659",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.1",
  "section" : "Fixed Issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.1#fixed-issues",
  "content" : "Fixed Issues There are no fixed issues associated with this release."
}, {
  "objectID" : "4560a83d-cdae-4f96-8731-720f7dd40b72",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.1",
  "section" : "Known Issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.1#known-issues",
  "content" : "Known Issues There are no new issues to report in this release."
}, {
  "objectID" : "f3444d60-c196-4492-a767-5d049a8b0b51",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.0",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "content" : "May 18, 2022"
}, {
  "objectID" : "7c39a414-185a-4a8e-a0b6-646f0be78289",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.0",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.0#whats-new",
  "content" : "What’s new Core Parser support for async profiler Parser support has been added for frame types generated by async profiler, such as Native, C++ and Kernel. System.gc() rule There is now a new rule for explicit invocations of System.gc(). Java Flight Recorder Extended compiler type info The compiler type info of frames collected by JFR TickProfiler are extended by 3 more types: C1 Compiled C2 Compiled Falcon Compiled Heat map view A new heat map view has been added, which is handy for seeing when events are taking place. Use Window | Show View | Other…, and select the Heatmap View under Mission Control and click Open to open the view. Websocket for selections There is a new websocket API available that pushes stack trace data from selections in the JFR UI as JSON on a user defined port. This allows for programmatic control of the visualization directly in the browser. Tools like observablehq.com can be used to invent new visualizations, or to alter the visualization. To get started, simply go to the Flight Recorder preferences in JMC, and select the Websocket port to use (0 to disable). A set of example visualizations are available here: https://observablehq.com/collection/@cimi/java-mission-control. Fixed issues Issue ID Description JMC-7583 JMC 8.2.0 Staging and Download Verification JMC-7569 Improve the implementation of Twitter plugin JMC-7566 Early access splash for 8.3 JMC-7561 Update to the release splash screen for JMC 8.2 JMC-7558 Updates for thirdparty build and install script in 8.2.0 b05 JMC-7555 Eclipse Version Number requires update in Update Site Index page. JMC-7553 Merge 8.2.0 to jmc8 JMC-7541 Switch to using 2021-09 by default JMC-7540 IItemCollectionJsonSerializerTest.java might fail on Windows due to line endings JMC-7539 JDP Tests failing in VPN environments JMC-7537 Build script assumes that Darwin always targets x86_64 JMC-7535 Update Eclipse platform to 4.21 (2021-09) JMC-7532 Delay in realtime rendering of graphs in JMX Console JMC-7531 Update jetty websocket third party JMC-7512 Update lz4-java and remove the osgi bundle name override JMC-7511 Add 2021-12 target platform JMC-7510 Remove 2020-06 platform JMC-7509 Add 2021-09 target platform JMC-7507 Fixing project setup JMC-7505 Cannot reset websocket server port to default JMC-7504 Fix flightrecorder.writer.test project setup JMC-7503 Fix serializers.test dependency JMC-7494 Unable to view JMC Help Contents JMC-7493 Update versions and copyright on Update site pages JMC-7492 Update org.owasp.encoder to version 1.2.3 JMC-7486 Unable to install Eclipse IDE Plugin JMC-7485 \"JMC Application, Plugins and License Copyright year requires update\" JMC-7482 Confusing display of stack traces when selecting event types with no events JMC-7480 Trim method descriptor value JMC-7477 JMC8.2 does not build with eclipse 4.19 (21-03) JMC-7473 Unable to view constants in constant pool page. JMC-7472 Splash screen for 8.2.0 JMC-7469 Upgrade third parties to latest versions JMC-7468 Fix jdp test coverage JMC-7467 Only use one version of d3 JMC-7463 JfrEditor instances are kept in memory by NavigationHistory JMC-7456 Remove the JDK 8 Eclipse launchers JMC-7453 Add heat map icon JMC-7451 Add heat map view JMC-7447 Add serializers and writer modules to core test coverage JMC-7446 Add Maven profile for enabling test coverage JMC-7443 Wrong version in THIRDPARTYREADME JMC-7440 JMC fails on Apple M1 JMC-7439 Introduced IConstantPoolExtension for Constant Pools JMC-7438 Fix require bundle error in Eclipse JMC-7437 Fix require bundle error in Eclipse JMC-7435 Update the maven enforcer plugin JMC-7434 Update the maven download plugin JMC-7433 Update the spotless maven plugin JMC-7432 Update the spotbugs maven plugin JMC-7421 Update Japanese translation for pages JMC-7420 Update Japanese translation for rules JMC-7419 Update XML parsing JMC-7418 Stop using Collections sort method JMC-7417 Fix incorrect identifier in result for biased locking revocation rule JMC-7415 Fix Maven prerequisite in README JMC-7414 Avoid volatile writes from Atomics default values JMC-7413 Fix building JMC with Docker JMC-7412 Update the jacoco maven plugin JMC-7411 GPG signing in Github action fails JMC-7409 Update the spotless maven plugin JMC-7406 IItemCollectionJsonSerializerTest fails on windows JMC-7403 Fix JFR Parser struct types hashcode JMC-7393 Add vanilla Java JSON serializer for IItemCollections JMC-7386 Remove reference to Fedora in the readme JMC-7384 Add option to enable STARTTLS encryption for mail server in communication preference JMC-7378 Update platform to 2021-06 JMC-7377 Update master to 8.2 JMC-7371 Make Skara realize master is now 8.2 JMC-7357 Double-Checked Locking in Agent Plugin code JMC-7355 Update to Tycho 2.4 JMC-7338 Add parser support for frame types generated by async-profiler JMC-7336 Add support for new JFR event systemGC JMC-7332 Show stacktraces for constant values from stacktrace pool JMC-7310 JMC UI Automation test execution gets stuck in Linux JMC-7247 Alternate for Twitter4J to support twitter plug-in JMC-7231 JMC createReport for JMC8 Automated Analysis fails to evaluate several rules JMC-7198 Add websocket server that pushes data on selection updates JMC-7132 Evaluate upgrading Twitter4j plugin with activley supported library JMC-7119 JMC does not compile with tycho-compiler-plugin 2.1.0 JMC-7091 JOverflow Instance View table should be sortable by clicking headers JMC-7068 JfrRecordingTest (uitest) hangs on the automated analysis page JMC-6792 Outline shows as not available when starting up with open recording JMC-6340 Better error message when not exporting modules in Eclipse and dumping on a JDK 8 JMC-5904 Merge org.openjdk.jmc.ui.celleditors with org.openjdk.jmc.rjmx.ui.celleditors Known issues JMC-7321: Unable to view JMC Help Contents Contextual help does not open when Azul Mission Control is run on Java 17. JMC-4270: Hibernation and time After the bugfix of https://bugs.openjdk.java.net/browse/JDK-6523160 in JDK 8, the RuntimeMXBean#getUptime() attribute was re-implemented to mean “Elapsed time of JVM process”, whilst it previously was implemented as time since start of the JVM process. The uptime attribute is used by JMC, together with RuntimeMXBean#getStartTime(), to estimate the actual server time. This means that time stamps, as well as remaining time for a flight recording, can be wrong for processes on machines that have been hibernated. JMC-7071: JMC can’t attach to jlinked JVMs This one is still under investigation, but it seems JMC can’t attach to certain jlinked images. JMC-7003: The graph and flame graph view does not work on Windows This is due to a bug with the Edge based browser component in SWT."
}, {
  "objectID" : "e62df6b2-6758-45b6-a131-68a74b5e364e",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.0",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.0#whats-new",
  "content" : "What’s new Core Parser support for async profiler Parser support has been added for frame types generated by async profiler, such as Native, C++ and Kernel. System.gc() rule There is now a new rule for explicit invocations of System.gc(). Java Flight Recorder Extended compiler type info The compiler type info of frames collected by JFR TickProfiler are extended by 3 more types: C1 Compiled C2 Compiled Falcon Compiled Heat map view A new heat map view has been added, which is handy for seeing when events are taking place. Use Window | Show View | Other…, and select the Heatmap View under Mission Control and click Open to open the view. Websocket for selections There is a new websocket API available that pushes stack trace data from selections in the JFR UI as JSON on a user defined port. This allows for programmatic control of the visualization directly in the browser. Tools like observablehq.com can be used to invent new visualizations, or to alter the visualization. To get started, simply go to the Flight Recorder preferences in JMC, and select the Websocket port to use (0 to disable). A set of example visualizations are available here: https://observablehq.com/collection/@cimi/java-mission-control."
}, {
  "objectID" : "40c181e9-37c4-406c-bcbe-d8c594939080",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.0",
  "section" : "Core",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.0#core",
  "content" : "Core Parser support for async profiler Parser support has been added for frame types generated by async profiler, such as Native, C++ and Kernel. System.gc() rule There is now a new rule for explicit invocations of System.gc()."
}, {
  "objectID" : "8c556d38-39e4-4e78-b1ed-1d67d4c866f4",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.0",
  "section" : "Java Flight Recorder",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.0#java-flight-recorder",
  "content" : "Java Flight Recorder Extended compiler type info The compiler type info of frames collected by JFR TickProfiler are extended by 3 more types: C1 Compiled C2 Compiled Falcon Compiled Heat map view A new heat map view has been added, which is handy for seeing when events are taking place. Use Window | Show View | Other…, and select the Heatmap View under Mission Control and click Open to open the view. Websocket for selections There is a new websocket API available that pushes stack trace data from selections in the JFR UI as JSON on a user defined port. This allows for programmatic control of the visualization directly in the browser. Tools like observablehq.com can be used to invent new visualizations, or to alter the visualization. To get started, simply go to the Flight Recorder preferences in JMC, and select the Websocket port to use (0 to disable). A set of example visualizations are available here: https://observablehq.com/collection/@cimi/java-mission-control."
}, {
  "objectID" : "57777dd7-8966-4a7c-a9dd-e7f702b104a7",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.0",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "content" : "The compiler type info of frames collected by JFR TickProfiler are extended by 3 more types:"
}, {
  "objectID" : "7bc41382-dd14-4236-8f3f-5cd72a4d600f",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.0",
  "section" : "Fixed issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.0#fixed-issues",
  "content" : "Fixed issues Issue ID Description JMC-7583 JMC 8.2.0 Staging and Download Verification JMC-7569 Improve the implementation of Twitter plugin JMC-7566 Early access splash for 8.3 JMC-7561 Update to the release splash screen for JMC 8.2 JMC-7558 Updates for thirdparty build and install script in 8.2.0 b05 JMC-7555 Eclipse Version Number requires update in Update Site Index page. JMC-7553 Merge 8.2.0 to jmc8 JMC-7541 Switch to using 2021-09 by default JMC-7540 IItemCollectionJsonSerializerTest.java might fail on Windows due to line endings JMC-7539 JDP Tests failing in VPN environments JMC-7537 Build script assumes that Darwin always targets x86_64 JMC-7535 Update Eclipse platform to 4.21 (2021-09) JMC-7532 Delay in realtime rendering of graphs in JMX Console JMC-7531 Update jetty websocket third party JMC-7512 Update lz4-java and remove the osgi bundle name override JMC-7511 Add 2021-12 target platform JMC-7510 Remove 2020-06 platform JMC-7509 Add 2021-09 target platform JMC-7507 Fixing project setup JMC-7505 Cannot reset websocket server port to default JMC-7504 Fix flightrecorder.writer.test project setup JMC-7503 Fix serializers.test dependency JMC-7494 Unable to view JMC Help Contents JMC-7493 Update versions and copyright on Update site pages JMC-7492 Update org.owasp.encoder to version 1.2.3 JMC-7486 Unable to install Eclipse IDE Plugin JMC-7485 \"JMC Application, Plugins and License Copyright year requires update\" JMC-7482 Confusing display of stack traces when selecting event types with no events JMC-7480 Trim method descriptor value JMC-7477 JMC8.2 does not build with eclipse 4.19 (21-03) JMC-7473 Unable to view constants in constant pool page. JMC-7472 Splash screen for 8.2.0 JMC-7469 Upgrade third parties to latest versions JMC-7468 Fix jdp test coverage JMC-7467 Only use one version of d3 JMC-7463 JfrEditor instances are kept in memory by NavigationHistory JMC-7456 Remove the JDK 8 Eclipse launchers JMC-7453 Add heat map icon JMC-7451 Add heat map view JMC-7447 Add serializers and writer modules to core test coverage JMC-7446 Add Maven profile for enabling test coverage JMC-7443 Wrong version in THIRDPARTYREADME JMC-7440 JMC fails on Apple M1 JMC-7439 Introduced IConstantPoolExtension for Constant Pools JMC-7438 Fix require bundle error in Eclipse JMC-7437 Fix require bundle error in Eclipse JMC-7435 Update the maven enforcer plugin JMC-7434 Update the maven download plugin JMC-7433 Update the spotless maven plugin JMC-7432 Update the spotbugs maven plugin JMC-7421 Update Japanese translation for pages JMC-7420 Update Japanese translation for rules JMC-7419 Update XML parsing JMC-7418 Stop using Collections sort method JMC-7417 Fix incorrect identifier in result for biased locking revocation rule JMC-7415 Fix Maven prerequisite in README JMC-7414 Avoid volatile writes from Atomics default values JMC-7413 Fix building JMC with Docker JMC-7412 Update the jacoco maven plugin JMC-7411 GPG signing in Github action fails JMC-7409 Update the spotless maven plugin JMC-7406 IItemCollectionJsonSerializerTest fails on windows JMC-7403 Fix JFR Parser struct types hashcode JMC-7393 Add vanilla Java JSON serializer for IItemCollections JMC-7386 Remove reference to Fedora in the readme JMC-7384 Add option to enable STARTTLS encryption for mail server in communication preference JMC-7378 Update platform to 2021-06 JMC-7377 Update master to 8.2 JMC-7371 Make Skara realize master is now 8.2 JMC-7357 Double-Checked Locking in Agent Plugin code JMC-7355 Update to Tycho 2.4 JMC-7338 Add parser support for frame types generated by async-profiler JMC-7336 Add support for new JFR event systemGC JMC-7332 Show stacktraces for constant values from stacktrace pool JMC-7310 JMC UI Automation test execution gets stuck in Linux JMC-7247 Alternate for Twitter4J to support twitter plug-in JMC-7231 JMC createReport for JMC8 Automated Analysis fails to evaluate several rules JMC-7198 Add websocket server that pushes data on selection updates JMC-7132 Evaluate upgrading Twitter4j plugin with activley supported library JMC-7119 JMC does not compile with tycho-compiler-plugin 2.1.0 JMC-7091 JOverflow Instance View table should be sortable by clicking headers JMC-7068 JfrRecordingTest (uitest) hangs on the automated analysis page JMC-6792 Outline shows as not available when starting up with open recording JMC-6340 Better error message when not exporting modules in Eclipse and dumping on a JDK 8 JMC-5904 Merge org.openjdk.jmc.ui.celleditors with org.openjdk.jmc.rjmx.ui.celleditors"
}, {
  "objectID" : "5482b6ea-c6fa-4b20-9db2-b6a829f4feb9",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.2.0",
  "section" : "Known issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.2.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.2.0#known-issues",
  "content" : "Known issues JMC-7321: Unable to view JMC Help Contents Contextual help does not open when Azul Mission Control is run on Java 17. JMC-4270: Hibernation and time After the bugfix of https://bugs.openjdk.java.net/browse/JDK-6523160 in JDK 8, the RuntimeMXBean#getUptime() attribute was re-implemented to mean “Elapsed time of JVM process”, whilst it previously was implemented as time since start of the JVM process. The uptime attribute is used by JMC, together with RuntimeMXBean#getStartTime(), to estimate the actual server time. This means that time stamps, as well as remaining time for a flight recording, can be wrong for processes on machines that have been hibernated. JMC-7071: JMC can’t attach to jlinked JVMs This one is still under investigation, but it seems JMC can’t attach to certain jlinked images. JMC-7003: The graph and flame graph view does not work on Windows This is due to a bug with the Edge based browser component in SWT."
}, {
  "objectID" : "5525136d-fce1-4c2a-9d0e-5ecd815be0b0",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.1",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.1",
  "content" : "November 15, 2021"
}, {
  "objectID" : "62fbf893-71c5-4ec6-a62f-070af594d232",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.1",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.1#whats-new",
  "content" : "What’s new This release introduces support for the Mac AArch64 (Arm64) architecture and addresses a number of minor issues. Azul Mission Control for Mac AArch64 requires a JVM for macOS AArch64 and is available at the product download page. Note that you can run Azul Mission control for macOS x86_64 on Apple Silicon platform under Rosetta translation mode using an x86_64 JVM. Fixed issues Issue ID Description JMC-7231 JMC createReport for JMC8 Automated Analysis fails to evaluate several rules JMC-7419 Update XML parsing JMC-7378 Update platform to 2021-06 Known issues Contextual help does not open when Azul Mission Control is run on Java 17. See JMC-7321 for details."
}, {
  "objectID" : "b97c8ea2-835f-418d-9ab9-35f7140e475e",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.1",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.1#whats-new",
  "content" : "What’s new This release introduces support for the Mac AArch64 (Arm64) architecture and addresses a number of minor issues. Azul Mission Control for Mac AArch64 requires a JVM for macOS AArch64 and is available at the product download page. Note that you can run Azul Mission control for macOS x86_64 on Apple Silicon platform under Rosetta translation mode using an x86_64 JVM."
}, {
  "objectID" : "b36eb2bf-e2f3-462a-ac68-3114b6037ac8",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.1",
  "section" : "Fixed issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.1#fixed-issues",
  "content" : "Fixed issues Issue ID Description JMC-7231 JMC createReport for JMC8 Automated Analysis fails to evaluate several rules JMC-7419 Update XML parsing JMC-7378 Update platform to 2021-06"
}, {
  "objectID" : "558fd5dd-9139-488b-addd-9d609613ae4b",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.1",
  "section" : "Known issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.1#known-issues",
  "content" : "Known issues Contextual help does not open when Azul Mission Control is run on Java 17. See JMC-7321 for details."
}, {
  "objectID" : "033db3f8-88a4-4f30-8b92-3b954b5d373d",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.0",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.0",
  "content" : "August 26, 2021"
}, {
  "objectID" : "8080231b-1d24-4ab5-95b5-b8f0f5829e44",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.0",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.0#whats-new",
  "content" : "What’s new Zulu Mission Control was rebranded to Azul Mission Control. The names of the distribution packages, executable commands, and configuration files did not change for compatibility. Core New Serializers Core Bundle There is now a new core bundle making it easy to serialize flight recording data to DOT (Graphviz) and Json. This bundle will be expanded upon in future versions. Improved JFR parser performance The performance of the JFR parser has been improved. More improvements are coming in 8.2. Java Flight Recorder (JFR) Support for the new JDK 16 Allocation Events A new form of light weight allocation profiling was introduced with JDK 16 (see https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8257602). This version of JMC supports this new type of allocation profiling. New Page for Peeking into the Constant Pools There is a new page available for taking a look at what constants are available in the recording. This can, for example, be useful when creating custom events to see where all that storage and memory is being used. Open Recordings with .lz4 extension For convenience, files with the .lz4 extension are now attempted to be opened as flight recordings. This is since lz4 is a common compression to use with flight recordings. For flight recordings taken in Azul Platform Prime JVM, added an option to include events from VM’s internal threads (such as GC or compiler threads). JMC Agent Plug-in New JMC Agent Plug-in There is now a new agent plug-in available for JMC, which allows configuring where to emit flight recording events in an already running process. Resolved issues Issue ID Description JMC-6216 Outline not shown sometimes JMC-6918 JMC 7.1.2 on macOS Big Sur fails to start with NPE JMC-6903 Can’t change writeable MBean attribute JMC-7043 Bring back summary screen for Statistics on Object Allocation inside TLAB JMC-6939 Time range indicator isn’t updated when setting the time range JMC-7241 Adjust main pom.xml to more align for 3th party builds JMC-7201 JdkAttributes.OS_SWITCH_RATE does not work consistently across JFRs from different JDK versions. JMC-6976 Add pre-configured test launchers to run individual tests from within the Eclipse IDE JMC-7326 Update external library versions JMC-7075 Validate and FileReadRule.sanitizeFileName JMC-5459 BCI Agent - Allow for custom capturing JMC-7210 Create icon for the agent (and agent plug-in) JMC-7327 Constant Pool optimizations JMC-7328 Incorrect sort order in method profiling page JMC-7041 Add Percentage column based on Duration in stack trace view JMC-7042 Bring back summary screen for Statistics on Object Allocation outside TLAB. JMC-7297 ClassCastException when opening heap dump JMC-7105 Unable to open graph-view if JMC is booted with JDK 8 JMC-7046 Update to the 2021-03 platform JMC-7225 Add workflow badge to the readme JMC-7031 Build a constant pool explorer page JMC-7194 No local JVMs found message could be more helpful JMC-7124 Support the new JDK 16 allocation profiling event JMC-7162 Stop using the chromium library based browser component JMC-7164 Add support for hidden classes JMC-6890 defineEventProbes should throw exception on malformed probe definitions JMC-7191 The release notes tool should be using JDK 8 JMC-7280 JMC with Eclipse 2020-06 fails to launch in simplified Chinese language JMC-7282 Show concurrent option showing lesser number of records. JMC-7281 Timestamp granularity too coarse JMC-7116 Update version to 8.1.0 in master JMC-7284 Unhandled exception while working with Thread Graphs JMC-7283 Charts in custom pages are not auto refreshed JMC-7285 JfrThreadsPageTest (UI-test) fails (part 2) JMC-7288 Event list is not updated and Stack trace stale upon Set as Focused Selection JMC-6936 Parser should track statistics during parsing JMC-7290 Uitests failing on Windows JMC-7291 Restrict local management agent for own process JMC-7293 [JFR Writer] Improve lazy evaluation of the type defining block JMC-7286 Upgrade Jacoco to 0.8.6 JMC-7292 Prepare new and noteworthy for JMC 8.0.0 JMC-7195 GC confguration with GC Flags JMC-7235 Some writer cleanup JMC-7258 Use the public XLST classes for the release notes JMC-7070 Allow JMC to open compressed recordings with the extension .lz4 JMC-7261 Enhance agent pom.xml for future library deployment JMC-7236 Adding project specific settings to ignore forbidden references JMC-7256 Use .jcheck/conf property to control version JMC-7259 README.md should mention that the build script works for Mac OS JMC-7060 [WLS] Rule result formatting update w.r.t Rule 2.0 JMC-7242 Adding new JDK Events to core API JMC-7262 Add rule for when the JVM version is < OpenJDK 8u302 JMC-7267 \"Change artifact id from \"\"org.openjdk.jmc.agent\"\" to \"\"agent\"\"\" JMC-7269 Retain treeview stack trace while switching between JFRs JMC-7266 Context Switch event handling breaks if JMC has old and new types parsed simultaneously JMC-7260 Create a new serializers bundle JMC-7255 JdkAttributes.OS_SWITCH_RATE does not work consistently across JFRs from different JDK versions. JMC-7277 Update to the early access 8.1 splash in master JMC-7329 Exception while opening Method Profile page. JMC-6204 Flight Recorder launcher tab bugs out JMC-6923 Retain treeview stack trace while switching between JFRs JMC-7268 Show icons for modifiers in the method profiling page JMC-6141 JMC logs warnings when creating recordings JMC-7299 Accessibility Issue - Too low contrast on rule result values JMC-7264 Improve the performance of the JFR parser JMC-7272 Method profiling page should show the frame type JMC-6967 Add Percentage Column w.r.t 'Profiling Samples' in Thread table JMC-7304 JMC 8.0.1 fix formatting failure JMC-7363 AutoBoxing rule can crash due to null dereference JMC-7296 [JFR Writer] Improve single-value types handling JMC-7289 JMC Help Documentation requires corrections JMC-7295 [JFR Writer] Allow providing extra recording settings JMC-7294 [JFR Writer] Complete the annotation handling code JMC-7287 Update the build script help to include the installCore option JMC-7348 JMC preference options are duplicated JMC-7349 JFR Parser struct types hashcode is not stable JMC-6817 AutoBoxing rule can crash due to null dereference JMC-7369 Update THIRDPARTYREADME.TXT and its license attribute JMC-7358 Rename Agent Plug-in in the JVM Browser JMC-7362 Reference wrong in agent plug-in.xml JMC-7353 JMC fails to build because it can’t download babel dependency JMC-6813 Publish core libraries to Maven Central JMC-7205 Correct URL for Oracle’s JMC production binaries JMC-7360 Provider Name missing for Agent Plugin JMC-7122 Rules evaluation never complete JMC-7265 Update Release Notes for 8.1.0 JMC-7337 JMC fails to parse JFR with events from WebLogic Server JMC-7006 CoreLibs: Review TPL info in all archives JMC-7370 Double-Checked Locking in Agent Plugin code JMC-7366 Agent Plugin Object Contributions to Methods JMC-7368 Update the 8.1 splash to release splash JMC-7324 Update eclipse version and Min JDK required in Update Site landing pages JMC-7344 Unhandled exception in rule evaluation JMC-4792 Stop using System.out/err.println and e.printStackTrace JMC-6922 Reintroduce GC summary screen JMC-7167 Agent Plugin Known issues JMC-4270: Hibernation and time After the bugfix of https://bugs.openjdk.java.net/browse/JDK-6523160 in JDK 8, the RuntimeMXBean#getUptime() attribute was re-implemented to mean “Elapsed time of JVM process”, whilst it previously was implemented as time since start of the JVM process. The uptime attribute is used by JMC, together with RuntimeMXBean#getStartTime(), to estimate the actual server time. This means that time stamps, as well as remaining time for a flight recording, can be wrong for processes on machines that have been hibernated. JMC-7071: JMC can’t attach to jlinked JVMs This one is still under investigation, but it seems JMC can’t attach to certain jlinked images. JMC-7068: JfrRecordingTest (uitest) hangs on the automated analysis page Trying to run uitests on Fedora hangs on JfrRecordingTest. JMC-7003: The graph and flame graph view does not work on Windows This is due to a bug with the Edge based browser component in SWT. JMC-6265: JMC crashes with Webkit2+GTK 4 See the issue for more information. JMC-5412: Dragging and dropping a JFR file into an open analysis page does not work The expected behaviour would be to open the recording whenever a file is dropped in the editor area, but the behaviour is defined by the embedded browser component, and not very useful."
}, {
  "objectID" : "b903778f-2aa8-402d-8bd8-f8cb443e9eeb",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.0",
  "section" : "What’s new",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.0#whats-new",
  "content" : "What’s new Zulu Mission Control was rebranded to Azul Mission Control. The names of the distribution packages, executable commands, and configuration files did not change for compatibility. Core New Serializers Core Bundle There is now a new core bundle making it easy to serialize flight recording data to DOT (Graphviz) and Json. This bundle will be expanded upon in future versions. Improved JFR parser performance The performance of the JFR parser has been improved. More improvements are coming in 8.2. Java Flight Recorder (JFR) Support for the new JDK 16 Allocation Events A new form of light weight allocation profiling was introduced with JDK 16 (see https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8257602). This version of JMC supports this new type of allocation profiling. New Page for Peeking into the Constant Pools There is a new page available for taking a look at what constants are available in the recording. This can, for example, be useful when creating custom events to see where all that storage and memory is being used. Open Recordings with .lz4 extension For convenience, files with the .lz4 extension are now attempted to be opened as flight recordings. This is since lz4 is a common compression to use with flight recordings. For flight recordings taken in Azul Platform Prime JVM, added an option to include events from VM’s internal threads (such as GC or compiler threads). JMC Agent Plug-in New JMC Agent Plug-in There is now a new agent plug-in available for JMC, which allows configuring where to emit flight recording events in an already running process."
}, {
  "objectID" : "3b70b580-e7aa-43ef-879e-409d36219c43",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.0",
  "section" : "Core",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.0#core",
  "content" : "Core New Serializers Core Bundle There is now a new core bundle making it easy to serialize flight recording data to DOT (Graphviz) and Json. This bundle will be expanded upon in future versions. Improved JFR parser performance The performance of the JFR parser has been improved. More improvements are coming in 8.2."
}, {
  "objectID" : "ff31ac51-ad23-4f5e-a506-d409c593aaac",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.0",
  "section" : "Java Flight Recorder (JFR)",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.0#java-flight-recorder-jfr",
  "content" : "Java Flight Recorder (JFR) Support for the new JDK 16 Allocation Events A new form of light weight allocation profiling was introduced with JDK 16 (see https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8257602). This version of JMC supports this new type of allocation profiling. New Page for Peeking into the Constant Pools There is a new page available for taking a look at what constants are available in the recording. This can, for example, be useful when creating custom events to see where all that storage and memory is being used. Open Recordings with .lz4 extension For convenience, files with the .lz4 extension are now attempted to be opened as flight recordings. This is since lz4 is a common compression to use with flight recordings. For flight recordings taken in Azul Platform Prime JVM, added an option to include events from VM’s internal threads (such as GC or compiler threads)."
}, {
  "objectID" : "f24cb6ad-b174-420a-8dbd-26c5b976f971",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.0",
  "section" : "JMC Agent Plug-in",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.0#jmc-agent-plug-in",
  "content" : "JMC Agent Plug-in New JMC Agent Plug-in There is now a new agent plug-in available for JMC, which allows configuring where to emit flight recording events in an already running process."
}, {
  "objectID" : "dd14c49a-072a-4a83-ab03-59e4f8b2e5cb",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.0",
  "section" : "Resolved issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.0#resolved-issues",
  "content" : "Resolved issues Issue ID Description JMC-6216 Outline not shown sometimes JMC-6918 JMC 7.1.2 on macOS Big Sur fails to start with NPE JMC-6903 Can’t change writeable MBean attribute JMC-7043 Bring back summary screen for Statistics on Object Allocation inside TLAB JMC-6939 Time range indicator isn’t updated when setting the time range JMC-7241 Adjust main pom.xml to more align for 3th party builds JMC-7201 JdkAttributes.OS_SWITCH_RATE does not work consistently across JFRs from different JDK versions. JMC-6976 Add pre-configured test launchers to run individual tests from within the Eclipse IDE JMC-7326 Update external library versions JMC-7075 Validate and FileReadRule.sanitizeFileName JMC-5459 BCI Agent - Allow for custom capturing JMC-7210 Create icon for the agent (and agent plug-in) JMC-7327 Constant Pool optimizations JMC-7328 Incorrect sort order in method profiling page JMC-7041 Add Percentage column based on Duration in stack trace view JMC-7042 Bring back summary screen for Statistics on Object Allocation outside TLAB. JMC-7297 ClassCastException when opening heap dump JMC-7105 Unable to open graph-view if JMC is booted with JDK 8 JMC-7046 Update to the 2021-03 platform JMC-7225 Add workflow badge to the readme JMC-7031 Build a constant pool explorer page JMC-7194 No local JVMs found message could be more helpful JMC-7124 Support the new JDK 16 allocation profiling event JMC-7162 Stop using the chromium library based browser component JMC-7164 Add support for hidden classes JMC-6890 defineEventProbes should throw exception on malformed probe definitions JMC-7191 The release notes tool should be using JDK 8 JMC-7280 JMC with Eclipse 2020-06 fails to launch in simplified Chinese language JMC-7282 Show concurrent option showing lesser number of records. JMC-7281 Timestamp granularity too coarse JMC-7116 Update version to 8.1.0 in master JMC-7284 Unhandled exception while working with Thread Graphs JMC-7283 Charts in custom pages are not auto refreshed JMC-7285 JfrThreadsPageTest (UI-test) fails (part 2) JMC-7288 Event list is not updated and Stack trace stale upon Set as Focused Selection JMC-6936 Parser should track statistics during parsing JMC-7290 Uitests failing on Windows JMC-7291 Restrict local management agent for own process JMC-7293 [JFR Writer] Improve lazy evaluation of the type defining block JMC-7286 Upgrade Jacoco to 0.8.6 JMC-7292 Prepare new and noteworthy for JMC 8.0.0 JMC-7195 GC confguration with GC Flags JMC-7235 Some writer cleanup JMC-7258 Use the public XLST classes for the release notes JMC-7070 Allow JMC to open compressed recordings with the extension .lz4 JMC-7261 Enhance agent pom.xml for future library deployment JMC-7236 Adding project specific settings to ignore forbidden references JMC-7256 Use .jcheck/conf property to control version JMC-7259 README.md should mention that the build script works for Mac OS JMC-7060 [WLS] Rule result formatting update w.r.t Rule 2.0 JMC-7242 Adding new JDK Events to core API JMC-7262 Add rule for when the JVM version is < OpenJDK 8u302 JMC-7267 \"Change artifact id from \"\"org.openjdk.jmc.agent\"\" to \"\"agent\"\"\" JMC-7269 Retain treeview stack trace while switching between JFRs JMC-7266 Context Switch event handling breaks if JMC has old and new types parsed simultaneously JMC-7260 Create a new serializers bundle JMC-7255 JdkAttributes.OS_SWITCH_RATE does not work consistently across JFRs from different JDK versions. JMC-7277 Update to the early access 8.1 splash in master JMC-7329 Exception while opening Method Profile page. JMC-6204 Flight Recorder launcher tab bugs out JMC-6923 Retain treeview stack trace while switching between JFRs JMC-7268 Show icons for modifiers in the method profiling page JMC-6141 JMC logs warnings when creating recordings JMC-7299 Accessibility Issue - Too low contrast on rule result values JMC-7264 Improve the performance of the JFR parser JMC-7272 Method profiling page should show the frame type JMC-6967 Add Percentage Column w.r.t 'Profiling Samples' in Thread table JMC-7304 JMC 8.0.1 fix formatting failure JMC-7363 AutoBoxing rule can crash due to null dereference JMC-7296 [JFR Writer] Improve single-value types handling JMC-7289 JMC Help Documentation requires corrections JMC-7295 [JFR Writer] Allow providing extra recording settings JMC-7294 [JFR Writer] Complete the annotation handling code JMC-7287 Update the build script help to include the installCore option JMC-7348 JMC preference options are duplicated JMC-7349 JFR Parser struct types hashcode is not stable JMC-6817 AutoBoxing rule can crash due to null dereference JMC-7369 Update THIRDPARTYREADME.TXT and its license attribute JMC-7358 Rename Agent Plug-in in the JVM Browser JMC-7362 Reference wrong in agent plug-in.xml JMC-7353 JMC fails to build because it can’t download babel dependency JMC-6813 Publish core libraries to Maven Central JMC-7205 Correct URL for Oracle’s JMC production binaries JMC-7360 Provider Name missing for Agent Plugin JMC-7122 Rules evaluation never complete JMC-7265 Update Release Notes for 8.1.0 JMC-7337 JMC fails to parse JFR with events from WebLogic Server JMC-7006 CoreLibs: Review TPL info in all archives JMC-7370 Double-Checked Locking in Agent Plugin code JMC-7366 Agent Plugin Object Contributions to Methods JMC-7368 Update the 8.1 splash to release splash JMC-7324 Update eclipse version and Min JDK required in Update Site landing pages JMC-7344 Unhandled exception in rule evaluation JMC-4792 Stop using System.out/err.println and e.printStackTrace JMC-6922 Reintroduce GC summary screen JMC-7167 Agent Plugin"
}, {
  "objectID" : "3726c997-85b3-42b3-b1fa-8331969f1777",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control 8.1.0",
  "section" : "Known issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.1.0",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.1.0#known-issues",
  "content" : "Known issues JMC-4270: Hibernation and time After the bugfix of https://bugs.openjdk.java.net/browse/JDK-6523160 in JDK 8, the RuntimeMXBean#getUptime() attribute was re-implemented to mean “Elapsed time of JVM process”, whilst it previously was implemented as time since start of the JVM process. The uptime attribute is used by JMC, together with RuntimeMXBean#getStartTime(), to estimate the actual server time. This means that time stamps, as well as remaining time for a flight recording, can be wrong for processes on machines that have been hibernated. JMC-7071: JMC can’t attach to jlinked JVMs This one is still under investigation, but it seems JMC can’t attach to certain jlinked images. JMC-7068: JfrRecordingTest (uitest) hangs on the automated analysis page Trying to run uitests on Fedora hangs on JfrRecordingTest. JMC-7003: The graph and flame graph view does not work on Windows This is due to a bug with the Edge based browser component in SWT. JMC-6265: JMC crashes with Webkit2+GTK 4 See the issue for more information. JMC-5412: Dragging and dropping a JFR file into an open analysis page does not work The expected behaviour would be to open the recording whenever a file is dropped in the editor area, but the behaviour is defined by the embedded browser component, and not very useful."
}, {
  "objectID" : "8b7649b0-b837-4f36-a60d-1017c3bece1c",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Zulu Mission Control 8.0.1",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.0.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.0.1",
  "content" : "August 10, 2021"
}, {
  "objectID" : "5f3e905f-69f3-4fce-a4b1-2a6f797996df",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Zulu Mission Control 8.0.1",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.0.1",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.0.1",
  "content" : "Zulu Mission Control 8.0.1 is a patch release that addresses the following issues: JBS Issue ID Description 7188 JMC fails to dump file and gets stuck when flightrecording is attempted on jmxremote connection 7172 Fix spell mistake in secure store class 6920 UI improvements 6336 Remove Triple DES Cipher in Secure store 6398 Better JNDI Usage"
}, {
  "objectID" : "fe5694e6-34cd-4ce0-844e-1ddc8b3c16d6",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Zulu Mission Control 8.0.0.17",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17",
  "content" : "April 5, 2021"
}, {
  "objectID" : "e5c23dd6-416e-4f0f-b40e-8c7faee7beca",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Zulu Mission Control 8.0.0.17",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17#whats-new",
  "content" : "What’s New JOverflow has been converted to SWT and included in the base Mission Control distribution. JOverflow TreeMap view has been introduced. Now, when analyzing a heap, you can view all types of objects as a tree and drill- down them to identify the source of the memory leak. To open the view: go to Window > Show view > Other… > JOverflow > JOverflow TreeMap. Flight Recorder was updated with the following features: Flame View has been improved. Now you can display the aggregated stack traces for the selected recorded events as a Flame Graph or as an Icicle Graph (inverted). To open the view: go to Window > Show view > Other… > Mission Control > Flame View. Graph View has been introduced. An EA version of the view is now available on the Method Profiling page. The graph displays methods as nodes and calls from one method to another as arrows. Zulu Mission Control Release Notes. To open the view: go to Window > Show view > Other… > Mission Control > Graph View. Note Graph pruning is not yet available. Therefore, it takes a long time to compose and render a large graph and causes the user interface to freeze. To avoid this, use the Max Nodes option to limit the number of nodes loaded into the graph. Predecessors and Successors tabs have been returned to the Method Profiling page. Now you can select (on the Top Method tab) the method where the JVM spends most of its time during application execution and view all methods from which it was called (on the Predecessors tab) as well as methods called from it (on the Successors tab). Resolved issues Issue ID Description JMC-7131 Uitests failing on Windows JMC-7130 JfrThreadsPageTest (UI-test) fails (part 2) JMC-7121 Unhandled exception while working with Thread Graphs JMC-7120 Charts in custom pages are not auto refreshed JMC-7106 Update to the release splash screen for JMC 8 JMC-7104 The PDE wizard does not work with Rules 2.0 JMC-7093 Wrong copyright year JMC-7090 [JFR Writer] Make constant pool optional when registering a new type JMC-7088 Show concurrent option showing lesser number of records. JMC-7081 Update Copyright year to 2021, Validate and update license attributes JMC-7079 Numeric values in automated analysis summary is not resolved JMC-7078 Update the p2-maven-plugin to 1.5.0 JMC-7076 Rules and Analysis code has exceptions during uitests JMC-7073 Exceptions in FlameGraph JMC-7063 JfrThreadsPageTest (UI-test) fails JMC-7062 Update to the Eclipse 2020-12 platform JMC-7057 Update Copyright year in About dialog and update site landing page JMC-7055 Flameview manifest is exporting non-existent package JMC-7052 The link to BellSoft LMC should be updated JMC-7048 No matter how funny java.rmi.server.hostname resolves, you should alway be able to connect to yourself JMC-7040 Event list is not updated and Stack trace stale upon Set as Focused Selection JMC-7039 Timestamp granularity too coarse JMC-7036 Invoke converters/stringify for event fields and return values JMC-7033 Allow overriding the id (name) of the event type JMC-7032 The banner is missing from help page JMC-7029 In the event configuration the event name should be renamed label JMC-7028 The ids are wrong in the agent tests JMC-7027 Avoid NPE for callers of TransformRegistry#getTransformData JMC-7016 JAWS only read “link” on letter small A and big A for welcome page JMC-7008 Agent should properly support Class and Thread JMC-7002 Too large graphs will freeze JMC JMC-7001 Missing chromium binary message on MacOS X JMC-7000 Update third party library used in flightrecorder.flameview JMC-6996 Properly support converters JMC-6988 Initial implementation of JFR binary format writer JMC-6986 \"Flight Recorder\" is not working as expected for localhost Connection JMC-6982 CoreLibs: Add license and TPL info to sources and javadocs JMC-6974 Try to use the chromium SWT browser by default on windows JMC-6973 New Method Profiling Page for JMC JMC-6965 Thirdparty licenses missing in core, Maven plugins version update JMC-6964 [Agent] Automatically open base module for accessing Unsafe on JDK 11+ JMC-6961 Fix rules test JMC-6960 Update Copyright year and Welcome page JMC-6959 Fix agent tests JMC-6951 [core] Missing license.txt in core artifacts JMC-6948 Add union to QuantityRange JMC-6947 Allow executable name to show up in JPS JMC-6946 There should be an option to build the agent in the build script JMC-6945 Create build script for Windows JMC-6944 build.sh does not correctly run UI tests due to not running p2 site JMC-6942 The README is showing the wrong syntax for the build script JMC-6941 build.sh does not terminate jetty after executing \"--packageJmc\" JMC-6940 build.sh test arguments wrong JMC-6929 Remove obsolete .hgignore file JMC-6925 Cache the local maven repo between runs JMC-6917 Clean warnings in the agent project JMC-6916 JOverflow treemap listener depending on internal SWT class JMC-6915 JMC dev launchers do not include JOverflow JMC-6914 Fix windows check formatting script JMC-6913 Add daemon thread information to the console threads view JMC-6911 Third Party Upgrade to HdrHistogram 2.1.12 JMC-6910 Missing manifest prevents agent jar from running JMC-6909 Upgrade to Eclipse 2020-09 JMC-6908 Rule for warning about the starting of processes JMC-6905 Add rule for heap dumps JMC-6902 Console plug-ins with icons not found will fail JMC-6900 Switch from IPredicate to Predicate JMC-6899 Upgrade core to 8 JMC-6898 Installing from IDE update site complains about missing LZ4 plug-in JMC-6897 Remove unused javax imports JMC-6895 Agent Instrumentation fails to emit events when the instrumented class has a dif- ferent/custom ClassLoader JMC-6889 Provide build script for making it easier to build JMC JMC-6887 Agent Instrumentation fails silently if method descriptors don\"t match JMC-6886 Agent ASM components are constructed with the wrong version of Opcodes JMC-6885 VM_OPERATION_DURATION aggregator does not filter on type JMC-6882 Method Profiling lacks icon in the Java Application View JMC-6878 Update Spotbugs latest version in jmc 8.0.0 source JMC-6875 Add agent MXBean operation to return instrumented xml configuration JMC-6873 Too many unnecessary missing resource exceptions thrown JMC-6871 Upgrade to ASM 8.0.1 JMC-6870 defineEventProbes is incorrect when probes occupy different classes JMC-6869 Fix formatting error JMC-6864 Schema definition doesn\"t have optional ReturnValue \"name\" property JMC-6859 Correction in JMC welcome page JMC-6858 Thread dump does not show complete call stack based for all threads (grouped by time) JMC-6855 Should add information about where to get builds to README JMC-6852 Extracted layout for the JMC RCP binaries look not the same for Linux/Windows JMC-6847 Add 2020-06 platform JMC-6846 Parser needs to skip events with no metadata JMC-6840 [Accessibility, JAWS] \"Start Using JMC\" link in Welcome Page is not traversable using Keyboard JMC-6837 More formal tone in the agent settings JMC-6835 Adding developer guide for getting started with development JMC-6833 Error when viewing the Java Application page JMC-6831 Add chunk ranges to IItemCollections JMC-6825 JMX defineEventProbes fails when no events in XMLDescriptor JMC-6819 Agent instrumentation causing stack map frame verification error JMC-6812 Rules 2.0 JMC-6810 Create treemap viewer for JOverflow JMC-6805 Event emission only on exceptions JMC-6801 Improve stackdepth setting rule JMC-6787 Simplified stack trace tree model JMC-6785 Compiler warning cleanup JMC-6784 Cleanup agent compiler warnings JMC-6767 Empty filter regex should not be compiled JMC-6766 Add heap usage before and after GC to the Garbage Collections table JMC-6753 JMC Help Documentation requires corrections JMC-6745 Surface hidden annotated method information JMC-6744 Add 2020-03 platform JMC-6729 VM Operations rule uses instance fields JMC-6725 Formalize agent probe definition XML schema and enforce validations JMC-6724 Agent argument as a path to a probe definition XML should be optional JMC-6715 Create operation to identify currently instrumented transforms JMC-6712 Transformations defined in agent args not applied when loading dynamically JMC-6710 Add rule to detect if an old version of Lucene is in use JMC-6708 Set boundary for array size while parsing recording JMC-6704 Warn when trying to open an LZ4 compressed recording JMC-6702 Sanitize rule data JMC-6701 Support LZ4 compressed recordings in JMC core JMC-6700 Make Flame Graph compile on Photon JMC-6699 Remove the photon platform JMC-6698 SAPJVM not recognized as known (hotspot) VM JMC-6697 Move agent out of core JMC-6695 Build agent as part of checkin tests JMC-6694 JDK8 RCP launch configurations should set -XX:+IgnoreUnrecognizedVMOptions JMC-6693 Eclipse projects core/org.openjdk.jmc.jdp* should have the correct JRE target level JMC-6692 JMC is asking to unlock Commercial Features on JFR enabled OpenJDK8 JMC-6691 The root of the flame graph could be improved JMC-6690 Find a home for the Flame View in the JMC perspective JMC-6689 Export (and print?) the flame graph JMC-6688 Add a project definition for platform-definition-2019-12 JMC-6687 Add icon to the flame view to render as icicle graph JMC-6686 Add a JMC FAQ to the JMC Wiki… JMC-6685 Read primitives in parser when possible JMC-6684 Add CONTRIBUTING.md file to the JMC project JMC-6677 Search to highlight cells in the Flame View JMC-6674 Inefficient finding of first start time and first last end times JMC-6673 Update to Tycho 1.6.0 once released. JMC-6672 Mission Control needs standardized JavaScript formatting JMC-6671 DisjointBuilder is slow for large quantities of duration events JMC-6670 Harmonize ~ Unclassifiable ~ across Flame View and Stacktrace View JMC-6669 FlameGraphView tree calculation should (probably) be interruptable JMC-6668 Move org.openjdk.jmc.jdp bundle from application to core JMC-6665 .project files still exist for removed platform definitions JMC-6663 Reloading the Flame Chart View in Linux displays file browser JMC-6662 Switch to Eclipse 2019-12 (4.14) JMC-6661 Agent tests for the JMX API can probably be simplified JMC-6660 Agent JMX API should not return classes JMC-6659 Update the \"Showing X of Y events…\" JMC-6658 Remove unnecessary storing of pre-instrumented bytecode JMC-6657 Add allocation pressure column to Memory and TLAB views JMC-6656 Allow capturing field values with path syntax JMC-6655 Should ignore the uitest recording created JMC-6652 JCheck bug number verification too stringent JMC-6651 Expose the magic bytes for Zip and GZip from the IOToolkit JMC-6650 Primitive to Object conversion rule breaks on allocations outside TLABs JMC-6643 VM Operations rule only looks for longest operation JMC-6642 Ignoring JS libraries and dependency reduced pom JMC-6640 Run spotless automatically for PRs JMC-6639 Introduce spotless for the rest of the JMC project JMC-6636 Introduce spotless for core JMC-6632 Clean up the rule heuristics text JMC-6631 Update version to 8.0.0 JMC-6630 Adding jcheck configuration file JMC-6617 Better probe format for return values JMC-6604 Switch the splash screen in mainline out for an 8.0 EA one JMC-6588 Move JMC core to JDK 8 JMC-6583 Should be possible to filter and search in the Event Browser JMC-6572 MBean retransform should be protected by permission checks JMC-6554 Support JFR in OpenJDK 8 JMC-6549 Color flame chart based on package name JMC-6542 Improve calls to render in the flame view JMC-6534 String deduplication rule assumes only G1 has feature JMC-6507 Use GraphViz to render stack traces JMC-6487 The TOPIC word in topic constants should either be the first word or removed JMC-6173 jmc -open requires full path JMC-6000 Get rid of build warnings in the JMC agent JMC-5734 Overflow in stacktrace tooltips on Mac JMC-5721 Reintroduce the Percentage column JMC-5709 Improve Biased lock revocation result text JMC-5707 Add excludes for password checking rules JMC-5706 JavaBlocking rule should report total block times JMC-5700 Improve file and socket IO rule result texts JMC-5604 Check bytecode verification flags JMC-5603 Version specific help links in event type missing result JMC-5067 Content assist uses too much screen area JMC-4984 Label missing for Focus Selection combobox JMC-4819 Improved tooltips and context menus for Stack Trace View JMC-4454 Other JMC launched after this JMC is listed as \"-XX:+UseG1GC\" in JVM Browser ZULU-6933 Make ZMC logo transparent on macOS ZULU-19051 Make a transparent Zulu Misson Control icon Known Issues and Workarounds Problems with the JFR launcher plug-in There is a compatibility issue with the experimental JFR launcher plug-in and other applications running in Eclipse on Linux, which can cause problems with launching applications. Workaround: Do not install the experimental JFR launcher plug-in when installing ZMC in Eclipse on Linux. Or use two different installations of Eclipse - one for ZMC with the experimental JFR launcher plug-in and another for other applications."
}, {
  "objectID" : "6979a9a5-05ac-4d1e-a919-8f40fb74b161",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Zulu Mission Control 8.0.0.17",
  "section" : "What’s New",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17#whats-new",
  "content" : "What’s New JOverflow has been converted to SWT and included in the base Mission Control distribution. JOverflow TreeMap view has been introduced. Now, when analyzing a heap, you can view all types of objects as a tree and drill- down them to identify the source of the memory leak. To open the view: go to Window > Show view > Other… > JOverflow > JOverflow TreeMap. Flight Recorder was updated with the following features: Flame View has been improved. Now you can display the aggregated stack traces for the selected recorded events as a Flame Graph or as an Icicle Graph (inverted). To open the view: go to Window > Show view > Other… > Mission Control > Flame View. Graph View has been introduced. An EA version of the view is now available on the Method Profiling page. The graph displays methods as nodes and calls from one method to another as arrows. Zulu Mission Control Release Notes. To open the view: go to Window > Show view > Other… > Mission Control > Graph View. Note Graph pruning is not yet available. Therefore, it takes a long time to compose and render a large graph and causes the user interface to freeze. To avoid this, use the Max Nodes option to limit the number of nodes loaded into the graph. Predecessors and Successors tabs have been returned to the Method Profiling page. Now you can select (on the Top Method tab) the method where the JVM spends most of its time during application execution and view all methods from which it was called (on the Predecessors tab) as well as methods called from it (on the Successors tab)."
}, {
  "objectID" : "b0aac616-f6aa-4316-b033-15fc033601d4",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Zulu Mission Control 8.0.0.17",
  "section" : "Resolved issues",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17#resolved-issues",
  "content" : "Resolved issues Issue ID Description JMC-7131 Uitests failing on Windows JMC-7130 JfrThreadsPageTest (UI-test) fails (part 2) JMC-7121 Unhandled exception while working with Thread Graphs JMC-7120 Charts in custom pages are not auto refreshed JMC-7106 Update to the release splash screen for JMC 8 JMC-7104 The PDE wizard does not work with Rules 2.0 JMC-7093 Wrong copyright year JMC-7090 [JFR Writer] Make constant pool optional when registering a new type JMC-7088 Show concurrent option showing lesser number of records. JMC-7081 Update Copyright year to 2021, Validate and update license attributes JMC-7079 Numeric values in automated analysis summary is not resolved JMC-7078 Update the p2-maven-plugin to 1.5.0 JMC-7076 Rules and Analysis code has exceptions during uitests JMC-7073 Exceptions in FlameGraph JMC-7063 JfrThreadsPageTest (UI-test) fails JMC-7062 Update to the Eclipse 2020-12 platform JMC-7057 Update Copyright year in About dialog and update site landing page JMC-7055 Flameview manifest is exporting non-existent package JMC-7052 The link to BellSoft LMC should be updated JMC-7048 No matter how funny java.rmi.server.hostname resolves, you should alway be able to connect to yourself JMC-7040 Event list is not updated and Stack trace stale upon Set as Focused Selection JMC-7039 Timestamp granularity too coarse JMC-7036 Invoke converters/stringify for event fields and return values JMC-7033 Allow overriding the id (name) of the event type JMC-7032 The banner is missing from help page JMC-7029 In the event configuration the event name should be renamed label JMC-7028 The ids are wrong in the agent tests JMC-7027 Avoid NPE for callers of TransformRegistry#getTransformData JMC-7016 JAWS only read “link” on letter small A and big A for welcome page JMC-7008 Agent should properly support Class and Thread JMC-7002 Too large graphs will freeze JMC JMC-7001 Missing chromium binary message on MacOS X JMC-7000 Update third party library used in flightrecorder.flameview JMC-6996 Properly support converters JMC-6988 Initial implementation of JFR binary format writer JMC-6986 \"Flight Recorder\" is not working as expected for localhost Connection JMC-6982 CoreLibs: Add license and TPL info to sources and javadocs JMC-6974 Try to use the chromium SWT browser by default on windows JMC-6973 New Method Profiling Page for JMC JMC-6965 Thirdparty licenses missing in core, Maven plugins version update JMC-6964 [Agent] Automatically open base module for accessing Unsafe on JDK 11+ JMC-6961 Fix rules test JMC-6960 Update Copyright year and Welcome page JMC-6959 Fix agent tests JMC-6951 [core] Missing license.txt in core artifacts JMC-6948 Add union to QuantityRange JMC-6947 Allow executable name to show up in JPS JMC-6946 There should be an option to build the agent in the build script JMC-6945 Create build script for Windows JMC-6944 build.sh does not correctly run UI tests due to not running p2 site JMC-6942 The README is showing the wrong syntax for the build script JMC-6941 build.sh does not terminate jetty after executing \"--packageJmc\" JMC-6940 build.sh test arguments wrong JMC-6929 Remove obsolete .hgignore file JMC-6925 Cache the local maven repo between runs JMC-6917 Clean warnings in the agent project JMC-6916 JOverflow treemap listener depending on internal SWT class JMC-6915 JMC dev launchers do not include JOverflow JMC-6914 Fix windows check formatting script JMC-6913 Add daemon thread information to the console threads view JMC-6911 Third Party Upgrade to HdrHistogram 2.1.12 JMC-6910 Missing manifest prevents agent jar from running JMC-6909 Upgrade to Eclipse 2020-09 JMC-6908 Rule for warning about the starting of processes JMC-6905 Add rule for heap dumps JMC-6902 Console plug-ins with icons not found will fail JMC-6900 Switch from IPredicate to Predicate JMC-6899 Upgrade core to 8 JMC-6898 Installing from IDE update site complains about missing LZ4 plug-in JMC-6897 Remove unused javax imports JMC-6895 Agent Instrumentation fails to emit events when the instrumented class has a dif- ferent/custom ClassLoader JMC-6889 Provide build script for making it easier to build JMC JMC-6887 Agent Instrumentation fails silently if method descriptors don\"t match JMC-6886 Agent ASM components are constructed with the wrong version of Opcodes JMC-6885 VM_OPERATION_DURATION aggregator does not filter on type JMC-6882 Method Profiling lacks icon in the Java Application View JMC-6878 Update Spotbugs latest version in jmc 8.0.0 source JMC-6875 Add agent MXBean operation to return instrumented xml configuration JMC-6873 Too many unnecessary missing resource exceptions thrown JMC-6871 Upgrade to ASM 8.0.1 JMC-6870 defineEventProbes is incorrect when probes occupy different classes JMC-6869 Fix formatting error JMC-6864 Schema definition doesn\"t have optional ReturnValue \"name\" property JMC-6859 Correction in JMC welcome page JMC-6858 Thread dump does not show complete call stack based for all threads (grouped by time) JMC-6855 Should add information about where to get builds to README JMC-6852 Extracted layout for the JMC RCP binaries look not the same for Linux/Windows JMC-6847 Add 2020-06 platform JMC-6846 Parser needs to skip events with no metadata JMC-6840 [Accessibility, JAWS] \"Start Using JMC\" link in Welcome Page is not traversable using Keyboard JMC-6837 More formal tone in the agent settings JMC-6835 Adding developer guide for getting started with development JMC-6833 Error when viewing the Java Application page JMC-6831 Add chunk ranges to IItemCollections JMC-6825 JMX defineEventProbes fails when no events in XMLDescriptor JMC-6819 Agent instrumentation causing stack map frame verification error JMC-6812 Rules 2.0 JMC-6810 Create treemap viewer for JOverflow JMC-6805 Event emission only on exceptions JMC-6801 Improve stackdepth setting rule JMC-6787 Simplified stack trace tree model JMC-6785 Compiler warning cleanup JMC-6784 Cleanup agent compiler warnings JMC-6767 Empty filter regex should not be compiled JMC-6766 Add heap usage before and after GC to the Garbage Collections table JMC-6753 JMC Help Documentation requires corrections JMC-6745 Surface hidden annotated method information JMC-6744 Add 2020-03 platform JMC-6729 VM Operations rule uses instance fields JMC-6725 Formalize agent probe definition XML schema and enforce validations JMC-6724 Agent argument as a path to a probe definition XML should be optional JMC-6715 Create operation to identify currently instrumented transforms JMC-6712 Transformations defined in agent args not applied when loading dynamically JMC-6710 Add rule to detect if an old version of Lucene is in use JMC-6708 Set boundary for array size while parsing recording JMC-6704 Warn when trying to open an LZ4 compressed recording JMC-6702 Sanitize rule data JMC-6701 Support LZ4 compressed recordings in JMC core JMC-6700 Make Flame Graph compile on Photon JMC-6699 Remove the photon platform JMC-6698 SAPJVM not recognized as known (hotspot) VM JMC-6697 Move agent out of core JMC-6695 Build agent as part of checkin tests JMC-6694 JDK8 RCP launch configurations should set -XX:+IgnoreUnrecognizedVMOptions JMC-6693 Eclipse projects core/org.openjdk.jmc.jdp* should have the correct JRE target level JMC-6692 JMC is asking to unlock Commercial Features on JFR enabled OpenJDK8 JMC-6691 The root of the flame graph could be improved JMC-6690 Find a home for the Flame View in the JMC perspective JMC-6689 Export (and print?) the flame graph JMC-6688 Add a project definition for platform-definition-2019-12 JMC-6687 Add icon to the flame view to render as icicle graph JMC-6686 Add a JMC FAQ to the JMC Wiki… JMC-6685 Read primitives in parser when possible JMC-6684 Add CONTRIBUTING.md file to the JMC project JMC-6677 Search to highlight cells in the Flame View JMC-6674 Inefficient finding of first start time and first last end times JMC-6673 Update to Tycho 1.6.0 once released. JMC-6672 Mission Control needs standardized JavaScript formatting JMC-6671 DisjointBuilder is slow for large quantities of duration events JMC-6670 Harmonize ~ Unclassifiable ~ across Flame View and Stacktrace View JMC-6669 FlameGraphView tree calculation should (probably) be interruptable JMC-6668 Move org.openjdk.jmc.jdp bundle from application to core JMC-6665 .project files still exist for removed platform definitions JMC-6663 Reloading the Flame Chart View in Linux displays file browser JMC-6662 Switch to Eclipse 2019-12 (4.14) JMC-6661 Agent tests for the JMX API can probably be simplified JMC-6660 Agent JMX API should not return classes JMC-6659 Update the \"Showing X of Y events…\" JMC-6658 Remove unnecessary storing of pre-instrumented bytecode JMC-6657 Add allocation pressure column to Memory and TLAB views JMC-6656 Allow capturing field values with path syntax JMC-6655 Should ignore the uitest recording created JMC-6652 JCheck bug number verification too stringent JMC-6651 Expose the magic bytes for Zip and GZip from the IOToolkit JMC-6650 Primitive to Object conversion rule breaks on allocations outside TLABs JMC-6643 VM Operations rule only looks for longest operation JMC-6642 Ignoring JS libraries and dependency reduced pom JMC-6640 Run spotless automatically for PRs JMC-6639 Introduce spotless for the rest of the JMC project JMC-6636 Introduce spotless for core JMC-6632 Clean up the rule heuristics text JMC-6631 Update version to 8.0.0 JMC-6630 Adding jcheck configuration file JMC-6617 Better probe format for return values JMC-6604 Switch the splash screen in mainline out for an 8.0 EA one JMC-6588 Move JMC core to JDK 8 JMC-6583 Should be possible to filter and search in the Event Browser JMC-6572 MBean retransform should be protected by permission checks JMC-6554 Support JFR in OpenJDK 8 JMC-6549 Color flame chart based on package name JMC-6542 Improve calls to render in the flame view JMC-6534 String deduplication rule assumes only G1 has feature JMC-6507 Use GraphViz to render stack traces JMC-6487 The TOPIC word in topic constants should either be the first word or removed JMC-6173 jmc -open requires full path JMC-6000 Get rid of build warnings in the JMC agent JMC-5734 Overflow in stacktrace tooltips on Mac JMC-5721 Reintroduce the Percentage column JMC-5709 Improve Biased lock revocation result text JMC-5707 Add excludes for password checking rules JMC-5706 JavaBlocking rule should report total block times JMC-5700 Improve file and socket IO rule result texts JMC-5604 Check bytecode verification flags JMC-5603 Version specific help links in event type missing result JMC-5067 Content assist uses too much screen area JMC-4984 Label missing for Focus Selection combobox JMC-4819 Improved tooltips and context menus for Stack Trace View JMC-4454 Other JMC launched after this JMC is listed as \"-XX:+UseG1GC\" in JVM Browser ZULU-6933 Make ZMC logo transparent on macOS ZULU-19051 Make a transparent Zulu Misson Control icon"
}, {
  "objectID" : "f8eec819-752a-4811-b18c-1ed65b74f858",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Zulu Mission Control 8.0.0.17",
  "section" : "Known Issues and Workarounds",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17#known-issues-and-workarounds",
  "content" : "Known Issues and Workarounds Problems with the JFR launcher plug-in There is a compatibility issue with the experimental JFR launcher plug-in and other applications running in Eclipse on Linux, which can cause problems with launching applications. Workaround: Do not install the experimental JFR launcher plug-in when installing ZMC in Eclipse on Linux. Or use two different installations of Eclipse - one for ZMC with the experimental JFR launcher plug-in and another for other applications."
}, {
  "objectID" : "3340ae48-4c39-41d7-baec-dba94261afda",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Zulu Mission Control 8.0.0.17",
  "section" : "Problems with the JFR launcher plug-in",
  "url" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17",
  "link" : "https://docs.azul.com/azul-mission-control/releases/8.0.0.17#problems-with-the-jfr-launcher-plug-in",
  "content" : "Problems with the JFR launcher plug-in There is a compatibility issue with the experimental JFR launcher plug-in and other applications running in Eclipse on Linux, which can cause problems with launching applications. Workaround: Do not install the experimental JFR launcher plug-in when installing ZMC in Eclipse on Linux. Or use two different installations of Eclipse - one for ZMC with the experimental JFR launcher plug-in and another for other applications."
}, {
  "objectID" : "8e360284-d297-4d94-95af-d26f7100eb8b",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control Installation Guidelines",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/installation/introduction",
  "link" : "https://docs.azul.com/azul-mission-control/installation/introduction",
  "content" : "This section shows how to download, install, and run Azul Mission Control. Supported Platforms and Requirements Install and Run Azul Mission Control You can also find documentation about features and components within Azul Mission Control, see \"Help\" > \"Azul Mission Control Help\" in the application menu. Azul Mission Control has context help that you can open by hitting F1 on a UI component or view."
}, {
  "objectID" : "8fc0d725-baab-4759-8bba-294a1ec573f5",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Supported Platforms and Requirements",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/installation/supported-platforms",
  "link" : "https://docs.azul.com/azul-mission-control/installation/supported-platforms",
  "content" : "This section lists operating systems supported by Azul Mission Control as well as Java requirements."
}, {
  "objectID" : "51f69a7e-18c7-4686-bafd-a9494ad139d2",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Supported Platforms and Requirements",
  "section" : "Supported Operating Systems",
  "url" : "https://docs.azul.com/azul-mission-control/installation/supported-platforms",
  "link" : "https://docs.azul.com/azul-mission-control/installation/supported-platforms#supported-operating-systems",
  "content" : "Supported Operating Systems Azul Mission Control is available on the following platforms: Windows x86 (64-bit) Linux x86 (64-bit) MacOS x86 (64-bit) MacOS AArch64"
}, {
  "objectID" : "f83be6eb-4850-4969-9465-6d12bc2b3edc",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Supported Platforms and Requirements",
  "section" : "Java Requirements",
  "url" : "https://docs.azul.com/azul-mission-control/installation/supported-platforms",
  "link" : "https://docs.azul.com/azul-mission-control/installation/supported-platforms#java-requirements",
  "content" : "Java Requirements To run the Azul Mission Control 8.3.1 application, you need a JDK 11 or later (not a JRE). Azul Mission Control 8.3.1 allows you to monitor JVMs from Java 8, 11, or later."
}, {
  "objectID" : "c27185d7-8f58-4c05-89b1-5d7714c97395",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Installing and Running Azul Mission Control",
  "section" : "Installing and Running On Linux",
  "url" : "https://docs.azul.com/azul-mission-control/installation/install-and-run",
  "link" : "https://docs.azul.com/azul-mission-control/installation/install-and-run#installing-and-running-on-linux",
  "content" : "Installing and Running On Linux Download the .tar.gz installation package. Extract the downloaded package.  $ tar -xzvf zmc<version>-ca-linux_x64.tar.gz Run Azul Mission Control as shown below:  $ zmc<version>-ca-linux_x64/Azul\\ Mission\\ Control/zmc"
}, {
  "objectID" : "38c4259c-bcd5-4e51-8d95-49183f7526ca",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Installing and Running Azul Mission Control",
  "section" : "Installing and Running On macOS",
  "url" : "https://docs.azul.com/azul-mission-control/installation/install-and-run",
  "link" : "https://docs.azul.com/azul-mission-control/installation/install-and-run#installing-and-running-on-macos",
  "content" : "Installing and Running On macOS Download the .tar.gz installation package. Extract the downloaded package.  $ tar -xzvf zmc<version>-ca-linux_x64.tar.gz Run Azul Mission Control as shown below:  $ <zmc_package>/Azul\\ Mission\\ Control.app/Contents/MacOS/zmc"
}, {
  "objectID" : "87c09513-b4a7-49f1-b7a6-4ac856749ac4",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Installing and Running Azul Mission Control",
  "section" : "Installing and Running On Windows",
  "url" : "https://docs.azul.com/azul-mission-control/installation/install-and-run",
  "link" : "https://docs.azul.com/azul-mission-control/installation/install-and-run#installing-and-running-on-windows",
  "content" : "Installing and Running On Windows Download the .zip installation package. Extract the downloaded package. Run Azul Mission Control as shown below:  \".\\zmc<version>-ca-win_x64\\Azul Mission Control\\zmc.exe\" Configuring JDK for Azul Mission Control If you observe the \"No local JVMs detected\" warning when you run zmc.exe, perform either of the following: Use the -vm parameter to explicitly specify an appropriate JDK to run Azul Mission Control, for example:  zmc.exe -vm D:\\JAVAs\\zulu11\\bin Edit the zmc.ini configuration file before running Azul Mission Control as described below: Open zmc.ini located in the same directory as zmc.exe. Insert the following two lines above the -vmargs command:  -vm\n<path_to_jdk_folder>\\bin Your modified zmc.ini should look similar to the sample below:  --launcher.appendVmargs\n-vm\nD:\\JAVAs\\zulu11\\bin\n-vmargs\n... Save zmc.ini."
}, {
  "objectID" : "96f34637-5fd1-4a40-82aa-19cb2f932a39",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Installing and Running Azul Mission Control",
  "section" : "Configuring JDK for Azul Mission Control",
  "url" : "https://docs.azul.com/azul-mission-control/installation/install-and-run",
  "link" : "https://docs.azul.com/azul-mission-control/installation/install-and-run#configuring-jdk-for-azul-mission-control",
  "content" : "Configuring JDK for Azul Mission Control If you observe the \"No local JVMs detected\" warning when you run zmc.exe, perform either of the following: Use the -vm parameter to explicitly specify an appropriate JDK to run Azul Mission Control, for example:  zmc.exe -vm D:\\JAVAs\\zulu11\\bin Edit the zmc.ini configuration file before running Azul Mission Control as described below: Open zmc.ini located in the same directory as zmc.exe. Insert the following two lines above the -vmargs command:  -vm\n<path_to_jdk_folder>\\bin Your modified zmc.ini should look similar to the sample below:  --launcher.appendVmargs\n-vm\nD:\\JAVAs\\zulu11\\bin\n-vmargs\n... Save zmc.ini."
}, {
  "objectID" : "ca099385-57eb-4806-9511-fe7687881576",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Introduction to Recordings",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/recording/introduction",
  "link" : "https://docs.azul.com/azul-mission-control/recording/introduction",
  "content" : "Azul Mission Control provides you insights into your Java application based on recordings. These can be made as files for later analysis, or with live insights into a running application. Configure JFR Recording to File at Startup of the Application Starting, Stopping and Reconfiguring a JFR File Recording for a Running Application Making Recordings in a Dockerized Application Connect to a Running JVM You can configure JFR recordings in different ways as described on the following pages: JFR Command Line Options JFR Setting Files"
}, {
  "objectID" : "d1d8fd73-0633-4723-947b-b6c0042a9db6",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording at Startup of the Application",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-at-startup",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-at-startup",
  "content" : "To enable recording from startup of an application, use the following command-line options, based on your use-case:  java -XX:StartFlightRecording=filename=/tmp/rec.jfr,duration=180s -jar my_app.jar See JFR Command Line Options for a complete overview of the available options."
}, {
  "objectID" : "a53f343e-f4b0-4e05-99be-d9511ad0dc75",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Running Application",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run",
  "content" : "Thanks to JFR and jcmd, you can make a recording to file from a running application if you have terminal access to the environment where the application is running."
}, {
  "objectID" : "d53ea23b-ebb1-49a9-a514-2c0dc1510f31",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Running Application",
  "section" : "Starting a Recording",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run#starting-a-recording",
  "content" : "Starting a Recording Start a recording for a running application on the same host and userid as the Java process under analysis, by running the following command:  $ jcmd JVMID JFR.start filename=rec.jfr Where JVMID is either the process ID or the classname assigned with the java process as shown when running jcmd without parameters."
}, {
  "objectID" : "c634293b-5057-457e-b8f0-44b7ecd5c81d",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Running Application",
  "section" : "Stopping a Recording",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run#stopping-a-recording",
  "content" : "Stopping a Recording Use the JFR.stop command to stop a JFR recording, either by its name or ID. If no name or ID is specified, the first recording which is found, is stopped.  $ jcmd JVMID JFR.stop name=1"
}, {
  "objectID" : "f6c9a1ae-43f5-4324-b417-792df1176bc6",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Running Application",
  "section" : "Modifying a Recording",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run#modifying-a-recording",
  "content" : "Modifying a Recording Change the settings of a running JFR recording with the JFR.config command:  jcmd <PID> JFR.config filename=new_file.jfr"
}, {
  "objectID" : "668861ea-ebfe-4253-afa4-ab15b296e1d0",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Running Application",
  "section" : "Options",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-during-run#options",
  "content" : "Options See JFR Command Line Options for a complete overview of the available options."
}, {
  "objectID" : "aba6d508-3d0f-4cf4-aafe-da5f6f2ed26f",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Dockerized Application",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker",
  "content" : "As Docker is a \"closed environment\", it can be challenging to create a JFR recording of an application running in a Docker or Kubernetes environment. You can use different approaches, depending on the connections you have available and where you can store the recording. When you are using the jcmd tool, or record at startup, you can store the recording inside the container, or use a volume to make the file easier accessible."
}, {
  "objectID" : "d987856a-e2df-42fc-a678-cfa53db67c4a",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Dockerized Application",
  "section" : "Recording with jcmd via Docker",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker#recording-with-jcmd-docker",
  "content" : "Recording with jcmd via Docker Use the jcmd tool via the command-line tool via docker exec to start and stop JFR recordings. Find the process ID of the Java application in the Docker container by opening a shell connection and executing the jcmd command:  $ docker ps\nCONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS                                       NAMES\nb94b5825a39f   petclinic:1.0   \"java -jar petclinic…\"   57 seconds ago   Up 56 seconds   0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   agitated_cerf\n\n$ docker exec -it b94b5825a39f sh\n# jcmd\n1 petclinic.jar\n82 jdk.jcmd/sun.tools.jcmd.JCmd Start a JFR Recording in the Docker container, see JFR Command Line Options for a complete overview of the available options. You need to use Process ID 1, as jcmd has confirmed this is the ID of the running application inside the Docker.  jcmd 1 JFR.start duration=30s settings=profile filename=/tmp/recording.jfr\n\n1:\nStarted recording 1. The result will be written to:\n/tmp/recording.jfr Close the shell:  exit"
}, {
  "objectID" : "0e4b6b8a-7034-4210-a1c6-1db364830cef",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Dockerized Application",
  "section" : "Recording with jcmd via Kubernetes",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker#recording-with-jcmd-kubernetes",
  "content" : "Recording with jcmd via Kubernetes Use the same approach with the jcmd tool in a Kubernetes environment if you have access to the system. Identify the pod and the container in which you want to start the JFR recording with the following commands: kubectl get pods: list all pods. kubectl describe pod <pod-name>: describe a specific pod and its containers. Start a recording whenever needed:  kubectl exec -n namespace pod -- jcmd 1 JFR.start duration=180s filename=/tmp/my_recording.jfr See JFR Command Line Options for a complete overview of the available options."
}, {
  "objectID" : "05d2ed47-7b57-4640-b9b8-1fd59b4e26e8",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Dockerized Application",
  "section" : "Recording at JVM Startup",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker#recording-at-startup",
  "content" : "Recording at JVM Startup For detailed performance analysis, you might prefer to start a JFR recording directly when launching a Java process. To start recording from JVM startup, add -XX:StartFlightRecording to the application’s Java command line. Use a comma \",\" for separation when using multiple options. For example, use a configuration like this in your Dockerfile:  $ CMD [\"java\", \"-XX:StartFlightRecorder=duration=200s,filename=/tmp/recording.jfr\", \"-jar\", \"app.jar\"] See JFR Command Line Options for a complete overview of the available options."
}, {
  "objectID" : "9fb232d4-cde0-40c5-bbf1-96e303ef3c22",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording a Dockerized Application",
  "section" : "Recording with Azul Mission Control",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-in-docker#recording-with-amc",
  "content" : "Recording with Azul Mission Control Use Azul Mission Control to connect directly to the application via JMX. Make sure the container is configured to allow a remote connection, as described on Prepare the Remote JVM. If you are using Kubernetes, contact an administrator to set up a connection between your computer and the configured port in the container. Configure a new connection in Azul Mission Control as described on Connect to a remote JVM. Start a JFR recording in Azul Mission Control as described here. Azul Mission Control stores the .jfr recording file on the system it’s running on."
}, {
  "objectID" : "4b8e6e2a-9e1f-4cea-b453-222cfb7e950a",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording with Azul Mission Control",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc#connecting-remote-jvm",
  "content" : "With Azul Mission Control, you can connect to a running JVM in order to create Java Flight Recorder (JFR) recordings intuitively within the application, without using the command line or terminal. The target JVM must meet the following requirements: The target JVM’s JDK/JRE version must be 7 or later. Azul Mission Control monitors Java applications over JMX. If you connect to a JVM that is running on a remote computer, the JMX port must be open on that computer. For more details about remote connection, see Connecting to a Remote JVM."
}, {
  "objectID" : "e08ed1d1-ed41-454c-bc63-eca95c6ade69",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording with Azul Mission Control",
  "section" : "Connecting to a Local JVM",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc#connecting-local-jvm",
  "content" : "Connecting to a Local JVM Azul Mission Control automatically detects the JVMs that are running locally and displays them in the tab \"JVM Browser\":"
}, {
  "objectID" : "d45a0279-5d8e-43bd-80b4-15ad77e41abf",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording with Azul Mission Control",
  "section" : "Connecting to a Remote JVM",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc#connecting-remote-jvm",
  "content" : "Connecting to a Remote JVM Azul Mission Control can connect to a remote system, if you prepare it to accept a JMX connection from the system where you run Azul Mission Control. Preparing the Remote JVM In order to connect to a JVM that is running on a remote computer, you must configure the remote Java application with the following VM parameters: -XX:+FlightRecorder: enables the Flight Recording feature. -Dcom.sun.management.jmxremote: enables the JMXRMI connectivity. -Djava.rmi.server.hostname=<IP|hostname>: defines the RMI server host. Use an external IP address or host name of the computer where the Java program is running. -Dcom.sun.management.jmxremote.port=<port>: sets a TCP port to be used for JMX connection. Additionally, you may want to specify JMX authentication/SSL settings using ‑Dcom.sun.management.jmxremote.authenticate and -Dcom.sun.management.jmxremote.ssl. See the sample command below that runs a Java program with JMX authentication and SSL disabled. Sample JVM startup command:  java -XX:+FlightRecorder \\\n  -Djava.rmi.server.hostname=192.168.56.101 \\\n  -Dcom.sun.management.jmxremote.port=7091 \\\n  -Dcom.sun.management.jmxremote \\\n  -Dcom.sun.management.jmxremote.authenticate=false \\\n  -Dcom.sun.management.jmxremote.ssl=false Configuring a Remote JVM Connection To connect Azul Mission Control to a remote JVM: On the \"JVM Browser\" tab, click \"New Connection\" as shown below. Specify the host name/IP address of the remote box and the JMX port number. If JMX authentication is enabled, provide \"User\" and \"Password\" values. Click \"Test connection\" to verify the connectivity, and then save the new connection. Your remote JVM now appears in the JVM Browser!"
}, {
  "objectID" : "94ff4c6d-144e-4947-8b0a-0805f0a30e86",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording with Azul Mission Control",
  "section" : "Preparing the Remote JVM",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc#preparing-remote-jvm",
  "content" : "Preparing the Remote JVM In order to connect to a JVM that is running on a remote computer, you must configure the remote Java application with the following VM parameters: -XX:+FlightRecorder: enables the Flight Recording feature. -Dcom.sun.management.jmxremote: enables the JMXRMI connectivity. -Djava.rmi.server.hostname=<IP|hostname>: defines the RMI server host. Use an external IP address or host name of the computer where the Java program is running. -Dcom.sun.management.jmxremote.port=<port>: sets a TCP port to be used for JMX connection. Additionally, you may want to specify JMX authentication/SSL settings using ‑Dcom.sun.management.jmxremote.authenticate and -Dcom.sun.management.jmxremote.ssl. See the sample command below that runs a Java program with JMX authentication and SSL disabled. Sample JVM startup command:  java -XX:+FlightRecorder \\\n  -Djava.rmi.server.hostname=192.168.56.101 \\\n  -Dcom.sun.management.jmxremote.port=7091 \\\n  -Dcom.sun.management.jmxremote \\\n  -Dcom.sun.management.jmxremote.authenticate=false \\\n  -Dcom.sun.management.jmxremote.ssl=false"
}, {
  "objectID" : "39fdf964-22fd-428c-8446-3e5efecf393c",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording with Azul Mission Control",
  "section" : "Configuring a Remote JVM Connection",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc#connect-to-remote-jvm",
  "content" : "Configuring a Remote JVM Connection To connect Azul Mission Control to a remote JVM: On the \"JVM Browser\" tab, click \"New Connection\" as shown below. Specify the host name/IP address of the remote box and the JMX port number. If JMX authentication is enabled, provide \"User\" and \"Password\" values. Click \"Test connection\" to verify the connectivity, and then save the new connection. Your remote JVM now appears in the JVM Browser!"
}, {
  "objectID" : "a608b8e4-355d-46ce-9951-a62a23cee99f",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Recording with Azul Mission Control",
  "section" : "Starting a JFR Recording in Azul Mission Control",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-recording-with-amc#starting-jfr-recording-in-amc",
  "content" : "Starting a JFR Recording in Azul Mission Control To create a recording: In the \"JVM Browser\", right-click the JVM node you want analyzed, and then click \"Start Flight Recording\". The \"Start Flight Recording\" window appears. Select either \"Time fixed recording\" or \"Continuous recording\" mode, making sure to specify a recording time or maximum size/age. Time fixed recording: Makes a recording for a specified amount of time (or until the application closes). Continuous recording: For advanced users. This mode continuously writes JVM events to a buffer of the size or age specified. Once the buffer is full, the oldest recorded events are removed while the buffer continues to be populated with the latest JVM events. The buffer is saved to the disk based on specific triggers or time intervals. Click \"Finish\" to start the recording. In this scenario, default Flight Recorder settings for demonstration are used. However, to tune the recording session, you can click \"Next\" and proceed with a wizard. Note You can set the path where the .jfr files must be stored on the machine running Azul Mission Control, in the \"Start Flight Recording Wizard\". After you start the recording, a countdown timer appears, indicating the recording progress:"
}, {
  "objectID" : "e8f6a9bb-da17-4746-afd6-34efe02d7be4",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "JFR Command Line Options",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-command-line-options",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-command-line-options",
  "content" : "Based on your use-case, configure or start a JFR recording with one or more of the following options."
}, {
  "objectID" : "ddd5de3f-e99a-4976-bc45-b259e3f4526d",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "JFR Command Line Options",
  "section" : "Applying Options at Startup of the Application",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-command-line-options",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-command-line-options#applying-options-at-startup-of-the-application",
  "content" : "Applying Options at Startup of the Application See Configure JFR File Recording at Startup of the Application for more information.  -XX:StartFlightRecording=delay=10s,duration=30m,..."
}, {
  "objectID" : "aac989d0-5bfc-479e-8764-21bf668764d0",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "JFR Command Line Options",
  "section" : "Applying Options when Recording a Running Application",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-command-line-options",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-command-line-options#applying-options-when-recording-a-running-application",
  "content" : "Applying Options when Recording a Running Application See Starting, Stopping and Reconfiguring a JFR File Recording for a Running Application for more information.  jcmd <PID> JFR.start delay=10s duration=30m ..."
}, {
  "objectID" : "f37c62bd-3356-4b55-aa13-4251b5168a6c",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "JFR Command Line Options",
  "section" : "Available JFR Options",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-command-line-options",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-command-line-options#available-jfr-options",
  "content" : "Available JFR Options Option Description Default settings=<path/to/settings/file> Specifies the settings file to be used. In case of a custom configuration file, use the full path to the .jfc file. Otherwise, use one of the following presets: default - Collects less data than profile but is more appropriate for runs where the JFR recording is continuously running side by side with the application. profile - Collects more data than default but adds more performance overhead. default disk=<true, false> Controls whether to create a temporary recording file under the path set in the repository option. Temporary recording means that a file is written to the system temporary directory during the time of the recording and is deleted afterwards. This recording file is populated gradually, unlike the file generated using the filename option, which is only populated once the recording finishes. true repository=<path/to/temp/recording> Specifies the path for a temporary recording if the disk option is enabled. /tmp/ filename=<filename.jfr> Specifies the file name of the generated recording. You can add a path to the recording filename to change the file location. The recording file stays empty and only gets populated once the recording finishes. hotspot-pid-%p-%t.jfr duration=<time in specified unit> Specifies the recording length. Used time units: ns/ms/s/m/h/d. For example, 1800s or 30m. 0, unlimited delay=<time in specified unit> Specifies the amount of time that the recorder must wait before starting to record. Used time units: ns/ms/s/m/h/d. For example, 1800s or 30m. 0 dumponexit=<true, false> Controls whether to generate a recording file (dump a recording) if the JVM shuts down and the filename option has not been specified. The dumped recording filename is hotspot-pid-%p-%t.jfr false name=<identifier> Specifies a name identifier for the recording. This is useful when working from jcmd and operating multiple recordings running at the same time. 1,2,3,4,… maxage=<time in specified unit> Controls the maximum number of days the recording should be available on the disk, only when the disk parameter is set to true. Used time units: s/m/h/d. 0, unlimited maxsize=<size in specified unit> Controls the maximum size of disk data to keep for the recording, only when the disk parameter is set to true. Used size units: m or M (megabytes) / g or G (gigabytes). 0, unlimited path-to-gc-roots=<true, false> Controls whether to collect the path to the Garbage Collection (GC) roots at the end of a recording. The path to the GC roots are useful when you want to debug memory leaks, but should only be enabled when you suspect there is such a memory leak in your application. false"
}, {
  "objectID" : "b943c2cc-ecce-4bbd-86b6-b5d0d06b385f",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "JFR Settings Files",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-settings-files",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-settings-files",
  "content" : "Use Java Flight Recorder (JFR) setting files (.jfc) to specify the event and control configuration. Check the JFR Command Line Options to understand how such a setting file can be used. For instance, to change the settings file for a running recording:  jcmd <PID> JFR.config settings=my-config.jfc"
}, {
  "objectID" : "160bb334-718e-4a9c-9983-63a85295f56f",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "JFR Settings Files",
  "section" : "Provided Settings Files",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-settings-files",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-settings-files#provided-settings-files",
  "content" : "Provided Settings Files By default, Flight Recorder uses the settings defined in <java_home>/lib/jfr/default.jfc which gives a good balance between data and performance. In the same directory, you can find a second configuration profile.jfc which records more events and is useful while profiling an application. You can also create a copy of one these files and create your own configuration, e.g. my-config.jfc."
}, {
  "objectID" : "0b50f4eb-f02d-41cb-809c-9838f398abe9",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "JFR Settings Files",
  "section" : "Generating a Custom Settings File",
  "url" : "https://docs.azul.com/azul-mission-control/recording/jfr-settings-files",
  "link" : "https://docs.azul.com/azul-mission-control/recording/jfr-settings-files#generating-a-custom-settings-file",
  "content" : "Generating a Custom Settings File As of JDK 19, it’s strongly encouraged to use the jfr configure utility to create a custom settings file.  $ jfr configure --interactive\n\n============== .jfc Configuration Wizard ============\nThis wizard will generate a JFR configuration file by\nasking 12 questions. Press ENTER to use the default\nvalue, or type Q to abort the wizard.\n\nGarbage Collector: Normal (default)\n1. Off\n2. Normal\n3. Detailed\n4. High, incl. TLABs/PLABs (may cause many events)\n5. All, incl. Heap Statistics (may cause long GCs)\n\n..."
}, {
  "objectID" : "c5030c99-f634-4c1c-a7a7-17c674a6ba54",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Analyzing JFR Recordings",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/introduction",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/introduction",
  "content" : "Azul Mission Control’s Flight Recorder (JFR) is a tool for collecting diagnostic and profiling data about a running Java application. This section shows how to analyze the flow of a Java application. Analyzing a JFR Recording Azul Mission Control Additional Features Heap Analysis Basics"
}, {
  "objectID" : "999b677a-35be-471b-936e-fb43a929c6b1",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Analyzing a JFR Recording",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/analyzing-recording",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/analyzing-recording",
  "content" : "You can analyze recordings with Azul Mission Control in the following ways: Load an existing recording with \"File\" > \"Open File…\" on the Azul Mission Control toolbar to open an existing .jfr file. Drag and drop a .jfr file into Azul Mission Control. Start a recording of a running application, as described here. The recorded data is stored to a .jfr file. When such a recording is finished, the results are displayed. After loading a recording, Azul Mission Control displays an automated analysis result as shown below. The overview screen displays recorded data split into categories. Click a node to investigate the corresponding category details. Java Application: Includes data about the recorded Java program workflow: threads life cycle, I/O activity, Exceptions thrown, etc. JVM Internals: Holds JVM activity metrics: Class loading, Garbage collection indices, and other events. Environment: Holds data about the environment where the JVM runs. Event Browser: Displays all the JVM recorded events in the form of a tree."
}, {
  "objectID" : "6f007e32-dbb3-400d-9e22-91313af7f876",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control Additional Features",
  "section" : "Internal JVM threads",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/additional-features",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/additional-features#internal-jvm-threads",
  "content" : "Internal JVM threads Azul Mission Control can distinguish application threads from internal JVM threads (for example, GC threads) if the monitored JVM is Azul Zulu Prime. You can toggle internal threads in the flight recording interface."
}, {
  "objectID" : "fd5205a4-5140-49d5-a2f2-b7c738591b1c",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control Additional Features",
  "section" : "Azul Zulu Core/Prime JVM recognition",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/additional-features",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/additional-features#azul-zulu-coreprime-jvm-recognition",
  "content" : "Azul Zulu Core/Prime JVM recognition Azul Mission Control can recognize Azul Zulu Core and Azul Zulu Prime JVMs. For Azul Zulu Prime JVMs, the application marks the JVM connection node with [Zing] as shown in the image below:"
}, {
  "objectID" : "c97d53b2-34ec-4fb5-92ce-1b6b0e702ac4",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control Additional Features",
  "section" : "Live Objects for Azul Zulu Prime",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/additional-features",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/additional-features#live-objects-for-azul-zulu-prime",
  "content" : "Live Objects for Azul Zulu Prime Flight recordings made for Azul Zulu Prime JVMs include information about the JVM’s live objects. This data is available in the \"Zing Live Objects\" section."
}, {
  "objectID" : "d765d117-14a0-4a36-b6e4-24baad2a55e9",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Azul Mission Control Additional Features",
  "section" : "Other Distinctions",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/additional-features",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/additional-features#other-distinctions",
  "content" : "Other Distinctions GC configuration fields (\"Parallel GC Thread\", \"Use Dinamic GC threads\" , \"GC time Ratio\", \"Initial Heap Size\", \"Minimum heap size\", \"New ratio\", \"Initial Tenuring threshold\") are disabled when working with Azul Zulu Prime JVMs. Use GC Log Analyzer to get detailed GC activity metrics for Azul Zulu Prime JVMs. The \"MBean Server\" VM version is displayed as \"Zing 64-Bit Tiered VM version\""
}, {
  "objectID" : "92894ed1-d35a-4eef-9b1d-7eb12e3a04dc",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Heap Analysis Basics",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "content" : "JVM memory shortage often leads to instability and slowdown of Java applications. Low memory errors may not show up during an application testing, but may occur later in the production environment when the Java application uptime increases and objects fill up the Java heap either due to a programmer’s mistake or due to insufficient RAM. Eventually, the heap space shortage may lead to OutOfMemoryError since the Garbage Collector is not able to free up memory because all objects are live. This section shows you how to create and analyze a Java heap dump using Azul Mission Control."
}, {
  "objectID" : "e9a4662c-9a78-460a-a515-9b74c49b05d2",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Heap Analysis Basics",
  "section" : "Creating a Heap Dump",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap#creating-a-heap-dump",
  "content" : "Creating a Heap Dump A heap dump is a snapshot of the Java heap space with all the objects that exist in the JVM heap at a specific moment of time. To create a heap dump, right-click the JVM node you need on the \"JVM Browser\" tab and click \"Dump Heap\". This creates a dump file dump_<connection_time>_<recording number>.hprof that is saved by default to the following locations: Windows: <usr_dir>\\zmc\\<zmc_version>\\ Linux: <usr_dir>/.zmc/<zmc_version>/ macOS: /Users/<usr_dir>/.zmc/<zmc_version>/ Azul Mission Control automatically opens the newly created .hprof file and displays the analysis results in \"JOverflow\". \"JOverflow\" is a Azul Mission Control plugin that aggregates objects with the same types of problems, calculates overhead values, and visualizes this information on charts and tables. If you want to open an arbitrary dump file, click \"File\" > \"Open File\" on the toolbar."
}, {
  "objectID" : "762f2d20-37f7-49e7-b1cc-561dc13e4d9d",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Heap Analysis Basics",
  "section" : "Example: Seek for Memory Leaks with JOverflow",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap#example-seek-for-memory-leaks-with-joverflow",
  "content" : "Example: Seek for Memory Leaks with JOverflow The following scenario shows how to investigate memory leaks with Azul Mission Control. Create a heap dump of your Java application. In this scenario, the heap dump has the following view: Select the overhead category. In the Object Selection table, select the entry with the highest Overhead percent. The selected category may be a cause for possible memory leaks. In this scenario, 26% of total heap space is allocated to small collections: Click the Small Collections overhead category to track the potentially leaking classes. Filter the Class. In the Class section, you can view that HashMap is on top of the list and accounts for 34% of the total heap space consumed. Click HashMap and view the Referrer table to identify the source of the leaking object. Drill down the Referring Chain. In the Referrer table, you can view the top-level item mCustomListStruct which indicates a custom Java class. An instance of this class has 10000 references to HashMap objects: Click mCustomListStruct to expand the reference chain, and view problem objects (HashMap) at the bottom of the chain. In this scenario, mCustomListStruct is the only referrer to numerous HashMaps, however, during your investigation you may observe a lot of nested referrers. You can inspect mCustomListStruct usage in the source code and determine whether all the HashMaps references are required. This section shows you how to create and analyze the heap space of a sample Java application and how to reveal possible memory leaks with JOverflow. For more information, refer to the context help within the Azul Mission Control app."
}, {
  "objectID" : "18e352b9-470a-4105-a483-4ca2de0a868b",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Heap Analysis Basics",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "content" : "In the Object Selection table, select the entry with the highest Overhead percent. The selected category may be a cause for possible memory leaks. In this scenario, 26% of total heap space is allocated to small collections: Click the Small Collections overhead category to track the potentially leaking classes."
}, {
  "objectID" : "cc2930c0-fd77-4e35-87bc-ceedaae50481",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Heap Analysis Basics",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "content" : "In the Class section, you can view that HashMap is on top of the list and accounts for 34% of the total heap space consumed. Click HashMap and view the Referrer table to identify the source of the leaking object."
}, {
  "objectID" : "02c27587-7d7b-408b-9c71-2e8f2fd74a7d",
  "groupId" : "azul-mission-control",
  "groupLabel" : "Azul Mission Control",
  "version" : "",
  "title" : "Heap Analysis Basics",
  "section" : "",
  "url" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "link" : "https://docs.azul.com/azul-mission-control/analyzing/analyze-heap",
  "content" : "In the Referrer table, you can view the top-level item mCustomListStruct which indicates a custom Java class. An instance of this class has 10000 references to HashMap objects: Click mCustomListStruct to expand the reference chain, and view problem objects (HashMap) at the bottom of the chain. In this scenario, mCustomListStruct is the only referrer to numerous HashMaps, however, during your investigation you may observe a lot of nested referrers. You can inspect mCustomListStruct usage in the source code and determine whether all the HashMaps references are required."
} ]